
CA2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000091c  0800b248  0800b248  0000c248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb64  0800bb64  0000d29c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bb64  0800bb64  0000cb64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb6c  0800bb6c  0000d29c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb6c  0800bb6c  0000cb6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb70  0800bb70  0000cb70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000029c  20000000  0800bb74  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001344  2000029c  0800be10  0000d29c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015e0  0800be10  0000d5e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d29c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c534  00000000  00000000  0000d2cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041ed  00000000  00000000  00029800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  0002d9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001435  00000000  00000000  0002f438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b227  00000000  00000000  0003086d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5c7  00000000  00000000  0005ba94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb952  00000000  00000000  0007b05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001769ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007df8  00000000  00000000  001769f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0017e7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000029c 	.word	0x2000029c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b230 	.word	0x0800b230

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a0 	.word	0x200002a0
 80001cc:	0800b230 	.word	0x0800b230

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <HAL_GPIO_EXTI_Callback>:


void HandleCriticalEvent(void);

//Blue button triggers interrupt
HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BUTTON_EXTI13_Pin){
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f04:	d104      	bne.n	8000f10 <HAL_GPIO_EXTI_Callback+0x1c>
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
		printf("\t Blue button is pressed.\r\n");
 8000f06:	4804      	ldr	r0, [pc, #16]	@ (8000f18 <HAL_GPIO_EXTI_Callback+0x24>)
 8000f08:	f008 fa20 	bl	800934c <puts>
		toggleTransmissionMode();
 8000f0c:	f000 f976 	bl	80011fc <toggleTransmissionMode>

	}
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	0800b248 	.word	0x0800b248

08000f1c <pushFIFO_Float>:

// FIFO push functions: they return -1 if the FIFO is full
int pushFIFO_Float(FIFO_Float *fifo, float value)
{
 8000f1c:	b590      	push	{r4, r7, lr}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	ed87 0a00 	vstr	s0, [r7]
    // Check if full
    if (fifo->count >= fifo->capacity) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	799a      	ldrb	r2, [r3, #6]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	7b1b      	ldrb	r3, [r3, #12]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d302      	bcc.n	8000f3a <pushFIFO_Float+0x1e>
        return -1;
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f38:	e025      	b.n	8000f86 <pushFIFO_Float+0x6a>
    }
    fifo->data[fifo->tail] = value;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	795b      	ldrb	r3, [r3, #5]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	601a      	str	r2, [r3, #0]
    fifo->timestamp[fifo->tail] = HAL_GetTick();
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	795b      	ldrb	r3, [r3, #5]
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	18d4      	adds	r4, r2, r3
 8000f56:	f003 fa4f 	bl	80043f8 <HAL_GetTick>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6023      	str	r3, [r4, #0]

    fifo->tail = (fifo->tail + 1) % fifo->capacity;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	795b      	ldrb	r3, [r3, #5]
 8000f62:	3301      	adds	r3, #1
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	7b12      	ldrb	r2, [r2, #12]
 8000f68:	fb93 f1f2 	sdiv	r1, r3, r2
 8000f6c:	fb01 f202 	mul.w	r2, r1, r2
 8000f70:	1a9b      	subs	r3, r3, r2
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	715a      	strb	r2, [r3, #5]
    fifo->count++;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	799b      	ldrb	r3, [r3, #6]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	719a      	strb	r2, [r3, #6]
    return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd90      	pop	{r4, r7, pc}

08000f8e <popFIFO_Float>:

int popFIFO_Float(FIFO_Float *fifo, float *value, uint32_t *timestamp)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b085      	sub	sp, #20
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	60f8      	str	r0, [r7, #12]
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
    if (fifo->count == 0) {
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	799b      	ldrb	r3, [r3, #6]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <popFIFO_Float+0x1a>
        return -1;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fa6:	e025      	b.n	8000ff4 <popFIFO_Float+0x66>
    }
    *value     = fifo->data[fifo->head];
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	791b      	ldrb	r3, [r3, #4]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	601a      	str	r2, [r3, #0]
    *timestamp = fifo->timestamp[fifo->head];
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	791b      	ldrb	r3, [r3, #4]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	601a      	str	r2, [r3, #0]

    fifo->head = (fifo->head + 1) % fifo->capacity;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	791b      	ldrb	r3, [r3, #4]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	7b12      	ldrb	r2, [r2, #12]
 8000fd6:	fb93 f1f2 	sdiv	r1, r3, r2
 8000fda:	fb01 f202 	mul.w	r2, r1, r2
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	711a      	strb	r2, [r3, #4]
    fifo->count--;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	799b      	ldrb	r3, [r3, #6]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	719a      	strb	r2, [r3, #6]
    return 0;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <pushFIFO_Vector>:

// Same idea for vectors:
int pushFIFO_Vector(FIFO_Vector *fifo, Vector3 value)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	eef0 6a40 	vmov.f32	s13, s0
 800100c:	eeb0 7a60 	vmov.f32	s14, s1
 8001010:	eef0 7a41 	vmov.f32	s15, s2
 8001014:	edc7 6a00 	vstr	s13, [r7]
 8001018:	ed87 7a01 	vstr	s14, [r7, #4]
 800101c:	edc7 7a02 	vstr	s15, [r7, #8]
    if (fifo->count >= fifo->capacity) {
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	799a      	ldrb	r2, [r3, #6]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	7b1b      	ldrb	r3, [r3, #12]
 8001028:	429a      	cmp	r2, r3
 800102a:	d302      	bcc.n	8001032 <pushFIFO_Vector+0x32>
        return -1;
 800102c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001030:	e02d      	b.n	800108e <pushFIFO_Vector+0x8e>
    }
    fifo->data[fifo->tail] = value;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	795b      	ldrb	r3, [r3, #5]
 800103a:	4619      	mov	r1, r3
 800103c:	460b      	mov	r3, r1
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	440b      	add	r3, r1
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	461c      	mov	r4, r3
 8001048:	463b      	mov	r3, r7
 800104a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800104e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    fifo->timestamp[fifo->tail] = HAL_GetTick();
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	795b      	ldrb	r3, [r3, #5]
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	18d4      	adds	r4, r2, r3
 800105e:	f003 f9cb 	bl	80043f8 <HAL_GetTick>
 8001062:	4603      	mov	r3, r0
 8001064:	6023      	str	r3, [r4, #0]

    fifo->tail = (fifo->tail + 1) % fifo->capacity;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	795b      	ldrb	r3, [r3, #5]
 800106a:	3301      	adds	r3, #1
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	7b12      	ldrb	r2, [r2, #12]
 8001070:	fb93 f1f2 	sdiv	r1, r3, r2
 8001074:	fb01 f202 	mul.w	r2, r1, r2
 8001078:	1a9b      	subs	r3, r3, r2
 800107a:	b2da      	uxtb	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	715a      	strb	r2, [r3, #5]
    fifo->count++;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	799b      	ldrb	r3, [r3, #6]
 8001084:	3301      	adds	r3, #1
 8001086:	b2da      	uxtb	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	719a      	strb	r2, [r3, #6]
    return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bd90      	pop	{r4, r7, pc}

08001096 <popFIFO_Vector>:

int popFIFO_Vector(FIFO_Vector *fifo, Vector3 *value, uint32_t *timestamp)
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
    if (fifo->count == 0) {
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	799b      	ldrb	r3, [r3, #6]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d102      	bne.n	80010b0 <popFIFO_Vector+0x1a>
        return -1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ae:	e02a      	b.n	8001106 <popFIFO_Vector+0x70>
    }
    *value     = fifo->data[fifo->head];
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	791b      	ldrb	r3, [r3, #4]
 80010b8:	4619      	mov	r1, r3
 80010ba:	460b      	mov	r3, r1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	440b      	add	r3, r1
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	441a      	add	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *timestamp = fifo->timestamp[fifo->head];
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	791b      	ldrb	r3, [r3, #4]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	601a      	str	r2, [r3, #0]

    fifo->head = (fifo->head + 1) % fifo->capacity;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	791b      	ldrb	r3, [r3, #4]
 80010e2:	3301      	adds	r3, #1
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	7b12      	ldrb	r2, [r2, #12]
 80010e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80010ec:	fb01 f202 	mul.w	r2, r1, r2
 80010f0:	1a9b      	subs	r3, r3, r2
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	711a      	strb	r2, [r3, #4]
    fifo->count--;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	799b      	ldrb	r3, [r3, #6]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	719a      	strb	r2, [r3, #6]
    return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <transmitEntireFIFO_Float>:
void transmitEntireFIFO_Float(FIFO_Float *fifo, const char *sensorName) {
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b087      	sub	sp, #28
 8001118:	af02      	add	r7, sp, #8
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
    float value;
    uint32_t timestamp;
    while (popFIFO_Float(fifo, &value, &timestamp) == 0) {
 800111e:	e00d      	b.n	800113c <transmitEntireFIFO_Float+0x28>
        // Transmit sensor name, value, and timestamp.
        printf("%s,%lu,%f\r\n", sensorName, timestamp, value);
 8001120:	68bc      	ldr	r4, [r7, #8]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa1f 	bl	8000568 <__aeabi_f2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	e9cd 2300 	strd	r2, r3, [sp]
 8001132:	4622      	mov	r2, r4
 8001134:	6839      	ldr	r1, [r7, #0]
 8001136:	4809      	ldr	r0, [pc, #36]	@ (800115c <transmitEntireFIFO_Float+0x48>)
 8001138:	f008 f8a0 	bl	800927c <iprintf>
    while (popFIFO_Float(fifo, &value, &timestamp) == 0) {
 800113c:	f107 0208 	add.w	r2, r7, #8
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	4619      	mov	r1, r3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff21 	bl	8000f8e <popFIFO_Float>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0e6      	beq.n	8001120 <transmitEntireFIFO_Float+0xc>
    }
}
 8001152:	bf00      	nop
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	0800b264 	.word	0x0800b264

08001160 <transmitEntireFIFO_Vector>:

void transmitEntireFIFO_Vector(FIFO_Vector *fifo, const char *sensorName) {
 8001160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001164:	b08d      	sub	sp, #52	@ 0x34
 8001166:	af06      	add	r7, sp, #24
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
    Vector3 value;
    uint32_t timestamp;
    while (popFIFO_Vector(fifo, &value, &timestamp) == 0) {
 800116c:	e01d      	b.n	80011aa <transmitEntireFIFO_Vector+0x4a>
        // Transmit sensor name, X, Y, Z values and timestamp.
        printf("%s,%lu,%f,%f,%f\r\n", sensorName, timestamp, value.x, value.y, value.z);
 800116e:	68be      	ldr	r6, [r7, #8]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f9f8 	bl	8000568 <__aeabi_f2d>
 8001178:	4604      	mov	r4, r0
 800117a:	460d      	mov	r5, r1
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f9f2 	bl	8000568 <__aeabi_f2d>
 8001184:	4680      	mov	r8, r0
 8001186:	4689      	mov	r9, r1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff f9ec 	bl	8000568 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001198:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800119c:	e9cd 4500 	strd	r4, r5, [sp]
 80011a0:	4632      	mov	r2, r6
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	4809      	ldr	r0, [pc, #36]	@ (80011cc <transmitEntireFIFO_Vector+0x6c>)
 80011a6:	f008 f869 	bl	800927c <iprintf>
    while (popFIFO_Vector(fifo, &value, &timestamp) == 0) {
 80011aa:	f107 0208 	add.w	r2, r7, #8
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff6e 	bl	8001096 <popFIFO_Vector>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0d6      	beq.n	800116e <transmitEntireFIFO_Vector+0xe>
    }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011cc:	0800b270 	.word	0x0800b270

080011d0 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//To print to terminal
int _write(int file, char *ptr, int len)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <_write+0x28>)
 80011e8:	f006 fabd 	bl	8007766 <HAL_UART_Transmit>
    return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200003ec 	.word	0x200003ec

080011fc <toggleTransmissionMode>:

void toggleTransmissionMode(void) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    if (transmissionMode == MODE_RANDOM) {
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <toggleTransmissionMode+0x64>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d103      	bne.n	8001210 <toggleTransmissionMode+0x14>
        transmissionMode = MODE_FULL_BUFFER;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <toggleTransmissionMode+0x64>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	e00e      	b.n	800122e <toggleTransmissionMode+0x32>
    } else if (transmissionMode == MODE_FULL_BUFFER) {
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <toggleTransmissionMode+0x64>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d103      	bne.n	8001220 <toggleTransmissionMode+0x24>
        transmissionMode = MODE_PREDICTIVE;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <toggleTransmissionMode+0x64>)
 800121a:	2202      	movs	r2, #2
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e006      	b.n	800122e <toggleTransmissionMode+0x32>
    } else if (transmissionMode == MODE_PREDICTIVE) {
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <toggleTransmissionMode+0x64>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d102      	bne.n	800122e <toggleTransmissionMode+0x32>
        transmissionMode = MODE_RANDOM;
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <toggleTransmissionMode+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
    }

    if (transmissionMode == MODE_RANDOM) {
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <toggleTransmissionMode+0x64>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d103      	bne.n	800123e <toggleTransmissionMode+0x42>
        printf("Transmission mode toggled to: RANDOM MODE\r\n");
 8001236:	480b      	ldr	r0, [pc, #44]	@ (8001264 <toggleTransmissionMode+0x68>)
 8001238:	f008 f888 	bl	800934c <puts>
    } else if (transmissionMode == MODE_FULL_BUFFER) {
        printf("Transmission mode toggled to: FULL BUFFER MODE\r\n");
    } else if (transmissionMode == MODE_PREDICTIVE) {
        printf("Transmission mode toggled to: PREDICTIVE MODE\r\n");
    }
}
 800123c:	e00e      	b.n	800125c <toggleTransmissionMode+0x60>
    } else if (transmissionMode == MODE_FULL_BUFFER) {
 800123e:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <toggleTransmissionMode+0x64>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d103      	bne.n	800124e <toggleTransmissionMode+0x52>
        printf("Transmission mode toggled to: FULL BUFFER MODE\r\n");
 8001246:	4808      	ldr	r0, [pc, #32]	@ (8001268 <toggleTransmissionMode+0x6c>)
 8001248:	f008 f880 	bl	800934c <puts>
}
 800124c:	e006      	b.n	800125c <toggleTransmissionMode+0x60>
    } else if (transmissionMode == MODE_PREDICTIVE) {
 800124e:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <toggleTransmissionMode+0x64>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b02      	cmp	r3, #2
 8001254:	d102      	bne.n	800125c <toggleTransmissionMode+0x60>
        printf("Transmission mode toggled to: PREDICTIVE MODE\r\n");
 8001256:	4805      	ldr	r0, [pc, #20]	@ (800126c <toggleTransmissionMode+0x70>)
 8001258:	f008 f878 	bl	800934c <puts>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000000 	.word	0x20000000
 8001264:	0800b284 	.word	0x0800b284
 8001268:	0800b2b0 	.word	0x0800b2b0
 800126c:	0800b2e0 	.word	0x0800b2e0

08001270 <transmitRandomBuffer>:

void transmitRandomBuffer(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
    int choice = rand() % 6; // Randomly select one of the 6 sensor buffers
 8001276:	f007 ff01 	bl	800907c <rand>
 800127a:	4602      	mov	r2, r0
 800127c:	4b32      	ldr	r3, [pc, #200]	@ (8001348 <transmitRandomBuffer+0xd8>)
 800127e:	fb83 3102 	smull	r3, r1, r3, r2
 8001282:	17d3      	asrs	r3, r2, #31
 8001284:	1ac9      	subs	r1, r1, r3
 8001286:	460b      	mov	r3, r1
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	440b      	add	r3, r1
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	607b      	str	r3, [r7, #4]
    switch (choice) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b05      	cmp	r3, #5
 8001296:	d845      	bhi.n	8001324 <transmitRandomBuffer+0xb4>
 8001298:	a201      	add	r2, pc, #4	@ (adr r2, 80012a0 <transmitRandomBuffer+0x30>)
 800129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129e:	bf00      	nop
 80012a0:	080012b9 	.word	0x080012b9
 80012a4:	080012cb 	.word	0x080012cb
 80012a8:	080012dd 	.word	0x080012dd
 80012ac:	080012ef 	.word	0x080012ef
 80012b0:	08001301 	.word	0x08001301
 80012b4:	08001313 	.word	0x08001313
        case 0:
            if (fifoTemp.count > 0) {
 80012b8:	4b24      	ldr	r3, [pc, #144]	@ (800134c <transmitRandomBuffer+0xdc>)
 80012ba:	799b      	ldrb	r3, [r3, #6]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d033      	beq.n	8001328 <transmitRandomBuffer+0xb8>
                transmitEntireFIFO_Float(&fifoTemp, "Temperature");
 80012c0:	4923      	ldr	r1, [pc, #140]	@ (8001350 <transmitRandomBuffer+0xe0>)
 80012c2:	4822      	ldr	r0, [pc, #136]	@ (800134c <transmitRandomBuffer+0xdc>)
 80012c4:	f7ff ff26 	bl	8001114 <transmitEntireFIFO_Float>
            }
            break;
 80012c8:	e02e      	b.n	8001328 <transmitRandomBuffer+0xb8>
        case 1:
            if (fifoHumidity.count > 0) {
 80012ca:	4b22      	ldr	r3, [pc, #136]	@ (8001354 <transmitRandomBuffer+0xe4>)
 80012cc:	799b      	ldrb	r3, [r3, #6]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d02c      	beq.n	800132c <transmitRandomBuffer+0xbc>
                transmitEntireFIFO_Float(&fifoHumidity, "Humidity");
 80012d2:	4921      	ldr	r1, [pc, #132]	@ (8001358 <transmitRandomBuffer+0xe8>)
 80012d4:	481f      	ldr	r0, [pc, #124]	@ (8001354 <transmitRandomBuffer+0xe4>)
 80012d6:	f7ff ff1d 	bl	8001114 <transmitEntireFIFO_Float>
            }
            break;
 80012da:	e027      	b.n	800132c <transmitRandomBuffer+0xbc>
        case 2:
            if (fifoPressure.count > 0) {
 80012dc:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <transmitRandomBuffer+0xec>)
 80012de:	799b      	ldrb	r3, [r3, #6]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d025      	beq.n	8001330 <transmitRandomBuffer+0xc0>
                transmitEntireFIFO_Float(&fifoPressure, "Pressure");
 80012e4:	491e      	ldr	r1, [pc, #120]	@ (8001360 <transmitRandomBuffer+0xf0>)
 80012e6:	481d      	ldr	r0, [pc, #116]	@ (800135c <transmitRandomBuffer+0xec>)
 80012e8:	f7ff ff14 	bl	8001114 <transmitEntireFIFO_Float>
            }
            break;
 80012ec:	e020      	b.n	8001330 <transmitRandomBuffer+0xc0>
        case 3:
            if (fifoAccel.count > 0) {
 80012ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <transmitRandomBuffer+0xf4>)
 80012f0:	799b      	ldrb	r3, [r3, #6]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d01e      	beq.n	8001334 <transmitRandomBuffer+0xc4>
                transmitEntireFIFO_Vector(&fifoAccel, "Accelerometer");
 80012f6:	491c      	ldr	r1, [pc, #112]	@ (8001368 <transmitRandomBuffer+0xf8>)
 80012f8:	481a      	ldr	r0, [pc, #104]	@ (8001364 <transmitRandomBuffer+0xf4>)
 80012fa:	f7ff ff31 	bl	8001160 <transmitEntireFIFO_Vector>
            }
            break;
 80012fe:	e019      	b.n	8001334 <transmitRandomBuffer+0xc4>
        case 4:
            if (fifoGyro.count > 0) {
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <transmitRandomBuffer+0xfc>)
 8001302:	799b      	ldrb	r3, [r3, #6]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d017      	beq.n	8001338 <transmitRandomBuffer+0xc8>
                transmitEntireFIFO_Vector(&fifoGyro, "Gyroscope");
 8001308:	4919      	ldr	r1, [pc, #100]	@ (8001370 <transmitRandomBuffer+0x100>)
 800130a:	4818      	ldr	r0, [pc, #96]	@ (800136c <transmitRandomBuffer+0xfc>)
 800130c:	f7ff ff28 	bl	8001160 <transmitEntireFIFO_Vector>
            }
            break;
 8001310:	e012      	b.n	8001338 <transmitRandomBuffer+0xc8>
        case 5:
            if (fifoMagneto.count > 0) {
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <transmitRandomBuffer+0x104>)
 8001314:	799b      	ldrb	r3, [r3, #6]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d010      	beq.n	800133c <transmitRandomBuffer+0xcc>
                transmitEntireFIFO_Vector(&fifoMagneto, "Magnetometer");
 800131a:	4917      	ldr	r1, [pc, #92]	@ (8001378 <transmitRandomBuffer+0x108>)
 800131c:	4815      	ldr	r0, [pc, #84]	@ (8001374 <transmitRandomBuffer+0x104>)
 800131e:	f7ff ff1f 	bl	8001160 <transmitEntireFIFO_Vector>
            }
            break;
 8001322:	e00b      	b.n	800133c <transmitRandomBuffer+0xcc>
        default:
            break;
 8001324:	bf00      	nop
 8001326:	e00a      	b.n	800133e <transmitRandomBuffer+0xce>
            break;
 8001328:	bf00      	nop
 800132a:	e008      	b.n	800133e <transmitRandomBuffer+0xce>
            break;
 800132c:	bf00      	nop
 800132e:	e006      	b.n	800133e <transmitRandomBuffer+0xce>
            break;
 8001330:	bf00      	nop
 8001332:	e004      	b.n	800133e <transmitRandomBuffer+0xce>
            break;
 8001334:	bf00      	nop
 8001336:	e002      	b.n	800133e <transmitRandomBuffer+0xce>
            break;
 8001338:	bf00      	nop
 800133a:	e000      	b.n	800133e <transmitRandomBuffer+0xce>
            break;
 800133c:	bf00      	nop
    }
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2aaaaaab 	.word	0x2aaaaaab
 800134c:	200009e8 	.word	0x200009e8
 8001350:	0800b310 	.word	0x0800b310
 8001354:	200009f8 	.word	0x200009f8
 8001358:	0800b31c 	.word	0x0800b31c
 800135c:	20000a08 	.word	0x20000a08
 8001360:	0800b328 	.word	0x0800b328
 8001364:	20000a18 	.word	0x20000a18
 8001368:	0800b334 	.word	0x0800b334
 800136c:	20000a28 	.word	0x20000a28
 8001370:	0800b344 	.word	0x0800b344
 8001374:	20000a38 	.word	0x20000a38
 8001378:	0800b350 	.word	0x0800b350

0800137c <getFIFO_timeToFillFloat>:

float getFIFO_timeToFillFloat(FIFO_Float *fifo) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    if (fifo->count == 0) {
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	799b      	ldrb	r3, [r3, #6]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d102      	bne.n	8001392 <getFIFO_timeToFillFloat+0x16>
        return -1.0f; // Empty
 800138c:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8001390:	e028      	b.n	80013e4 <getFIFO_timeToFillFloat+0x68>
    }
    // Use (HAL_GetTick() - fifo->timestamp[fifo->tail]) and fifo->count
    // to estimate average time between samples.
    float inputRate = (HAL_GetTick() - fifo->timestamp[fifo->tail]) / (float)fifo->count;
 8001392:	f003 f831 	bl	80043f8 <HAL_GetTick>
 8001396:	4601      	mov	r1, r0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	795b      	ldrb	r3, [r3, #5]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	1acb      	subs	r3, r1, r3
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	799b      	ldrb	r3, [r3, #6]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c0:	edc7 7a03 	vstr	s15, [r7, #12]

    // Get remaining unoccupied slots from this FIFO’s capacity
    uint16_t remainingCapacity = fifo->capacity - fifo->count;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7b1b      	ldrb	r3, [r3, #12]
 80013c8:	461a      	mov	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	799b      	ldrb	r3, [r3, #6]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	817b      	strh	r3, [r7, #10]

    // Time to fill the remaining slots = remaining slots * average time per sample,
    return remainingCapacity / inputRate;
 80013d2:	897b      	ldrh	r3, [r7, #10]
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 80013e4:	eef0 7a66 	vmov.f32	s15, s13
 80013e8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <getFIFO_timeToFillVector>:

float getFIFO_timeToFillVector(FIFO_Vector *fifo) {
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
    if (fifo->count == 0) {
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	799b      	ldrb	r3, [r3, #6]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <getFIFO_timeToFillVector+0x16>
        return -1.0f; // Empty
 8001402:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8001406:	e028      	b.n	800145a <getFIFO_timeToFillVector+0x68>
    }
    float inputRate = (HAL_GetTick() - fifo->timestamp[fifo->tail]) / (float)fifo->count;
 8001408:	f002 fff6 	bl	80043f8 <HAL_GetTick>
 800140c:	4601      	mov	r1, r0
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	795b      	ldrb	r3, [r3, #5]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	1acb      	subs	r3, r1, r3
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	799b      	ldrb	r3, [r3, #6]
 800142a:	ee07 3a90 	vmov	s15, r3
 800142e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001436:	edc7 7a03 	vstr	s15, [r7, #12]
    uint16_t remainingCapacity = fifo->capacity - fifo->count;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	7b1b      	ldrb	r3, [r3, #12]
 800143e:	461a      	mov	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	799b      	ldrb	r3, [r3, #6]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	817b      	strh	r3, [r7, #10]
    return remainingCapacity / inputRate;
 8001448:	897b      	ldrh	r3, [r7, #10]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001452:	edd7 7a03 	vldr	s15, [r7, #12]
 8001456:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 800145a:	eef0 7a66 	vmov.f32	s15, s13
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <transmitFullBuffers>:



void transmitFullBuffers(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
    uint8_t thresholdTemp     = (fifoTemp.capacity * 99) / 100;
 800146e:	4b4a      	ldr	r3, [pc, #296]	@ (8001598 <transmitFullBuffers+0x130>)
 8001470:	7b1b      	ldrb	r3, [r3, #12]
 8001472:	461a      	mov	r2, r3
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	015a      	lsls	r2, r3, #5
 800147c:	4413      	add	r3, r2
 800147e:	4a47      	ldr	r2, [pc, #284]	@ (800159c <transmitFullBuffers+0x134>)
 8001480:	fb82 1203 	smull	r1, r2, r2, r3
 8001484:	1152      	asrs	r2, r2, #5
 8001486:	17db      	asrs	r3, r3, #31
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	71fb      	strb	r3, [r7, #7]
    uint8_t thresholdHumidity = (fifoHumidity.capacity * 99) / 100;
 800148c:	4b44      	ldr	r3, [pc, #272]	@ (80015a0 <transmitFullBuffers+0x138>)
 800148e:	7b1b      	ldrb	r3, [r3, #12]
 8001490:	461a      	mov	r2, r3
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	4413      	add	r3, r2
 800149c:	4a3f      	ldr	r2, [pc, #252]	@ (800159c <transmitFullBuffers+0x134>)
 800149e:	fb82 1203 	smull	r1, r2, r2, r3
 80014a2:	1152      	asrs	r2, r2, #5
 80014a4:	17db      	asrs	r3, r3, #31
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	71bb      	strb	r3, [r7, #6]
    uint8_t thresholdPressure = (fifoPressure.capacity * 99) / 100;
 80014aa:	4b3e      	ldr	r3, [pc, #248]	@ (80015a4 <transmitFullBuffers+0x13c>)
 80014ac:	7b1b      	ldrb	r3, [r3, #12]
 80014ae:	461a      	mov	r2, r3
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	015a      	lsls	r2, r3, #5
 80014b8:	4413      	add	r3, r2
 80014ba:	4a38      	ldr	r2, [pc, #224]	@ (800159c <transmitFullBuffers+0x134>)
 80014bc:	fb82 1203 	smull	r1, r2, r2, r3
 80014c0:	1152      	asrs	r2, r2, #5
 80014c2:	17db      	asrs	r3, r3, #31
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	717b      	strb	r3, [r7, #5]
    uint8_t thresholdAccel    = (fifoAccel.capacity    * 90) / 100;
 80014c8:	4b37      	ldr	r3, [pc, #220]	@ (80015a8 <transmitFullBuffers+0x140>)
 80014ca:	7b1b      	ldrb	r3, [r3, #12]
 80014cc:	461a      	mov	r2, r3
 80014ce:	235a      	movs	r3, #90	@ 0x5a
 80014d0:	fb02 f303 	mul.w	r3, r2, r3
 80014d4:	4a31      	ldr	r2, [pc, #196]	@ (800159c <transmitFullBuffers+0x134>)
 80014d6:	fb82 1203 	smull	r1, r2, r2, r3
 80014da:	1152      	asrs	r2, r2, #5
 80014dc:	17db      	asrs	r3, r3, #31
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	713b      	strb	r3, [r7, #4]
    uint8_t thresholdGyro  = (fifoGyro.capacity  * 90) / 100;
 80014e2:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <transmitFullBuffers+0x144>)
 80014e4:	7b1b      	ldrb	r3, [r3, #12]
 80014e6:	461a      	mov	r2, r3
 80014e8:	235a      	movs	r3, #90	@ 0x5a
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	4a2b      	ldr	r2, [pc, #172]	@ (800159c <transmitFullBuffers+0x134>)
 80014f0:	fb82 1203 	smull	r1, r2, r2, r3
 80014f4:	1152      	asrs	r2, r2, #5
 80014f6:	17db      	asrs	r3, r3, #31
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	70fb      	strb	r3, [r7, #3]
    uint8_t thresholdMagneto  = (fifoMagneto.capacity  * 99) / 100;
 80014fc:	4b2c      	ldr	r3, [pc, #176]	@ (80015b0 <transmitFullBuffers+0x148>)
 80014fe:	7b1b      	ldrb	r3, [r3, #12]
 8001500:	461a      	mov	r2, r3
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	015a      	lsls	r2, r3, #5
 800150a:	4413      	add	r3, r2
 800150c:	4a23      	ldr	r2, [pc, #140]	@ (800159c <transmitFullBuffers+0x134>)
 800150e:	fb82 1203 	smull	r1, r2, r2, r3
 8001512:	1152      	asrs	r2, r2, #5
 8001514:	17db      	asrs	r3, r3, #31
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	70bb      	strb	r3, [r7, #2]


    if (fifoTemp.count >= thresholdTemp) {
 800151a:	4b1f      	ldr	r3, [pc, #124]	@ (8001598 <transmitFullBuffers+0x130>)
 800151c:	799b      	ldrb	r3, [r3, #6]
 800151e:	79fa      	ldrb	r2, [r7, #7]
 8001520:	429a      	cmp	r2, r3
 8001522:	d804      	bhi.n	800152e <transmitFullBuffers+0xc6>
        transmitEntireFIFO_Float(&fifoTemp, "Temperature");
 8001524:	4923      	ldr	r1, [pc, #140]	@ (80015b4 <transmitFullBuffers+0x14c>)
 8001526:	481c      	ldr	r0, [pc, #112]	@ (8001598 <transmitFullBuffers+0x130>)
 8001528:	f7ff fdf4 	bl	8001114 <transmitEntireFIFO_Float>
    } else if (fifoMagneto.count >= thresholdMagneto) {
        transmitEntireFIFO_Vector(&fifoMagneto, "Magnetometer");
    } else if (fifoGyro.count >= thresholdGyro) {
        transmitEntireFIFO_Vector(&fifoGyro, "Gyroscope");
    }
}
 800152c:	e030      	b.n	8001590 <transmitFullBuffers+0x128>
    } else if (fifoHumidity.count >= thresholdHumidity) {
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <transmitFullBuffers+0x138>)
 8001530:	799b      	ldrb	r3, [r3, #6]
 8001532:	79ba      	ldrb	r2, [r7, #6]
 8001534:	429a      	cmp	r2, r3
 8001536:	d804      	bhi.n	8001542 <transmitFullBuffers+0xda>
        transmitEntireFIFO_Float(&fifoHumidity, "Humidity");
 8001538:	491f      	ldr	r1, [pc, #124]	@ (80015b8 <transmitFullBuffers+0x150>)
 800153a:	4819      	ldr	r0, [pc, #100]	@ (80015a0 <transmitFullBuffers+0x138>)
 800153c:	f7ff fdea 	bl	8001114 <transmitEntireFIFO_Float>
}
 8001540:	e026      	b.n	8001590 <transmitFullBuffers+0x128>
    } else if (fifoPressure.count >= thresholdPressure) {
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <transmitFullBuffers+0x13c>)
 8001544:	799b      	ldrb	r3, [r3, #6]
 8001546:	797a      	ldrb	r2, [r7, #5]
 8001548:	429a      	cmp	r2, r3
 800154a:	d804      	bhi.n	8001556 <transmitFullBuffers+0xee>
        transmitEntireFIFO_Float(&fifoPressure, "Pressure");
 800154c:	491b      	ldr	r1, [pc, #108]	@ (80015bc <transmitFullBuffers+0x154>)
 800154e:	4815      	ldr	r0, [pc, #84]	@ (80015a4 <transmitFullBuffers+0x13c>)
 8001550:	f7ff fde0 	bl	8001114 <transmitEntireFIFO_Float>
}
 8001554:	e01c      	b.n	8001590 <transmitFullBuffers+0x128>
    } else if (fifoAccel.count >= thresholdAccel) {
 8001556:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <transmitFullBuffers+0x140>)
 8001558:	799b      	ldrb	r3, [r3, #6]
 800155a:	793a      	ldrb	r2, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	d804      	bhi.n	800156a <transmitFullBuffers+0x102>
        transmitEntireFIFO_Vector(&fifoAccel, "Accelerometer");
 8001560:	4917      	ldr	r1, [pc, #92]	@ (80015c0 <transmitFullBuffers+0x158>)
 8001562:	4811      	ldr	r0, [pc, #68]	@ (80015a8 <transmitFullBuffers+0x140>)
 8001564:	f7ff fdfc 	bl	8001160 <transmitEntireFIFO_Vector>
}
 8001568:	e012      	b.n	8001590 <transmitFullBuffers+0x128>
    } else if (fifoMagneto.count >= thresholdMagneto) {
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <transmitFullBuffers+0x148>)
 800156c:	799b      	ldrb	r3, [r3, #6]
 800156e:	78ba      	ldrb	r2, [r7, #2]
 8001570:	429a      	cmp	r2, r3
 8001572:	d804      	bhi.n	800157e <transmitFullBuffers+0x116>
        transmitEntireFIFO_Vector(&fifoMagneto, "Magnetometer");
 8001574:	4913      	ldr	r1, [pc, #76]	@ (80015c4 <transmitFullBuffers+0x15c>)
 8001576:	480e      	ldr	r0, [pc, #56]	@ (80015b0 <transmitFullBuffers+0x148>)
 8001578:	f7ff fdf2 	bl	8001160 <transmitEntireFIFO_Vector>
}
 800157c:	e008      	b.n	8001590 <transmitFullBuffers+0x128>
    } else if (fifoGyro.count >= thresholdGyro) {
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <transmitFullBuffers+0x144>)
 8001580:	799b      	ldrb	r3, [r3, #6]
 8001582:	78fa      	ldrb	r2, [r7, #3]
 8001584:	429a      	cmp	r2, r3
 8001586:	d803      	bhi.n	8001590 <transmitFullBuffers+0x128>
        transmitEntireFIFO_Vector(&fifoGyro, "Gyroscope");
 8001588:	490f      	ldr	r1, [pc, #60]	@ (80015c8 <transmitFullBuffers+0x160>)
 800158a:	4808      	ldr	r0, [pc, #32]	@ (80015ac <transmitFullBuffers+0x144>)
 800158c:	f7ff fde8 	bl	8001160 <transmitEntireFIFO_Vector>
}
 8001590:	bf00      	nop
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200009e8 	.word	0x200009e8
 800159c:	51eb851f 	.word	0x51eb851f
 80015a0:	200009f8 	.word	0x200009f8
 80015a4:	20000a08 	.word	0x20000a08
 80015a8:	20000a18 	.word	0x20000a18
 80015ac:	20000a28 	.word	0x20000a28
 80015b0:	20000a38 	.word	0x20000a38
 80015b4:	0800b310 	.word	0x0800b310
 80015b8:	0800b31c 	.word	0x0800b31c
 80015bc:	0800b328 	.word	0x0800b328
 80015c0:	0800b334 	.word	0x0800b334
 80015c4:	0800b350 	.word	0x0800b350
 80015c8:	0800b344 	.word	0x0800b344

080015cc <getMostFilledBuffer>:

char* getMostFilledBuffer(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 float minTimeToFill = FLT_MAX;
 80015d2:	4b46      	ldr	r3, [pc, #280]	@ (80016ec <getMostFilledBuffer+0x120>)
 80015d4:	61fb      	str	r3, [r7, #28]
 char* minBuffer = NULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
    if (fifoTemp.count > 0) {
 80015da:	4b45      	ldr	r3, [pc, #276]	@ (80016f0 <getMostFilledBuffer+0x124>)
 80015dc:	799b      	ldrb	r3, [r3, #6]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d011      	beq.n	8001606 <getMostFilledBuffer+0x3a>
     float timeToFill = getFIFO_timeToFillFloat(&fifoTemp); // Use input frequency and occupancy to calculate time for remaining cap to fill
 80015e2:	4843      	ldr	r0, [pc, #268]	@ (80016f0 <getMostFilledBuffer+0x124>)
 80015e4:	f7ff feca 	bl	800137c <getFIFO_timeToFillFloat>
 80015e8:	ed87 0a05 	vstr	s0, [r7, #20]
     if (minTimeToFill > timeToFill) {
 80015ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80015f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80015f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fc:	dd03      	ble.n	8001606 <getMostFilledBuffer+0x3a>
      minTimeToFill = timeToFill;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	61fb      	str	r3, [r7, #28]
      minBuffer = "Temperature";
 8001602:	4b3c      	ldr	r3, [pc, #240]	@ (80016f4 <getMostFilledBuffer+0x128>)
 8001604:	61bb      	str	r3, [r7, #24]
     }
    }
    if (fifoHumidity.count > 0) {
 8001606:	4b3c      	ldr	r3, [pc, #240]	@ (80016f8 <getMostFilledBuffer+0x12c>)
 8001608:	799b      	ldrb	r3, [r3, #6]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d011      	beq.n	8001632 <getMostFilledBuffer+0x66>
     float timeToFill = getFIFO_timeToFillFloat(&fifoHumidity);
 800160e:	483a      	ldr	r0, [pc, #232]	@ (80016f8 <getMostFilledBuffer+0x12c>)
 8001610:	f7ff feb4 	bl	800137c <getFIFO_timeToFillFloat>
 8001614:	ed87 0a04 	vstr	s0, [r7, #16]
     if (minTimeToFill > timeToFill) {
 8001618:	ed97 7a07 	vldr	s14, [r7, #28]
 800161c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001628:	dd03      	ble.n	8001632 <getMostFilledBuffer+0x66>
      minTimeToFill = timeToFill;
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	61fb      	str	r3, [r7, #28]
      minBuffer = "Humidity";
 800162e:	4b33      	ldr	r3, [pc, #204]	@ (80016fc <getMostFilledBuffer+0x130>)
 8001630:	61bb      	str	r3, [r7, #24]
     }
    }
    if (fifoPressure.count > 0) {
 8001632:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <getMostFilledBuffer+0x134>)
 8001634:	799b      	ldrb	r3, [r3, #6]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d011      	beq.n	800165e <getMostFilledBuffer+0x92>
     float timeToFill = getFIFO_timeToFillFloat(&fifoPressure);
 800163a:	4831      	ldr	r0, [pc, #196]	@ (8001700 <getMostFilledBuffer+0x134>)
 800163c:	f7ff fe9e 	bl	800137c <getFIFO_timeToFillFloat>
 8001640:	ed87 0a03 	vstr	s0, [r7, #12]
     if (minTimeToFill > timeToFill) {
 8001644:	ed97 7a07 	vldr	s14, [r7, #28]
 8001648:	edd7 7a03 	vldr	s15, [r7, #12]
 800164c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001654:	dd03      	ble.n	800165e <getMostFilledBuffer+0x92>
      minTimeToFill = timeToFill;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	61fb      	str	r3, [r7, #28]
      minBuffer = "Pressure";
 800165a:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <getMostFilledBuffer+0x138>)
 800165c:	61bb      	str	r3, [r7, #24]
     }
    }
    if (fifoAccel.count > 0) {
 800165e:	4b2a      	ldr	r3, [pc, #168]	@ (8001708 <getMostFilledBuffer+0x13c>)
 8001660:	799b      	ldrb	r3, [r3, #6]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d011      	beq.n	800168a <getMostFilledBuffer+0xbe>
     float timeToFill = getFIFO_timeToFillVector(&fifoAccel);
 8001666:	4828      	ldr	r0, [pc, #160]	@ (8001708 <getMostFilledBuffer+0x13c>)
 8001668:	f7ff fec3 	bl	80013f2 <getFIFO_timeToFillVector>
 800166c:	ed87 0a02 	vstr	s0, [r7, #8]
     if (minTimeToFill > timeToFill) {
 8001670:	ed97 7a07 	vldr	s14, [r7, #28]
 8001674:	edd7 7a02 	vldr	s15, [r7, #8]
 8001678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	dd03      	ble.n	800168a <getMostFilledBuffer+0xbe>
      minTimeToFill = timeToFill;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	61fb      	str	r3, [r7, #28]
      minBuffer = "Accelerometer";
 8001686:	4b21      	ldr	r3, [pc, #132]	@ (800170c <getMostFilledBuffer+0x140>)
 8001688:	61bb      	str	r3, [r7, #24]
     }
    }
    if (fifoMagneto.count > 0) {
 800168a:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <getMostFilledBuffer+0x144>)
 800168c:	799b      	ldrb	r3, [r3, #6]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d011      	beq.n	80016b6 <getMostFilledBuffer+0xea>
     float timeToFill = getFIFO_timeToFillVector(&fifoMagneto);
 8001692:	481f      	ldr	r0, [pc, #124]	@ (8001710 <getMostFilledBuffer+0x144>)
 8001694:	f7ff fead 	bl	80013f2 <getFIFO_timeToFillVector>
 8001698:	ed87 0a01 	vstr	s0, [r7, #4]
     if (minTimeToFill > timeToFill) {
 800169c:	ed97 7a07 	vldr	s14, [r7, #28]
 80016a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80016a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ac:	dd03      	ble.n	80016b6 <getMostFilledBuffer+0xea>
      minTimeToFill = timeToFill;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	61fb      	str	r3, [r7, #28]
      minBuffer = "Magneto";
 80016b2:	4b18      	ldr	r3, [pc, #96]	@ (8001714 <getMostFilledBuffer+0x148>)
 80016b4:	61bb      	str	r3, [r7, #24]
     }
    }
    if (fifoGyro.count > 0) {
 80016b6:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <getMostFilledBuffer+0x14c>)
 80016b8:	799b      	ldrb	r3, [r3, #6]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d011      	beq.n	80016e2 <getMostFilledBuffer+0x116>
     float timeToFill = getFIFO_timeToFillVector(&fifoGyro);
 80016be:	4816      	ldr	r0, [pc, #88]	@ (8001718 <getMostFilledBuffer+0x14c>)
 80016c0:	f7ff fe97 	bl	80013f2 <getFIFO_timeToFillVector>
 80016c4:	ed87 0a00 	vstr	s0, [r7]
     if (minTimeToFill > timeToFill) {
 80016c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80016cc:	edd7 7a00 	vldr	s15, [r7]
 80016d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	dd03      	ble.n	80016e2 <getMostFilledBuffer+0x116>
      minTimeToFill = timeToFill;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	61fb      	str	r3, [r7, #28]
      minBuffer = "Gyro";
 80016de:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <getMostFilledBuffer+0x150>)
 80016e0:	61bb      	str	r3, [r7, #24]
     }
    }


    return minBuffer;
 80016e2:	69bb      	ldr	r3, [r7, #24]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3720      	adds	r7, #32
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	7f7fffff 	.word	0x7f7fffff
 80016f0:	200009e8 	.word	0x200009e8
 80016f4:	0800b310 	.word	0x0800b310
 80016f8:	200009f8 	.word	0x200009f8
 80016fc:	0800b31c 	.word	0x0800b31c
 8001700:	20000a08 	.word	0x20000a08
 8001704:	0800b328 	.word	0x0800b328
 8001708:	20000a18 	.word	0x20000a18
 800170c:	0800b334 	.word	0x0800b334
 8001710:	20000a38 	.word	0x20000a38
 8001714:	0800b360 	.word	0x0800b360
 8001718:	20000a28 	.word	0x20000a28
 800171c:	0800b368 	.word	0x0800b368

08001720 <transmitpredictiveBuffers>:




void transmitpredictiveBuffers(const char* selectedBuffer) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 if (strcmp(selectedBuffer,"Temperature") == 0) {
 8001728:	4925      	ldr	r1, [pc, #148]	@ (80017c0 <transmitpredictiveBuffers+0xa0>)
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7fe fd50 	bl	80001d0 <strcmp>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d104      	bne.n	8001740 <transmitpredictiveBuffers+0x20>
  transmitEntireFIFO_Float(&fifoTemp, "Temperature");
 8001736:	4922      	ldr	r1, [pc, #136]	@ (80017c0 <transmitpredictiveBuffers+0xa0>)
 8001738:	4822      	ldr	r0, [pc, #136]	@ (80017c4 <transmitpredictiveBuffers+0xa4>)
 800173a:	f7ff fceb 	bl	8001114 <transmitEntireFIFO_Float>
 }  else if (strcmp(selectedBuffer,"Accelerometer") == 0) {
  transmitEntireFIFO_Vector(&fifoAccel, "Accelerometer");
 } else if (strcmp(selectedBuffer,"Magneto") == 0) {
  transmitEntireFIFO_Vector(&fifoMagneto, "Magnetometer");
 }
}
 800173e:	e03a      	b.n	80017b6 <transmitpredictiveBuffers+0x96>
 } else if (strcmp(selectedBuffer,"Humidity") == 0) {
 8001740:	4921      	ldr	r1, [pc, #132]	@ (80017c8 <transmitpredictiveBuffers+0xa8>)
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7fe fd44 	bl	80001d0 <strcmp>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d104      	bne.n	8001758 <transmitpredictiveBuffers+0x38>
  transmitEntireFIFO_Float(&fifoHumidity, "Humidity");
 800174e:	491e      	ldr	r1, [pc, #120]	@ (80017c8 <transmitpredictiveBuffers+0xa8>)
 8001750:	481e      	ldr	r0, [pc, #120]	@ (80017cc <transmitpredictiveBuffers+0xac>)
 8001752:	f7ff fcdf 	bl	8001114 <transmitEntireFIFO_Float>
}
 8001756:	e02e      	b.n	80017b6 <transmitpredictiveBuffers+0x96>
 } else if (strcmp(selectedBuffer,"Pressure") == 0) {
 8001758:	491d      	ldr	r1, [pc, #116]	@ (80017d0 <transmitpredictiveBuffers+0xb0>)
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7fe fd38 	bl	80001d0 <strcmp>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d104      	bne.n	8001770 <transmitpredictiveBuffers+0x50>
  transmitEntireFIFO_Float(&fifoPressure, "Pressure");
 8001766:	491a      	ldr	r1, [pc, #104]	@ (80017d0 <transmitpredictiveBuffers+0xb0>)
 8001768:	481a      	ldr	r0, [pc, #104]	@ (80017d4 <transmitpredictiveBuffers+0xb4>)
 800176a:	f7ff fcd3 	bl	8001114 <transmitEntireFIFO_Float>
}
 800176e:	e022      	b.n	80017b6 <transmitpredictiveBuffers+0x96>
 } else if (strcmp(selectedBuffer,"Gyro") == 0) {
 8001770:	4919      	ldr	r1, [pc, #100]	@ (80017d8 <transmitpredictiveBuffers+0xb8>)
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7fe fd2c 	bl	80001d0 <strcmp>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d104      	bne.n	8001788 <transmitpredictiveBuffers+0x68>
  transmitEntireFIFO_Vector(&fifoGyro, "Gyroscope");
 800177e:	4917      	ldr	r1, [pc, #92]	@ (80017dc <transmitpredictiveBuffers+0xbc>)
 8001780:	4817      	ldr	r0, [pc, #92]	@ (80017e0 <transmitpredictiveBuffers+0xc0>)
 8001782:	f7ff fced 	bl	8001160 <transmitEntireFIFO_Vector>
}
 8001786:	e016      	b.n	80017b6 <transmitpredictiveBuffers+0x96>
 }  else if (strcmp(selectedBuffer,"Accelerometer") == 0) {
 8001788:	4916      	ldr	r1, [pc, #88]	@ (80017e4 <transmitpredictiveBuffers+0xc4>)
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7fe fd20 	bl	80001d0 <strcmp>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d104      	bne.n	80017a0 <transmitpredictiveBuffers+0x80>
  transmitEntireFIFO_Vector(&fifoAccel, "Accelerometer");
 8001796:	4913      	ldr	r1, [pc, #76]	@ (80017e4 <transmitpredictiveBuffers+0xc4>)
 8001798:	4813      	ldr	r0, [pc, #76]	@ (80017e8 <transmitpredictiveBuffers+0xc8>)
 800179a:	f7ff fce1 	bl	8001160 <transmitEntireFIFO_Vector>
}
 800179e:	e00a      	b.n	80017b6 <transmitpredictiveBuffers+0x96>
 } else if (strcmp(selectedBuffer,"Magneto") == 0) {
 80017a0:	4912      	ldr	r1, [pc, #72]	@ (80017ec <transmitpredictiveBuffers+0xcc>)
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7fe fd14 	bl	80001d0 <strcmp>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d103      	bne.n	80017b6 <transmitpredictiveBuffers+0x96>
  transmitEntireFIFO_Vector(&fifoMagneto, "Magnetometer");
 80017ae:	4910      	ldr	r1, [pc, #64]	@ (80017f0 <transmitpredictiveBuffers+0xd0>)
 80017b0:	4810      	ldr	r0, [pc, #64]	@ (80017f4 <transmitpredictiveBuffers+0xd4>)
 80017b2:	f7ff fcd5 	bl	8001160 <transmitEntireFIFO_Vector>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0800b310 	.word	0x0800b310
 80017c4:	200009e8 	.word	0x200009e8
 80017c8:	0800b31c 	.word	0x0800b31c
 80017cc:	200009f8 	.word	0x200009f8
 80017d0:	0800b328 	.word	0x0800b328
 80017d4:	20000a08 	.word	0x20000a08
 80017d8:	0800b368 	.word	0x0800b368
 80017dc:	0800b344 	.word	0x0800b344
 80017e0:	20000a28 	.word	0x20000a28
 80017e4:	0800b334 	.word	0x0800b334
 80017e8:	20000a18 	.word	0x20000a18
 80017ec:	0800b360 	.word	0x0800b360
 80017f0:	0800b350 	.word	0x0800b350
 80017f4:	20000a38 	.word	0x20000a38

080017f8 <getRandomDelay.0>:
//  HAL_Delay(100);
  srand(HAL_GetTick());// Seed RNG


  int getRandomDelay(void)
  {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	f8c7 c004 	str.w	ip, [r7, #4]
      return (rand() % 11) + 10;
 8001802:	f007 fc3b 	bl	800907c <rand>
 8001806:	4601      	mov	r1, r0
 8001808:	4b08      	ldr	r3, [pc, #32]	@ (800182c <getRandomDelay.0+0x34>)
 800180a:	fb83 2301 	smull	r2, r3, r3, r1
 800180e:	105a      	asrs	r2, r3, #1
 8001810:	17cb      	asrs	r3, r1, #31
 8001812:	1ad2      	subs	r2, r2, r3
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	1aca      	subs	r2, r1, r3
 8001820:	f102 030a 	add.w	r3, r2, #10
  }
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2e8ba2e9 	.word	0x2e8ba2e9

08001830 <main>:
{
 8001830:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001834:	b0d6      	sub	sp, #344	@ 0x158
 8001836:	af08      	add	r7, sp, #32
int main(void)
 8001838:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800183c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	initialise_monitor_handles();
 8001840:	f001 fc3e 	bl	80030c0 <initialise_monitor_handles>
	HAL_Init();
 8001844:	f002 fd70 	bl	8004328 <HAL_Init>
  SystemClock_Config();
 8001848:	f000 fcf6 	bl	8002238 <SystemClock_Config>
  __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	4b80      	ldr	r3, [pc, #512]	@ (8001a50 <main+0x220>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	4a7f      	ldr	r2, [pc, #508]	@ (8001a50 <main+0x220>)
 8001852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	@ 0x58
 8001858:	4b7d      	ldr	r3, [pc, #500]	@ (8001a50 <main+0x220>)
 800185a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001860:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001864:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
  HAL_PWR_EnableBkUpAccess();
 8001868:	f004 fa80 	bl	8005d6c <HAL_PWR_EnableBkUpAccess>
  MX_GPIO_Init();
 800186c:	f000 feae 	bl	80025cc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001870:	f000 fd44 	bl	80022fc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001874:	f000 fd7a 	bl	800236c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001878:	f000 fdb6 	bl	80023e8 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800187c:	f000 fdda 	bl	8002434 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001880:	f000 fe16 	bl	80024b0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001884:	f000 fe44 	bl	8002510 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001888:	f000 fe72 	bl	8002570 <MX_USB_OTG_FS_PCD_Init>
  BSP_TSENSOR_Init();//Temperature init
 800188c:	f001 ffaa 	bl	80037e4 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();//Humidity init
 8001890:	f001 ff08 	bl	80036a4 <BSP_HSENSOR_Init>
  BSP_PSENSOR_Init();//Pressure init
 8001894:	f001 ff78 	bl	8003788 <BSP_PSENSOR_Init>
  BSP_MAGNETO_Init();//Magnetometer init
 8001898:	f001 ff32 	bl	8003700 <BSP_MAGNETO_Init>
  BSP_GYRO_Init();//Gyroscope init
 800189c:	f001 fea6 	bl	80035ec <BSP_GYRO_Init>
  BSP_ACCELERO_Init();//Accelerometer init
 80018a0:	f001 fe4c 	bl	800353c <BSP_ACCELERO_Init>
  fifoTemp.data      = tempData;
 80018a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001a54 <main+0x224>)
 80018a6:	4a6c      	ldr	r2, [pc, #432]	@ (8001a58 <main+0x228>)
 80018a8:	601a      	str	r2, [r3, #0]
  fifoTemp.timestamp = tempTimestamps;
 80018aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001a54 <main+0x224>)
 80018ac:	4a6b      	ldr	r2, [pc, #428]	@ (8001a5c <main+0x22c>)
 80018ae:	609a      	str	r2, [r3, #8]
  fifoTemp.capacity  = TEMP_BUFFER_CAPACITY;
 80018b0:	4b68      	ldr	r3, [pc, #416]	@ (8001a54 <main+0x224>)
 80018b2:	2205      	movs	r2, #5
 80018b4:	731a      	strb	r2, [r3, #12]
  fifoTemp.head = fifoTemp.tail = fifoTemp.count = 0;
 80018b6:	4b67      	ldr	r3, [pc, #412]	@ (8001a54 <main+0x224>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	719a      	strb	r2, [r3, #6]
 80018bc:	4b65      	ldr	r3, [pc, #404]	@ (8001a54 <main+0x224>)
 80018be:	799a      	ldrb	r2, [r3, #6]
 80018c0:	4b64      	ldr	r3, [pc, #400]	@ (8001a54 <main+0x224>)
 80018c2:	715a      	strb	r2, [r3, #5]
 80018c4:	4b63      	ldr	r3, [pc, #396]	@ (8001a54 <main+0x224>)
 80018c6:	795a      	ldrb	r2, [r3, #5]
 80018c8:	4b62      	ldr	r3, [pc, #392]	@ (8001a54 <main+0x224>)
 80018ca:	711a      	strb	r2, [r3, #4]
  fifoHumidity.data      = humidityData;
 80018cc:	4b64      	ldr	r3, [pc, #400]	@ (8001a60 <main+0x230>)
 80018ce:	4a65      	ldr	r2, [pc, #404]	@ (8001a64 <main+0x234>)
 80018d0:	601a      	str	r2, [r3, #0]
  fifoHumidity.timestamp = humidityTimestamps;
 80018d2:	4b63      	ldr	r3, [pc, #396]	@ (8001a60 <main+0x230>)
 80018d4:	4a64      	ldr	r2, [pc, #400]	@ (8001a68 <main+0x238>)
 80018d6:	609a      	str	r2, [r3, #8]
  fifoHumidity.capacity  = HUMIDITY_BUFFER_CAPACITY;
 80018d8:	4b61      	ldr	r3, [pc, #388]	@ (8001a60 <main+0x230>)
 80018da:	2205      	movs	r2, #5
 80018dc:	731a      	strb	r2, [r3, #12]
  fifoHumidity.head = fifoHumidity.tail = fifoHumidity.count = 0;
 80018de:	4b60      	ldr	r3, [pc, #384]	@ (8001a60 <main+0x230>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	719a      	strb	r2, [r3, #6]
 80018e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a60 <main+0x230>)
 80018e6:	799a      	ldrb	r2, [r3, #6]
 80018e8:	4b5d      	ldr	r3, [pc, #372]	@ (8001a60 <main+0x230>)
 80018ea:	715a      	strb	r2, [r3, #5]
 80018ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001a60 <main+0x230>)
 80018ee:	795a      	ldrb	r2, [r3, #5]
 80018f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a60 <main+0x230>)
 80018f2:	711a      	strb	r2, [r3, #4]
  fifoPressure.data      = pressureData;
 80018f4:	4b5d      	ldr	r3, [pc, #372]	@ (8001a6c <main+0x23c>)
 80018f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001a70 <main+0x240>)
 80018f8:	601a      	str	r2, [r3, #0]
  fifoPressure.timestamp = pressureTimestamps;
 80018fa:	4b5c      	ldr	r3, [pc, #368]	@ (8001a6c <main+0x23c>)
 80018fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001a74 <main+0x244>)
 80018fe:	609a      	str	r2, [r3, #8]
  fifoPressure.capacity  = PRESSURE_BUFFER_CAPACITY;
 8001900:	4b5a      	ldr	r3, [pc, #360]	@ (8001a6c <main+0x23c>)
 8001902:	2214      	movs	r2, #20
 8001904:	731a      	strb	r2, [r3, #12]
  fifoPressure.head = fifoPressure.tail = fifoPressure.count = 0;
 8001906:	4b59      	ldr	r3, [pc, #356]	@ (8001a6c <main+0x23c>)
 8001908:	2200      	movs	r2, #0
 800190a:	719a      	strb	r2, [r3, #6]
 800190c:	4b57      	ldr	r3, [pc, #348]	@ (8001a6c <main+0x23c>)
 800190e:	799a      	ldrb	r2, [r3, #6]
 8001910:	4b56      	ldr	r3, [pc, #344]	@ (8001a6c <main+0x23c>)
 8001912:	715a      	strb	r2, [r3, #5]
 8001914:	4b55      	ldr	r3, [pc, #340]	@ (8001a6c <main+0x23c>)
 8001916:	795a      	ldrb	r2, [r3, #5]
 8001918:	4b54      	ldr	r3, [pc, #336]	@ (8001a6c <main+0x23c>)
 800191a:	711a      	strb	r2, [r3, #4]
  fifoAccel.data      = accelData;
 800191c:	4b56      	ldr	r3, [pc, #344]	@ (8001a78 <main+0x248>)
 800191e:	4a57      	ldr	r2, [pc, #348]	@ (8001a7c <main+0x24c>)
 8001920:	601a      	str	r2, [r3, #0]
  fifoAccel.timestamp = accelTimestamps;
 8001922:	4b55      	ldr	r3, [pc, #340]	@ (8001a78 <main+0x248>)
 8001924:	4a56      	ldr	r2, [pc, #344]	@ (8001a80 <main+0x250>)
 8001926:	609a      	str	r2, [r3, #8]
  fifoAccel.capacity  = ACCEL_BUFFER_CAPACITY;
 8001928:	4b53      	ldr	r3, [pc, #332]	@ (8001a78 <main+0x248>)
 800192a:	2232      	movs	r2, #50	@ 0x32
 800192c:	731a      	strb	r2, [r3, #12]
  fifoAccel.head = fifoAccel.tail = fifoAccel.count = 0;
 800192e:	4b52      	ldr	r3, [pc, #328]	@ (8001a78 <main+0x248>)
 8001930:	2200      	movs	r2, #0
 8001932:	719a      	strb	r2, [r3, #6]
 8001934:	4b50      	ldr	r3, [pc, #320]	@ (8001a78 <main+0x248>)
 8001936:	799a      	ldrb	r2, [r3, #6]
 8001938:	4b4f      	ldr	r3, [pc, #316]	@ (8001a78 <main+0x248>)
 800193a:	715a      	strb	r2, [r3, #5]
 800193c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a78 <main+0x248>)
 800193e:	795a      	ldrb	r2, [r3, #5]
 8001940:	4b4d      	ldr	r3, [pc, #308]	@ (8001a78 <main+0x248>)
 8001942:	711a      	strb	r2, [r3, #4]
  fifoGyro.data      = gyroData;
 8001944:	4b4f      	ldr	r3, [pc, #316]	@ (8001a84 <main+0x254>)
 8001946:	4a50      	ldr	r2, [pc, #320]	@ (8001a88 <main+0x258>)
 8001948:	601a      	str	r2, [r3, #0]
  fifoGyro.timestamp = gyroTimestamps;
 800194a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a84 <main+0x254>)
 800194c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a8c <main+0x25c>)
 800194e:	609a      	str	r2, [r3, #8]
  fifoGyro.capacity  = GYRO_BUFFER_CAPACITY;
 8001950:	4b4c      	ldr	r3, [pc, #304]	@ (8001a84 <main+0x254>)
 8001952:	2232      	movs	r2, #50	@ 0x32
 8001954:	731a      	strb	r2, [r3, #12]
  fifoGyro.head = fifoGyro.tail = fifoGyro.count = 0;
 8001956:	4b4b      	ldr	r3, [pc, #300]	@ (8001a84 <main+0x254>)
 8001958:	2200      	movs	r2, #0
 800195a:	719a      	strb	r2, [r3, #6]
 800195c:	4b49      	ldr	r3, [pc, #292]	@ (8001a84 <main+0x254>)
 800195e:	799a      	ldrb	r2, [r3, #6]
 8001960:	4b48      	ldr	r3, [pc, #288]	@ (8001a84 <main+0x254>)
 8001962:	715a      	strb	r2, [r3, #5]
 8001964:	4b47      	ldr	r3, [pc, #284]	@ (8001a84 <main+0x254>)
 8001966:	795a      	ldrb	r2, [r3, #5]
 8001968:	4b46      	ldr	r3, [pc, #280]	@ (8001a84 <main+0x254>)
 800196a:	711a      	strb	r2, [r3, #4]
  fifoMagneto.data      = magnetoData;
 800196c:	4b48      	ldr	r3, [pc, #288]	@ (8001a90 <main+0x260>)
 800196e:	4a49      	ldr	r2, [pc, #292]	@ (8001a94 <main+0x264>)
 8001970:	601a      	str	r2, [r3, #0]
  fifoMagneto.timestamp = magnetoTimestamps;
 8001972:	4b47      	ldr	r3, [pc, #284]	@ (8001a90 <main+0x260>)
 8001974:	4a48      	ldr	r2, [pc, #288]	@ (8001a98 <main+0x268>)
 8001976:	609a      	str	r2, [r3, #8]
  fifoMagneto.capacity  = MAG_BUFFER_CAPACITY;
 8001978:	4b45      	ldr	r3, [pc, #276]	@ (8001a90 <main+0x260>)
 800197a:	2228      	movs	r2, #40	@ 0x28
 800197c:	731a      	strb	r2, [r3, #12]
  fifoMagneto.head = fifoMagneto.tail = fifoMagneto.count = 0;
 800197e:	4b44      	ldr	r3, [pc, #272]	@ (8001a90 <main+0x260>)
 8001980:	2200      	movs	r2, #0
 8001982:	719a      	strb	r2, [r3, #6]
 8001984:	4b42      	ldr	r3, [pc, #264]	@ (8001a90 <main+0x260>)
 8001986:	799a      	ldrb	r2, [r3, #6]
 8001988:	4b41      	ldr	r3, [pc, #260]	@ (8001a90 <main+0x260>)
 800198a:	715a      	strb	r2, [r3, #5]
 800198c:	4b40      	ldr	r3, [pc, #256]	@ (8001a90 <main+0x260>)
 800198e:	795a      	ldrb	r2, [r3, #5]
 8001990:	4b3f      	ldr	r3, [pc, #252]	@ (8001a90 <main+0x260>)
 8001992:	711a      	strb	r2, [r3, #4]
  srand(HAL_GetTick());// Seed RNG
 8001994:	f002 fd30 	bl	80043f8 <HAL_GetTick>
 8001998:	4603      	mov	r3, r0
 800199a:	4618      	mov	r0, r3
 800199c:	f007 fb40 	bl	8009020 <srand>
  float getRandomErrorFactor(void)
  {
      return ((float)rand() / (float)RAND_MAX) * 0.1f - 0.05f;
  }

  uint32_t now = HAL_GetTick();
 80019a0:	f002 fd2a 	bl	80043f8 <HAL_GetTick>
 80019a4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  // Generate an initial random 10-20ms delay for each sensor
  uint32_t randDelayTempHum   = getRandomDelay();
 80019a8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80019ac:	469c      	mov	ip, r3
 80019ae:	f7ff ff23 	bl	80017f8 <getRandomDelay.0>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  uint32_t randDelayAccelGyro = getRandomDelay();
 80019b8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80019bc:	469c      	mov	ip, r3
 80019be:	f7ff ff1b 	bl	80017f8 <getRandomDelay.0>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  uint32_t randDelayPressure  = getRandomDelay();
 80019c8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80019cc:	469c      	mov	ip, r3
 80019ce:	f7ff ff13 	bl	80017f8 <getRandomDelay.0>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  uint32_t randDelayMagneto   = getRandomDelay();
 80019d8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80019dc:	469c      	mov	ip, r3
 80019de:	f7ff ff0b 	bl	80017f8 <getRandomDelay.0>
 80019e2:	4603      	mov	r3, r0
 80019e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

  // Initialize last poll timestamps to current time plus base period plus random delay.
  uint32_t lastTempHumPoll   = now + (uint32_t)(1000.0 / 1.0)  + randDelayTempHum;   // 1Hz sensor
 80019e8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80019ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80019f6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  uint32_t lastAccelGyroPoll = now + (uint32_t)(1000.0 / 52.0) + randDelayAccelGyro; // 52Hz sensor
 80019fa:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80019fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001a02:	4413      	add	r3, r2
 8001a04:	3313      	adds	r3, #19
 8001a06:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  uint32_t lastPressurePoll  = now + (uint32_t)(1000.0 / 25.0) + randDelayPressure;  // 25Hz sensor
 8001a0a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001a0e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001a12:	4413      	add	r3, r2
 8001a14:	3328      	adds	r3, #40	@ 0x28
 8001a16:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  uint32_t lastMagnetoPoll   = now + (uint32_t)(1000.0 / 40.0) + randDelayMagneto;   // 40Hz sensor
 8001a1a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001a22:	4413      	add	r3, r2
 8001a24:	3319      	adds	r3, #25
 8001a26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  while (1)
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  {

	uint32_t now = HAL_GetTick();
 8001a2a:	f002 fce5 	bl	80043f8 <HAL_GetTick>
 8001a2e:	f8c7 0100 	str.w	r0, [r7, #256]	@ 0x100
//	printf("HALTick %lu\r\n",now);

	if (criticalEventFlag)
 8001a32:	4b1a      	ldr	r3, [pc, #104]	@ (8001a9c <main+0x26c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d037      	beq.n	8001aac <main+0x27c>
		{
	         HandleCriticalEvent();
 8001a3c:	f000 ff78 	bl	8002930 <HandleCriticalEvent>
	         lowPowerState = 0;
 8001a40:	4b17      	ldr	r3, [pc, #92]	@ (8001aa0 <main+0x270>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	         lastCriticalAlertTime = now;
 8001a46:	4a17      	ldr	r2, [pc, #92]	@ (8001aa4 <main+0x274>)
 8001a48:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	e3aa      	b.n	80021a6 <main+0x976>
 8001a50:	40021000 	.word	0x40021000
 8001a54:	200009e8 	.word	0x200009e8
 8001a58:	20000a48 	.word	0x20000a48
 8001a5c:	20000a5c 	.word	0x20000a5c
 8001a60:	200009f8 	.word	0x200009f8
 8001a64:	20000a70 	.word	0x20000a70
 8001a68:	20000a84 	.word	0x20000a84
 8001a6c:	20000a08 	.word	0x20000a08
 8001a70:	20000a98 	.word	0x20000a98
 8001a74:	20000ae8 	.word	0x20000ae8
 8001a78:	20000a18 	.word	0x20000a18
 8001a7c:	20000b38 	.word	0x20000b38
 8001a80:	20000d90 	.word	0x20000d90
 8001a84:	20000a28 	.word	0x20000a28
 8001a88:	20000e58 	.word	0x20000e58
 8001a8c:	200010b0 	.word	0x200010b0
 8001a90:	20000a38 	.word	0x20000a38
 8001a94:	20001178 	.word	0x20001178
 8001a98:	20001358 	.word	0x20001358
 8001a9c:	200009e0 	.word	0x200009e0
 8001aa0:	200009e1 	.word	0x200009e1
 8001aa4:	200009e4 	.word	0x200009e4
 8001aa8:	42c80000 	.word	0x42c80000
	     }
	else{
	 // Poll Humidity/Temperature sensor at ~1Hz (1000ms + random 10-20ms)


		if (now >= lastTempHumPoll)
 8001aac:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8001ab0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	f0c0 80e8 	bcc.w	8001c8a <main+0x45a>
		{
			uint32_t sensorReadTime = HAL_GetTick();
 8001aba:	f002 fc9d 	bl	80043f8 <HAL_GetTick>
 8001abe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
		    int randPollDelay = getRandomDelay();
 8001ac2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001ac6:	469c      	mov	ip, r3
 8001ac8:	f7ff fe96 	bl	80017f8 <getRandomDelay.0>
 8001acc:	f8c7 00f8 	str.w	r0, [r7, #248]	@ 0xf8
		    lastTempHumPoll = now + 1000 + randPollDelay;
 8001ad0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8001ad4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001ad8:	4413      	add	r3, r2
 8001ada:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001ade:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134


		    float temp = BSP_TSENSOR_ReadTemp();
 8001ae2:	f001 fe9b 	bl	800381c <BSP_TSENSOR_ReadTemp>
 8001ae6:	ed87 0a3d 	vstr	s0, [r7, #244]	@ 0xf4
		    float humidity = BSP_HSENSOR_ReadHumidity();
 8001aea:	f001 fdfb 	bl	80036e4 <BSP_HSENSOR_ReadHumidity>
 8001aee:	ed87 0a3c 	vstr	s0, [r7, #240]	@ 0xf0

		    // Add error to readings
		    float tempError = getRandomErrorFactor();
 8001af2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001af6:	469c      	mov	ip, r3
 8001af8:	f000 fb7c 	bl	80021f4 <getRandomErrorFactor.1>
 8001afc:	ed87 0a3b 	vstr	s0, [r7, #236]	@ 0xec
		    float humError  = getRandomErrorFactor();
 8001b00:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001b04:	469c      	mov	ip, r3
 8001b06:	f000 fb75 	bl	80021f4 <getRandomErrorFactor.1>
 8001b0a:	ed87 0a3a 	vstr	s0, [r7, #232]	@ 0xe8
		    float newTemp = temp * (1.0f + tempError);
 8001b0e:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8001b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b1a:	ed97 7a3d 	vldr	s14, [r7, #244]	@ 0xf4
 8001b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b22:	edc7 7a39 	vstr	s15, [r7, #228]	@ 0xe4
		    float newHumidity = humidity * (1.0f + humError);
 8001b26:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8001b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b32:	ed97 7a3c 	vldr	s14, [r7, #240]	@ 0xf0
 8001b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3a:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124

		    if (newHumidity > 100.0f) {
 8001b3e:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 8001b42:	ed1f 7a27 	vldr	s14, [pc, #-156]	@ 8001aa8 <main+0x278>
 8001b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4e:	dd02      	ble.n	8001b56 <main+0x326>
		         newHumidity = 100.0f;
 8001b50:	4b62      	ldr	r3, [pc, #392]	@ (8001cdc <main+0x4ac>)
 8001b52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
		    }

		    if (pushFIFO_Float(&fifoTemp, newTemp) != 0)
 8001b56:	ed97 0a39 	vldr	s0, [r7, #228]	@ 0xe4
 8001b5a:	4861      	ldr	r0, [pc, #388]	@ (8001ce0 <main+0x4b0>)
 8001b5c:	f7ff f9de 	bl	8000f1c <pushFIFO_Float>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <main+0x33c>
		         printf("Temperature FIFO full, discarding reading.\r\n");
 8001b66:	485f      	ldr	r0, [pc, #380]	@ (8001ce4 <main+0x4b4>)
 8001b68:	f007 fbf0 	bl	800934c <puts>
		    if (pushFIFO_Float(&fifoHumidity, newHumidity) != 0)
 8001b6c:	ed97 0a49 	vldr	s0, [r7, #292]	@ 0x124
 8001b70:	485d      	ldr	r0, [pc, #372]	@ (8001ce8 <main+0x4b8>)
 8001b72:	f7ff f9d3 	bl	8000f1c <pushFIFO_Float>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <main+0x352>
		         printf("Humidity FIFO full, discarding reading.\r\n");
 8001b7c:	485b      	ldr	r0, [pc, #364]	@ (8001cec <main+0x4bc>)
 8001b7e:	f007 fbe5 	bl	800934c <puts>

		    // Alert conditions with delay logging:
		    if (newTemp > HIGH_TEMP_THRESHOLD)
 8001b82:	edd7 7a39 	vldr	s15, [r7, #228]	@ 0xe4
 8001b86:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001cf0 <main+0x4c0>
 8001b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	dd22      	ble.n	8001bda <main+0x3aa>
		    {
		         uint32_t alertTime = HAL_GetTick();
 8001b94:	f002 fc30 	bl	80043f8 <HAL_GetTick>
 8001b98:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
		         uint32_t sensorDelay = alertTime - sensorReadTime + randPollDelay;
 8001b9c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8001ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ba4:	1ad2      	subs	r2, r2, r3
 8001ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001baa:	4413      	add	r3, r2
 8001bac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		         uint32_t responseDelay = sensorDelay;  // Modify if response time is measured differently
 8001bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		         printf("** Alert: %lu High temperature alert: %f C. Sensor delay: %lu ms, Response delay: %lu ms. Activating cooler **\r\n",
 8001bb8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	@ 0xe4
 8001bbc:	f7fe fcd4 	bl	8000568 <__aeabi_f2d>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	@ 0xd8
 8001bc8:	9101      	str	r1, [sp, #4]
 8001bca:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8001bce:	9100      	str	r1, [sp, #0]
 8001bd0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8001bd4:	4847      	ldr	r0, [pc, #284]	@ (8001cf4 <main+0x4c4>)
 8001bd6:	f007 fb51 	bl	800927c <iprintf>
		        		 alertTime,newTemp, sensorDelay, responseDelay);
		    }
		    if (newHumidity < LOW_HUMIDITY_THRESHOLD)
 8001bda:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 8001bde:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8001be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	d522      	bpl.n	8001c32 <main+0x402>
		    {
		         uint32_t alertTime = HAL_GetTick();
 8001bec:	f002 fc04 	bl	80043f8 <HAL_GetTick>
 8001bf0:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
		         uint32_t sensorDelay = alertTime - sensorReadTime + randPollDelay;
 8001bf4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bfc:	1ad2      	subs	r2, r2, r3
 8001bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c02:	4413      	add	r3, r2
 8001c04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
		         uint32_t responseDelay = sensorDelay;
 8001c08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001c0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		         printf("** Alert: %lu Low humidity alert: %f%%! Sensor delay: %lu ms, Response delay: %lu ms. Activating Humidifier. **\r\n",
 8001c10:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8001c14:	f7fe fca8 	bl	8000568 <__aeabi_f2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8001c20:	9101      	str	r1, [sp, #4]
 8001c22:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001c26:	9100      	str	r1, [sp, #0]
 8001c28:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001c2c:	4832      	ldr	r0, [pc, #200]	@ (8001cf8 <main+0x4c8>)
 8001c2e:	f007 fb25 	bl	800927c <iprintf>
		        		 alertTime, newHumidity, sensorDelay, responseDelay);
		    }
		    if (newHumidity > HIGH_HUMIDITY_THRESHOLD)
 8001c32:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 8001c36:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001cfc <main+0x4cc>
 8001c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c42:	dd22      	ble.n	8001c8a <main+0x45a>
		    {
		         uint32_t alertTime = HAL_GetTick();
 8001c44:	f002 fbd8 	bl	80043f8 <HAL_GetTick>
 8001c48:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
		         uint32_t sensorDelay = alertTime - sensorReadTime + randPollDelay;
 8001c4c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001c50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c54:	1ad2      	subs	r2, r2, r3
 8001c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
		         uint32_t responseDelay = sensorDelay;
 8001c60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		         printf("** Alert: %lu High humidity alert: %f%%. Sensor delay: %lu ms, Response delay: %lu ms **\r\n",
 8001c68:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8001c6c:	f7fe fc7c 	bl	8000568 <__aeabi_f2d>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 8001c78:	9101      	str	r1, [sp, #4]
 8001c7a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8001c7e:	9100      	str	r1, [sp, #0]
 8001c80:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8001c84:	481e      	ldr	r0, [pc, #120]	@ (8001d00 <main+0x4d0>)
 8001c86:	f007 faf9 	bl	800927c <iprintf>
		        		 alertTime, newHumidity, sensorDelay, responseDelay);
		    }
		}

	    // Poll Accelerometer/Gyro at ~52Hz (19ms + random 10-20ms)
		if (now >= lastAccelGyroPoll)
 8001c8a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8001c8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001c92:	429a      	cmp	r2, r3
 8001c94:	f0c0 8194 	bcc.w	8001fc0 <main+0x790>
		{
		    int randPollDelay = getRandomDelay();
 8001c98:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001c9c:	469c      	mov	ip, r3
 8001c9e:	f7ff fdab 	bl	80017f8 <getRandomDelay.0>
 8001ca2:	f8c7 00bc 	str.w	r0, [r7, #188]	@ 0xbc
		    lastAccelGyroPoll = now + 19 + randPollDelay;
 8001ca6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8001caa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001cae:	4413      	add	r3, r2
 8001cb0:	3313      	adds	r3, #19
 8001cb2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

		    // Capture accelerometer sensor reading timestamp
		    uint32_t accelSensorTime = HAL_GetTick();
 8001cb6:	f002 fb9f 	bl	80043f8 <HAL_GetTick>
 8001cba:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

		    int16_t accel_data_i16[3] = {0};
 8001cbe:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	809a      	strh	r2, [r3, #4]
		    BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 8001cc8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f001 fc75 	bl	80035bc <BSP_ACCELERO_AccGetXYZ>
		    float accel_data[3];
		    Vector3 accelReading;
		    for (int i = 0; i < 3; i++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001cd8:	e043      	b.n	8001d62 <main+0x532>
 8001cda:	bf00      	nop
 8001cdc:	42c80000 	.word	0x42c80000
 8001ce0:	200009e8 	.word	0x200009e8
 8001ce4:	0800b370 	.word	0x0800b370
 8001ce8:	200009f8 	.word	0x200009f8
 8001cec:	0800b39c 	.word	0x0800b39c
 8001cf0:	42040000 	.word	0x42040000
 8001cf4:	0800b3c8 	.word	0x0800b3c8
 8001cf8:	0800b43c 	.word	0x0800b43c
 8001cfc:	42ca0000 	.word	0x42ca0000
 8001d00:	0800b4b0 	.word	0x0800b4b0
 8001d04:	42c80000 	.word	0x42c80000
		    {
		         float error = getRandomErrorFactor();
 8001d08:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001d0c:	469c      	mov	ip, r3
 8001d0e:	f000 fa71 	bl	80021f4 <getRandomErrorFactor.1>
 8001d12:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
		         accel_data[i] = (accel_data_i16[i] / 100.0f) * (1.0f + error);
 8001d16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001d20:	443b      	add	r3, r7
 8001d22:	f933 3cbc 	ldrsh.w	r3, [r3, #-188]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2e:	ed5f 6a0b 	vldr	s13, [pc, #-44]	@ 8001d04 <main+0x4d4>
 8001d32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d36:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8001d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d46:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001d50:	443b      	add	r3, r7
 8001d52:	3bc8      	subs	r3, #200	@ 0xc8
 8001d54:	edc3 7a00 	vstr	s15, [r3]
		    for (int i = 0; i < 3; i++)
 8001d58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d62:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	ddce      	ble.n	8001d08 <main+0x4d8>
		    }

		    accelReading.x = accel_data[0];
 8001d6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001d6c:	667b      	str	r3, [r7, #100]	@ 0x64
		    accelReading.y = accel_data[1];
 8001d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001d70:	66bb      	str	r3, [r7, #104]	@ 0x68
		    accelReading.z = accel_data[2];
 8001d72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001d74:	66fb      	str	r3, [r7, #108]	@ 0x6c
		    if (pushFIFO_Vector(&fifoAccel, accelReading) != 0)
 8001d76:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 8001d7a:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001d7e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001d82:	eeb0 0a66 	vmov.f32	s0, s13
 8001d86:	eef0 0a47 	vmov.f32	s1, s14
 8001d8a:	eeb0 1a67 	vmov.f32	s2, s15
 8001d8e:	48ba      	ldr	r0, [pc, #744]	@ (8002078 <main+0x848>)
 8001d90:	f7ff f936 	bl	8001000 <pushFIFO_Vector>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <main+0x570>
		         printf("Accelerometer FIFO full, discarding reading.\r\n");
 8001d9a:	48b8      	ldr	r0, [pc, #736]	@ (800207c <main+0x84c>)
 8001d9c:	f007 fad6 	bl	800934c <puts>

		    // Check for vibration alert condition and log delays:
		    if (fabs(accel_data[0]) > VIBRATION_THRESHOLD_X ||
 8001da0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001da4:	eef0 7ae7 	vabs.f32	s15, s15
 8001da8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	dc16      	bgt.n	8001de4 <main+0x5b4>
		        fabs(accel_data[1]) > VIBRATION_THRESHOLD_Y ||
 8001db6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001dba:	eef0 7ae7 	vabs.f32	s15, s15
		    if (fabs(accel_data[0]) > VIBRATION_THRESHOLD_X ||
 8001dbe:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	dc0b      	bgt.n	8001de4 <main+0x5b4>
		        fabs(accel_data[2]) > VIBRATION_THRESHOLD_Z)
 8001dcc:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001dd0:	eef0 7ae7 	vabs.f32	s15, s15
		        fabs(accel_data[1]) > VIBRATION_THRESHOLD_Y ||
 8001dd4:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8001dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de0:	f340 8094 	ble.w	8001f0c <main+0x6dc>
		    {
		        uint32_t alertTime = HAL_GetTick();
 8001de4:	f002 fb08 	bl	80043f8 <HAL_GetTick>
 8001de8:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
		        uint32_t sensorDelay = alertTime - accelSensorTime + randPollDelay;
 8001dec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001df0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001df4:	1ad2      	subs	r2, r2, r3
 8001df6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		        uint32_t responseDelay = sensorDelay;
 8001e00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001e04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

		        // Build a string of violated axes.
		        char violatedAxes[32] = "";
 8001e08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e0c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001e10:	4618      	mov	r0, r3
 8001e12:	2320      	movs	r3, #32
 8001e14:	461a      	mov	r2, r3
 8001e16:	2100      	movs	r1, #0
 8001e18:	f007 faa0 	bl	800935c <memset>
		        if (fabs(accel_data[0]) > VIBRATION_THRESHOLD_X) {
 8001e1c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001e20:	eef0 7ae7 	vabs.f32	s15, s15
 8001e24:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001e28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e30:	dd0c      	ble.n	8001e4c <main+0x61c>
		            strcat(violatedAxes, "X ");
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fa2b 	bl	8000290 <strlen>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	4413      	add	r3, r2
 8001e42:	4a8f      	ldr	r2, [pc, #572]	@ (8002080 <main+0x850>)
 8001e44:	8811      	ldrh	r1, [r2, #0]
 8001e46:	7892      	ldrb	r2, [r2, #2]
 8001e48:	8019      	strh	r1, [r3, #0]
 8001e4a:	709a      	strb	r2, [r3, #2]
		        }
		        if (fabs(accel_data[1]) > VIBRATION_THRESHOLD_Y) {
 8001e4c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001e50:	eef0 7ae7 	vabs.f32	s15, s15
 8001e54:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001e58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e60:	dd0c      	ble.n	8001e7c <main+0x64c>
		            strcat(violatedAxes, "Y ");
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fa13 	bl	8000290 <strlen>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	4413      	add	r3, r2
 8001e72:	4a84      	ldr	r2, [pc, #528]	@ (8002084 <main+0x854>)
 8001e74:	8811      	ldrh	r1, [r2, #0]
 8001e76:	7892      	ldrb	r2, [r2, #2]
 8001e78:	8019      	strh	r1, [r3, #0]
 8001e7a:	709a      	strb	r2, [r3, #2]
		        }
		        if (fabs(accel_data[2]) > VIBRATION_THRESHOLD_Z) {
 8001e7c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8001e80:	eef0 7ae7 	vabs.f32	s15, s15
 8001e84:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8001e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e90:	dd0c      	ble.n	8001eac <main+0x67c>
		            strcat(violatedAxes, "Z ");
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe f9fb 	bl	8000290 <strlen>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4413      	add	r3, r2
 8001ea2:	4a79      	ldr	r2, [pc, #484]	@ (8002088 <main+0x858>)
 8001ea4:	8811      	ldrh	r1, [r2, #0]
 8001ea6:	7892      	ldrb	r2, [r2, #2]
 8001ea8:	8019      	strh	r1, [r3, #0]
 8001eaa:	709a      	strb	r2, [r3, #2]
		        }

		        // Immediately transmit the alert including the accelerometer values and which axes are violated
		        printf("** Alert: %lu Vibration warning! Sensor delay: %lu ms, Response delay: %lu ms, Accel: %f, %f, %f, Violated: %s**\r\n",
		               alertTime, sensorDelay, responseDelay,
		               accel_data[0], accel_data[1], accel_data[2], violatedAxes);
 8001eac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
		        printf("** Alert: %lu Vibration warning! Sensor delay: %lu ms, Response delay: %lu ms, Accel: %f, %f, %f, Violated: %s**\r\n",
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb5a 	bl	8000568 <__aeabi_f2d>
 8001eb4:	4604      	mov	r4, r0
 8001eb6:	460d      	mov	r5, r1
		               accel_data[0], accel_data[1], accel_data[2], violatedAxes);
 8001eb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
		        printf("** Alert: %lu Vibration warning! Sensor delay: %lu ms, Response delay: %lu ms, Accel: %f, %f, %f, Violated: %s**\r\n",
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb54 	bl	8000568 <__aeabi_f2d>
 8001ec0:	4680      	mov	r8, r0
 8001ec2:	4689      	mov	r9, r1
		               accel_data[0], accel_data[1], accel_data[2], violatedAxes);
 8001ec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
		        printf("** Alert: %lu Vibration warning! Sensor delay: %lu ms, Response delay: %lu ms, Accel: %f, %f, %f, Violated: %s**\r\n",
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb4e 	bl	8000568 <__aeabi_f2d>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	1d39      	adds	r1, r7, #4
 8001ed2:	9106      	str	r1, [sp, #24]
 8001ed4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ed8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001edc:	e9cd 4500 	strd	r4, r5, [sp]
 8001ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ee4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001ee8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8001eec:	4867      	ldr	r0, [pc, #412]	@ (800208c <main+0x85c>)
 8001eee:	f007 f9c5 	bl	800927c <iprintf>
		        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001ef2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ef6:	4866      	ldr	r0, [pc, #408]	@ (8002090 <main+0x860>)
 8001ef8:	f002 ff82 	bl	8004e00 <HAL_GPIO_TogglePin>
		        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001efc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f00:	4864      	ldr	r0, [pc, #400]	@ (8002094 <main+0x864>)
 8001f02:	f002 ff7d 	bl	8004e00 <HAL_GPIO_TogglePin>
		        criticalEventFlag = 1;
 8001f06:	4b64      	ldr	r3, [pc, #400]	@ (8002098 <main+0x868>)
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
		    }
		    // --- Read Gyroscope Data ---
		        int16_t gyro_data_i16[3] = {0};
 8001f0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	809a      	strh	r2, [r3, #4]
		        BSP_GYRO_GetXYZ(gyro_data_i16);
 8001f16:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f001 fbaa 	bl	8003674 <BSP_GYRO_GetXYZ>
		        float gyro_data[3];
		        Vector3 gyroReading;
		        for (int i = 0; i < 3; i++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f26:	e02c      	b.n	8001f82 <main+0x752>
		        {
		             float error = getRandomErrorFactor();
 8001f28:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001f2c:	469c      	mov	ip, r3
 8001f2e:	f000 f961 	bl	80021f4 <getRandomErrorFactor.1>
 8001f32:	ed87 0a2a 	vstr	s0, [r7, #168]	@ 0xa8
		             gyro_data[i] = (gyro_data_i16[i] / 100.0f) * (1.0f + error);
 8001f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001f40:	443b      	add	r3, r7
 8001f42:	f933 3cdc 	ldrsh.w	r3, [r3, #-220]
 8001f46:	ee07 3a90 	vmov	s15, r3
 8001f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4e:	eddf 6a53 	vldr	s13, [pc, #332]	@ 800209c <main+0x86c>
 8001f52:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f56:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8001f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8001f70:	443b      	add	r3, r7
 8001f72:	3be8      	subs	r3, #232	@ 0xe8
 8001f74:	edc3 7a00 	vstr	s15, [r3]
		        for (int i = 0; i < 3; i++)
 8001f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	ddce      	ble.n	8001f28 <main+0x6f8>
		        }
		        gyroReading.x = gyro_data[0];
 8001f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f8c:	647b      	str	r3, [r7, #68]	@ 0x44
		        gyroReading.y = gyro_data[1];
 8001f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f90:	64bb      	str	r3, [r7, #72]	@ 0x48
		        gyroReading.z = gyro_data[2];
 8001f92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
		        if (pushFIFO_Vector(&fifoGyro, gyroReading) != 0)
 8001f96:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8001f9a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8001f9e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001fa2:	eeb0 0a66 	vmov.f32	s0, s13
 8001fa6:	eef0 0a47 	vmov.f32	s1, s14
 8001faa:	eeb0 1a67 	vmov.f32	s2, s15
 8001fae:	483c      	ldr	r0, [pc, #240]	@ (80020a0 <main+0x870>)
 8001fb0:	f7ff f826 	bl	8001000 <pushFIFO_Vector>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <main+0x790>
		             printf("Gyroscope FIFO full, discarding reading.\r\n");
 8001fba:	483a      	ldr	r0, [pc, #232]	@ (80020a4 <main+0x874>)
 8001fbc:	f007 f9c6 	bl	800934c <puts>
		}

	    // Poll Pressure sensor at ~25Hz (40ms + random 10-20ms)
	    if (now >= lastPressurePoll)
 8001fc0:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8001fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d330      	bcc.n	800202e <main+0x7fe>
	    {
	         int randPollDelay = getRandomDelay();
 8001fcc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001fd0:	469c      	mov	ip, r3
 8001fd2:	f7ff fc11 	bl	80017f8 <getRandomDelay.0>
 8001fd6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
	         lastPressurePoll = now + 40 + randPollDelay;
 8001fda:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8001fde:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001fe2:	4413      	add	r3, r2
 8001fe4:	3328      	adds	r3, #40	@ 0x28
 8001fe6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	         float pressure = BSP_PSENSOR_ReadPressure();
 8001fea:	f001 fbed 	bl	80037c8 <BSP_PSENSOR_ReadPressure>
 8001fee:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c
	         float error = getRandomErrorFactor();
 8001ff2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001ff6:	469c      	mov	ip, r3
 8001ff8:	f000 f8fc 	bl	80021f4 <getRandomErrorFactor.1>
 8001ffc:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
	         float newPressure = pressure * (1.0f + error);
 8002000:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8002004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002008:	ee77 7a87 	vadd.f32	s15, s15, s14
 800200c:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8002010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002014:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	         if (pushFIFO_Float(&fifoPressure, newPressure) != 0)
 8002018:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 800201c:	4822      	ldr	r0, [pc, #136]	@ (80020a8 <main+0x878>)
 800201e:	f7fe ff7d 	bl	8000f1c <pushFIFO_Float>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <main+0x7fe>
	                 printf("Pressure FIFO full, discarding reading.\r\n");
 8002028:	4820      	ldr	r0, [pc, #128]	@ (80020ac <main+0x87c>)
 800202a:	f007 f98f 	bl	800934c <puts>
//	         printf("Pressure: %f hPa\r\n", newPressure);
	    }

	    // Poll Magnetometer sensor at ~40Hz (25ms + random 10-20ms)
	    if (now >= lastMagnetoPoll)
 800202e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002032:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002036:	429a      	cmp	r2, r3
 8002038:	f0c0 809f 	bcc.w	800217a <main+0x94a>
	    {
	         int randPollDelay = getRandomDelay();
 800203c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002040:	469c      	mov	ip, r3
 8002042:	f7ff fbd9 	bl	80017f8 <getRandomDelay.0>
 8002046:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	         lastMagnetoPoll = now + 25 + randPollDelay;
 800204a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800204e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002052:	4413      	add	r3, r2
 8002054:	3319      	adds	r3, #25
 8002056:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	         int16_t magneto_data[3] = {0};
 800205a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	809a      	strh	r2, [r3, #4]
	         BSP_MAGNETO_GetXYZ(magneto_data);
 8002064:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002068:	4618      	mov	r0, r3
 800206a:	f001 fb75 	bl	8003758 <BSP_MAGNETO_GetXYZ>
	         float newMagneto[3];
	         Vector3 magnetoReading;
	         for (int i = 0; i < 3; i++)
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002074:	e046      	b.n	8002104 <main+0x8d4>
 8002076:	bf00      	nop
 8002078:	20000a18 	.word	0x20000a18
 800207c:	0800b50c 	.word	0x0800b50c
 8002080:	0800b53c 	.word	0x0800b53c
 8002084:	0800b540 	.word	0x0800b540
 8002088:	0800b544 	.word	0x0800b544
 800208c:	0800b548 	.word	0x0800b548
 8002090:	48000400 	.word	0x48000400
 8002094:	48000800 	.word	0x48000800
 8002098:	200009e0 	.word	0x200009e0
 800209c:	42c80000 	.word	0x42c80000
 80020a0:	20000a28 	.word	0x20000a28
 80020a4:	0800b5bc 	.word	0x0800b5bc
 80020a8:	20000a08 	.word	0x20000a08
 80020ac:	0800b5e8 	.word	0x0800b5e8
	             {
	                 float error = getRandomErrorFactor();
 80020b0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80020b4:	469c      	mov	ip, r3
 80020b6:	f000 f89d 	bl	80021f4 <getRandomErrorFactor.1>
 80020ba:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
	                 newMagneto[i] = magneto_data[i] * (1.0f + error);
 80020be:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80020c8:	443b      	add	r3, r7
 80020ca:	f933 3cfc 	ldrsh.w	r3, [r3, #-252]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80020da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020ea:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80020ee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	edc3 7a00 	vstr	s15, [r3]
	         for (int i = 0; i < 3; i++)
 80020fa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80020fe:	3301      	adds	r3, #1
 8002100:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002104:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002108:	2b02      	cmp	r3, #2
 800210a:	ddd1      	ble.n	80020b0 <main+0x880>
	             }
	         magnetoReading.x = newMagneto[0];
 800210c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002110:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800211a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800211e:	601a      	str	r2, [r3, #0]
	         magnetoReading.y = newMagneto[1];
 8002120:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800212e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002132:	605a      	str	r2, [r3, #4]
	         magnetoReading.z = newMagneto[2];
 8002134:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002142:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002146:	609a      	str	r2, [r3, #8]
	         if (pushFIFO_Vector(&fifoMagneto, magnetoReading) != 0)
 8002148:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800214c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002150:	edd3 6a00 	vldr	s13, [r3]
 8002154:	ed93 7a01 	vldr	s14, [r3, #4]
 8002158:	edd3 7a02 	vldr	s15, [r3, #8]
 800215c:	eeb0 0a66 	vmov.f32	s0, s13
 8002160:	eef0 0a47 	vmov.f32	s1, s14
 8002164:	eeb0 1a67 	vmov.f32	s2, s15
 8002168:	481c      	ldr	r0, [pc, #112]	@ (80021dc <main+0x9ac>)
 800216a:	f7fe ff49 	bl	8001000 <pushFIFO_Vector>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <main+0x94a>
	             printf("Magnetometer FIFO full, discarding reading.\r\n");
 8002174:	481a      	ldr	r0, [pc, #104]	@ (80021e0 <main+0x9b0>)
 8002176:	f007 f8e9 	bl	800934c <puts>
//	         printf("Magnetometer: X: %f, Y: %f, Z: %f\r\n", newMagneto[0], newMagneto[1], newMagneto[2]);

	    }

        if (transmissionMode == MODE_FULL_BUFFER)
 800217a:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <main+0x9b4>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <main+0x956>
        {
            transmitFullBuffers();
 8002182:	f7ff f971 	bl	8001468 <transmitFullBuffers>
        }
        if (transmissionMode == MODE_PREDICTIVE)
 8002186:	4b17      	ldr	r3, [pc, #92]	@ (80021e4 <main+0x9b4>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d105      	bne.n	800219a <main+0x96a>
        {
        	transmitpredictiveBuffers(getMostFilledBuffer());
 800218e:	f7ff fa1d 	bl	80015cc <getMostFilledBuffer>
 8002192:	4603      	mov	r3, r0
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff fac3 	bl	8001720 <transmitpredictiveBuffers>
        }

        if (transmissionMode == MODE_RANDOM)
 800219a:	4b12      	ldr	r3, [pc, #72]	@ (80021e4 <main+0x9b4>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <main+0x976>
        {
            transmitRandomBuffer();
 80021a2:	f7ff f865 	bl	8001270 <transmitRandomBuffer>
//            lastTransmissionTime = now;
//        }
	}


	    HAL_Delay(1);
 80021a6:	2001      	movs	r0, #1
 80021a8:	f002 f932 	bl	8004410 <HAL_Delay>

	if (!lowPowerState && ((HAL_GetTick() - lastCriticalAlertTime) > 5000U))
 80021ac:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <main+0x9b8>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f47f ac39 	bne.w	8001a2a <main+0x1fa>
 80021b8:	f002 f91e 	bl	80043f8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <main+0x9bc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	f67f ac2e 	bls.w	8001a2a <main+0x1fa>
    {
         printf("No critical alerts for 5s. Entering low-power state...\r\n");
 80021ce:	4808      	ldr	r0, [pc, #32]	@ (80021f0 <main+0x9c0>)
 80021d0:	f007 f8bc 	bl	800934c <puts>
         lowPowerState = 1;
 80021d4:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <main+0x9b8>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	701a      	strb	r2, [r3, #0]
  {
 80021da:	e426      	b.n	8001a2a <main+0x1fa>
 80021dc:	20000a38 	.word	0x20000a38
 80021e0:	0800b614 	.word	0x0800b614
 80021e4:	20000000 	.word	0x20000000
 80021e8:	200009e1 	.word	0x200009e1
 80021ec:	200009e4 	.word	0x200009e4
 80021f0:	0800b644 	.word	0x0800b644

080021f4 <getRandomErrorFactor.1>:
  {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	f8c7 c004 	str.w	ip, [r7, #4]
      return ((float)rand() / (float)RAND_MAX) * 0.1f - 0.05f;
 80021fe:	f006 ff3d 	bl	800907c <rand>
 8002202:	ee07 0a90 	vmov	s15, r0
 8002206:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220a:	eddf 6a08 	vldr	s13, [pc, #32]	@ 800222c <getRandomErrorFactor.1+0x38>
 800220e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002212:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002230 <getRandomErrorFactor.1+0x3c>
 8002216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800221a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8002234 <getRandomErrorFactor.1+0x40>
 800221e:	ee77 7ac7 	vsub.f32	s15, s15, s14
  }
 8002222:	eeb0 0a67 	vmov.f32	s0, s15
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	4f000000 	.word	0x4f000000
 8002230:	3dcccccd 	.word	0x3dcccccd
 8002234:	3d4ccccd 	.word	0x3d4ccccd

08002238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b096      	sub	sp, #88	@ 0x58
 800223c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	2244      	movs	r2, #68	@ 0x44
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f007 f888 	bl	800935c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800224c:	463b      	mov	r3, r7
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800225a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800225e:	f003 fda3 	bl	8005da8 <HAL_PWREx_ControlVoltageScaling>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002268:	f000 fbfa 	bl	8002a60 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800226c:	f003 fd7e 	bl	8005d6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002270:	4b21      	ldr	r3, [pc, #132]	@ (80022f8 <SystemClock_Config+0xc0>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002276:	4a20      	ldr	r2, [pc, #128]	@ (80022f8 <SystemClock_Config+0xc0>)
 8002278:	f023 0318 	bic.w	r3, r3, #24
 800227c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002280:	2314      	movs	r3, #20
 8002282:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002284:	2301      	movs	r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002288:	2301      	movs	r3, #1
 800228a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002290:	2360      	movs	r3, #96	@ 0x60
 8002292:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002294:	2302      	movs	r3, #2
 8002296:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002298:	2301      	movs	r3, #1
 800229a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800229c:	2301      	movs	r3, #1
 800229e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80022a0:	2328      	movs	r3, #40	@ 0x28
 80022a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80022a4:	2307      	movs	r3, #7
 80022a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022a8:	2302      	movs	r3, #2
 80022aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80022ac:	2302      	movs	r3, #2
 80022ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 fe99 	bl	8005fec <HAL_RCC_OscConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80022c0:	f000 fbce 	bl	8002a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c4:	230f      	movs	r3, #15
 80022c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022c8:	2303      	movs	r3, #3
 80022ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022d8:	463b      	mov	r3, r7
 80022da:	2104      	movs	r1, #4
 80022dc:	4618      	mov	r0, r3
 80022de:	f004 fa61 	bl	80067a4 <HAL_RCC_ClockConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80022e8:	f000 fbba 	bl	8002a60 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80022ec:	f004 ff68 	bl	80071c0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80022f0:	bf00      	nop
 80022f2:	3758      	adds	r7, #88	@ 0x58
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000

080022fc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8002300:	4b18      	ldr	r3, [pc, #96]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 8002302:	4a19      	ldr	r2, [pc, #100]	@ (8002368 <MX_DFSDM1_Init+0x6c>)
 8002304:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8002306:	4b17      	ldr	r3, [pc, #92]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 8002308:	2201      	movs	r2, #1
 800230a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800230c:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 800230e:	2200      	movs	r2, #0
 8002310:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8002312:	4b14      	ldr	r3, [pc, #80]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 8002314:	2202      	movs	r2, #2
 8002316:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8002318:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800231e:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8002324:	4b0f      	ldr	r3, [pc, #60]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 8002326:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800232a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800232c:	4b0d      	ldr	r3, [pc, #52]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 800232e:	2200      	movs	r2, #0
 8002330:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8002332:	4b0c      	ldr	r3, [pc, #48]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 8002334:	2204      	movs	r2, #4
 8002336:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002338:	4b0a      	ldr	r3, [pc, #40]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 800233a:	2200      	movs	r2, #0
 800233c:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800233e:	4b09      	ldr	r3, [pc, #36]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 8002340:	2201      	movs	r2, #1
 8002342:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8002344:	4b07      	ldr	r3, [pc, #28]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 8002346:	2200      	movs	r2, #0
 8002348:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8002350:	4804      	ldr	r0, [pc, #16]	@ (8002364 <MX_DFSDM1_Init+0x68>)
 8002352:	f002 f993 	bl	800467c <HAL_DFSDM_ChannelInit>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800235c:	f000 fb80 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}
 8002364:	200002b8 	.word	0x200002b8
 8002368:	40016020 	.word	0x40016020

0800236c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <MX_I2C2_Init+0x74>)
 8002372:	4a1c      	ldr	r2, [pc, #112]	@ (80023e4 <MX_I2C2_Init+0x78>)
 8002374:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8002376:	4b1a      	ldr	r3, [pc, #104]	@ (80023e0 <MX_I2C2_Init+0x74>)
 8002378:	f640 6214 	movw	r2, #3604	@ 0xe14
 800237c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800237e:	4b18      	ldr	r3, [pc, #96]	@ (80023e0 <MX_I2C2_Init+0x74>)
 8002380:	2200      	movs	r2, #0
 8002382:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002384:	4b16      	ldr	r3, [pc, #88]	@ (80023e0 <MX_I2C2_Init+0x74>)
 8002386:	2201      	movs	r2, #1
 8002388:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <MX_I2C2_Init+0x74>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <MX_I2C2_Init+0x74>)
 8002392:	2200      	movs	r2, #0
 8002394:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002396:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <MX_I2C2_Init+0x74>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800239c:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <MX_I2C2_Init+0x74>)
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023a2:	4b0f      	ldr	r3, [pc, #60]	@ (80023e0 <MX_I2C2_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023a8:	480d      	ldr	r0, [pc, #52]	@ (80023e0 <MX_I2C2_Init+0x74>)
 80023aa:	f002 fd5b 	bl	8004e64 <HAL_I2C_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80023b4:	f000 fb54 	bl	8002a60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80023b8:	2100      	movs	r1, #0
 80023ba:	4809      	ldr	r0, [pc, #36]	@ (80023e0 <MX_I2C2_Init+0x74>)
 80023bc:	f003 fb0c 	bl	80059d8 <HAL_I2CEx_ConfigAnalogFilter>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80023c6:	f000 fb4b 	bl	8002a60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80023ca:	2100      	movs	r1, #0
 80023cc:	4804      	ldr	r0, [pc, #16]	@ (80023e0 <MX_I2C2_Init+0x74>)
 80023ce:	f003 fb4e 	bl	8005a6e <HAL_I2CEx_ConfigDigitalFilter>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80023d8:	f000 fb42 	bl	8002a60 <Error_Handler>
  }
  /* USER  BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200002f0 	.word	0x200002f0
 80023e4:	40005800 	.word	0x40005800

080023e8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80023ec:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <MX_QUADSPI_Init+0x44>)
 80023ee:	4a10      	ldr	r2, [pc, #64]	@ (8002430 <MX_QUADSPI_Init+0x48>)
 80023f0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <MX_QUADSPI_Init+0x44>)
 80023f4:	2202      	movs	r2, #2
 80023f6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <MX_QUADSPI_Init+0x44>)
 80023fa:	2204      	movs	r2, #4
 80023fc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <MX_QUADSPI_Init+0x44>)
 8002400:	2210      	movs	r2, #16
 8002402:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <MX_QUADSPI_Init+0x44>)
 8002406:	2217      	movs	r2, #23
 8002408:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800240a:	4b08      	ldr	r3, [pc, #32]	@ (800242c <MX_QUADSPI_Init+0x44>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <MX_QUADSPI_Init+0x44>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	@ (800242c <MX_QUADSPI_Init+0x44>)
 8002418:	f003 fd2c 	bl	8005e74 <HAL_QSPI_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002422:	f000 fb1d 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000344 	.word	0x20000344
 8002430:	a0001000 	.word	0xa0001000

08002434 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002438:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <MX_SPI3_Init+0x74>)
 800243a:	4a1c      	ldr	r2, [pc, #112]	@ (80024ac <MX_SPI3_Init+0x78>)
 800243c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800243e:	4b1a      	ldr	r3, [pc, #104]	@ (80024a8 <MX_SPI3_Init+0x74>)
 8002440:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002444:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002446:	4b18      	ldr	r3, [pc, #96]	@ (80024a8 <MX_SPI3_Init+0x74>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800244c:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <MX_SPI3_Init+0x74>)
 800244e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002452:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002454:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <MX_SPI3_Init+0x74>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800245a:	4b13      	ldr	r3, [pc, #76]	@ (80024a8 <MX_SPI3_Init+0x74>)
 800245c:	2200      	movs	r2, #0
 800245e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002460:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <MX_SPI3_Init+0x74>)
 8002462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002466:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002468:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <MX_SPI3_Init+0x74>)
 800246a:	2200      	movs	r2, #0
 800246c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800246e:	4b0e      	ldr	r3, [pc, #56]	@ (80024a8 <MX_SPI3_Init+0x74>)
 8002470:	2200      	movs	r2, #0
 8002472:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002474:	4b0c      	ldr	r3, [pc, #48]	@ (80024a8 <MX_SPI3_Init+0x74>)
 8002476:	2200      	movs	r2, #0
 8002478:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <MX_SPI3_Init+0x74>)
 800247c:	2200      	movs	r2, #0
 800247e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002480:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <MX_SPI3_Init+0x74>)
 8002482:	2207      	movs	r2, #7
 8002484:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002486:	4b08      	ldr	r3, [pc, #32]	@ (80024a8 <MX_SPI3_Init+0x74>)
 8002488:	2200      	movs	r2, #0
 800248a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800248c:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <MX_SPI3_Init+0x74>)
 800248e:	2208      	movs	r2, #8
 8002490:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	@ (80024a8 <MX_SPI3_Init+0x74>)
 8002494:	f005 f876 	bl	8007584 <HAL_SPI_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800249e:	f000 fadf 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000388 	.word	0x20000388
 80024ac:	40003c00 	.word	0x40003c00

080024b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <MX_USART1_UART_Init+0x58>)
 80024b6:	4a15      	ldr	r2, [pc, #84]	@ (800250c <MX_USART1_UART_Init+0x5c>)
 80024b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ba:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <MX_USART1_UART_Init+0x58>)
 80024bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024c2:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <MX_USART1_UART_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002508 <MX_USART1_UART_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <MX_USART1_UART_Init+0x58>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002508 <MX_USART1_UART_Init+0x58>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <MX_USART1_UART_Init+0x58>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e0:	4b09      	ldr	r3, [pc, #36]	@ (8002508 <MX_USART1_UART_Init+0x58>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024e6:	4b08      	ldr	r3, [pc, #32]	@ (8002508 <MX_USART1_UART_Init+0x58>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <MX_USART1_UART_Init+0x58>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024f2:	4805      	ldr	r0, [pc, #20]	@ (8002508 <MX_USART1_UART_Init+0x58>)
 80024f4:	f005 f8e9 	bl	80076ca <HAL_UART_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80024fe:	f000 faaf 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	200003ec 	.word	0x200003ec
 800250c:	40013800 	.word	0x40013800

08002510 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002514:	4b14      	ldr	r3, [pc, #80]	@ (8002568 <MX_USART3_UART_Init+0x58>)
 8002516:	4a15      	ldr	r2, [pc, #84]	@ (800256c <MX_USART3_UART_Init+0x5c>)
 8002518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800251a:	4b13      	ldr	r3, [pc, #76]	@ (8002568 <MX_USART3_UART_Init+0x58>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <MX_USART3_UART_Init+0x58>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <MX_USART3_UART_Init+0x58>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <MX_USART3_UART_Init+0x58>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <MX_USART3_UART_Init+0x58>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <MX_USART3_UART_Init+0x58>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b09      	ldr	r3, [pc, #36]	@ (8002568 <MX_USART3_UART_Init+0x58>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002546:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <MX_USART3_UART_Init+0x58>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800254c:	4b06      	ldr	r3, [pc, #24]	@ (8002568 <MX_USART3_UART_Init+0x58>)
 800254e:	2200      	movs	r2, #0
 8002550:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002552:	4805      	ldr	r0, [pc, #20]	@ (8002568 <MX_USART3_UART_Init+0x58>)
 8002554:	f005 f8b9 	bl	80076ca <HAL_UART_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800255e:	f000 fa7f 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002562:	bf00      	nop
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	20000474 	.word	0x20000474
 800256c:	40004800 	.word	0x40004800

08002570 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002574:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002576:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800257a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800257c:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800257e:	2206      	movs	r2, #6
 8002580:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002584:	2202      	movs	r2, #2
 8002586:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002588:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800258a:	2202      	movs	r2, #2
 800258c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002590:	2200      	movs	r2, #0
 8002592:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002596:	2200      	movs	r2, #0
 8002598:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800259a:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800259c:	2200      	movs	r2, #0
 800259e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80025b2:	4805      	ldr	r0, [pc, #20]	@ (80025c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025b4:	f003 faa7 	bl	8005b06 <HAL_PCD_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80025be:	f000 fa4f 	bl	8002a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200004fc 	.word	0x200004fc

080025cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025e2:	4bbd      	ldr	r3, [pc, #756]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 80025e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e6:	4abc      	ldr	r2, [pc, #752]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 80025e8:	f043 0310 	orr.w	r3, r3, #16
 80025ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025ee:	4bba      	ldr	r3, [pc, #744]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 80025f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	4bb7      	ldr	r3, [pc, #732]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 80025fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fe:	4ab6      	ldr	r2, [pc, #728]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002606:	4bb4      	ldr	r3, [pc, #720]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	60fb      	str	r3, [r7, #12]
 8002610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4bb1      	ldr	r3, [pc, #708]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	4ab0      	ldr	r2, [pc, #704]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800261e:	4bae      	ldr	r3, [pc, #696]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800262a:	4bab      	ldr	r3, [pc, #684]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800262e:	4aaa      	ldr	r2, [pc, #680]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002636:	4ba8      	ldr	r3, [pc, #672]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	607b      	str	r3, [r7, #4]
 8002640:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002642:	4ba5      	ldr	r3, [pc, #660]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 8002644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002646:	4aa4      	ldr	r2, [pc, #656]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 8002648:	f043 0308 	orr.w	r3, r3, #8
 800264c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800264e:	4ba2      	ldr	r3, [pc, #648]	@ (80028d8 <MX_GPIO_Init+0x30c>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800265a:	2200      	movs	r2, #0
 800265c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8002660:	489e      	ldr	r0, [pc, #632]	@ (80028dc <MX_GPIO_Init+0x310>)
 8002662:	f002 fbb5 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8002666:	2200      	movs	r2, #0
 8002668:	f248 1104 	movw	r1, #33028	@ 0x8104
 800266c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002670:	f002 fbae 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002674:	2200      	movs	r2, #0
 8002676:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800267a:	4899      	ldr	r0, [pc, #612]	@ (80028e0 <MX_GPIO_Init+0x314>)
 800267c:	f002 fba8 	bl	8004dd0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8002680:	2200      	movs	r2, #0
 8002682:	f241 0181 	movw	r1, #4225	@ 0x1081
 8002686:	4897      	ldr	r0, [pc, #604]	@ (80028e4 <MX_GPIO_Init+0x318>)
 8002688:	f002 fba2 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800268c:	2201      	movs	r2, #1
 800268e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002692:	4894      	ldr	r0, [pc, #592]	@ (80028e4 <MX_GPIO_Init+0x318>)
 8002694:	f002 fb9c 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8002698:	2200      	movs	r2, #0
 800269a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800269e:	4892      	ldr	r0, [pc, #584]	@ (80028e8 <MX_GPIO_Init+0x31c>)
 80026a0:	f002 fb96 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80026a4:	2201      	movs	r2, #1
 80026a6:	2120      	movs	r1, #32
 80026a8:	488d      	ldr	r0, [pc, #564]	@ (80028e0 <MX_GPIO_Init+0x314>)
 80026aa:	f002 fb91 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80026ae:	2201      	movs	r2, #1
 80026b0:	2101      	movs	r1, #1
 80026b2:	488a      	ldr	r0, [pc, #552]	@ (80028dc <MX_GPIO_Init+0x310>)
 80026b4:	f002 fb8c 	bl	8004dd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80026b8:	f240 1315 	movw	r3, #277	@ 0x115
 80026bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026be:	2301      	movs	r3, #1
 80026c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	4882      	ldr	r0, [pc, #520]	@ (80028dc <MX_GPIO_Init+0x310>)
 80026d2:	f002 f8df 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80026d6:	236a      	movs	r3, #106	@ 0x6a
 80026d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	4619      	mov	r1, r3
 80026ea:	487c      	ldr	r0, [pc, #496]	@ (80028dc <MX_GPIO_Init+0x310>)
 80026ec:	f002 f8d2 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80026f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80026fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4619      	mov	r1, r3
 8002706:	4878      	ldr	r0, [pc, #480]	@ (80028e8 <MX_GPIO_Init+0x31c>)
 8002708:	f002 f8c4 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800270c:	233f      	movs	r3, #63	@ 0x3f
 800270e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002710:	230b      	movs	r3, #11
 8002712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4619      	mov	r1, r3
 800271e:	4872      	ldr	r0, [pc, #456]	@ (80028e8 <MX_GPIO_Init+0x31c>)
 8002720:	f002 f8b8 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002724:	2303      	movs	r3, #3
 8002726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002730:	2303      	movs	r3, #3
 8002732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002734:	2308      	movs	r3, #8
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f107 0314 	add.w	r3, r7, #20
 800273c:	4619      	mov	r1, r3
 800273e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002742:	f002 f8a7 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8002746:	f248 1304 	movw	r3, #33028	@ 0x8104
 800274a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800274c:	2301      	movs	r3, #1
 800274e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2300      	movs	r3, #0
 8002756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002762:	f002 f897 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8002766:	2308      	movs	r3, #8
 8002768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002776:	2301      	movs	r3, #1
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002784:	f002 f886 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8002788:	2310      	movs	r3, #16
 800278a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800278c:	230b      	movs	r3, #11
 800278e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8002794:	f107 0314 	add.w	r3, r7, #20
 8002798:	4619      	mov	r1, r3
 800279a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800279e:	f002 f879 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80027a2:	23e0      	movs	r3, #224	@ 0xe0
 80027a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ae:	2303      	movs	r3, #3
 80027b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027b2:	2305      	movs	r3, #5
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027c0:	f002 f868 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80027c4:	2301      	movs	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	4841      	ldr	r0, [pc, #260]	@ (80028e0 <MX_GPIO_Init+0x314>)
 80027da:	f002 f85b 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80027de:	2302      	movs	r3, #2
 80027e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80027e2:	230b      	movs	r3, #11
 80027e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	4619      	mov	r1, r3
 80027f0:	483b      	ldr	r0, [pc, #236]	@ (80028e0 <MX_GPIO_Init+0x314>)
 80027f2:	f002 f84f 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80027f6:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80027fa:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fc:	2301      	movs	r3, #1
 80027fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	2300      	movs	r3, #0
 8002806:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	4619      	mov	r1, r3
 800280e:	4834      	ldr	r0, [pc, #208]	@ (80028e0 <MX_GPIO_Init+0x314>)
 8002810:	f002 f840 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8002814:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8002818:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800281a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800281e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	4619      	mov	r1, r3
 800282a:	482e      	ldr	r0, [pc, #184]	@ (80028e4 <MX_GPIO_Init+0x318>)
 800282c:	f002 f832 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8002830:	f243 0381 	movw	r3, #12417	@ 0x3081
 8002834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002836:	2301      	movs	r3, #1
 8002838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002842:	f107 0314 	add.w	r3, r7, #20
 8002846:	4619      	mov	r1, r3
 8002848:	4826      	ldr	r0, [pc, #152]	@ (80028e4 <MX_GPIO_Init+0x318>)
 800284a:	f002 f823 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800284e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002854:	2301      	movs	r3, #1
 8002856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285c:	2300      	movs	r3, #0
 800285e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	4619      	mov	r1, r3
 8002866:	4820      	ldr	r0, [pc, #128]	@ (80028e8 <MX_GPIO_Init+0x31c>)
 8002868:	f002 f814 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800286c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002872:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002878:	2300      	movs	r3, #0
 800287a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800287c:	f107 0314 	add.w	r3, r7, #20
 8002880:	4619      	mov	r1, r3
 8002882:	4819      	ldr	r0, [pc, #100]	@ (80028e8 <MX_GPIO_Init+0x31c>)
 8002884:	f002 f806 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8002888:	2302      	movs	r3, #2
 800288a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002894:	2303      	movs	r3, #3
 8002896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002898:	2305      	movs	r3, #5
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4619      	mov	r1, r3
 80028a2:	4810      	ldr	r0, [pc, #64]	@ (80028e4 <MX_GPIO_Init+0x318>)
 80028a4:	f001 fff6 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80028a8:	2378      	movs	r3, #120	@ 0x78
 80028aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028b8:	2307      	movs	r3, #7
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	4808      	ldr	r0, [pc, #32]	@ (80028e4 <MX_GPIO_Init+0x318>)
 80028c4:	f001 ffe6 	bl	8004894 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80028c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80028cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ce:	2312      	movs	r3, #18
 80028d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e00a      	b.n	80028ec <MX_GPIO_Init+0x320>
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	48001000 	.word	0x48001000
 80028e0:	48000400 	.word	0x48000400
 80028e4:	48000c00 	.word	0x48000c00
 80028e8:	48000800 	.word	0x48000800
 80028ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ee:	2303      	movs	r3, #3
 80028f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028f2:	2304      	movs	r3, #4
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4619      	mov	r1, r3
 80028fc:	480b      	ldr	r0, [pc, #44]	@ (800292c <MX_GPIO_Init+0x360>)
 80028fe:	f001 ffc9 	bl	8004894 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2100      	movs	r1, #0
 8002906:	2017      	movs	r0, #23
 8002908:	f001 fe81 	bl	800460e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800290c:	2017      	movs	r0, #23
 800290e:	f001 fe9a 	bl	8004646 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	2028      	movs	r0, #40	@ 0x28
 8002918:	f001 fe79 	bl	800460e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800291c:	2028      	movs	r0, #40	@ 0x28
 800291e:	f001 fe92 	bl	8004646 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002922:	bf00      	nop
 8002924:	3728      	adds	r7, #40	@ 0x28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	48000400 	.word	0x48000400

08002930 <HandleCriticalEvent>:

/* USER CODE BEGIN 4 */
/* Critical Event Handling Function */
void HandleCriticalEvent(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
    printf("** Critical event detected! Pausing routine tasks. **\r\n");
 8002936:	4843      	ldr	r0, [pc, #268]	@ (8002a44 <HandleCriticalEvent+0x114>)
 8002938:	f006 fd08 	bl	800934c <puts>

      for (int i = 0; i < 5; i++)
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e019      	b.n	8002976 <HandleCriticalEvent+0x46>
      {
          HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8002942:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002946:	4840      	ldr	r0, [pc, #256]	@ (8002a48 <HandleCriticalEvent+0x118>)
 8002948:	f002 fa5a 	bl	8004e00 <HAL_GPIO_TogglePin>
          HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 800294c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002950:	483e      	ldr	r0, [pc, #248]	@ (8002a4c <HandleCriticalEvent+0x11c>)
 8002952:	f002 fa55 	bl	8004e00 <HAL_GPIO_TogglePin>
          HAL_Delay(100);  // short delay
 8002956:	2064      	movs	r0, #100	@ 0x64
 8002958:	f001 fd5a 	bl	8004410 <HAL_Delay>
          HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800295c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002960:	4839      	ldr	r0, [pc, #228]	@ (8002a48 <HandleCriticalEvent+0x118>)
 8002962:	f002 fa4d 	bl	8004e00 <HAL_GPIO_TogglePin>
          HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8002966:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800296a:	4838      	ldr	r0, [pc, #224]	@ (8002a4c <HandleCriticalEvent+0x11c>)
 800296c:	f002 fa48 	bl	8004e00 <HAL_GPIO_TogglePin>
      for (int i = 0; i < 5; i++)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3301      	adds	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b04      	cmp	r3, #4
 800297a:	dde2      	ble.n	8002942 <HandleCriticalEvent+0x12>
//          HAL_Delay(100);
      }
      HAL_Delay(1000);
 800297c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002980:	f001 fd46 	bl	8004410 <HAL_Delay>
      // Re-read accelerometer data to check vibration levels
      int16_t accel_data_i16[3] = {0};
 8002984:	463b      	mov	r3, r7
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	809a      	strh	r2, [r3, #4]
      BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 800298c:	463b      	mov	r3, r7
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fe14 	bl	80035bc <BSP_ACCELERO_AccGetXYZ>
      float accel_x = (float)accel_data_i16[0] / 100.0f;
 8002994:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002998:	ee07 3a90 	vmov	s15, r3
 800299c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029a0:	eddf 6a2b 	vldr	s13, [pc, #172]	@ 8002a50 <HandleCriticalEvent+0x120>
 80029a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029a8:	edc7 7a04 	vstr	s15, [r7, #16]
      float accel_y = (float)accel_data_i16[1] / 100.0f;
 80029ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029b0:	ee07 3a90 	vmov	s15, r3
 80029b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002a50 <HandleCriticalEvent+0x120>
 80029bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029c0:	edc7 7a03 	vstr	s15, [r7, #12]
      float accel_z = (float)accel_data_i16[2] / 100.0f;
 80029c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029c8:	ee07 3a90 	vmov	s15, r3
 80029cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d0:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8002a50 <HandleCriticalEvent+0x120>
 80029d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d8:	edc7 7a02 	vstr	s15, [r7, #8]

      // Check if all axes are within safe thresholds
      if ((fabs(accel_x) <= VIBRATION_THRESHOLD_X) &&
 80029dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80029e0:	eef0 7ae7 	vabs.f32	s15, s15
 80029e4:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80029e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f0:	d81c      	bhi.n	8002a2c <HandleCriticalEvent+0xfc>
          (fabs(accel_y) <= VIBRATION_THRESHOLD_Y) &&
 80029f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80029f6:	eef0 7ae7 	vabs.f32	s15, s15
      if ((fabs(accel_x) <= VIBRATION_THRESHOLD_X) &&
 80029fa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80029fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a06:	d811      	bhi.n	8002a2c <HandleCriticalEvent+0xfc>
          (fabs(accel_z) <= VIBRATION_THRESHOLD_Z))
 8002a08:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a0c:	eef0 7ae7 	vabs.f32	s15, s15
          (fabs(accel_y) <= VIBRATION_THRESHOLD_Y) &&
 8002a10:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8002a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1c:	d806      	bhi.n	8002a2c <HandleCriticalEvent+0xfc>
      {
           printf("** Vibration has returned to safe levels. Resuming normal operations. **\r\n");
 8002a1e:	480d      	ldr	r0, [pc, #52]	@ (8002a54 <HandleCriticalEvent+0x124>)
 8002a20:	f006 fc94 	bl	800934c <puts>
           criticalEventFlag = 0;  // Clear the flag as conditions are now safe
 8002a24:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <HandleCriticalEvent+0x128>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e006      	b.n	8002a3a <HandleCriticalEvent+0x10a>
      }
      else
      {
           printf("** Vibration still above safe thresholds. Maintaining critical state. **\r\n");
 8002a2c:	480b      	ldr	r0, [pc, #44]	@ (8002a5c <HandleCriticalEvent+0x12c>)
 8002a2e:	f006 fc8d 	bl	800934c <puts>
           criticalEventFlag = 1;  // Keep the flag set
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <HandleCriticalEvent+0x128>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
      }
}
 8002a38:	bf00      	nop
 8002a3a:	bf00      	nop
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	0800b67c 	.word	0x0800b67c
 8002a48:	48000400 	.word	0x48000400
 8002a4c:	48000800 	.word	0x48000800
 8002a50:	42c80000 	.word	0x42c80000
 8002a54:	0800b6b4 	.word	0x0800b6b4
 8002a58:	200009e0 	.word	0x200009e0
 8002a5c:	0800b700 	.word	0x0800b700

08002a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a64:	b672      	cpsid	i
}
 8002a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <Error_Handler+0x8>

08002a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a72:	4b0f      	ldr	r3, [pc, #60]	@ (8002ab0 <HAL_MspInit+0x44>)
 8002a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a76:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab0 <HAL_MspInit+0x44>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <HAL_MspInit+0x44>)
 8002a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_MspInit+0x44>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8e:	4a08      	ldr	r2, [pc, #32]	@ (8002ab0 <HAL_MspInit+0x44>)
 8002a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a96:	4b06      	ldr	r3, [pc, #24]	@ (8002ab0 <HAL_MspInit+0x44>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b0ac      	sub	sp, #176	@ 0xb0
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	2288      	movs	r2, #136	@ 0x88
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f006 fc41 	bl	800935c <memset>
  if(DFSDM1_Init == 0)
 8002ada:	4b25      	ldr	r3, [pc, #148]	@ (8002b70 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d142      	bne.n	8002b68 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8002ae2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ae6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 f87a 	bl	8006bec <HAL_RCCEx_PeriphCLKConfig>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002afe:	f7ff ffaf 	bl	8002a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8002b02:	4b1c      	ldr	r3, [pc, #112]	@ (8002b74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b06:	4a1b      	ldr	r2, [pc, #108]	@ (8002b74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002b08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b0e:	4b19      	ldr	r3, [pc, #100]	@ (8002b74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b1a:	4b16      	ldr	r3, [pc, #88]	@ (8002b74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1e:	4a15      	ldr	r2, [pc, #84]	@ (8002b74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002b20:	f043 0310 	orr.w	r3, r3, #16
 8002b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b26:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8002b32:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8002b36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002b4c:	2306      	movs	r3, #6
 8002b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b52:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002b56:	4619      	mov	r1, r3
 8002b58:	4807      	ldr	r0, [pc, #28]	@ (8002b78 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8002b5a:	f001 fe9b 	bl	8004894 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8002b5e:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3301      	adds	r3, #1
 8002b64:	4a02      	ldr	r2, [pc, #8]	@ (8002b70 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002b66:	6013      	str	r3, [r2, #0]
  }

}
 8002b68:	bf00      	nop
 8002b6a:	37b0      	adds	r7, #176	@ 0xb0
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	200013f8 	.word	0x200013f8
 8002b74:	40021000 	.word	0x40021000
 8002b78:	48001000 	.word	0x48001000

08002b7c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b0ac      	sub	sp, #176	@ 0xb0
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2288      	movs	r2, #136	@ 0x88
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f006 fbdd 	bl	800935c <memset>
  if(hi2c->Instance==I2C2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a21      	ldr	r2, [pc, #132]	@ (8002c2c <HAL_I2C_MspInit+0xb0>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d13b      	bne.n	8002c24 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 f817 	bl	8006bec <HAL_RCCEx_PeriphCLKConfig>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002bc4:	f7ff ff4c 	bl	8002a60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bc8:	4b19      	ldr	r3, [pc, #100]	@ (8002c30 <HAL_I2C_MspInit+0xb4>)
 8002bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bcc:	4a18      	ldr	r2, [pc, #96]	@ (8002c30 <HAL_I2C_MspInit+0xb4>)
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bd4:	4b16      	ldr	r3, [pc, #88]	@ (8002c30 <HAL_I2C_MspInit+0xb4>)
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	613b      	str	r3, [r7, #16]
 8002bde:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002be0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002be4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be8:	2312      	movs	r3, #18
 8002bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c04:	4619      	mov	r1, r3
 8002c06:	480b      	ldr	r0, [pc, #44]	@ (8002c34 <HAL_I2C_MspInit+0xb8>)
 8002c08:	f001 fe44 	bl	8004894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c0c:	4b08      	ldr	r3, [pc, #32]	@ (8002c30 <HAL_I2C_MspInit+0xb4>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c10:	4a07      	ldr	r2, [pc, #28]	@ (8002c30 <HAL_I2C_MspInit+0xb4>)
 8002c12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c18:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <HAL_I2C_MspInit+0xb4>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002c24:	bf00      	nop
 8002c26:	37b0      	adds	r7, #176	@ 0xb0
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40005800 	.word	0x40005800
 8002c30:	40021000 	.word	0x40021000
 8002c34:	48000400 	.word	0x48000400

08002c38 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0b      	ldr	r2, [pc, #44]	@ (8002c74 <HAL_I2C_MspDeInit+0x3c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d10f      	bne.n	8002c6a <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c78 <HAL_I2C_MspDeInit+0x40>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <HAL_I2C_MspDeInit+0x40>)
 8002c50:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002c54:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002c56:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c5a:	4808      	ldr	r0, [pc, #32]	@ (8002c7c <HAL_I2C_MspDeInit+0x44>)
 8002c5c:	f001 ffc4 	bl	8004be8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8002c60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c64:	4805      	ldr	r0, [pc, #20]	@ (8002c7c <HAL_I2C_MspDeInit+0x44>)
 8002c66:	f001 ffbf 	bl	8004be8 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002c6a:	bf00      	nop
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40005800 	.word	0x40005800
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	48000400 	.word	0x48000400

08002c80 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	@ 0x28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a17      	ldr	r2, [pc, #92]	@ (8002cfc <HAL_QSPI_MspInit+0x7c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d128      	bne.n	8002cf4 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002ca2:	4b17      	ldr	r3, [pc, #92]	@ (8002d00 <HAL_QSPI_MspInit+0x80>)
 8002ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca6:	4a16      	ldr	r2, [pc, #88]	@ (8002d00 <HAL_QSPI_MspInit+0x80>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cac:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cae:	4b14      	ldr	r3, [pc, #80]	@ (8002d00 <HAL_QSPI_MspInit+0x80>)
 8002cb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cba:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <HAL_QSPI_MspInit+0x80>)
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cbe:	4a10      	ldr	r2, [pc, #64]	@ (8002d00 <HAL_QSPI_MspInit+0x80>)
 8002cc0:	f043 0310 	orr.w	r3, r3, #16
 8002cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d00 <HAL_QSPI_MspInit+0x80>)
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cca:	f003 0310 	and.w	r3, r3, #16
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8002cd2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8002cd6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002ce4:	230a      	movs	r3, #10
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	4619      	mov	r1, r3
 8002cee:	4805      	ldr	r0, [pc, #20]	@ (8002d04 <HAL_QSPI_MspInit+0x84>)
 8002cf0:	f001 fdd0 	bl	8004894 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8002cf4:	bf00      	nop
 8002cf6:	3728      	adds	r7, #40	@ 0x28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	a0001000 	.word	0xa0001000
 8002d00:	40021000 	.word	0x40021000
 8002d04:	48001000 	.word	0x48001000

08002d08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 0314 	add.w	r3, r7, #20
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a17      	ldr	r2, [pc, #92]	@ (8002d84 <HAL_SPI_MspInit+0x7c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d128      	bne.n	8002d7c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d2a:	4b17      	ldr	r3, [pc, #92]	@ (8002d88 <HAL_SPI_MspInit+0x80>)
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	4a16      	ldr	r2, [pc, #88]	@ (8002d88 <HAL_SPI_MspInit+0x80>)
 8002d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d36:	4b14      	ldr	r3, [pc, #80]	@ (8002d88 <HAL_SPI_MspInit+0x80>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d42:	4b11      	ldr	r3, [pc, #68]	@ (8002d88 <HAL_SPI_MspInit+0x80>)
 8002d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d46:	4a10      	ldr	r2, [pc, #64]	@ (8002d88 <HAL_SPI_MspInit+0x80>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d88 <HAL_SPI_MspInit+0x80>)
 8002d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002d5a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002d6c:	2306      	movs	r3, #6
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	4805      	ldr	r0, [pc, #20]	@ (8002d8c <HAL_SPI_MspInit+0x84>)
 8002d78:	f001 fd8c 	bl	8004894 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002d7c:	bf00      	nop
 8002d7e:	3728      	adds	r7, #40	@ 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40003c00 	.word	0x40003c00
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	48000800 	.word	0x48000800

08002d90 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b0ae      	sub	sp, #184	@ 0xb8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da8:	f107 031c 	add.w	r3, r7, #28
 8002dac:	2288      	movs	r2, #136	@ 0x88
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f006 fad3 	bl	800935c <memset>
  if(huart->Instance==USART1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a42      	ldr	r2, [pc, #264]	@ (8002ec4 <HAL_UART_MspInit+0x134>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d13b      	bne.n	8002e38 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dc8:	f107 031c 	add.w	r3, r7, #28
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f003 ff0d 	bl	8006bec <HAL_RCCEx_PeriphCLKConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002dd8:	f7ff fe42 	bl	8002a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de0:	4a39      	ldr	r2, [pc, #228]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002de2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002de6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002de8:	4b37      	ldr	r3, [pc, #220]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df4:	4b34      	ldr	r3, [pc, #208]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df8:	4a33      	ldr	r2, [pc, #204]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002dfa:	f043 0302 	orr.w	r3, r3, #2
 8002dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e00:	4b31      	ldr	r3, [pc, #196]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002e0c:	23c0      	movs	r3, #192	@ 0xc0
 8002e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e12:	2302      	movs	r3, #2
 8002e14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e24:	2307      	movs	r3, #7
 8002e26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4826      	ldr	r0, [pc, #152]	@ (8002ecc <HAL_UART_MspInit+0x13c>)
 8002e32:	f001 fd2f 	bl	8004894 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e36:	e040      	b.n	8002eba <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a24      	ldr	r2, [pc, #144]	@ (8002ed0 <HAL_UART_MspInit+0x140>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d13b      	bne.n	8002eba <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e42:	2304      	movs	r3, #4
 8002e44:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e46:	2300      	movs	r3, #0
 8002e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e4a:	f107 031c 	add.w	r3, r7, #28
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f003 fecc 	bl	8006bec <HAL_RCCEx_PeriphCLKConfig>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_UART_MspInit+0xce>
      Error_Handler();
 8002e5a:	f7ff fe01 	bl	8002a60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e62:	4a19      	ldr	r2, [pc, #100]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e76:	4b14      	ldr	r3, [pc, #80]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7a:	4a13      	ldr	r2, [pc, #76]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002e7c:	f043 0308 	orr.w	r3, r3, #8
 8002e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e82:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <HAL_UART_MspInit+0x138>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002e8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e96:	2302      	movs	r3, #2
 8002e98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ea8:	2307      	movs	r3, #7
 8002eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4807      	ldr	r0, [pc, #28]	@ (8002ed4 <HAL_UART_MspInit+0x144>)
 8002eb6:	f001 fced 	bl	8004894 <HAL_GPIO_Init>
}
 8002eba:	bf00      	nop
 8002ebc:	37b8      	adds	r7, #184	@ 0xb8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40013800 	.word	0x40013800
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	48000400 	.word	0x48000400
 8002ed0:	40004800 	.word	0x40004800
 8002ed4:	48000c00 	.word	0x48000c00

08002ed8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b0ac      	sub	sp, #176	@ 0xb0
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2288      	movs	r2, #136	@ 0x88
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f006 fa2f 	bl	800935c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f06:	d17c      	bne.n	8003002 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002f08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f0c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002f0e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002f12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002f16:	2301      	movs	r3, #1
 8002f18:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002f1e:	2318      	movs	r3, #24
 8002f20:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002f22:	2307      	movs	r3, #7
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002f26:	2302      	movs	r3, #2
 8002f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002f2e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002f32:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f34:	f107 0314 	add.w	r3, r7, #20
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f003 fe57 	bl	8006bec <HAL_RCCEx_PeriphCLKConfig>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8002f44:	f7ff fd8c 	bl	8002a60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f48:	4b30      	ldr	r3, [pc, #192]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4c:	4a2f      	ldr	r2, [pc, #188]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f54:	4b2d      	ldr	r3, [pc, #180]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8002f60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f78:	4619      	mov	r1, r3
 8002f7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f7e:	f001 fc89 	bl	8004894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002f82:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f96:	2303      	movs	r3, #3
 8002f98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f9c:	230a      	movs	r3, #10
 8002f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fac:	f001 fc72 	bl	8004894 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002fb0:	4b16      	ldr	r3, [pc, #88]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb4:	4a15      	ldr	r2, [pc, #84]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002fb6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fbc:	4b13      	ldr	r3, [pc, #76]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc8:	4b10      	ldr	r3, [pc, #64]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d114      	bne.n	8002ffe <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002fec:	f002 ff32 	bl	8005e54 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff0:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff4:	4a05      	ldr	r2, [pc, #20]	@ (800300c <HAL_PCD_MspInit+0x134>)
 8002ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002ffc:	e001      	b.n	8003002 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002ffe:	f002 ff29 	bl	8005e54 <HAL_PWREx_EnableVddUSB>
}
 8003002:	bf00      	nop
 8003004:	37b0      	adds	r7, #176	@ 0xb0
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000

08003010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <NMI_Handler+0x4>

08003018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <HardFault_Handler+0x4>

08003020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <MemManage_Handler+0x4>

08003028 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <BusFault_Handler+0x4>

08003030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003034:	bf00      	nop
 8003036:	e7fd      	b.n	8003034 <UsageFault_Handler+0x4>

08003038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003066:	f001 f9b3 	bl	80043d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800306a:	bf00      	nop
 800306c:	bd80      	pop	{r7, pc}

0800306e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003072:	2020      	movs	r0, #32
 8003074:	f001 fede 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003078:	2040      	movs	r0, #64	@ 0x40
 800307a:	f001 fedb 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800307e:	2080      	movs	r0, #128	@ 0x80
 8003080:	f001 fed8 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003084:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003088:	f001 fed4 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	bd80      	pop	{r7, pc}

08003090 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8003094:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003098:	f001 fecc 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800309c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80030a0:	f001 fec8 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80030a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80030a8:	f001 fec4 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80030ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80030b0:	f001 fec0 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80030b4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80030b8:	f001 febc 	bl	8004e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}

080030c0 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <_getpid>:

int _getpid(void)
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
  return 1;
 80030d2:	2301      	movs	r3, #1
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <_kill>:

int _kill(int pid, int sig)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
 80030e6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030e8:	f006 f940 	bl	800936c <__errno>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2216      	movs	r2, #22
 80030f0:	601a      	str	r2, [r3, #0]
  return -1;
 80030f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <_exit>:

void _exit (int status)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003106:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff ffe7 	bl	80030de <_kill>
  while (1) {}    /* Make sure we hang here */
 8003110:	bf00      	nop
 8003112:	e7fd      	b.n	8003110 <_exit+0x12>

08003114 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003120:	2300      	movs	r3, #0
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	e00a      	b.n	800313c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003126:	f3af 8000 	nop.w
 800312a:	4601      	mov	r1, r0
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	60ba      	str	r2, [r7, #8]
 8003132:	b2ca      	uxtb	r2, r1
 8003134:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	3301      	adds	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	429a      	cmp	r2, r3
 8003142:	dbf0      	blt.n	8003126 <_read+0x12>
  }

  return len;
 8003144:	687b      	ldr	r3, [r7, #4]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <_close>:
  }
  return len;
}

int _close(int file)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003176:	605a      	str	r2, [r3, #4]
  return 0;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <_isatty>:

int _isatty(int file)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800318e:	2301      	movs	r3, #1
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031c0:	4a14      	ldr	r2, [pc, #80]	@ (8003214 <_sbrk+0x5c>)
 80031c2:	4b15      	ldr	r3, [pc, #84]	@ (8003218 <_sbrk+0x60>)
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <_sbrk+0x64>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d102      	bne.n	80031da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <_sbrk+0x64>)
 80031d6:	4a12      	ldr	r2, [pc, #72]	@ (8003220 <_sbrk+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d207      	bcs.n	80031f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031e8:	f006 f8c0 	bl	800936c <__errno>
 80031ec:	4603      	mov	r3, r0
 80031ee:	220c      	movs	r2, #12
 80031f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031f6:	e009      	b.n	800320c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031f8:	4b08      	ldr	r3, [pc, #32]	@ (800321c <_sbrk+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031fe:	4b07      	ldr	r3, [pc, #28]	@ (800321c <_sbrk+0x64>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	4a05      	ldr	r2, [pc, #20]	@ (800321c <_sbrk+0x64>)
 8003208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800320a:	68fb      	ldr	r3, [r7, #12]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20018000 	.word	0x20018000
 8003218:	00000400 	.word	0x00000400
 800321c:	200013fc 	.word	0x200013fc
 8003220:	200015e0 	.word	0x200015e0

08003224 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003228:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <SystemInit+0x20>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322e:	4a05      	ldr	r2, [pc, #20]	@ (8003244 <SystemInit+0x20>)
 8003230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003280 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800324c:	f7ff ffea 	bl	8003224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003250:	480c      	ldr	r0, [pc, #48]	@ (8003284 <LoopForever+0x6>)
  ldr r1, =_edata
 8003252:	490d      	ldr	r1, [pc, #52]	@ (8003288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003254:	4a0d      	ldr	r2, [pc, #52]	@ (800328c <LoopForever+0xe>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003258:	e002      	b.n	8003260 <LoopCopyDataInit>

0800325a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800325a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800325c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325e:	3304      	adds	r3, #4

08003260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003264:	d3f9      	bcc.n	800325a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003266:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003268:	4c0a      	ldr	r4, [pc, #40]	@ (8003294 <LoopForever+0x16>)
  movs r3, #0
 800326a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800326c:	e001      	b.n	8003272 <LoopFillZerobss>

0800326e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003270:	3204      	adds	r2, #4

08003272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003274:	d3fb      	bcc.n	800326e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003276:	f006 f87f 	bl	8009378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800327a:	f7fe fad9 	bl	8001830 <main>

0800327e <LoopForever>:

LoopForever:
    b LoopForever
 800327e:	e7fe      	b.n	800327e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003280:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003288:	2000029c 	.word	0x2000029c
  ldr r2, =_sidata
 800328c:	0800bb74 	.word	0x0800bb74
  ldr r2, =_sbss
 8003290:	2000029c 	.word	0x2000029c
  ldr r4, =_ebss
 8003294:	200015e0 	.word	0x200015e0

08003298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003298:	e7fe      	b.n	8003298 <ADC1_2_IRQHandler>
	...

0800329c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	@ 0x28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80032a4:	4b27      	ldr	r3, [pc, #156]	@ (8003344 <I2Cx_MspInit+0xa8>)
 80032a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a8:	4a26      	ldr	r2, [pc, #152]	@ (8003344 <I2Cx_MspInit+0xa8>)
 80032aa:	f043 0302 	orr.w	r3, r3, #2
 80032ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032b0:	4b24      	ldr	r3, [pc, #144]	@ (8003344 <I2Cx_MspInit+0xa8>)
 80032b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80032bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80032c0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80032c2:	2312      	movs	r3, #18
 80032c4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80032c6:	2301      	movs	r3, #1
 80032c8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ca:	2303      	movs	r3, #3
 80032cc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80032ce:	2304      	movs	r3, #4
 80032d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4619      	mov	r1, r3
 80032d8:	481b      	ldr	r0, [pc, #108]	@ (8003348 <I2Cx_MspInit+0xac>)
 80032da:	f001 fadb 	bl	8004894 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	4619      	mov	r1, r3
 80032e4:	4818      	ldr	r0, [pc, #96]	@ (8003348 <I2Cx_MspInit+0xac>)
 80032e6:	f001 fad5 	bl	8004894 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80032ea:	4b16      	ldr	r3, [pc, #88]	@ (8003344 <I2Cx_MspInit+0xa8>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ee:	4a15      	ldr	r2, [pc, #84]	@ (8003344 <I2Cx_MspInit+0xa8>)
 80032f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80032f6:	4b13      	ldr	r3, [pc, #76]	@ (8003344 <I2Cx_MspInit+0xa8>)
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8003302:	4b10      	ldr	r3, [pc, #64]	@ (8003344 <I2Cx_MspInit+0xa8>)
 8003304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003306:	4a0f      	ldr	r2, [pc, #60]	@ (8003344 <I2Cx_MspInit+0xa8>)
 8003308:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800330c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800330e:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <I2Cx_MspInit+0xa8>)
 8003310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003312:	4a0c      	ldr	r2, [pc, #48]	@ (8003344 <I2Cx_MspInit+0xa8>)
 8003314:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003318:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	210f      	movs	r1, #15
 800331e:	2021      	movs	r0, #33	@ 0x21
 8003320:	f001 f975 	bl	800460e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003324:	2021      	movs	r0, #33	@ 0x21
 8003326:	f001 f98e 	bl	8004646 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800332a:	2200      	movs	r2, #0
 800332c:	210f      	movs	r1, #15
 800332e:	2022      	movs	r0, #34	@ 0x22
 8003330:	f001 f96d 	bl	800460e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8003334:	2022      	movs	r0, #34	@ 0x22
 8003336:	f001 f986 	bl	8004646 <HAL_NVIC_EnableIRQ>
}
 800333a:	bf00      	nop
 800333c:	3728      	adds	r7, #40	@ 0x28
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000
 8003348:	48000400 	.word	0x48000400

0800334c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a12      	ldr	r2, [pc, #72]	@ (80033a0 <I2Cx_Init+0x54>)
 8003358:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a11      	ldr	r2, [pc, #68]	@ (80033a4 <I2Cx_Init+0x58>)
 800335e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff89 	bl	800329c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f001 fd6a 	bl	8004e64 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8003390:	2100      	movs	r1, #0
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f002 fb20 	bl	80059d8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40005800 	.word	0x40005800
 80033a4:	00702681 	.word	0x00702681

080033a8 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	@ 0x28
 80033ac:	af04      	add	r7, sp, #16
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	4608      	mov	r0, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	461a      	mov	r2, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	72fb      	strb	r3, [r7, #11]
 80033ba:	460b      	mov	r3, r1
 80033bc:	813b      	strh	r3, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80033c2:	2300      	movs	r3, #0
 80033c4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80033c6:	7afb      	ldrb	r3, [r7, #11]
 80033c8:	b299      	uxth	r1, r3
 80033ca:	88f8      	ldrh	r0, [r7, #6]
 80033cc:	893a      	ldrh	r2, [r7, #8]
 80033ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033d2:	9302      	str	r3, [sp, #8]
 80033d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4603      	mov	r3, r0
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f001 ff1e 	bl	8005220 <HAL_I2C_Mem_Read>
 80033e4:	4603      	mov	r3, r0
 80033e6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d004      	beq.n	80033f8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	4619      	mov	r1, r3
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f832 	bl	800345c <I2Cx_Error>
  }
  return status;
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08a      	sub	sp, #40	@ 0x28
 8003406:	af04      	add	r7, sp, #16
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	4608      	mov	r0, r1
 800340c:	4611      	mov	r1, r2
 800340e:	461a      	mov	r2, r3
 8003410:	4603      	mov	r3, r0
 8003412:	72fb      	strb	r3, [r7, #11]
 8003414:	460b      	mov	r3, r1
 8003416:	813b      	strh	r3, [r7, #8]
 8003418:	4613      	mov	r3, r2
 800341a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003420:	7afb      	ldrb	r3, [r7, #11]
 8003422:	b299      	uxth	r1, r3
 8003424:	88f8      	ldrh	r0, [r7, #6]
 8003426:	893a      	ldrh	r2, [r7, #8]
 8003428:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800342c:	9302      	str	r3, [sp, #8]
 800342e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003430:	9301      	str	r3, [sp, #4]
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	9300      	str	r3, [sp, #0]
 8003436:	4603      	mov	r3, r0
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f001 fddd 	bl	8004ff8 <HAL_I2C_Mem_Write>
 800343e:	4603      	mov	r3, r0
 8003440:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003442:	7dfb      	ldrb	r3, [r7, #23]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	4619      	mov	r1, r3
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f805 	bl	800345c <I2Cx_Error>
  }
  return status;
 8003452:	7dfb      	ldrb	r3, [r7, #23]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f001 fd96 	bl	8004f9a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ff6c 	bl	800334c <I2Cx_Init>
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8003480:	4802      	ldr	r0, [pc, #8]	@ (800348c <SENSOR_IO_Init+0x10>)
 8003482:	f7ff ff63 	bl	800334c <I2Cx_Init>
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20001400 	.word	0x20001400

08003490 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af02      	add	r7, sp, #8
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
 800349a:	460b      	mov	r3, r1
 800349c:	71bb      	strb	r3, [r7, #6]
 800349e:	4613      	mov	r3, r2
 80034a0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80034a2:	79bb      	ldrb	r3, [r7, #6]
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	79f9      	ldrb	r1, [r7, #7]
 80034a8:	2301      	movs	r3, #1
 80034aa:	9301      	str	r3, [sp, #4]
 80034ac:	1d7b      	adds	r3, r7, #5
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	2301      	movs	r3, #1
 80034b2:	4803      	ldr	r0, [pc, #12]	@ (80034c0 <SENSOR_IO_Write+0x30>)
 80034b4:	f7ff ffa5 	bl	8003402 <I2Cx_WriteMultiple>
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20001400 	.word	0x20001400

080034c4 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af02      	add	r7, sp, #8
 80034ca:	4603      	mov	r3, r0
 80034cc:	460a      	mov	r2, r1
 80034ce:	71fb      	strb	r3, [r7, #7]
 80034d0:	4613      	mov	r3, r2
 80034d2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80034d8:	79bb      	ldrb	r3, [r7, #6]
 80034da:	b29a      	uxth	r2, r3
 80034dc:	79f9      	ldrb	r1, [r7, #7]
 80034de:	2301      	movs	r3, #1
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	f107 030f 	add.w	r3, r7, #15
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2301      	movs	r3, #1
 80034ea:	4804      	ldr	r0, [pc, #16]	@ (80034fc <SENSOR_IO_Read+0x38>)
 80034ec:	f7ff ff5c 	bl	80033a8 <I2Cx_ReadMultiple>

  return read_value;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20001400 	.word	0x20001400

08003500 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af02      	add	r7, sp, #8
 8003506:	603a      	str	r2, [r7, #0]
 8003508:	461a      	mov	r2, r3
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
 800350e:	460b      	mov	r3, r1
 8003510:	71bb      	strb	r3, [r7, #6]
 8003512:	4613      	mov	r3, r2
 8003514:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8003516:	79bb      	ldrb	r3, [r7, #6]
 8003518:	b29a      	uxth	r2, r3
 800351a:	79f9      	ldrb	r1, [r7, #7]
 800351c:	88bb      	ldrh	r3, [r7, #4]
 800351e:	9301      	str	r3, [sp, #4]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2301      	movs	r3, #1
 8003526:	4804      	ldr	r0, [pc, #16]	@ (8003538 <SENSOR_IO_ReadMultiple+0x38>)
 8003528:	f7ff ff3e 	bl	80033a8 <I2Cx_ReadMultiple>
 800352c:	4603      	mov	r3, r0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20001400 	.word	0x20001400

0800353c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8003546:	2300      	movs	r3, #0
 8003548:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800354a:	4b1a      	ldr	r3, [pc, #104]	@ (80035b4 <BSP_ACCELERO_Init+0x78>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	4798      	blx	r3
 8003550:	4603      	mov	r3, r0
 8003552:	2b6a      	cmp	r3, #106	@ 0x6a
 8003554:	d002      	beq.n	800355c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
 800355a:	e025      	b.n	80035a8 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800355c:	4b16      	ldr	r3, [pc, #88]	@ (80035b8 <BSP_ACCELERO_Init+0x7c>)
 800355e:	4a15      	ldr	r2, [pc, #84]	@ (80035b4 <BSP_ACCELERO_Init+0x78>)
 8003560:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8003562:	2330      	movs	r3, #48	@ 0x30
 8003564:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800356a:	2300      	movs	r3, #0
 800356c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800356e:	2340      	movs	r3, #64	@ 0x40
 8003570:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800357a:	797a      	ldrb	r2, [r7, #5]
 800357c:	7abb      	ldrb	r3, [r7, #10]
 800357e:	4313      	orrs	r3, r2
 8003580:	b2db      	uxtb	r3, r3
 8003582:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003584:	7a3b      	ldrb	r3, [r7, #8]
 8003586:	f043 0304 	orr.w	r3, r3, #4
 800358a:	b2db      	uxtb	r3, r3
 800358c:	b21b      	sxth	r3, r3
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	b21a      	sxth	r2, r3
 8003592:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003596:	4313      	orrs	r3, r2
 8003598:	b21b      	sxth	r3, r3
 800359a:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800359c:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <BSP_ACCELERO_Init+0x7c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	89ba      	ldrh	r2, [r7, #12]
 80035a4:	4610      	mov	r0, r2
 80035a6:	4798      	blx	r3
  }  

  return ret;
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20000064 	.word	0x20000064
 80035b8:	20001454 	.word	0x20001454

080035bc <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80035c4:	4b08      	ldr	r3, [pc, #32]	@ (80035e8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d009      	beq.n	80035e0 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80035cc:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80035d6:	4b04      	ldr	r3, [pc, #16]	@ (80035e8 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
    }
  }
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20001454 	.word	0x20001454

080035ec <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80035f6:	2300      	movs	r3, #0
 80035f8:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80035fa:	4b1c      	ldr	r3, [pc, #112]	@ (800366c <BSP_GYRO_Init+0x80>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	4798      	blx	r3
 8003600:	4603      	mov	r3, r0
 8003602:	2b6a      	cmp	r3, #106	@ 0x6a
 8003604:	d002      	beq.n	800360c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	e029      	b.n	8003660 <BSP_GYRO_Init+0x74>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 800360c:	4b18      	ldr	r3, [pc, #96]	@ (8003670 <BSP_GYRO_Init+0x84>)
 800360e:	4a17      	ldr	r2, [pc, #92]	@ (800366c <BSP_GYRO_Init+0x80>)
 8003610:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8003612:	2300      	movs	r3, #0
 8003614:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8003616:	2330      	movs	r3, #48	@ 0x30
 8003618:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8003622:	2340      	movs	r3, #64	@ 0x40
 8003624:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8003626:	2300      	movs	r3, #0
 8003628:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800362a:	230c      	movs	r3, #12
 800362c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800362e:	7aba      	ldrb	r2, [r7, #10]
 8003630:	797b      	ldrb	r3, [r7, #5]
 8003632:	4313      	orrs	r3, r2
 8003634:	b2db      	uxtb	r3, r3
 8003636:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8003638:	7a3b      	ldrb	r3, [r7, #8]
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	b2db      	uxtb	r3, r3
 8003640:	b21b      	sxth	r3, r3
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	b21a      	sxth	r2, r3
 8003646:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	b21b      	sxth	r3, r3
 800364e:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8003650:	4b07      	ldr	r3, [pc, #28]	@ (8003670 <BSP_GYRO_Init+0x84>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	89ba      	ldrh	r2, [r7, #12]
 8003658:	4610      	mov	r0, r2
 800365a:	4798      	blx	r3
    
    ret = GYRO_OK;
 800365c:	2300      	movs	r3, #0
 800365e:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8003660:	7bfb      	ldrb	r3, [r7, #15]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	20000098 	.word	0x20000098
 8003670:	20001458 	.word	0x20001458

08003674 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800367c:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <BSP_GYRO_GetXYZ+0x2c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d009      	beq.n	8003698 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <BSP_GYRO_GetXYZ+0x2c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	2b00      	cmp	r3, #0
 800368c:	d004      	beq.n	8003698 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <BSP_GYRO_GetXYZ+0x2c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	4798      	blx	r3
    }
  }
}
 8003698:	bf00      	nop
 800369a:	3708      	adds	r7, #8
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20001458 	.word	0x20001458

080036a4 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80036aa:	4b0c      	ldr	r3, [pc, #48]	@ (80036dc <BSP_HSENSOR_Init+0x38>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	20be      	movs	r0, #190	@ 0xbe
 80036b0:	4798      	blx	r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	2bbc      	cmp	r3, #188	@ 0xbc
 80036b6:	d002      	beq.n	80036be <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	e009      	b.n	80036d2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80036be:	4b08      	ldr	r3, [pc, #32]	@ (80036e0 <BSP_HSENSOR_Init+0x3c>)
 80036c0:	4a06      	ldr	r2, [pc, #24]	@ (80036dc <BSP_HSENSOR_Init+0x38>)
 80036c2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <BSP_HSENSOR_Init+0x3c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	20be      	movs	r0, #190	@ 0xbe
 80036cc:	4798      	blx	r3
    ret = HSENSOR_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80036d2:	687b      	ldr	r3, [r7, #4]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20000008 	.word	0x20000008
 80036e0:	2000145c 	.word	0x2000145c

080036e4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80036e8:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <BSP_HSENSOR_ReadHumidity+0x18>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	20be      	movs	r0, #190	@ 0xbe
 80036f0:	4798      	blx	r3
 80036f2:	eef0 7a40 	vmov.f32	s15, s0
}
 80036f6:	eeb0 0a67 	vmov.f32	s0, s15
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	2000145c 	.word	0x2000145c

08003700 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800370a:	4b11      	ldr	r3, [pc, #68]	@ (8003750 <BSP_MAGNETO_Init+0x50>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4798      	blx	r3
 8003710:	4603      	mov	r3, r0
 8003712:	2b3d      	cmp	r3, #61	@ 0x3d
 8003714:	d002      	beq.n	800371c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	71fb      	strb	r3, [r7, #7]
 800371a:	e013      	b.n	8003744 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800371c:	4b0d      	ldr	r3, [pc, #52]	@ (8003754 <BSP_MAGNETO_Init+0x54>)
 800371e:	4a0c      	ldr	r2, [pc, #48]	@ (8003750 <BSP_MAGNETO_Init+0x50>)
 8003720:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8003722:	2358      	movs	r3, #88	@ 0x58
 8003724:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8003726:	2300      	movs	r3, #0
 8003728:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800372a:	2300      	movs	r3, #0
 800372c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800372e:	2308      	movs	r3, #8
 8003730:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8003732:	2340      	movs	r3, #64	@ 0x40
 8003734:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8003736:	4b07      	ldr	r3, [pc, #28]	@ (8003754 <BSP_MAGNETO_Init+0x54>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	463a      	mov	r2, r7
 800373e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003742:	4798      	blx	r3
  } 

  return ret;  
 8003744:	79fb      	ldrb	r3, [r7, #7]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000024 	.word	0x20000024
 8003754:	20001460 	.word	0x20001460

08003758 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8003760:	4b08      	ldr	r3, [pc, #32]	@ (8003784 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d009      	beq.n	800377c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8003768:	4b06      	ldr	r3, [pc, #24]	@ (8003784 <BSP_MAGNETO_GetXYZ+0x2c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	2b00      	cmp	r3, #0
 8003770:	d004      	beq.n	800377c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8003772:	4b04      	ldr	r3, [pc, #16]	@ (8003784 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
    }
  }
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20001460 	.word	0x20001460

08003788 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800378e:	4b0c      	ldr	r3, [pc, #48]	@ (80037c0 <BSP_PSENSOR_Init+0x38>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	20ba      	movs	r0, #186	@ 0xba
 8003794:	4798      	blx	r3
 8003796:	4603      	mov	r3, r0
 8003798:	2bb1      	cmp	r3, #177	@ 0xb1
 800379a:	d002      	beq.n	80037a2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	607b      	str	r3, [r7, #4]
 80037a0:	e009      	b.n	80037b6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80037a2:	4b08      	ldr	r3, [pc, #32]	@ (80037c4 <BSP_PSENSOR_Init+0x3c>)
 80037a4:	4a06      	ldr	r2, [pc, #24]	@ (80037c0 <BSP_PSENSOR_Init+0x38>)
 80037a6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80037a8:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <BSP_PSENSOR_Init+0x3c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	20ba      	movs	r0, #186	@ 0xba
 80037b0:	4798      	blx	r3
    ret = PSENSOR_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80037b6:	687b      	ldr	r3, [r7, #4]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20000058 	.word	0x20000058
 80037c4:	20001464 	.word	0x20001464

080037c8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80037cc:	4b04      	ldr	r3, [pc, #16]	@ (80037e0 <BSP_PSENSOR_ReadPressure+0x18>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	20ba      	movs	r0, #186	@ 0xba
 80037d4:	4798      	blx	r3
 80037d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80037da:	eeb0 0a67 	vmov.f32	s0, s15
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20001464 	.word	0x20001464

080037e4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80037ee:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <BSP_TSENSOR_Init+0x30>)
 80037f0:	4a09      	ldr	r2, [pc, #36]	@ (8003818 <BSP_TSENSOR_Init+0x34>)
 80037f2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80037f4:	f7ff fe42 	bl	800347c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80037f8:	4b06      	ldr	r3, [pc, #24]	@ (8003814 <BSP_TSENSOR_Init+0x30>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2100      	movs	r1, #0
 8003800:	20be      	movs	r0, #190	@ 0xbe
 8003802:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8003808:	79fb      	ldrb	r3, [r7, #7]
}
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20001468 	.word	0x20001468
 8003818:	20000014 	.word	0x20000014

0800381c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8003820:	4b04      	ldr	r3, [pc, #16]	@ (8003834 <BSP_TSENSOR_ReadTemp+0x18>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	20be      	movs	r0, #190	@ 0xbe
 8003828:	4798      	blx	r3
 800382a:	eef0 7a40 	vmov.f32	s15, s0
}
 800382e:	eeb0 0a67 	vmov.f32	s0, s15
 8003832:	bd80      	pop	{r7, pc}
 8003834:	20001468 	.word	0x20001468

08003838 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2120      	movs	r1, #32
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fe3b 	bl	80034c4 <SENSOR_IO_Read>
 800384e:	4603      	mov	r3, r0
 8003850:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	f043 0304 	orr.w	r3, r3, #4
 8003860:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	f023 0303 	bic.w	r3, r3, #3
 8003868:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003878:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	7bfa      	ldrb	r2, [r7, #15]
 8003880:	2120      	movs	r1, #32
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fe04 	bl	8003490 <SENSOR_IO_Write>
}
 8003888:	bf00      	nop
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800389e:	f7ff fded 	bl	800347c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	210f      	movs	r1, #15
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fe0b 	bl	80034c4 <SENSOR_IO_Read>
 80038ae:	4603      	mov	r3, r0
 80038b0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b088      	sub	sp, #32
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	b2d8      	uxtb	r0, r3
 80038ca:	f107 020c 	add.w	r2, r7, #12
 80038ce:	2302      	movs	r3, #2
 80038d0:	21b0      	movs	r1, #176	@ 0xb0
 80038d2:	f7ff fe15 	bl	8003500 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80038d6:	7b3b      	ldrb	r3, [r7, #12]
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80038de:	7b7b      	ldrb	r3, [r7, #13]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	b2d8      	uxtb	r0, r3
 80038ea:	f107 020c 	add.w	r2, r7, #12
 80038ee:	2302      	movs	r3, #2
 80038f0:	21b6      	movs	r1, #182	@ 0xb6
 80038f2:	f7ff fe05 	bl	8003500 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80038f6:	7b7b      	ldrb	r3, [r7, #13]
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	b21a      	sxth	r2, r3
 80038fe:	7b3b      	ldrb	r3, [r7, #12]
 8003900:	b21b      	sxth	r3, r3
 8003902:	4313      	orrs	r3, r2
 8003904:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	b2d8      	uxtb	r0, r3
 800390a:	f107 020c 	add.w	r2, r7, #12
 800390e:	2302      	movs	r3, #2
 8003910:	21ba      	movs	r1, #186	@ 0xba
 8003912:	f7ff fdf5 	bl	8003500 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003916:	7b7b      	ldrb	r3, [r7, #13]
 8003918:	b21b      	sxth	r3, r3
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	b21a      	sxth	r2, r3
 800391e:	7b3b      	ldrb	r3, [r7, #12]
 8003920:	b21b      	sxth	r3, r3
 8003922:	4313      	orrs	r3, r2
 8003924:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	b2d8      	uxtb	r0, r3
 800392a:	f107 020c 	add.w	r2, r7, #12
 800392e:	2302      	movs	r3, #2
 8003930:	21a8      	movs	r1, #168	@ 0xa8
 8003932:	f7ff fde5 	bl	8003500 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003936:	7b7b      	ldrb	r3, [r7, #13]
 8003938:	b21b      	sxth	r3, r3
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	b21a      	sxth	r2, r3
 800393e:	7b3b      	ldrb	r3, [r7, #12]
 8003940:	b21b      	sxth	r3, r3
 8003942:	4313      	orrs	r3, r2
 8003944:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8003946:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800394a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	ee07 3a90 	vmov	s15, r3
 8003954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003958:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800395c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800396a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800396e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003972:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	ee07 3a90 	vmov	s15, r3
 800397c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003980:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003984:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003994:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8003998:	edd7 7a04 	vldr	s15, [r7, #16]
 800399c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80039a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039a4:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80039a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80039ac:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80039f0 <HTS221_H_ReadHumidity+0x134>
 80039b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b8:	dd01      	ble.n	80039be <HTS221_H_ReadHumidity+0x102>
 80039ba:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <HTS221_H_ReadHumidity+0x138>)
 80039bc:	e00a      	b.n	80039d4 <HTS221_H_ReadHumidity+0x118>
        : tmp_f;
 80039be:	edd7 7a04 	vldr	s15, [r7, #16]
 80039c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ca:	d502      	bpl.n	80039d2 <HTS221_H_ReadHumidity+0x116>
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	e000      	b.n	80039d4 <HTS221_H_ReadHumidity+0x118>
 80039d2:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80039d4:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80039d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80039da:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80039de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039e2:	eef0 7a66 	vmov.f32	s15, s13
}
 80039e6:	eeb0 0a67 	vmov.f32	s0, s15
 80039ea:	3720      	adds	r7, #32
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	447a0000 	.word	0x447a0000
 80039f4:	447a0000 	.word	0x447a0000

080039f8 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	6039      	str	r1, [r7, #0]
 8003a02:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2120      	movs	r1, #32
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fd5a 	bl	80034c4 <SENSOR_IO_Read>
 8003a10:	4603      	mov	r3, r0
 8003a12:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	f023 0304 	bic.w	r3, r3, #4
 8003a1a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	f043 0304 	orr.w	r3, r3, #4
 8003a22:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a3a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	2120      	movs	r1, #32
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff fd23 	bl	8003490 <SENSOR_IO_Write>
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b088      	sub	sp, #32
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	4603      	mov	r3, r0
 8003a5a:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	b2d8      	uxtb	r0, r3
 8003a60:	f107 0208 	add.w	r2, r7, #8
 8003a64:	2302      	movs	r3, #2
 8003a66:	21b2      	movs	r1, #178	@ 0xb2
 8003a68:	f7ff fd4a 	bl	8003500 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8003a6c:	88fb      	ldrh	r3, [r7, #6]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2135      	movs	r1, #53	@ 0x35
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fd26 	bl	80034c4 <SENSOR_IO_Read>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8003a7c:	7ffb      	ldrb	r3, [r7, #31]
 8003a7e:	b21b      	sxth	r3, r3
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	b21b      	sxth	r3, r3
 8003a84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a88:	b21a      	sxth	r2, r3
 8003a8a:	7a3b      	ldrb	r3, [r7, #8]
 8003a8c:	b21b      	sxth	r3, r3
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8003a92:	7ffb      	ldrb	r3, [r7, #31]
 8003a94:	b21b      	sxth	r3, r3
 8003a96:	019b      	lsls	r3, r3, #6
 8003a98:	b21b      	sxth	r3, r3
 8003a9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a9e:	b21a      	sxth	r2, r3
 8003aa0:	7a7b      	ldrb	r3, [r7, #9]
 8003aa2:	b21b      	sxth	r3, r3
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8003aa8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003aac:	10db      	asrs	r3, r3, #3
 8003aae:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8003ab0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ab4:	10db      	asrs	r3, r3, #3
 8003ab6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	b2d8      	uxtb	r0, r3
 8003abc:	f107 0208 	add.w	r2, r7, #8
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	21bc      	movs	r1, #188	@ 0xbc
 8003ac4:	f7ff fd1c 	bl	8003500 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003ac8:	7a7b      	ldrb	r3, [r7, #9]
 8003aca:	b21b      	sxth	r3, r3
 8003acc:	021b      	lsls	r3, r3, #8
 8003ace:	b21a      	sxth	r2, r3
 8003ad0:	7a3b      	ldrb	r3, [r7, #8]
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8003ad8:	7afb      	ldrb	r3, [r7, #11]
 8003ada:	b21b      	sxth	r3, r3
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	b21a      	sxth	r2, r3
 8003ae0:	7abb      	ldrb	r3, [r7, #10]
 8003ae2:	b21b      	sxth	r3, r3
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8003ae8:	88fb      	ldrh	r3, [r7, #6]
 8003aea:	b2d8      	uxtb	r0, r3
 8003aec:	f107 0208 	add.w	r2, r7, #8
 8003af0:	2302      	movs	r3, #2
 8003af2:	21aa      	movs	r1, #170	@ 0xaa
 8003af4:	f7ff fd04 	bl	8003500 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8003af8:	7a7b      	ldrb	r3, [r7, #9]
 8003afa:	b21b      	sxth	r3, r3
 8003afc:	021b      	lsls	r3, r3, #8
 8003afe:	b21a      	sxth	r2, r3
 8003b00:	7a3b      	ldrb	r3, [r7, #8]
 8003b02:	b21b      	sxth	r3, r3
 8003b04:	4313      	orrs	r3, r2
 8003b06:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8003b08:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003b0c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003b1e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b2c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b30:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003b34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b46:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b56:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	ee07 3a90 	vmov	s15, r3
}
 8003b60:	eeb0 0a67 	vmov.f32	s0, s15
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	463b      	mov	r3, r7
 8003b72:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8003b76:	783b      	ldrb	r3, [r7, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2120      	movs	r1, #32
 8003b7c:	203c      	movs	r0, #60	@ 0x3c
 8003b7e:	f7ff fc87 	bl	8003490 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8003b82:	787b      	ldrb	r3, [r7, #1]
 8003b84:	461a      	mov	r2, r3
 8003b86:	2121      	movs	r1, #33	@ 0x21
 8003b88:	203c      	movs	r0, #60	@ 0x3c
 8003b8a:	f7ff fc81 	bl	8003490 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8003b8e:	78bb      	ldrb	r3, [r7, #2]
 8003b90:	461a      	mov	r2, r3
 8003b92:	2122      	movs	r1, #34	@ 0x22
 8003b94:	203c      	movs	r0, #60	@ 0x3c
 8003b96:	f7ff fc7b 	bl	8003490 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2123      	movs	r1, #35	@ 0x23
 8003ba0:	203c      	movs	r0, #60	@ 0x3c
 8003ba2:	f7ff fc75 	bl	8003490 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8003ba6:	793b      	ldrb	r3, [r7, #4]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2124      	movs	r1, #36	@ 0x24
 8003bac:	203c      	movs	r0, #60	@ 0x3c
 8003bae:	f7ff fc6f 	bl	8003490 <SENSOR_IO_Write>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8003bc4:	2122      	movs	r1, #34	@ 0x22
 8003bc6:	203c      	movs	r0, #60	@ 0x3c
 8003bc8:	f7ff fc7c 	bl	80034c4 <SENSOR_IO_Read>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	f023 0303 	bic.w	r3, r3, #3
 8003bd6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	f043 0303 	orr.w	r3, r3, #3
 8003bde:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	461a      	mov	r2, r3
 8003be4:	2122      	movs	r1, #34	@ 0x22
 8003be6:	203c      	movs	r0, #60	@ 0x3c
 8003be8:	f7ff fc52 	bl	8003490 <SENSOR_IO_Write>
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003bf8:	f7ff fc40 	bl	800347c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8003bfc:	210f      	movs	r1, #15
 8003bfe:	203c      	movs	r0, #60	@ 0x3c
 8003c00:	f7ff fc60 	bl	80034c4 <SENSOR_IO_Read>
 8003c04:	4603      	mov	r3, r0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	4603      	mov	r3, r0
 8003c12:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8003c18:	2122      	movs	r1, #34	@ 0x22
 8003c1a:	203c      	movs	r0, #60	@ 0x3c
 8003c1c:	f7ff fc52 	bl	80034c4 <SENSOR_IO_Read>
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	f023 0320 	bic.w	r3, r3, #32
 8003c2a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003c2c:	88fb      	ldrh	r3, [r7, #6]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	f043 0320 	orr.w	r3, r3, #32
 8003c38:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8003c3a:	7bfb      	ldrb	r3, [r7, #15]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2122      	movs	r1, #34	@ 0x22
 8003c40:	203c      	movs	r0, #60	@ 0x3c
 8003c42:	f7ff fc25 	bl	8003490 <SENSOR_IO_Write>
}
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8003c66:	2121      	movs	r1, #33	@ 0x21
 8003c68:	203c      	movs	r0, #60	@ 0x3c
 8003c6a:	f7ff fc2b 	bl	80034c4 <SENSOR_IO_Read>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8003c72:	f107 0208 	add.w	r2, r7, #8
 8003c76:	2306      	movs	r3, #6
 8003c78:	21a8      	movs	r1, #168	@ 0xa8
 8003c7a:	203c      	movs	r0, #60	@ 0x3c
 8003c7c:	f7ff fc40 	bl	8003500 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003c80:	2300      	movs	r3, #0
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	e01a      	b.n	8003cbc <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003c86:	7ffb      	ldrb	r3, [r7, #31]
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	3320      	adds	r3, #32
 8003c8e:	443b      	add	r3, r7
 8003c90:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	7ffa      	ldrb	r2, [r7, #31]
 8003c9a:	0052      	lsls	r2, r2, #1
 8003c9c:	3220      	adds	r2, #32
 8003c9e:	443a      	add	r2, r7
 8003ca0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	7ffb      	ldrb	r3, [r7, #31]
 8003caa:	b212      	sxth	r2, r2
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	3320      	adds	r3, #32
 8003cb0:	443b      	add	r3, r7
 8003cb2:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003cb6:	7ffb      	ldrb	r3, [r7, #31]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	7ffb      	ldrb	r3, [r7, #31]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d9e1      	bls.n	8003c86 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8003cc2:	7dfb      	ldrb	r3, [r7, #23]
 8003cc4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8003cc8:	2b60      	cmp	r3, #96	@ 0x60
 8003cca:	d013      	beq.n	8003cf4 <LIS3MDL_MagReadXYZ+0xa4>
 8003ccc:	2b60      	cmp	r3, #96	@ 0x60
 8003cce:	dc14      	bgt.n	8003cfa <LIS3MDL_MagReadXYZ+0xaa>
 8003cd0:	2b40      	cmp	r3, #64	@ 0x40
 8003cd2:	d00c      	beq.n	8003cee <LIS3MDL_MagReadXYZ+0x9e>
 8003cd4:	2b40      	cmp	r3, #64	@ 0x40
 8003cd6:	dc10      	bgt.n	8003cfa <LIS3MDL_MagReadXYZ+0xaa>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <LIS3MDL_MagReadXYZ+0x92>
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d003      	beq.n	8003ce8 <LIS3MDL_MagReadXYZ+0x98>
 8003ce0:	e00b      	b.n	8003cfa <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8003ce2:	4b19      	ldr	r3, [pc, #100]	@ (8003d48 <LIS3MDL_MagReadXYZ+0xf8>)
 8003ce4:	61bb      	str	r3, [r7, #24]
    break;
 8003ce6:	e008      	b.n	8003cfa <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8003ce8:	4b18      	ldr	r3, [pc, #96]	@ (8003d4c <LIS3MDL_MagReadXYZ+0xfc>)
 8003cea:	61bb      	str	r3, [r7, #24]
    break;
 8003cec:	e005      	b.n	8003cfa <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8003cee:	4b18      	ldr	r3, [pc, #96]	@ (8003d50 <LIS3MDL_MagReadXYZ+0x100>)
 8003cf0:	61bb      	str	r3, [r7, #24]
    break;
 8003cf2:	e002      	b.n	8003cfa <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8003cf4:	4b17      	ldr	r3, [pc, #92]	@ (8003d54 <LIS3MDL_MagReadXYZ+0x104>)
 8003cf6:	61bb      	str	r3, [r7, #24]
    break;    
 8003cf8:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e01a      	b.n	8003d36 <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003d00:	7ffb      	ldrb	r3, [r7, #31]
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	3320      	adds	r3, #32
 8003d06:	443b      	add	r3, r7
 8003d08:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003d0c:	ee07 3a90 	vmov	s15, r3
 8003d10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d14:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1c:	7ffb      	ldrb	r3, [r7, #31]
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	4413      	add	r3, r2
 8003d24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d28:	ee17 2a90 	vmov	r2, s15
 8003d2c:	b212      	sxth	r2, r2
 8003d2e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003d30:	7ffb      	ldrb	r3, [r7, #31]
 8003d32:	3301      	adds	r3, #1
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	7ffb      	ldrb	r3, [r7, #31]
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d9e1      	bls.n	8003d00 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	bf00      	nop
 8003d40:	3720      	adds	r7, #32
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	3e0f5c29 	.word	0x3e0f5c29
 8003d4c:	3e947ae1 	.word	0x3e947ae1
 8003d50:	3edc28f6 	.word	0x3edc28f6
 8003d54:	3f147ae1 	.word	0x3f147ae1

08003d58 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f879 	bl	8003e5c <LPS22HB_Init>
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003d80:	f7ff fb7c 	bl	800347c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	210f      	movs	r1, #15
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fb9a 	bl	80034c4 <SENSOR_IO_Read>
 8003d90:	4603      	mov	r3, r0
 8003d92:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3710      	adds	r7, #16
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	74fb      	strb	r3, [r7, #19]
 8003db2:	e013      	b.n	8003ddc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8003db4:	88fb      	ldrh	r3, [r7, #6]
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	7cfb      	ldrb	r3, [r7, #19]
 8003dba:	3328      	adds	r3, #40	@ 0x28
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	7cfc      	ldrb	r4, [r7, #19]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f7ff fb7e 	bl	80034c4 <SENSOR_IO_Read>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f104 0318 	add.w	r3, r4, #24
 8003dd0:	443b      	add	r3, r7
 8003dd2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8003dd6:	7cfb      	ldrb	r3, [r7, #19]
 8003dd8:	3301      	adds	r3, #1
 8003dda:	74fb      	strb	r3, [r7, #19]
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d9e8      	bls.n	8003db4 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8003de2:	2300      	movs	r3, #0
 8003de4:	74fb      	strb	r3, [r7, #19]
 8003de6:	e00f      	b.n	8003e08 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8003de8:	7cfb      	ldrb	r3, [r7, #19]
 8003dea:	3318      	adds	r3, #24
 8003dec:	443b      	add	r3, r7
 8003dee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003df2:	461a      	mov	r2, r3
 8003df4:	7cfb      	ldrb	r3, [r7, #19]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	3301      	adds	r3, #1
 8003e06:	74fb      	strb	r3, [r7, #19]
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d9ec      	bls.n	8003de8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e1e:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2264      	movs	r2, #100	@ 0x64
 8003e28:	fb02 f303 	mul.w	r3, r2, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	da01      	bge.n	8003e34 <LPS22HB_P_ReadPressure+0x94>
 8003e30:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8003e34:	131b      	asrs	r3, r3, #12
 8003e36:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	ee07 3a90 	vmov	s15, r3
 8003e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e42:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003e58 <LPS22HB_P_ReadPressure+0xb8>
 8003e46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003e4a:	eef0 7a66 	vmov.f32	s15, s13
}
 8003e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd90      	pop	{r4, r7, pc}
 8003e58:	42c80000 	.word	0x42c80000

08003e5c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	211a      	movs	r1, #26
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fb29 	bl	80034c4 <SENSOR_IO_Read>
 8003e72:	4603      	mov	r3, r0
 8003e74:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003e86:	88fb      	ldrh	r3, [r7, #6]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	211a      	movs	r1, #26
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fafe 	bl	8003490 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2110      	movs	r1, #16
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fb12 	bl	80034c4 <SENSOR_IO_Read>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eaa:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8003eb2:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	f023 0302 	bic.w	r3, r3, #2
 8003eba:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	f043 0302 	orr.w	r3, r3, #2
 8003ec2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	7bfa      	ldrb	r2, [r7, #15]
 8003eca:	2110      	movs	r1, #16
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fadf 	bl	8003490 <SENSOR_IO_Write>
}  
 8003ed2:	bf00      	nop
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003ee8:	2110      	movs	r1, #16
 8003eea:	20d4      	movs	r0, #212	@ 0xd4
 8003eec:	f7ff faea 	bl	80034c4 <SENSOR_IO_Read>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003ef8:	7bbb      	ldrb	r3, [r7, #14]
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003f00:	7bba      	ldrb	r2, [r7, #14]
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8003f08:	7bbb      	ldrb	r3, [r7, #14]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2110      	movs	r1, #16
 8003f0e:	20d4      	movs	r0, #212	@ 0xd4
 8003f10:	f7ff fabe 	bl	8003490 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003f14:	2112      	movs	r1, #18
 8003f16:	20d4      	movs	r0, #212	@ 0xd4
 8003f18:	f7ff fad4 	bl	80034c4 <SENSOR_IO_Read>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003f28:	7bbb      	ldrb	r3, [r7, #14]
 8003f2a:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8003f2e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003f30:	7bba      	ldrb	r2, [r7, #14]
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003f38:	7bbb      	ldrb	r3, [r7, #14]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2112      	movs	r1, #18
 8003f3e:	20d4      	movs	r0, #212	@ 0xd4
 8003f40:	f7ff faa6 	bl	8003490 <SENSOR_IO_Write>
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003f52:	2300      	movs	r3, #0
 8003f54:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003f56:	2110      	movs	r1, #16
 8003f58:	20d4      	movs	r0, #212	@ 0xd4
 8003f5a:	f7ff fab3 	bl	80034c4 <SENSOR_IO_Read>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2110      	movs	r1, #16
 8003f70:	20d4      	movs	r0, #212	@ 0xd4
 8003f72:	f7ff fa8d 	bl	8003490 <SENSOR_IO_Write>
}
 8003f76:	bf00      	nop
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003f82:	f7ff fa7b 	bl	800347c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003f86:	210f      	movs	r1, #15
 8003f88:	20d4      	movs	r0, #212	@ 0xd4
 8003f8a:	f7ff fa9b 	bl	80034c4 <SENSOR_IO_Read>
 8003f8e:	4603      	mov	r3, r0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003fa2:	2115      	movs	r1, #21
 8003fa4:	20d4      	movs	r0, #212	@ 0xd4
 8003fa6:	f7ff fa8d 	bl	80034c4 <SENSOR_IO_Read>
 8003faa:	4603      	mov	r3, r0
 8003fac:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	f023 0310 	bic.w	r3, r3, #16
 8003fb4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
 8003fbe:	f043 0310 	orr.w	r3, r3, #16
 8003fc2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003fc4:	7bfb      	ldrb	r3, [r7, #15]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2115      	movs	r1, #21
 8003fca:	20d4      	movs	r0, #212	@ 0xd4
 8003fcc:	f7ff fa60 	bl	8003490 <SENSOR_IO_Write>
}
 8003fd0:	bf00      	nop
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003fee:	2110      	movs	r1, #16
 8003ff0:	20d4      	movs	r0, #212	@ 0xd4
 8003ff2:	f7ff fa67 	bl	80034c4 <SENSOR_IO_Read>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8003ffa:	f107 0208 	add.w	r2, r7, #8
 8003ffe:	2306      	movs	r3, #6
 8004000:	2128      	movs	r1, #40	@ 0x28
 8004002:	20d4      	movs	r0, #212	@ 0xd4
 8004004:	f7ff fa7c 	bl	8003500 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	77fb      	strb	r3, [r7, #31]
 800400c:	e01a      	b.n	8004044 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800400e:	7ffb      	ldrb	r3, [r7, #31]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	3301      	adds	r3, #1
 8004014:	3320      	adds	r3, #32
 8004016:	443b      	add	r3, r7
 8004018:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	b29b      	uxth	r3, r3
 8004020:	7ffa      	ldrb	r2, [r7, #31]
 8004022:	0052      	lsls	r2, r2, #1
 8004024:	3220      	adds	r2, #32
 8004026:	443a      	add	r2, r7
 8004028:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800402c:	4413      	add	r3, r2
 800402e:	b29a      	uxth	r2, r3
 8004030:	7ffb      	ldrb	r3, [r7, #31]
 8004032:	b212      	sxth	r2, r2
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	3320      	adds	r3, #32
 8004038:	443b      	add	r3, r7
 800403a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800403e:	7ffb      	ldrb	r3, [r7, #31]
 8004040:	3301      	adds	r3, #1
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	7ffb      	ldrb	r3, [r7, #31]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d9e1      	bls.n	800400e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800404a:	7dfb      	ldrb	r3, [r7, #23]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b0c      	cmp	r3, #12
 8004052:	d829      	bhi.n	80040a8 <LSM6DSL_AccReadXYZ+0xd0>
 8004054:	a201      	add	r2, pc, #4	@ (adr r2, 800405c <LSM6DSL_AccReadXYZ+0x84>)
 8004056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405a:	bf00      	nop
 800405c:	08004091 	.word	0x08004091
 8004060:	080040a9 	.word	0x080040a9
 8004064:	080040a9 	.word	0x080040a9
 8004068:	080040a9 	.word	0x080040a9
 800406c:	080040a3 	.word	0x080040a3
 8004070:	080040a9 	.word	0x080040a9
 8004074:	080040a9 	.word	0x080040a9
 8004078:	080040a9 	.word	0x080040a9
 800407c:	08004097 	.word	0x08004097
 8004080:	080040a9 	.word	0x080040a9
 8004084:	080040a9 	.word	0x080040a9
 8004088:	080040a9 	.word	0x080040a9
 800408c:	0800409d 	.word	0x0800409d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8004090:	4b18      	ldr	r3, [pc, #96]	@ (80040f4 <LSM6DSL_AccReadXYZ+0x11c>)
 8004092:	61bb      	str	r3, [r7, #24]
    break;
 8004094:	e008      	b.n	80040a8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8004096:	4b18      	ldr	r3, [pc, #96]	@ (80040f8 <LSM6DSL_AccReadXYZ+0x120>)
 8004098:	61bb      	str	r3, [r7, #24]
    break;
 800409a:	e005      	b.n	80040a8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800409c:	4b17      	ldr	r3, [pc, #92]	@ (80040fc <LSM6DSL_AccReadXYZ+0x124>)
 800409e:	61bb      	str	r3, [r7, #24]
    break;
 80040a0:	e002      	b.n	80040a8 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80040a2:	4b17      	ldr	r3, [pc, #92]	@ (8004100 <LSM6DSL_AccReadXYZ+0x128>)
 80040a4:	61bb      	str	r3, [r7, #24]
    break;    
 80040a6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80040a8:	2300      	movs	r3, #0
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e01a      	b.n	80040e4 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80040ae:	7ffb      	ldrb	r3, [r7, #31]
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	3320      	adds	r3, #32
 80040b4:	443b      	add	r3, r7
 80040b6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80040ba:	ee07 3a90 	vmov	s15, r3
 80040be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80040c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ca:	7ffb      	ldrb	r3, [r7, #31]
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4413      	add	r3, r2
 80040d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040d6:	ee17 2a90 	vmov	r2, s15
 80040da:	b212      	sxth	r2, r2
 80040dc:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80040de:	7ffb      	ldrb	r3, [r7, #31]
 80040e0:	3301      	adds	r3, #1
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	7ffb      	ldrb	r3, [r7, #31]
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d9e1      	bls.n	80040ae <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	3d79db23 	.word	0x3d79db23
 80040f8:	3df9db23 	.word	0x3df9db23
 80040fc:	3e79db23 	.word	0x3e79db23
 8004100:	3ef9db23 	.word	0x3ef9db23

08004104 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004112:	2111      	movs	r1, #17
 8004114:	20d4      	movs	r0, #212	@ 0xd4
 8004116:	f7ff f9d5 	bl	80034c4 <SENSOR_IO_Read>
 800411a:	4603      	mov	r3, r0
 800411c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8004122:	7bbb      	ldrb	r3, [r7, #14]
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800412a:	7bba      	ldrb	r2, [r7, #14]
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	4313      	orrs	r3, r2
 8004130:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8004132:	7bbb      	ldrb	r3, [r7, #14]
 8004134:	461a      	mov	r2, r3
 8004136:	2111      	movs	r1, #17
 8004138:	20d4      	movs	r0, #212	@ 0xd4
 800413a:	f7ff f9a9 	bl	8003490 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800413e:	2112      	movs	r1, #18
 8004140:	20d4      	movs	r0, #212	@ 0xd4
 8004142:	f7ff f9bf 	bl	80034c4 <SENSOR_IO_Read>
 8004146:	4603      	mov	r3, r0
 8004148:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	0a1b      	lsrs	r3, r3, #8
 800414e:	b29b      	uxth	r3, r3
 8004150:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8004152:	7bbb      	ldrb	r3, [r7, #14]
 8004154:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8004158:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800415a:	7bba      	ldrb	r2, [r7, #14]
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	4313      	orrs	r3, r2
 8004160:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8004162:	7bbb      	ldrb	r3, [r7, #14]
 8004164:	461a      	mov	r2, r3
 8004166:	2112      	movs	r1, #18
 8004168:	20d4      	movs	r0, #212	@ 0xd4
 800416a:	f7ff f991 	bl	8003490 <SENSOR_IO_Write>
}
 800416e:	bf00      	nop
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800417c:	2300      	movs	r3, #0
 800417e:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8004180:	2111      	movs	r1, #17
 8004182:	20d4      	movs	r0, #212	@ 0xd4
 8004184:	f7ff f99e 	bl	80034c4 <SENSOR_IO_Read>
 8004188:	4603      	mov	r3, r0
 800418a:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	461a      	mov	r2, r3
 8004198:	2111      	movs	r1, #17
 800419a:	20d4      	movs	r0, #212	@ 0xd4
 800419c:	f7ff f978 	bl	8003490 <SENSOR_IO_Write>
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80041ac:	f7ff f966 	bl	800347c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80041b0:	210f      	movs	r1, #15
 80041b2:	20d4      	movs	r0, #212	@ 0xd4
 80041b4:	f7ff f986 	bl	80034c4 <SENSOR_IO_Read>
 80041b8:	4603      	mov	r3, r0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	bd80      	pop	{r7, pc}

080041be <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80041be:	b580      	push	{r7, lr}
 80041c0:	b084      	sub	sp, #16
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	4603      	mov	r3, r0
 80041c6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80041c8:	2300      	movs	r3, #0
 80041ca:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80041cc:	2116      	movs	r1, #22
 80041ce:	20d4      	movs	r0, #212	@ 0xd4
 80041d0:	f7ff f978 	bl	80034c4 <SENSOR_IO_Read>
 80041d4:	4603      	mov	r3, r0
 80041d6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041de:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80041e0:	88fb      	ldrh	r3, [r7, #6]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80041ec:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80041ee:	7bfb      	ldrb	r3, [r7, #15]
 80041f0:	461a      	mov	r2, r3
 80041f2:	2116      	movs	r1, #22
 80041f4:	20d4      	movs	r0, #212	@ 0xd4
 80041f6:	f7ff f94b 	bl	8003490 <SENSOR_IO_Write>
}
 80041fa:	bf00      	nop
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800420c:	2300      	movs	r3, #0
 800420e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800421a:	2111      	movs	r1, #17
 800421c:	20d4      	movs	r0, #212	@ 0xd4
 800421e:	f7ff f951 	bl	80034c4 <SENSOR_IO_Read>
 8004222:	4603      	mov	r3, r0
 8004224:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8004226:	f107 0208 	add.w	r2, r7, #8
 800422a:	2306      	movs	r3, #6
 800422c:	2122      	movs	r1, #34	@ 0x22
 800422e:	20d4      	movs	r0, #212	@ 0xd4
 8004230:	f7ff f966 	bl	8003500 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8004234:	2300      	movs	r3, #0
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e01a      	b.n	8004270 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800423a:	7ffb      	ldrb	r3, [r7, #31]
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	3301      	adds	r3, #1
 8004240:	3320      	adds	r3, #32
 8004242:	443b      	add	r3, r7
 8004244:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	b29b      	uxth	r3, r3
 800424c:	7ffa      	ldrb	r2, [r7, #31]
 800424e:	0052      	lsls	r2, r2, #1
 8004250:	3220      	adds	r2, #32
 8004252:	443a      	add	r2, r7
 8004254:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8004258:	4413      	add	r3, r2
 800425a:	b29a      	uxth	r2, r3
 800425c:	7ffb      	ldrb	r3, [r7, #31]
 800425e:	b212      	sxth	r2, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	3320      	adds	r3, #32
 8004264:	443b      	add	r3, r7
 8004266:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800426a:	7ffb      	ldrb	r3, [r7, #31]
 800426c:	3301      	adds	r3, #1
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	7ffb      	ldrb	r3, [r7, #31]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d9e1      	bls.n	800423a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8004276:	7dfb      	ldrb	r3, [r7, #23]
 8004278:	f003 030c 	and.w	r3, r3, #12
 800427c:	2b0c      	cmp	r3, #12
 800427e:	d829      	bhi.n	80042d4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8004280:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	080042bd 	.word	0x080042bd
 800428c:	080042d5 	.word	0x080042d5
 8004290:	080042d5 	.word	0x080042d5
 8004294:	080042d5 	.word	0x080042d5
 8004298:	080042c3 	.word	0x080042c3
 800429c:	080042d5 	.word	0x080042d5
 80042a0:	080042d5 	.word	0x080042d5
 80042a4:	080042d5 	.word	0x080042d5
 80042a8:	080042c9 	.word	0x080042c9
 80042ac:	080042d5 	.word	0x080042d5
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042d5 	.word	0x080042d5
 80042b8:	080042cf 	.word	0x080042cf
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80042bc:	4b16      	ldr	r3, [pc, #88]	@ (8004318 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 80042be:	61bb      	str	r3, [r7, #24]
    break;
 80042c0:	e008      	b.n	80042d4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80042c2:	4b16      	ldr	r3, [pc, #88]	@ (800431c <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80042c4:	61bb      	str	r3, [r7, #24]
    break;
 80042c6:	e005      	b.n	80042d4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80042c8:	4b15      	ldr	r3, [pc, #84]	@ (8004320 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80042ca:	61bb      	str	r3, [r7, #24]
    break;
 80042cc:	e002      	b.n	80042d4 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80042ce:	4b15      	ldr	r3, [pc, #84]	@ (8004324 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80042d0:	61bb      	str	r3, [r7, #24]
    break;    
 80042d2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80042d4:	2300      	movs	r3, #0
 80042d6:	77fb      	strb	r3, [r7, #31]
 80042d8:	e016      	b.n	8004308 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80042da:	7ffb      	ldrb	r3, [r7, #31]
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	3320      	adds	r3, #32
 80042e0:	443b      	add	r3, r7
 80042e2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80042e6:	ee07 3a90 	vmov	s15, r3
 80042ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042ee:	7ffb      	ldrb	r3, [r7, #31]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80042fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fe:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8004302:	7ffb      	ldrb	r3, [r7, #31]
 8004304:	3301      	adds	r3, #1
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	7ffb      	ldrb	r3, [r7, #31]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d9e5      	bls.n	80042da <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 800430e:	bf00      	nop
 8004310:	bf00      	nop
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	410c0000 	.word	0x410c0000
 800431c:	418c0000 	.word	0x418c0000
 8004320:	420c0000 	.word	0x420c0000
 8004324:	428c0000 	.word	0x428c0000

08004328 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004332:	2003      	movs	r0, #3
 8004334:	f000 f960 	bl	80045f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004338:	2000      	movs	r0, #0
 800433a:	f000 f80d 	bl	8004358 <HAL_InitTick>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	71fb      	strb	r3, [r7, #7]
 8004348:	e001      	b.n	800434e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800434a:	f7fe fb8f 	bl	8002a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800434e:	79fb      	ldrb	r3, [r7, #7]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004364:	4b17      	ldr	r3, [pc, #92]	@ (80043c4 <HAL_InitTick+0x6c>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d023      	beq.n	80043b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800436c:	4b16      	ldr	r3, [pc, #88]	@ (80043c8 <HAL_InitTick+0x70>)
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	4b14      	ldr	r3, [pc, #80]	@ (80043c4 <HAL_InitTick+0x6c>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	4619      	mov	r1, r3
 8004376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800437a:	fbb3 f3f1 	udiv	r3, r3, r1
 800437e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f96d 	bl	8004662 <HAL_SYSTICK_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b0f      	cmp	r3, #15
 8004392:	d809      	bhi.n	80043a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004394:	2200      	movs	r2, #0
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800439c:	f000 f937 	bl	800460e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043a0:	4a0a      	ldr	r2, [pc, #40]	@ (80043cc <HAL_InitTick+0x74>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e007      	b.n	80043b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	e004      	b.n	80043b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
 80043b2:	e001      	b.n	80043b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200000d0 	.word	0x200000d0
 80043c8:	20000004 	.word	0x20000004
 80043cc:	200000cc 	.word	0x200000cc

080043d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043d4:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <HAL_IncTick+0x20>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <HAL_IncTick+0x24>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4413      	add	r3, r2
 80043e0:	4a04      	ldr	r2, [pc, #16]	@ (80043f4 <HAL_IncTick+0x24>)
 80043e2:	6013      	str	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	200000d0 	.word	0x200000d0
 80043f4:	2000146c 	.word	0x2000146c

080043f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return uwTick;
 80043fc:	4b03      	ldr	r3, [pc, #12]	@ (800440c <HAL_GetTick+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	2000146c 	.word	0x2000146c

08004410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004418:	f7ff ffee 	bl	80043f8 <HAL_GetTick>
 800441c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004428:	d005      	beq.n	8004436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800442a:	4b0a      	ldr	r3, [pc, #40]	@ (8004454 <HAL_Delay+0x44>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004436:	bf00      	nop
 8004438:	f7ff ffde 	bl	80043f8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d8f7      	bhi.n	8004438 <HAL_Delay+0x28>
  {
  }
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	200000d0 	.word	0x200000d0

08004458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004468:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <__NVIC_SetPriorityGrouping+0x44>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004474:	4013      	ands	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800448a:	4a04      	ldr	r2, [pc, #16]	@ (800449c <__NVIC_SetPriorityGrouping+0x44>)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	60d3      	str	r3, [r2, #12]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a4:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <__NVIC_GetPriorityGrouping+0x18>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	0a1b      	lsrs	r3, r3, #8
 80044aa:	f003 0307 	and.w	r3, r3, #7
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	db0b      	blt.n	80044e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	f003 021f 	and.w	r2, r3, #31
 80044d4:	4907      	ldr	r1, [pc, #28]	@ (80044f4 <__NVIC_EnableIRQ+0x38>)
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	2001      	movs	r0, #1
 80044de:	fa00 f202 	lsl.w	r2, r0, r2
 80044e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	e000e100 	.word	0xe000e100

080044f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	6039      	str	r1, [r7, #0]
 8004502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004508:	2b00      	cmp	r3, #0
 800450a:	db0a      	blt.n	8004522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	b2da      	uxtb	r2, r3
 8004510:	490c      	ldr	r1, [pc, #48]	@ (8004544 <__NVIC_SetPriority+0x4c>)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	0112      	lsls	r2, r2, #4
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	440b      	add	r3, r1
 800451c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004520:	e00a      	b.n	8004538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4908      	ldr	r1, [pc, #32]	@ (8004548 <__NVIC_SetPriority+0x50>)
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	3b04      	subs	r3, #4
 8004530:	0112      	lsls	r2, r2, #4
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	440b      	add	r3, r1
 8004536:	761a      	strb	r2, [r3, #24]
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	e000e100 	.word	0xe000e100
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	@ 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f1c3 0307 	rsb	r3, r3, #7
 8004566:	2b04      	cmp	r3, #4
 8004568:	bf28      	it	cs
 800456a:	2304      	movcs	r3, #4
 800456c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3304      	adds	r3, #4
 8004572:	2b06      	cmp	r3, #6
 8004574:	d902      	bls.n	800457c <NVIC_EncodePriority+0x30>
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3b03      	subs	r3, #3
 800457a:	e000      	b.n	800457e <NVIC_EncodePriority+0x32>
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004580:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43da      	mvns	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	401a      	ands	r2, r3
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004594:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	43d9      	mvns	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a4:	4313      	orrs	r3, r2
         );
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3724      	adds	r7, #36	@ 0x24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3b01      	subs	r3, #1
 80045c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045c4:	d301      	bcc.n	80045ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045c6:	2301      	movs	r3, #1
 80045c8:	e00f      	b.n	80045ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ca:	4a0a      	ldr	r2, [pc, #40]	@ (80045f4 <SysTick_Config+0x40>)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045d2:	210f      	movs	r1, #15
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045d8:	f7ff ff8e 	bl	80044f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <SysTick_Config+0x40>)
 80045de:	2200      	movs	r2, #0
 80045e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045e2:	4b04      	ldr	r3, [pc, #16]	@ (80045f4 <SysTick_Config+0x40>)
 80045e4:	2207      	movs	r2, #7
 80045e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	e000e010 	.word	0xe000e010

080045f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff ff29 	bl	8004458 <__NVIC_SetPriorityGrouping>
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	4603      	mov	r3, r0
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004620:	f7ff ff3e 	bl	80044a0 <__NVIC_GetPriorityGrouping>
 8004624:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	6978      	ldr	r0, [r7, #20]
 800462c:	f7ff ff8e 	bl	800454c <NVIC_EncodePriority>
 8004630:	4602      	mov	r2, r0
 8004632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff ff5d 	bl	80044f8 <__NVIC_SetPriority>
}
 800463e:	bf00      	nop
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	4603      	mov	r3, r0
 800464e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff ff31 	bl	80044bc <__NVIC_EnableIRQ>
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff ffa2 	bl	80045b4 <SysTick_Config>
 8004670:	4603      	mov	r3, r0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e0ac      	b.n	80047e8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f000 f8b2 	bl	80047fc <DFSDM_GetChannelFromInstance>
 8004698:	4603      	mov	r3, r0
 800469a:	4a55      	ldr	r2, [pc, #340]	@ (80047f0 <HAL_DFSDM_ChannelInit+0x174>)
 800469c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e09f      	b.n	80047e8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7fe fa03 	bl	8002ab4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80046ae:	4b51      	ldr	r3, [pc, #324]	@ (80047f4 <HAL_DFSDM_ChannelInit+0x178>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3301      	adds	r3, #1
 80046b4:	4a4f      	ldr	r2, [pc, #316]	@ (80047f4 <HAL_DFSDM_ChannelInit+0x178>)
 80046b6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80046b8:	4b4e      	ldr	r3, [pc, #312]	@ (80047f4 <HAL_DFSDM_ChannelInit+0x178>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d125      	bne.n	800470c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80046c0:	4b4d      	ldr	r3, [pc, #308]	@ (80047f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a4c      	ldr	r2, [pc, #304]	@ (80047f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80046ca:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80046cc:	4b4a      	ldr	r3, [pc, #296]	@ (80047f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4948      	ldr	r1, [pc, #288]	@ (80047f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80046da:	4b47      	ldr	r3, [pc, #284]	@ (80047f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a46      	ldr	r2, [pc, #280]	@ (80047f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046e0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80046e4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	791b      	ldrb	r3, [r3, #4]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d108      	bne.n	8004700 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80046ee:	4b42      	ldr	r3, [pc, #264]	@ (80047f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	041b      	lsls	r3, r3, #16
 80046fa:	493f      	ldr	r1, [pc, #252]	@ (80047f8 <HAL_DFSDM_ChannelInit+0x17c>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004700:	4b3d      	ldr	r3, [pc, #244]	@ (80047f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a3c      	ldr	r2, [pc, #240]	@ (80047f8 <HAL_DFSDM_ChannelInit+0x17c>)
 8004706:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800470a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800471a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800472a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004730:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 020f 	bic.w	r2, r2, #15
 8004748:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6819      	ldr	r1, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	430a      	orrs	r2, r1
 8004760:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8004770:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6899      	ldr	r1, [r3, #8]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f002 0207 	and.w	r2, r2, #7
 800479c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6859      	ldr	r1, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80047c8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 f810 	bl	80047fc <DFSDM_GetChannelFromInstance>
 80047dc:	4602      	mov	r2, r0
 80047de:	4904      	ldr	r1, [pc, #16]	@ (80047f0 <HAL_DFSDM_ChannelInit+0x174>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20001474 	.word	0x20001474
 80047f4:	20001470 	.word	0x20001470
 80047f8:	40016000 	.word	0x40016000

080047fc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a1c      	ldr	r2, [pc, #112]	@ (8004878 <DFSDM_GetChannelFromInstance+0x7c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d102      	bne.n	8004812 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	e02b      	b.n	800486a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a19      	ldr	r2, [pc, #100]	@ (800487c <DFSDM_GetChannelFromInstance+0x80>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d102      	bne.n	8004820 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800481a:	2301      	movs	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	e024      	b.n	800486a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a17      	ldr	r2, [pc, #92]	@ (8004880 <DFSDM_GetChannelFromInstance+0x84>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d102      	bne.n	800482e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004828:	2302      	movs	r3, #2
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	e01d      	b.n	800486a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a14      	ldr	r2, [pc, #80]	@ (8004884 <DFSDM_GetChannelFromInstance+0x88>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d102      	bne.n	800483c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004836:	2304      	movs	r3, #4
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	e016      	b.n	800486a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a12      	ldr	r2, [pc, #72]	@ (8004888 <DFSDM_GetChannelFromInstance+0x8c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d102      	bne.n	800484a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004844:	2305      	movs	r3, #5
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e00f      	b.n	800486a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a0f      	ldr	r2, [pc, #60]	@ (800488c <DFSDM_GetChannelFromInstance+0x90>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d102      	bne.n	8004858 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004852:	2306      	movs	r3, #6
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e008      	b.n	800486a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a0d      	ldr	r2, [pc, #52]	@ (8004890 <DFSDM_GetChannelFromInstance+0x94>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d102      	bne.n	8004866 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004860:	2307      	movs	r3, #7
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e001      	b.n	800486a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004866:	2303      	movs	r3, #3
 8004868:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800486a:	68fb      	ldr	r3, [r7, #12]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	40016000 	.word	0x40016000
 800487c:	40016020 	.word	0x40016020
 8004880:	40016040 	.word	0x40016040
 8004884:	40016080 	.word	0x40016080
 8004888:	400160a0 	.word	0x400160a0
 800488c:	400160c0 	.word	0x400160c0
 8004890:	400160e0 	.word	0x400160e0

08004894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048a2:	e17f      	b.n	8004ba4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	2101      	movs	r1, #1
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	4013      	ands	r3, r2
 80048b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8171 	beq.w	8004b9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d005      	beq.n	80048d4 <HAL_GPIO_Init+0x40>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d130      	bne.n	8004936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	2203      	movs	r2, #3
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800490a:	2201      	movs	r2, #1
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4013      	ands	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	f003 0201 	and.w	r2, r3, #1
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b03      	cmp	r3, #3
 8004940:	d118      	bne.n	8004974 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004948:	2201      	movs	r2, #1
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	fa02 f303 	lsl.w	r3, r2, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4013      	ands	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	08db      	lsrs	r3, r3, #3
 800495e:	f003 0201 	and.w	r2, r3, #1
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f003 0303 	and.w	r3, r3, #3
 800497c:	2b03      	cmp	r3, #3
 800497e:	d017      	beq.n	80049b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	2203      	movs	r2, #3
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	43db      	mvns	r3, r3
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4013      	ands	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d123      	bne.n	8004a04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	08da      	lsrs	r2, r3, #3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3208      	adds	r2, #8
 80049c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	220f      	movs	r2, #15
 80049d4:	fa02 f303 	lsl.w	r3, r2, r3
 80049d8:	43db      	mvns	r3, r3
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	4013      	ands	r3, r2
 80049de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	08da      	lsrs	r2, r3, #3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3208      	adds	r2, #8
 80049fe:	6939      	ldr	r1, [r7, #16]
 8004a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	2203      	movs	r2, #3
 8004a10:	fa02 f303 	lsl.w	r3, r2, r3
 8004a14:	43db      	mvns	r3, r3
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0203 	and.w	r2, r3, #3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	693a      	ldr	r2, [r7, #16]
 8004a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80ac 	beq.w	8004b9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a46:	4b5f      	ldr	r3, [pc, #380]	@ (8004bc4 <HAL_GPIO_Init+0x330>)
 8004a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a4a:	4a5e      	ldr	r2, [pc, #376]	@ (8004bc4 <HAL_GPIO_Init+0x330>)
 8004a4c:	f043 0301 	orr.w	r3, r3, #1
 8004a50:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a52:	4b5c      	ldr	r3, [pc, #368]	@ (8004bc4 <HAL_GPIO_Init+0x330>)
 8004a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	60bb      	str	r3, [r7, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a5e:	4a5a      	ldr	r2, [pc, #360]	@ (8004bc8 <HAL_GPIO_Init+0x334>)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	3302      	adds	r3, #2
 8004a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	220f      	movs	r2, #15
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a88:	d025      	beq.n	8004ad6 <HAL_GPIO_Init+0x242>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a4f      	ldr	r2, [pc, #316]	@ (8004bcc <HAL_GPIO_Init+0x338>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d01f      	beq.n	8004ad2 <HAL_GPIO_Init+0x23e>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a4e      	ldr	r2, [pc, #312]	@ (8004bd0 <HAL_GPIO_Init+0x33c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d019      	beq.n	8004ace <HAL_GPIO_Init+0x23a>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a4d      	ldr	r2, [pc, #308]	@ (8004bd4 <HAL_GPIO_Init+0x340>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d013      	beq.n	8004aca <HAL_GPIO_Init+0x236>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a4c      	ldr	r2, [pc, #304]	@ (8004bd8 <HAL_GPIO_Init+0x344>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00d      	beq.n	8004ac6 <HAL_GPIO_Init+0x232>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a4b      	ldr	r2, [pc, #300]	@ (8004bdc <HAL_GPIO_Init+0x348>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d007      	beq.n	8004ac2 <HAL_GPIO_Init+0x22e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a4a      	ldr	r2, [pc, #296]	@ (8004be0 <HAL_GPIO_Init+0x34c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d101      	bne.n	8004abe <HAL_GPIO_Init+0x22a>
 8004aba:	2306      	movs	r3, #6
 8004abc:	e00c      	b.n	8004ad8 <HAL_GPIO_Init+0x244>
 8004abe:	2307      	movs	r3, #7
 8004ac0:	e00a      	b.n	8004ad8 <HAL_GPIO_Init+0x244>
 8004ac2:	2305      	movs	r3, #5
 8004ac4:	e008      	b.n	8004ad8 <HAL_GPIO_Init+0x244>
 8004ac6:	2304      	movs	r3, #4
 8004ac8:	e006      	b.n	8004ad8 <HAL_GPIO_Init+0x244>
 8004aca:	2303      	movs	r3, #3
 8004acc:	e004      	b.n	8004ad8 <HAL_GPIO_Init+0x244>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e002      	b.n	8004ad8 <HAL_GPIO_Init+0x244>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <HAL_GPIO_Init+0x244>
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	f002 0203 	and.w	r2, r2, #3
 8004ade:	0092      	lsls	r2, r2, #2
 8004ae0:	4093      	lsls	r3, r2
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ae8:	4937      	ldr	r1, [pc, #220]	@ (8004bc8 <HAL_GPIO_Init+0x334>)
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	089b      	lsrs	r3, r3, #2
 8004aee:	3302      	adds	r3, #2
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004af6:	4b3b      	ldr	r3, [pc, #236]	@ (8004be4 <HAL_GPIO_Init+0x350>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	43db      	mvns	r3, r3
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4013      	ands	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b1a:	4a32      	ldr	r2, [pc, #200]	@ (8004be4 <HAL_GPIO_Init+0x350>)
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b20:	4b30      	ldr	r3, [pc, #192]	@ (8004be4 <HAL_GPIO_Init+0x350>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	43db      	mvns	r3, r3
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b44:	4a27      	ldr	r2, [pc, #156]	@ (8004be4 <HAL_GPIO_Init+0x350>)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004b4a:	4b26      	ldr	r3, [pc, #152]	@ (8004be4 <HAL_GPIO_Init+0x350>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	43db      	mvns	r3, r3
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	4013      	ands	r3, r2
 8004b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8004be4 <HAL_GPIO_Init+0x350>)
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004b74:	4b1b      	ldr	r3, [pc, #108]	@ (8004be4 <HAL_GPIO_Init+0x350>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	4013      	ands	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004b98:	4a12      	ldr	r2, [pc, #72]	@ (8004be4 <HAL_GPIO_Init+0x350>)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	fa22 f303 	lsr.w	r3, r2, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f47f ae78 	bne.w	80048a4 <HAL_GPIO_Init+0x10>
  }
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40010000 	.word	0x40010000
 8004bcc:	48000400 	.word	0x48000400
 8004bd0:	48000800 	.word	0x48000800
 8004bd4:	48000c00 	.word	0x48000c00
 8004bd8:	48001000 	.word	0x48001000
 8004bdc:	48001400 	.word	0x48001400
 8004be0:	48001800 	.word	0x48001800
 8004be4:	40010400 	.word	0x40010400

08004be8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004bf6:	e0cd      	b.n	8004d94 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	4013      	ands	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80c0 	beq.w	8004d8e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004c0e:	4a68      	ldr	r2, [pc, #416]	@ (8004db0 <HAL_GPIO_DeInit+0x1c8>)
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	089b      	lsrs	r3, r3, #2
 8004c14:	3302      	adds	r3, #2
 8004c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	220f      	movs	r2, #15
 8004c26:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004c36:	d025      	beq.n	8004c84 <HAL_GPIO_DeInit+0x9c>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a5e      	ldr	r2, [pc, #376]	@ (8004db4 <HAL_GPIO_DeInit+0x1cc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d01f      	beq.n	8004c80 <HAL_GPIO_DeInit+0x98>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a5d      	ldr	r2, [pc, #372]	@ (8004db8 <HAL_GPIO_DeInit+0x1d0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d019      	beq.n	8004c7c <HAL_GPIO_DeInit+0x94>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a5c      	ldr	r2, [pc, #368]	@ (8004dbc <HAL_GPIO_DeInit+0x1d4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d013      	beq.n	8004c78 <HAL_GPIO_DeInit+0x90>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a5b      	ldr	r2, [pc, #364]	@ (8004dc0 <HAL_GPIO_DeInit+0x1d8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00d      	beq.n	8004c74 <HAL_GPIO_DeInit+0x8c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a5a      	ldr	r2, [pc, #360]	@ (8004dc4 <HAL_GPIO_DeInit+0x1dc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d007      	beq.n	8004c70 <HAL_GPIO_DeInit+0x88>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a59      	ldr	r2, [pc, #356]	@ (8004dc8 <HAL_GPIO_DeInit+0x1e0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d101      	bne.n	8004c6c <HAL_GPIO_DeInit+0x84>
 8004c68:	2306      	movs	r3, #6
 8004c6a:	e00c      	b.n	8004c86 <HAL_GPIO_DeInit+0x9e>
 8004c6c:	2307      	movs	r3, #7
 8004c6e:	e00a      	b.n	8004c86 <HAL_GPIO_DeInit+0x9e>
 8004c70:	2305      	movs	r3, #5
 8004c72:	e008      	b.n	8004c86 <HAL_GPIO_DeInit+0x9e>
 8004c74:	2304      	movs	r3, #4
 8004c76:	e006      	b.n	8004c86 <HAL_GPIO_DeInit+0x9e>
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e004      	b.n	8004c86 <HAL_GPIO_DeInit+0x9e>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e002      	b.n	8004c86 <HAL_GPIO_DeInit+0x9e>
 8004c80:	2301      	movs	r3, #1
 8004c82:	e000      	b.n	8004c86 <HAL_GPIO_DeInit+0x9e>
 8004c84:	2300      	movs	r3, #0
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	f002 0203 	and.w	r2, r2, #3
 8004c8c:	0092      	lsls	r2, r2, #2
 8004c8e:	4093      	lsls	r3, r2
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d132      	bne.n	8004cfc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004c96:	4b4d      	ldr	r3, [pc, #308]	@ (8004dcc <HAL_GPIO_DeInit+0x1e4>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	494b      	ldr	r1, [pc, #300]	@ (8004dcc <HAL_GPIO_DeInit+0x1e4>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004ca4:	4b49      	ldr	r3, [pc, #292]	@ (8004dcc <HAL_GPIO_DeInit+0x1e4>)
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	4947      	ldr	r1, [pc, #284]	@ (8004dcc <HAL_GPIO_DeInit+0x1e4>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004cb2:	4b46      	ldr	r3, [pc, #280]	@ (8004dcc <HAL_GPIO_DeInit+0x1e4>)
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	4944      	ldr	r1, [pc, #272]	@ (8004dcc <HAL_GPIO_DeInit+0x1e4>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004cc0:	4b42      	ldr	r3, [pc, #264]	@ (8004dcc <HAL_GPIO_DeInit+0x1e4>)
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	4940      	ldr	r1, [pc, #256]	@ (8004dcc <HAL_GPIO_DeInit+0x1e4>)
 8004cca:	4013      	ands	r3, r2
 8004ccc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	220f      	movs	r2, #15
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004cde:	4a34      	ldr	r2, [pc, #208]	@ (8004db0 <HAL_GPIO_DeInit+0x1c8>)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	3302      	adds	r3, #2
 8004ce6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	43da      	mvns	r2, r3
 8004cee:	4830      	ldr	r0, [pc, #192]	@ (8004db0 <HAL_GPIO_DeInit+0x1c8>)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	089b      	lsrs	r3, r3, #2
 8004cf4:	400a      	ands	r2, r1
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	2103      	movs	r1, #3
 8004d06:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	08da      	lsrs	r2, r3, #3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3208      	adds	r2, #8
 8004d18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	220f      	movs	r2, #15
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	08d2      	lsrs	r2, r2, #3
 8004d30:	4019      	ands	r1, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3208      	adds	r2, #8
 8004d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	2103      	movs	r1, #3
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	43db      	mvns	r3, r3
 8004d4a:	401a      	ands	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	2101      	movs	r1, #1
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	fa01 f303 	lsl.w	r3, r1, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	401a      	ands	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68da      	ldr	r2, [r3, #12]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	2103      	movs	r1, #3
 8004d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	401a      	ands	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7e:	2101      	movs	r1, #1
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	fa01 f303 	lsl.w	r3, r1, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	401a      	ands	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	3301      	adds	r3, #1
 8004d92:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f47f af2b 	bne.w	8004bf8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	40010000 	.word	0x40010000
 8004db4:	48000400 	.word	0x48000400
 8004db8:	48000800 	.word	0x48000800
 8004dbc:	48000c00 	.word	0x48000c00
 8004dc0:	48001000 	.word	0x48001000
 8004dc4:	48001400 	.word	0x48001400
 8004dc8:	48001800 	.word	0x48001800
 8004dcc:	40010400 	.word	0x40010400

08004dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004de0:	787b      	ldrb	r3, [r7, #1]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004de6:	887a      	ldrh	r2, [r7, #2]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004dec:	e002      	b.n	8004df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dee:	887a      	ldrh	r2, [r7, #2]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e12:	887a      	ldrh	r2, [r7, #2]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4013      	ands	r3, r2
 8004e18:	041a      	lsls	r2, r3, #16
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	43d9      	mvns	r1, r3
 8004e1e:	887b      	ldrh	r3, [r7, #2]
 8004e20:	400b      	ands	r3, r1
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	619a      	str	r2, [r3, #24]
}
 8004e28:	bf00      	nop
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e3e:	4b08      	ldr	r3, [pc, #32]	@ (8004e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e40:	695a      	ldr	r2, [r3, #20]
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d006      	beq.n	8004e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e4a:	4a05      	ldr	r2, [pc, #20]	@ (8004e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e4c:	88fb      	ldrh	r3, [r7, #6]
 8004e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e50:	88fb      	ldrh	r3, [r7, #6]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fc f84e 	bl	8000ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e58:	bf00      	nop
 8004e5a:	3708      	adds	r7, #8
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40010400 	.word	0x40010400

08004e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e08d      	b.n	8004f92 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fd fe76 	bl	8002b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2224      	movs	r2, #36	@ 0x24
 8004e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 0201 	bic.w	r2, r2, #1
 8004ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004eb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ec4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d107      	bne.n	8004ede <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004eda:	609a      	str	r2, [r3, #8]
 8004edc:	e006      	b.n	8004eec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004eea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d108      	bne.n	8004f06 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f02:	605a      	str	r2, [r3, #4]
 8004f04:	e007      	b.n	8004f16 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f14:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f28:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f38:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691a      	ldr	r2, [r3, #16]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69d9      	ldr	r1, [r3, #28]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a1a      	ldr	r2, [r3, #32]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f042 0201 	orr.w	r2, r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e021      	b.n	8004ff0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2224      	movs	r2, #36	@ 0x24
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7fd fe37 	bl	8002c38 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3708      	adds	r7, #8
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b088      	sub	sp, #32
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	461a      	mov	r2, r3
 8005006:	4603      	mov	r3, r0
 8005008:	817b      	strh	r3, [r7, #10]
 800500a:	460b      	mov	r3, r1
 800500c:	813b      	strh	r3, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b20      	cmp	r3, #32
 800501c:	f040 80f9 	bne.w	8005212 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_I2C_Mem_Write+0x34>
 8005026:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005032:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0ed      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <HAL_I2C_Mem_Write+0x4e>
 8005042:	2302      	movs	r3, #2
 8005044:	e0e6      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800504e:	f7ff f9d3 	bl	80043f8 <HAL_GetTick>
 8005052:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2319      	movs	r3, #25
 800505a:	2201      	movs	r2, #1
 800505c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fac3 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0d1      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2221      	movs	r2, #33	@ 0x21
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2240      	movs	r2, #64	@ 0x40
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a3a      	ldr	r2, [r7, #32]
 800508a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005090:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005098:	88f8      	ldrh	r0, [r7, #6]
 800509a:	893a      	ldrh	r2, [r7, #8]
 800509c:	8979      	ldrh	r1, [r7, #10]
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	4603      	mov	r3, r0
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f9d3 	bl	8005454 <I2C_RequestMemoryWrite>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0a9      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2bff      	cmp	r3, #255	@ 0xff
 80050c8:	d90e      	bls.n	80050e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	22ff      	movs	r2, #255	@ 0xff
 80050ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	8979      	ldrh	r1, [r7, #10]
 80050d8:	2300      	movs	r3, #0
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fc47 	bl	8005974 <I2C_TransferConfig>
 80050e6:	e00f      	b.n	8005108 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	8979      	ldrh	r1, [r7, #10]
 80050fa:	2300      	movs	r3, #0
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fc36 	bl	8005974 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 fac6 	bl	800569e <I2C_WaitOnTXISFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e07b      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d034      	beq.n	80051c0 <HAL_I2C_Mem_Write+0x1c8>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d130      	bne.n	80051c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005164:	2200      	movs	r2, #0
 8005166:	2180      	movs	r1, #128	@ 0x80
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 fa3f 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e04d      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517c:	b29b      	uxth	r3, r3
 800517e:	2bff      	cmp	r3, #255	@ 0xff
 8005180:	d90e      	bls.n	80051a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	22ff      	movs	r2, #255	@ 0xff
 8005186:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518c:	b2da      	uxtb	r2, r3
 800518e:	8979      	ldrh	r1, [r7, #10]
 8005190:	2300      	movs	r3, #0
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 fbeb 	bl	8005974 <I2C_TransferConfig>
 800519e:	e00f      	b.n	80051c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	8979      	ldrh	r1, [r7, #10]
 80051b2:	2300      	movs	r3, #0
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fbda 	bl	8005974 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d19e      	bne.n	8005108 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 faac 	bl	800572c <I2C_WaitOnSTOPFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e01a      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2220      	movs	r2, #32
 80051e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6859      	ldr	r1, [r3, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	4b0a      	ldr	r3, [pc, #40]	@ (800521c <HAL_I2C_Mem_Write+0x224>)
 80051f2:	400b      	ands	r3, r1
 80051f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e000      	b.n	8005214 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005212:	2302      	movs	r3, #2
  }
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	fe00e800 	.word	0xfe00e800

08005220 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	4608      	mov	r0, r1
 800522a:	4611      	mov	r1, r2
 800522c:	461a      	mov	r2, r3
 800522e:	4603      	mov	r3, r0
 8005230:	817b      	strh	r3, [r7, #10]
 8005232:	460b      	mov	r3, r1
 8005234:	813b      	strh	r3, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b20      	cmp	r3, #32
 8005244:	f040 80fd 	bne.w	8005442 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <HAL_I2C_Mem_Read+0x34>
 800524e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800525a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800525c:	2301      	movs	r3, #1
 800525e:	e0f1      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_I2C_Mem_Read+0x4e>
 800526a:	2302      	movs	r3, #2
 800526c:	e0ea      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005276:	f7ff f8bf 	bl	80043f8 <HAL_GetTick>
 800527a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2319      	movs	r3, #25
 8005282:	2201      	movs	r2, #1
 8005284:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f9af 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	e0d5      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2222      	movs	r2, #34	@ 0x22
 800529c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2240      	movs	r2, #64	@ 0x40
 80052a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a3a      	ldr	r2, [r7, #32]
 80052b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80052b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80052c0:	88f8      	ldrh	r0, [r7, #6]
 80052c2:	893a      	ldrh	r2, [r7, #8]
 80052c4:	8979      	ldrh	r1, [r7, #10]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	9301      	str	r3, [sp, #4]
 80052ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	4603      	mov	r3, r0
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f913 	bl	80054fc <I2C_RequestMemoryRead>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d005      	beq.n	80052e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0ad      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2bff      	cmp	r3, #255	@ 0xff
 80052f0:	d90e      	bls.n	8005310 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	8979      	ldrh	r1, [r7, #10]
 8005300:	4b52      	ldr	r3, [pc, #328]	@ (800544c <HAL_I2C_Mem_Read+0x22c>)
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 fb33 	bl	8005974 <I2C_TransferConfig>
 800530e:	e00f      	b.n	8005330 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531e:	b2da      	uxtb	r2, r3
 8005320:	8979      	ldrh	r1, [r7, #10]
 8005322:	4b4a      	ldr	r3, [pc, #296]	@ (800544c <HAL_I2C_Mem_Read+0x22c>)
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 fb22 	bl	8005974 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005336:	2200      	movs	r2, #0
 8005338:	2104      	movs	r1, #4
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 f956 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e07c      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	b2d2      	uxtb	r2, r2
 8005356:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535c:	1c5a      	adds	r2, r3, #1
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005366:	3b01      	subs	r3, #1
 8005368:	b29a      	uxth	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005372:	b29b      	uxth	r3, r3
 8005374:	3b01      	subs	r3, #1
 8005376:	b29a      	uxth	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d034      	beq.n	80053f0 <HAL_I2C_Mem_Read+0x1d0>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d130      	bne.n	80053f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	9300      	str	r3, [sp, #0]
 8005392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005394:	2200      	movs	r2, #0
 8005396:	2180      	movs	r1, #128	@ 0x80
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 f927 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d001      	beq.n	80053a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e04d      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2bff      	cmp	r3, #255	@ 0xff
 80053b0:	d90e      	bls.n	80053d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053bc:	b2da      	uxtb	r2, r3
 80053be:	8979      	ldrh	r1, [r7, #10]
 80053c0:	2300      	movs	r3, #0
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fad3 	bl	8005974 <I2C_TransferConfig>
 80053ce:	e00f      	b.n	80053f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	8979      	ldrh	r1, [r7, #10]
 80053e2:	2300      	movs	r3, #0
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 fac2 	bl	8005974 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d19a      	bne.n	8005330 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f994 	bl	800572c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e01a      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2220      	movs	r2, #32
 8005414:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6859      	ldr	r1, [r3, #4]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <HAL_I2C_Mem_Read+0x230>)
 8005422:	400b      	ands	r3, r1
 8005424:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	e000      	b.n	8005444 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005442:	2302      	movs	r3, #2
  }
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	80002400 	.word	0x80002400
 8005450:	fe00e800 	.word	0xfe00e800

08005454 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	461a      	mov	r2, r3
 8005462:	4603      	mov	r3, r0
 8005464:	817b      	strh	r3, [r7, #10]
 8005466:	460b      	mov	r3, r1
 8005468:	813b      	strh	r3, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800546e:	88fb      	ldrh	r3, [r7, #6]
 8005470:	b2da      	uxtb	r2, r3
 8005472:	8979      	ldrh	r1, [r7, #10]
 8005474:	4b20      	ldr	r3, [pc, #128]	@ (80054f8 <I2C_RequestMemoryWrite+0xa4>)
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 fa79 	bl	8005974 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	69b9      	ldr	r1, [r7, #24]
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 f909 	bl	800569e <I2C_WaitOnTXISFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e02c      	b.n	80054f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d105      	bne.n	80054a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800549c:	893b      	ldrh	r3, [r7, #8]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80054a6:	e015      	b.n	80054d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054a8:	893b      	ldrh	r3, [r7, #8]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	69b9      	ldr	r1, [r7, #24]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 f8ef 	bl	800569e <I2C_WaitOnTXISFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e012      	b.n	80054f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054ca:	893b      	ldrh	r3, [r7, #8]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	2200      	movs	r2, #0
 80054dc:	2180      	movs	r1, #128	@ 0x80
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 f884 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	80002000 	.word	0x80002000

080054fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	461a      	mov	r2, r3
 800550a:	4603      	mov	r3, r0
 800550c:	817b      	strh	r3, [r7, #10]
 800550e:	460b      	mov	r3, r1
 8005510:	813b      	strh	r3, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005516:	88fb      	ldrh	r3, [r7, #6]
 8005518:	b2da      	uxtb	r2, r3
 800551a:	8979      	ldrh	r1, [r7, #10]
 800551c:	4b20      	ldr	r3, [pc, #128]	@ (80055a0 <I2C_RequestMemoryRead+0xa4>)
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	2300      	movs	r3, #0
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 fa26 	bl	8005974 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	69b9      	ldr	r1, [r7, #24]
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f8b6 	bl	800569e <I2C_WaitOnTXISFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e02c      	b.n	8005596 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800553c:	88fb      	ldrh	r3, [r7, #6]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d105      	bne.n	800554e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005542:	893b      	ldrh	r3, [r7, #8]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	629a      	str	r2, [r3, #40]	@ 0x28
 800554c:	e015      	b.n	800557a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800554e:	893b      	ldrh	r3, [r7, #8]
 8005550:	0a1b      	lsrs	r3, r3, #8
 8005552:	b29b      	uxth	r3, r3
 8005554:	b2da      	uxtb	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	69b9      	ldr	r1, [r7, #24]
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f89c 	bl	800569e <I2C_WaitOnTXISFlagUntilTimeout>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e012      	b.n	8005596 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005570:	893b      	ldrh	r3, [r7, #8]
 8005572:	b2da      	uxtb	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	2200      	movs	r2, #0
 8005582:	2140      	movs	r1, #64	@ 0x40
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f831 	bl	80055ec <I2C_WaitOnFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	80002000 	.word	0x80002000

080055a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d103      	bne.n	80055c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d007      	beq.n	80055e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	699a      	ldr	r2, [r3, #24]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	619a      	str	r2, [r3, #24]
  }
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	603b      	str	r3, [r7, #0]
 80055f8:	4613      	mov	r3, r2
 80055fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055fc:	e03b      	b.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	6839      	ldr	r1, [r7, #0]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f8d6 	bl	80057b4 <I2C_IsErrorOccurred>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e041      	b.n	8005696 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005618:	d02d      	beq.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561a:	f7fe feed 	bl	80043f8 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d302      	bcc.n	8005630 <I2C_WaitOnFlagUntilTimeout+0x44>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d122      	bne.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	4013      	ands	r3, r2
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	429a      	cmp	r2, r3
 800563e:	bf0c      	ite	eq
 8005640:	2301      	moveq	r3, #1
 8005642:	2300      	movne	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	429a      	cmp	r2, r3
 800564c:	d113      	bne.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	f043 0220 	orr.w	r2, r3, #32
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e00f      	b.n	8005696 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4013      	ands	r3, r2
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	429a      	cmp	r2, r3
 8005684:	bf0c      	ite	eq
 8005686:	2301      	moveq	r3, #1
 8005688:	2300      	movne	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	429a      	cmp	r2, r3
 8005692:	d0b4      	beq.n	80055fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056aa:	e033      	b.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f87f 	bl	80057b4 <I2C_IsErrorOccurred>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e031      	b.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056c6:	d025      	beq.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c8:	f7fe fe96 	bl	80043f8 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d11a      	bne.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d013      	beq.n	8005714 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2220      	movs	r2, #32
 80056fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e007      	b.n	8005724 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b02      	cmp	r3, #2
 8005720:	d1c4      	bne.n	80056ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005738:	e02f      	b.n	800579a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f838 	bl	80057b4 <I2C_IsErrorOccurred>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e02d      	b.n	80057aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574e:	f7fe fe53 	bl	80043f8 <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	d302      	bcc.n	8005764 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d11a      	bne.n	800579a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b20      	cmp	r3, #32
 8005770:	d013      	beq.n	800579a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005776:	f043 0220 	orr.w	r2, r3, #32
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e007      	b.n	80057aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f003 0320 	and.w	r3, r3, #32
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d1c8      	bne.n	800573a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08a      	sub	sp, #40	@ 0x28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d068      	beq.n	80058b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2210      	movs	r2, #16
 80057e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80057e8:	e049      	b.n	800587e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057f0:	d045      	beq.n	800587e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057f2:	f7fe fe01 	bl	80043f8 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d302      	bcc.n	8005808 <I2C_IsErrorOccurred+0x54>
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d13a      	bne.n	800587e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005812:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800581a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005826:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800582a:	d121      	bne.n	8005870 <I2C_IsErrorOccurred+0xbc>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005832:	d01d      	beq.n	8005870 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	2b20      	cmp	r3, #32
 8005838:	d01a      	beq.n	8005870 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005848:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800584a:	f7fe fdd5 	bl	80043f8 <HAL_GetTick>
 800584e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005850:	e00e      	b.n	8005870 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005852:	f7fe fdd1 	bl	80043f8 <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	2b19      	cmp	r3, #25
 800585e:	d907      	bls.n	8005870 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	f043 0320 	orr.w	r3, r3, #32
 8005866:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800586e:	e006      	b.n	800587e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b20      	cmp	r3, #32
 800587c:	d1e9      	bne.n	8005852 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	f003 0320 	and.w	r3, r3, #32
 8005888:	2b20      	cmp	r3, #32
 800588a:	d003      	beq.n	8005894 <I2C_IsErrorOccurred+0xe0>
 800588c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0aa      	beq.n	80057ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2220      	movs	r2, #32
 80058a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	f043 0304 	orr.w	r3, r3, #4
 80058aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00b      	beq.n	80058dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00b      	beq.n	80058fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	f043 0308 	orr.w	r3, r3, #8
 80058ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80058f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	f043 0302 	orr.w	r3, r3, #2
 800590e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005918:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005920:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01c      	beq.n	8005962 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f7ff fe3b 	bl	80055a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6859      	ldr	r1, [r3, #4]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <I2C_IsErrorOccurred+0x1bc>)
 800593a:	400b      	ands	r3, r1
 800593c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	431a      	orrs	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2220      	movs	r2, #32
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005966:	4618      	mov	r0, r3
 8005968:	3728      	adds	r7, #40	@ 0x28
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	fe00e800 	.word	0xfe00e800

08005974 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	817b      	strh	r3, [r7, #10]
 8005982:	4613      	mov	r3, r2
 8005984:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005986:	897b      	ldrh	r3, [r7, #10]
 8005988:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800598c:	7a7b      	ldrb	r3, [r7, #9]
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005994:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	4313      	orrs	r3, r2
 800599e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	0d5b      	lsrs	r3, r3, #21
 80059ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80059b2:	4b08      	ldr	r3, [pc, #32]	@ (80059d4 <I2C_TransferConfig+0x60>)
 80059b4:	430b      	orrs	r3, r1
 80059b6:	43db      	mvns	r3, r3
 80059b8:	ea02 0103 	and.w	r1, r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	03ff63ff 	.word	0x03ff63ff

080059d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d138      	bne.n	8005a60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e032      	b.n	8005a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2224      	movs	r2, #36	@ 0x24
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0201 	bic.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6819      	ldr	r1, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f042 0201 	orr.w	r2, r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	e000      	b.n	8005a62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a60:	2302      	movs	r3, #2
  }
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d139      	bne.n	8005af8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e033      	b.n	8005afa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2224      	movs	r2, #36	@ 0x24
 8005a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0201 	bic.w	r2, r2, #1
 8005ab0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ac0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	e000      	b.n	8005afa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005af8:	2302      	movs	r3, #2
  }
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b086      	sub	sp, #24
 8005b0a:	af02      	add	r7, sp, #8
 8005b0c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e101      	b.n	8005d1c <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d106      	bne.n	8005b32 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fd f9d3 	bl	8002ed8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2203      	movs	r2, #3
 8005b36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f002 fb97 	bl	8008278 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	7c1a      	ldrb	r2, [r3, #16]
 8005b52:	f88d 2000 	strb.w	r2, [sp]
 8005b56:	3304      	adds	r3, #4
 8005b58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b5a:	f002 fb60 	bl	800821e <USB_CoreInit>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e0d5      	b.n	8005d1c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2100      	movs	r1, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	f002 fb8f 	bl	800829a <USB_SetCurrentMode>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2202      	movs	r2, #2
 8005b86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e0c6      	b.n	8005d1c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b8e:	2300      	movs	r3, #0
 8005b90:	73fb      	strb	r3, [r7, #15]
 8005b92:	e04a      	b.n	8005c2a <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b94:	7bfa      	ldrb	r2, [r7, #15]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	00db      	lsls	r3, r3, #3
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	3315      	adds	r3, #21
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005ba8:	7bfa      	ldrb	r2, [r7, #15]
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	3314      	adds	r3, #20
 8005bb8:	7bfa      	ldrb	r2, [r7, #15]
 8005bba:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005bbc:	7bfa      	ldrb	r2, [r7, #15]
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	b298      	uxth	r0, r3
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	332e      	adds	r3, #46	@ 0x2e
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bd4:	7bfa      	ldrb	r2, [r7, #15]
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	00db      	lsls	r3, r3, #3
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	3318      	adds	r3, #24
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005be8:	7bfa      	ldrb	r2, [r7, #15]
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	4613      	mov	r3, r2
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	331c      	adds	r3, #28
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005bfc:	7bfa      	ldrb	r2, [r7, #15]
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	3320      	adds	r3, #32
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005c10:	7bfa      	ldrb	r2, [r7, #15]
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	440b      	add	r3, r1
 8005c1e:	3324      	adds	r3, #36	@ 0x24
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	3301      	adds	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	791b      	ldrb	r3, [r3, #4]
 8005c2e:	7bfa      	ldrb	r2, [r7, #15]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d3af      	bcc.n	8005b94 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c34:	2300      	movs	r3, #0
 8005c36:	73fb      	strb	r3, [r7, #15]
 8005c38:	e044      	b.n	8005cc4 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c3a:	7bfa      	ldrb	r2, [r7, #15]
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c50:	7bfa      	ldrb	r2, [r7, #15]
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	4613      	mov	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005c62:	7bfa      	ldrb	r2, [r7, #15]
 8005c64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c66:	7bfa      	ldrb	r2, [r7, #15]
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005c78:	2200      	movs	r2, #0
 8005c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c7c:	7bfa      	ldrb	r2, [r7, #15]
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ca8:	7bfa      	ldrb	r2, [r7, #15]
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	4613      	mov	r3, r2
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	440b      	add	r3, r1
 8005cb6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005cba:	2200      	movs	r2, #0
 8005cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	73fb      	strb	r3, [r7, #15]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	791b      	ldrb	r3, [r3, #4]
 8005cc8:	7bfa      	ldrb	r2, [r7, #15]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d3b5      	bcc.n	8005c3a <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	7c1a      	ldrb	r2, [r3, #16]
 8005cd6:	f88d 2000 	strb.w	r2, [sp]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cde:	f002 fb29 	bl	8008334 <USB_DevInit>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e013      	b.n	8005d1c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	7b1b      	ldrb	r3, [r3, #12]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d102      	bne.n	8005d10 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f80a 	bl	8005d24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f002 fcce 	bl	80086b6 <USB_DevDisconnect>

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d56:	f043 0303 	orr.w	r3, r3, #3
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d70:	4b05      	ldr	r3, [pc, #20]	@ (8005d88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a04      	ldr	r2, [pc, #16]	@ (8005d88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d7a:	6013      	str	r3, [r2, #0]
}
 8005d7c:	bf00      	nop
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	40007000 	.word	0x40007000

08005d8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005d90:	4b04      	ldr	r3, [pc, #16]	@ (8005da4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40007000 	.word	0x40007000

08005da8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005db6:	d130      	bne.n	8005e1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005db8:	4b23      	ldr	r3, [pc, #140]	@ (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dc4:	d038      	beq.n	8005e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005dc6:	4b20      	ldr	r3, [pc, #128]	@ (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005dce:	4a1e      	ldr	r2, [pc, #120]	@ (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005dd0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005dd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2232      	movs	r2, #50	@ 0x32
 8005ddc:	fb02 f303 	mul.w	r3, r2, r3
 8005de0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	0c9b      	lsrs	r3, r3, #18
 8005de8:	3301      	adds	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dec:	e002      	b.n	8005df4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005df4:	4b14      	ldr	r3, [pc, #80]	@ (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e00:	d102      	bne.n	8005e08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f2      	bne.n	8005dee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e08:	4b0f      	ldr	r3, [pc, #60]	@ (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e14:	d110      	bne.n	8005e38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e00f      	b.n	8005e3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e26:	d007      	beq.n	8005e38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e28:	4b07      	ldr	r3, [pc, #28]	@ (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e30:	4a05      	ldr	r2, [pc, #20]	@ (8005e48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005e32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40007000 	.word	0x40007000
 8005e4c:	20000004 	.word	0x20000004
 8005e50:	431bde83 	.word	0x431bde83

08005e54 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005e58:	4b05      	ldr	r3, [pc, #20]	@ (8005e70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	4a04      	ldr	r2, [pc, #16]	@ (8005e70 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e62:	6053      	str	r3, [r2, #4]
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40007000 	.word	0x40007000

08005e74 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005e7c:	f7fe fabc 	bl	80043f8 <HAL_GetTick>
 8005e80:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d101      	bne.n	8005e8c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e063      	b.n	8005f54 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7fc feed 	bl	8002c80 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005ea6:	f241 3188 	movw	r1, #5000	@ 0x1388
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f858 	bl	8005f60 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	021a      	lsls	r2, r3, #8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2120      	movs	r1, #32
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f850 	bl	8005f7c <QSPI_WaitFlagStateUntilTimeout>
 8005edc:	4603      	mov	r3, r0
 8005ede:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005ee0:	7afb      	ldrb	r3, [r7, #11]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d131      	bne.n	8005f4a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005ef0:	f023 0310 	bic.w	r3, r3, #16
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6852      	ldr	r2, [r2, #4]
 8005ef8:	0611      	lsls	r1, r2, #24
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68d2      	ldr	r2, [r2, #12]
 8005efe:	4311      	orrs	r1, r2
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6812      	ldr	r2, [r2, #0]
 8005f04:	430b      	orrs	r3, r1
 8005f06:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	4b13      	ldr	r3, [pc, #76]	@ (8005f5c <HAL_QSPI_Init+0xe8>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6912      	ldr	r2, [r2, #16]
 8005f16:	0411      	lsls	r1, r2, #16
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6952      	ldr	r2, [r2, #20]
 8005f1c:	4311      	orrs	r1, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6992      	ldr	r2, [r2, #24]
 8005f22:	4311      	orrs	r1, r2
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6812      	ldr	r2, [r2, #0]
 8005f28:	430b      	orrs	r3, r1
 8005f2a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8005f52:	7afb      	ldrb	r3, [r7, #11]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	ffe0f8fe 	.word	0xffe0f8fe

08005f60 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005f8c:	e01a      	b.n	8005fc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f94:	d016      	beq.n	8005fc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f96:	f7fe fa2f 	bl	80043f8 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d302      	bcc.n	8005fac <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10b      	bne.n	8005fc4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2204      	movs	r2, #4
 8005fb0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb8:	f043 0201 	orr.w	r2, r3, #1
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e00e      	b.n	8005fe2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	bf14      	ite	ne
 8005fd2:	2301      	movne	r3, #1
 8005fd4:	2300      	moveq	r3, #0
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d1d6      	bne.n	8005f8e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b088      	sub	sp, #32
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d101      	bne.n	8005ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e3ca      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ffe:	4b97      	ldr	r3, [pc, #604]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f003 030c 	and.w	r3, r3, #12
 8006006:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006008:	4b94      	ldr	r3, [pc, #592]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0303 	and.w	r3, r3, #3
 8006010:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0310 	and.w	r3, r3, #16
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80e4 	beq.w	80061e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <HAL_RCC_OscConfig+0x4a>
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	2b0c      	cmp	r3, #12
 800602a:	f040 808b 	bne.w	8006144 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b01      	cmp	r3, #1
 8006032:	f040 8087 	bne.w	8006144 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006036:	4b89      	ldr	r3, [pc, #548]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d005      	beq.n	800604e <HAL_RCC_OscConfig+0x62>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e3a2      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1a      	ldr	r2, [r3, #32]
 8006052:	4b82      	ldr	r3, [pc, #520]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d004      	beq.n	8006068 <HAL_RCC_OscConfig+0x7c>
 800605e:	4b7f      	ldr	r3, [pc, #508]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006066:	e005      	b.n	8006074 <HAL_RCC_OscConfig+0x88>
 8006068:	4b7c      	ldr	r3, [pc, #496]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 800606a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800606e:	091b      	lsrs	r3, r3, #4
 8006070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006074:	4293      	cmp	r3, r2
 8006076:	d223      	bcs.n	80060c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fd55 	bl	8006b2c <RCC_SetFlashLatencyFromMSIRange>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e383      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800608c:	4b73      	ldr	r3, [pc, #460]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a72      	ldr	r2, [pc, #456]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006092:	f043 0308 	orr.w	r3, r3, #8
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	4b70      	ldr	r3, [pc, #448]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	496d      	ldr	r1, [pc, #436]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060aa:	4b6c      	ldr	r3, [pc, #432]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	4968      	ldr	r1, [pc, #416]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	604b      	str	r3, [r1, #4]
 80060be:	e025      	b.n	800610c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060c0:	4b66      	ldr	r3, [pc, #408]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a65      	ldr	r2, [pc, #404]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80060c6:	f043 0308 	orr.w	r3, r3, #8
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	4b63      	ldr	r3, [pc, #396]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	4960      	ldr	r1, [pc, #384]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80060de:	4b5f      	ldr	r3, [pc, #380]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	495b      	ldr	r1, [pc, #364]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d109      	bne.n	800610c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 fd15 	bl	8006b2c <RCC_SetFlashLatencyFromMSIRange>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e343      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800610c:	f000 fc4a 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8006110:	4602      	mov	r2, r0
 8006112:	4b52      	ldr	r3, [pc, #328]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	091b      	lsrs	r3, r3, #4
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	4950      	ldr	r1, [pc, #320]	@ (8006260 <HAL_RCC_OscConfig+0x274>)
 800611e:	5ccb      	ldrb	r3, [r1, r3]
 8006120:	f003 031f 	and.w	r3, r3, #31
 8006124:	fa22 f303 	lsr.w	r3, r2, r3
 8006128:	4a4e      	ldr	r2, [pc, #312]	@ (8006264 <HAL_RCC_OscConfig+0x278>)
 800612a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800612c:	4b4e      	ldr	r3, [pc, #312]	@ (8006268 <HAL_RCC_OscConfig+0x27c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f7fe f911 	bl	8004358 <HAL_InitTick>
 8006136:	4603      	mov	r3, r0
 8006138:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800613a:	7bfb      	ldrb	r3, [r7, #15]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d052      	beq.n	80061e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	e327      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	699b      	ldr	r3, [r3, #24]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d032      	beq.n	80061b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800614c:	4b43      	ldr	r3, [pc, #268]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a42      	ldr	r2, [pc, #264]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006158:	f7fe f94e 	bl	80043f8 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006160:	f7fe f94a 	bl	80043f8 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e310      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006172:	4b3a      	ldr	r3, [pc, #232]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0f0      	beq.n	8006160 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800617e:	4b37      	ldr	r3, [pc, #220]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a36      	ldr	r2, [pc, #216]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006184:	f043 0308 	orr.w	r3, r3, #8
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	4b34      	ldr	r3, [pc, #208]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	4931      	ldr	r1, [pc, #196]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006198:	4313      	orrs	r3, r2
 800619a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800619c:	4b2f      	ldr	r3, [pc, #188]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	021b      	lsls	r3, r3, #8
 80061aa:	492c      	ldr	r1, [pc, #176]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]
 80061b0:	e01a      	b.n	80061e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80061b2:	4b2a      	ldr	r3, [pc, #168]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a29      	ldr	r2, [pc, #164]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80061b8:	f023 0301 	bic.w	r3, r3, #1
 80061bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80061be:	f7fe f91b 	bl	80043f8 <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80061c6:	f7fe f917 	bl	80043f8 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e2dd      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80061d8:	4b20      	ldr	r3, [pc, #128]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1f0      	bne.n	80061c6 <HAL_RCC_OscConfig+0x1da>
 80061e4:	e000      	b.n	80061e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80061e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d074      	beq.n	80062de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d005      	beq.n	8006206 <HAL_RCC_OscConfig+0x21a>
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2b0c      	cmp	r3, #12
 80061fe:	d10e      	bne.n	800621e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2b03      	cmp	r3, #3
 8006204:	d10b      	bne.n	800621e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006206:	4b15      	ldr	r3, [pc, #84]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d064      	beq.n	80062dc <HAL_RCC_OscConfig+0x2f0>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d160      	bne.n	80062dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	e2ba      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006226:	d106      	bne.n	8006236 <HAL_RCC_OscConfig+0x24a>
 8006228:	4b0c      	ldr	r3, [pc, #48]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a0b      	ldr	r2, [pc, #44]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 800622e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	e026      	b.n	8006284 <HAL_RCC_OscConfig+0x298>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800623e:	d115      	bne.n	800626c <HAL_RCC_OscConfig+0x280>
 8006240:	4b06      	ldr	r3, [pc, #24]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a05      	ldr	r2, [pc, #20]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006246:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800624a:	6013      	str	r3, [r2, #0]
 800624c:	4b03      	ldr	r3, [pc, #12]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a02      	ldr	r2, [pc, #8]	@ (800625c <HAL_RCC_OscConfig+0x270>)
 8006252:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	e014      	b.n	8006284 <HAL_RCC_OscConfig+0x298>
 800625a:	bf00      	nop
 800625c:	40021000 	.word	0x40021000
 8006260:	0800b74c 	.word	0x0800b74c
 8006264:	20000004 	.word	0x20000004
 8006268:	200000cc 	.word	0x200000cc
 800626c:	4ba0      	ldr	r3, [pc, #640]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a9f      	ldr	r2, [pc, #636]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	4b9d      	ldr	r3, [pc, #628]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a9c      	ldr	r2, [pc, #624]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 800627e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d013      	beq.n	80062b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800628c:	f7fe f8b4 	bl	80043f8 <HAL_GetTick>
 8006290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006292:	e008      	b.n	80062a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006294:	f7fe f8b0 	bl	80043f8 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	2b64      	cmp	r3, #100	@ 0x64
 80062a0:	d901      	bls.n	80062a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e276      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062a6:	4b92      	ldr	r3, [pc, #584]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d0f0      	beq.n	8006294 <HAL_RCC_OscConfig+0x2a8>
 80062b2:	e014      	b.n	80062de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b4:	f7fe f8a0 	bl	80043f8 <HAL_GetTick>
 80062b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062ba:	e008      	b.n	80062ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062bc:	f7fe f89c 	bl	80043f8 <HAL_GetTick>
 80062c0:	4602      	mov	r2, r0
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	2b64      	cmp	r3, #100	@ 0x64
 80062c8:	d901      	bls.n	80062ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e262      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062ce:	4b88      	ldr	r3, [pc, #544]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1f0      	bne.n	80062bc <HAL_RCC_OscConfig+0x2d0>
 80062da:	e000      	b.n	80062de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d060      	beq.n	80063ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	d005      	beq.n	80062fc <HAL_RCC_OscConfig+0x310>
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2b0c      	cmp	r3, #12
 80062f4:	d119      	bne.n	800632a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d116      	bne.n	800632a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062fc:	4b7c      	ldr	r3, [pc, #496]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006304:	2b00      	cmp	r3, #0
 8006306:	d005      	beq.n	8006314 <HAL_RCC_OscConfig+0x328>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d101      	bne.n	8006314 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e23f      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006314:	4b76      	ldr	r3, [pc, #472]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	061b      	lsls	r3, r3, #24
 8006322:	4973      	ldr	r1, [pc, #460]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006324:	4313      	orrs	r3, r2
 8006326:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006328:	e040      	b.n	80063ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d023      	beq.n	800637a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006332:	4b6f      	ldr	r3, [pc, #444]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a6e      	ldr	r2, [pc, #440]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006338:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800633c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633e:	f7fe f85b 	bl	80043f8 <HAL_GetTick>
 8006342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006344:	e008      	b.n	8006358 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006346:	f7fe f857 	bl	80043f8 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b02      	cmp	r3, #2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e21d      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006358:	4b65      	ldr	r3, [pc, #404]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0f0      	beq.n	8006346 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006364:	4b62      	ldr	r3, [pc, #392]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	061b      	lsls	r3, r3, #24
 8006372:	495f      	ldr	r1, [pc, #380]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006374:	4313      	orrs	r3, r2
 8006376:	604b      	str	r3, [r1, #4]
 8006378:	e018      	b.n	80063ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800637a:	4b5d      	ldr	r3, [pc, #372]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a5c      	ldr	r2, [pc, #368]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006380:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006384:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006386:	f7fe f837 	bl	80043f8 <HAL_GetTick>
 800638a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800638c:	e008      	b.n	80063a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800638e:	f7fe f833 	bl	80043f8 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	2b02      	cmp	r3, #2
 800639a:	d901      	bls.n	80063a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	e1f9      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063a0:	4b53      	ldr	r3, [pc, #332]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1f0      	bne.n	800638e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d03c      	beq.n	8006432 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01c      	beq.n	80063fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063c0:	4b4b      	ldr	r3, [pc, #300]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80063c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063c6:	4a4a      	ldr	r2, [pc, #296]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80063c8:	f043 0301 	orr.w	r3, r3, #1
 80063cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d0:	f7fe f812 	bl	80043f8 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063d6:	e008      	b.n	80063ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063d8:	f7fe f80e 	bl	80043f8 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d901      	bls.n	80063ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e1d4      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80063ea:	4b41      	ldr	r3, [pc, #260]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80063ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0ef      	beq.n	80063d8 <HAL_RCC_OscConfig+0x3ec>
 80063f8:	e01b      	b.n	8006432 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063fa:	4b3d      	ldr	r3, [pc, #244]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80063fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006400:	4a3b      	ldr	r2, [pc, #236]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640a:	f7fd fff5 	bl	80043f8 <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006410:	e008      	b.n	8006424 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006412:	f7fd fff1 	bl	80043f8 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d901      	bls.n	8006424 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e1b7      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006424:	4b32      	ldr	r3, [pc, #200]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1ef      	bne.n	8006412 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 80a6 	beq.w	800658c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006440:	2300      	movs	r3, #0
 8006442:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006444:	4b2a      	ldr	r3, [pc, #168]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10d      	bne.n	800646c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006450:	4b27      	ldr	r3, [pc, #156]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006454:	4a26      	ldr	r2, [pc, #152]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 8006456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800645a:	6593      	str	r3, [r2, #88]	@ 0x58
 800645c:	4b24      	ldr	r3, [pc, #144]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 800645e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006464:	60bb      	str	r3, [r7, #8]
 8006466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006468:	2301      	movs	r3, #1
 800646a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800646c:	4b21      	ldr	r3, [pc, #132]	@ (80064f4 <HAL_RCC_OscConfig+0x508>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006474:	2b00      	cmp	r3, #0
 8006476:	d118      	bne.n	80064aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006478:	4b1e      	ldr	r3, [pc, #120]	@ (80064f4 <HAL_RCC_OscConfig+0x508>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1d      	ldr	r2, [pc, #116]	@ (80064f4 <HAL_RCC_OscConfig+0x508>)
 800647e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006482:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006484:	f7fd ffb8 	bl	80043f8 <HAL_GetTick>
 8006488:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800648a:	e008      	b.n	800649e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800648c:	f7fd ffb4 	bl	80043f8 <HAL_GetTick>
 8006490:	4602      	mov	r2, r0
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	2b02      	cmp	r3, #2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e17a      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800649e:	4b15      	ldr	r3, [pc, #84]	@ (80064f4 <HAL_RCC_OscConfig+0x508>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0f0      	beq.n	800648c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d108      	bne.n	80064c4 <HAL_RCC_OscConfig+0x4d8>
 80064b2:	4b0f      	ldr	r3, [pc, #60]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80064b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b8:	4a0d      	ldr	r2, [pc, #52]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064c2:	e029      	b.n	8006518 <HAL_RCC_OscConfig+0x52c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b05      	cmp	r3, #5
 80064ca:	d115      	bne.n	80064f8 <HAL_RCC_OscConfig+0x50c>
 80064cc:	4b08      	ldr	r3, [pc, #32]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d2:	4a07      	ldr	r2, [pc, #28]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80064d4:	f043 0304 	orr.w	r3, r3, #4
 80064d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064dc:	4b04      	ldr	r3, [pc, #16]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e2:	4a03      	ldr	r2, [pc, #12]	@ (80064f0 <HAL_RCC_OscConfig+0x504>)
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80064ec:	e014      	b.n	8006518 <HAL_RCC_OscConfig+0x52c>
 80064ee:	bf00      	nop
 80064f0:	40021000 	.word	0x40021000
 80064f4:	40007000 	.word	0x40007000
 80064f8:	4b9c      	ldr	r3, [pc, #624]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064fe:	4a9b      	ldr	r2, [pc, #620]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 8006500:	f023 0301 	bic.w	r3, r3, #1
 8006504:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006508:	4b98      	ldr	r3, [pc, #608]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 800650a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650e:	4a97      	ldr	r2, [pc, #604]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 8006510:	f023 0304 	bic.w	r3, r3, #4
 8006514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d016      	beq.n	800654e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006520:	f7fd ff6a 	bl	80043f8 <HAL_GetTick>
 8006524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006526:	e00a      	b.n	800653e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006528:	f7fd ff66 	bl	80043f8 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006536:	4293      	cmp	r3, r2
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e12a      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800653e:	4b8b      	ldr	r3, [pc, #556]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 8006540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0ed      	beq.n	8006528 <HAL_RCC_OscConfig+0x53c>
 800654c:	e015      	b.n	800657a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654e:	f7fd ff53 	bl	80043f8 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006554:	e00a      	b.n	800656c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006556:	f7fd ff4f 	bl	80043f8 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006564:	4293      	cmp	r3, r2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e113      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800656c:	4b7f      	ldr	r3, [pc, #508]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 800656e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1ed      	bne.n	8006556 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800657a:	7ffb      	ldrb	r3, [r7, #31]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d105      	bne.n	800658c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006580:	4b7a      	ldr	r3, [pc, #488]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 8006582:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006584:	4a79      	ldr	r2, [pc, #484]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 8006586:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800658a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 80fe 	beq.w	8006792 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659a:	2b02      	cmp	r3, #2
 800659c:	f040 80d0 	bne.w	8006740 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80065a0:	4b72      	ldr	r3, [pc, #456]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	f003 0203 	and.w	r2, r3, #3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d130      	bne.n	8006616 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065be:	3b01      	subs	r3, #1
 80065c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d127      	bne.n	8006616 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d11f      	bne.n	8006616 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80065e0:	2a07      	cmp	r2, #7
 80065e2:	bf14      	ite	ne
 80065e4:	2201      	movne	r2, #1
 80065e6:	2200      	moveq	r2, #0
 80065e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d113      	bne.n	8006616 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	3b01      	subs	r3, #1
 80065fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80065fe:	429a      	cmp	r2, r3
 8006600:	d109      	bne.n	8006616 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660c:	085b      	lsrs	r3, r3, #1
 800660e:	3b01      	subs	r3, #1
 8006610:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006612:	429a      	cmp	r2, r3
 8006614:	d06e      	beq.n	80066f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	2b0c      	cmp	r3, #12
 800661a:	d069      	beq.n	80066f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800661c:	4b53      	ldr	r3, [pc, #332]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d105      	bne.n	8006634 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006628:	4b50      	ldr	r3, [pc, #320]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e0ad      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006638:	4b4c      	ldr	r3, [pc, #304]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a4b      	ldr	r2, [pc, #300]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 800663e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006642:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006644:	f7fd fed8 	bl	80043f8 <HAL_GetTick>
 8006648:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800664c:	f7fd fed4 	bl	80043f8 <HAL_GetTick>
 8006650:	4602      	mov	r2, r0
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e09a      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800665e:	4b43      	ldr	r3, [pc, #268]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1f0      	bne.n	800664c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800666a:	4b40      	ldr	r3, [pc, #256]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	4b40      	ldr	r3, [pc, #256]	@ (8006770 <HAL_RCC_OscConfig+0x784>)
 8006670:	4013      	ands	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800667a:	3a01      	subs	r2, #1
 800667c:	0112      	lsls	r2, r2, #4
 800667e:	4311      	orrs	r1, r2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006684:	0212      	lsls	r2, r2, #8
 8006686:	4311      	orrs	r1, r2
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800668c:	0852      	lsrs	r2, r2, #1
 800668e:	3a01      	subs	r2, #1
 8006690:	0552      	lsls	r2, r2, #21
 8006692:	4311      	orrs	r1, r2
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006698:	0852      	lsrs	r2, r2, #1
 800669a:	3a01      	subs	r2, #1
 800669c:	0652      	lsls	r2, r2, #25
 800669e:	4311      	orrs	r1, r2
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80066a4:	0912      	lsrs	r2, r2, #4
 80066a6:	0452      	lsls	r2, r2, #17
 80066a8:	430a      	orrs	r2, r1
 80066aa:	4930      	ldr	r1, [pc, #192]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80066b0:	4b2e      	ldr	r3, [pc, #184]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2d      	ldr	r2, [pc, #180]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 80066b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80066bc:	4b2b      	ldr	r3, [pc, #172]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	4a2a      	ldr	r2, [pc, #168]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 80066c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80066c8:	f7fd fe96 	bl	80043f8 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d0:	f7fd fe92 	bl	80043f8 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e058      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066e2:	4b22      	ldr	r3, [pc, #136]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d0f0      	beq.n	80066d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066ee:	e050      	b.n	8006792 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e04f      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80066f4:	4b1d      	ldr	r3, [pc, #116]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d148      	bne.n	8006792 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006700:	4b1a      	ldr	r3, [pc, #104]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a19      	ldr	r2, [pc, #100]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 8006706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800670a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800670c:	4b17      	ldr	r3, [pc, #92]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	4a16      	ldr	r2, [pc, #88]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 8006712:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006716:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006718:	f7fd fe6e 	bl	80043f8 <HAL_GetTick>
 800671c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800671e:	e008      	b.n	8006732 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006720:	f7fd fe6a 	bl	80043f8 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d901      	bls.n	8006732 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	e030      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006732:	4b0e      	ldr	r3, [pc, #56]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0f0      	beq.n	8006720 <HAL_RCC_OscConfig+0x734>
 800673e:	e028      	b.n	8006792 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	2b0c      	cmp	r3, #12
 8006744:	d023      	beq.n	800678e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006746:	4b09      	ldr	r3, [pc, #36]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a08      	ldr	r2, [pc, #32]	@ (800676c <HAL_RCC_OscConfig+0x780>)
 800674c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006752:	f7fd fe51 	bl	80043f8 <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006758:	e00c      	b.n	8006774 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800675a:	f7fd fe4d 	bl	80043f8 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d905      	bls.n	8006774 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e013      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
 800676c:	40021000 	.word	0x40021000
 8006770:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006774:	4b09      	ldr	r3, [pc, #36]	@ (800679c <HAL_RCC_OscConfig+0x7b0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1ec      	bne.n	800675a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006780:	4b06      	ldr	r3, [pc, #24]	@ (800679c <HAL_RCC_OscConfig+0x7b0>)
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	4905      	ldr	r1, [pc, #20]	@ (800679c <HAL_RCC_OscConfig+0x7b0>)
 8006786:	4b06      	ldr	r3, [pc, #24]	@ (80067a0 <HAL_RCC_OscConfig+0x7b4>)
 8006788:	4013      	ands	r3, r2
 800678a:	60cb      	str	r3, [r1, #12]
 800678c:	e001      	b.n	8006792 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	40021000 	.word	0x40021000
 80067a0:	feeefffc 	.word	0xfeeefffc

080067a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0e7      	b.n	8006988 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067b8:	4b75      	ldr	r3, [pc, #468]	@ (8006990 <HAL_RCC_ClockConfig+0x1ec>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d910      	bls.n	80067e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067c6:	4b72      	ldr	r3, [pc, #456]	@ (8006990 <HAL_RCC_ClockConfig+0x1ec>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f023 0207 	bic.w	r2, r3, #7
 80067ce:	4970      	ldr	r1, [pc, #448]	@ (8006990 <HAL_RCC_ClockConfig+0x1ec>)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067d6:	4b6e      	ldr	r3, [pc, #440]	@ (8006990 <HAL_RCC_ClockConfig+0x1ec>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0307 	and.w	r3, r3, #7
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d001      	beq.n	80067e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e0cf      	b.n	8006988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d010      	beq.n	8006816 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	4b66      	ldr	r3, [pc, #408]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006800:	429a      	cmp	r2, r3
 8006802:	d908      	bls.n	8006816 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006804:	4b63      	ldr	r3, [pc, #396]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	4960      	ldr	r1, [pc, #384]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 8006812:	4313      	orrs	r3, r2
 8006814:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d04c      	beq.n	80068bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b03      	cmp	r3, #3
 8006828:	d107      	bne.n	800683a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800682a:	4b5a      	ldr	r3, [pc, #360]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d121      	bne.n	800687a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e0a6      	b.n	8006988 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b02      	cmp	r3, #2
 8006840:	d107      	bne.n	8006852 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006842:	4b54      	ldr	r3, [pc, #336]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d115      	bne.n	800687a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e09a      	b.n	8006988 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d107      	bne.n	800686a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800685a:	4b4e      	ldr	r3, [pc, #312]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d109      	bne.n	800687a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e08e      	b.n	8006988 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800686a:	4b4a      	ldr	r3, [pc, #296]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e086      	b.n	8006988 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800687a:	4b46      	ldr	r3, [pc, #280]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f023 0203 	bic.w	r2, r3, #3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4943      	ldr	r1, [pc, #268]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 8006888:	4313      	orrs	r3, r2
 800688a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800688c:	f7fd fdb4 	bl	80043f8 <HAL_GetTick>
 8006890:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006892:	e00a      	b.n	80068aa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006894:	f7fd fdb0 	bl	80043f8 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e06e      	b.n	8006988 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068aa:	4b3a      	ldr	r3, [pc, #232]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 020c 	and.w	r2, r3, #12
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d1eb      	bne.n	8006894 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d010      	beq.n	80068ea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	4b31      	ldr	r3, [pc, #196]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d208      	bcs.n	80068ea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068d8:	4b2e      	ldr	r3, [pc, #184]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	492b      	ldr	r1, [pc, #172]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068ea:	4b29      	ldr	r3, [pc, #164]	@ (8006990 <HAL_RCC_ClockConfig+0x1ec>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d210      	bcs.n	800691a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068f8:	4b25      	ldr	r3, [pc, #148]	@ (8006990 <HAL_RCC_ClockConfig+0x1ec>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f023 0207 	bic.w	r2, r3, #7
 8006900:	4923      	ldr	r1, [pc, #140]	@ (8006990 <HAL_RCC_ClockConfig+0x1ec>)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	4313      	orrs	r3, r2
 8006906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006908:	4b21      	ldr	r3, [pc, #132]	@ (8006990 <HAL_RCC_ClockConfig+0x1ec>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	d001      	beq.n	800691a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e036      	b.n	8006988 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	d008      	beq.n	8006938 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006926:	4b1b      	ldr	r3, [pc, #108]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	4918      	ldr	r1, [pc, #96]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 8006934:	4313      	orrs	r3, r2
 8006936:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b00      	cmp	r3, #0
 8006942:	d009      	beq.n	8006958 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006944:	4b13      	ldr	r3, [pc, #76]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	4910      	ldr	r1, [pc, #64]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 8006954:	4313      	orrs	r3, r2
 8006956:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006958:	f000 f824 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 800695c:	4602      	mov	r2, r0
 800695e:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <HAL_RCC_ClockConfig+0x1f0>)
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	091b      	lsrs	r3, r3, #4
 8006964:	f003 030f 	and.w	r3, r3, #15
 8006968:	490b      	ldr	r1, [pc, #44]	@ (8006998 <HAL_RCC_ClockConfig+0x1f4>)
 800696a:	5ccb      	ldrb	r3, [r1, r3]
 800696c:	f003 031f 	and.w	r3, r3, #31
 8006970:	fa22 f303 	lsr.w	r3, r2, r3
 8006974:	4a09      	ldr	r2, [pc, #36]	@ (800699c <HAL_RCC_ClockConfig+0x1f8>)
 8006976:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006978:	4b09      	ldr	r3, [pc, #36]	@ (80069a0 <HAL_RCC_ClockConfig+0x1fc>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4618      	mov	r0, r3
 800697e:	f7fd fceb 	bl	8004358 <HAL_InitTick>
 8006982:	4603      	mov	r3, r0
 8006984:	72fb      	strb	r3, [r7, #11]

  return status;
 8006986:	7afb      	ldrb	r3, [r7, #11]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40022000 	.word	0x40022000
 8006994:	40021000 	.word	0x40021000
 8006998:	0800b74c 	.word	0x0800b74c
 800699c:	20000004 	.word	0x20000004
 80069a0:	200000cc 	.word	0x200000cc

080069a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b089      	sub	sp, #36	@ 0x24
 80069a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
 80069ae:	2300      	movs	r3, #0
 80069b0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069b2:	4b3e      	ldr	r3, [pc, #248]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x108>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
 80069ba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069bc:	4b3b      	ldr	r3, [pc, #236]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x108>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d005      	beq.n	80069d8 <HAL_RCC_GetSysClockFreq+0x34>
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b0c      	cmp	r3, #12
 80069d0:	d121      	bne.n	8006a16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d11e      	bne.n	8006a16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80069d8:	4b34      	ldr	r3, [pc, #208]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x108>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0308 	and.w	r3, r3, #8
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d107      	bne.n	80069f4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80069e4:	4b31      	ldr	r3, [pc, #196]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x108>)
 80069e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069ea:	0a1b      	lsrs	r3, r3, #8
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	e005      	b.n	8006a00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80069f4:	4b2d      	ldr	r3, [pc, #180]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x108>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	091b      	lsrs	r3, r3, #4
 80069fa:	f003 030f 	and.w	r3, r3, #15
 80069fe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006a00:	4a2b      	ldr	r2, [pc, #172]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10d      	bne.n	8006a2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006a14:	e00a      	b.n	8006a2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d102      	bne.n	8006a22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006a1c:	4b25      	ldr	r3, [pc, #148]	@ (8006ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	e004      	b.n	8006a2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d101      	bne.n	8006a2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006a28:	4b23      	ldr	r3, [pc, #140]	@ (8006ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b0c      	cmp	r3, #12
 8006a30:	d134      	bne.n	8006a9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006a32:	4b1e      	ldr	r3, [pc, #120]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x108>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d003      	beq.n	8006a4a <HAL_RCC_GetSysClockFreq+0xa6>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d003      	beq.n	8006a50 <HAL_RCC_GetSysClockFreq+0xac>
 8006a48:	e005      	b.n	8006a56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006a4c:	617b      	str	r3, [r7, #20]
      break;
 8006a4e:	e005      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006a50:	4b19      	ldr	r3, [pc, #100]	@ (8006ab8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006a52:	617b      	str	r3, [r7, #20]
      break;
 8006a54:	e002      	b.n	8006a5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	617b      	str	r3, [r7, #20]
      break;
 8006a5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006a5c:	4b13      	ldr	r3, [pc, #76]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x108>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	091b      	lsrs	r3, r3, #4
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	3301      	adds	r3, #1
 8006a68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006a6a:	4b10      	ldr	r3, [pc, #64]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x108>)
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	0a1b      	lsrs	r3, r3, #8
 8006a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	fb03 f202 	mul.w	r2, r3, r2
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006a82:	4b0a      	ldr	r3, [pc, #40]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x108>)
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	0e5b      	lsrs	r3, r3, #25
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006a9c:	69bb      	ldr	r3, [r7, #24]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3724      	adds	r7, #36	@ 0x24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	40021000 	.word	0x40021000
 8006ab0:	0800b764 	.word	0x0800b764
 8006ab4:	00f42400 	.word	0x00f42400
 8006ab8:	007a1200 	.word	0x007a1200

08006abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ac0:	4b03      	ldr	r3, [pc, #12]	@ (8006ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	20000004 	.word	0x20000004

08006ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ad8:	f7ff fff0 	bl	8006abc <HAL_RCC_GetHCLKFreq>
 8006adc:	4602      	mov	r2, r0
 8006ade:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	0a1b      	lsrs	r3, r3, #8
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	4904      	ldr	r1, [pc, #16]	@ (8006afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006aea:	5ccb      	ldrb	r3, [r1, r3]
 8006aec:	f003 031f 	and.w	r3, r3, #31
 8006af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	40021000 	.word	0x40021000
 8006afc:	0800b75c 	.word	0x0800b75c

08006b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006b04:	f7ff ffda 	bl	8006abc <HAL_RCC_GetHCLKFreq>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	4b06      	ldr	r3, [pc, #24]	@ (8006b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	0adb      	lsrs	r3, r3, #11
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	4904      	ldr	r1, [pc, #16]	@ (8006b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b16:	5ccb      	ldrb	r3, [r1, r3]
 8006b18:	f003 031f 	and.w	r3, r3, #31
 8006b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	40021000 	.word	0x40021000
 8006b28:	0800b75c 	.word	0x0800b75c

08006b2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006b34:	2300      	movs	r3, #0
 8006b36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006b38:	4b2a      	ldr	r3, [pc, #168]	@ (8006be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d003      	beq.n	8006b4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006b44:	f7ff f922 	bl	8005d8c <HAL_PWREx_GetVoltageRange>
 8006b48:	6178      	str	r0, [r7, #20]
 8006b4a:	e014      	b.n	8006b76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b4c:	4b25      	ldr	r3, [pc, #148]	@ (8006be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b50:	4a24      	ldr	r2, [pc, #144]	@ (8006be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b56:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b58:	4b22      	ldr	r3, [pc, #136]	@ (8006be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b64:	f7ff f912 	bl	8005d8c <HAL_PWREx_GetVoltageRange>
 8006b68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8006be4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006b70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b7c:	d10b      	bne.n	8006b96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b80      	cmp	r3, #128	@ 0x80
 8006b82:	d919      	bls.n	8006bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b88:	d902      	bls.n	8006b90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006b8a:	2302      	movs	r3, #2
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	e013      	b.n	8006bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006b90:	2301      	movs	r3, #1
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	e010      	b.n	8006bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b80      	cmp	r3, #128	@ 0x80
 8006b9a:	d902      	bls.n	8006ba2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	e00a      	b.n	8006bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b80      	cmp	r3, #128	@ 0x80
 8006ba6:	d102      	bne.n	8006bae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ba8:	2302      	movs	r3, #2
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	e004      	b.n	8006bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b70      	cmp	r3, #112	@ 0x70
 8006bb2:	d101      	bne.n	8006bb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8006be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f023 0207 	bic.w	r2, r3, #7
 8006bc0:	4909      	ldr	r1, [pc, #36]	@ (8006be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006bc8:	4b07      	ldr	r3, [pc, #28]	@ (8006be8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d001      	beq.n	8006bda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e000      	b.n	8006bdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	40021000 	.word	0x40021000
 8006be8:	40022000 	.word	0x40022000

08006bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d041      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006c10:	d02a      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006c12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006c16:	d824      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c1c:	d008      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c22:	d81e      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006c28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006c2c:	d010      	beq.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c2e:	e018      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006c30:	4b86      	ldr	r3, [pc, #536]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	4a85      	ldr	r2, [pc, #532]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c3c:	e015      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3304      	adds	r3, #4
 8006c42:	2100      	movs	r1, #0
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 facb 	bl	80071e0 <RCCEx_PLLSAI1_Config>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c4e:	e00c      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3320      	adds	r3, #32
 8006c54:	2100      	movs	r1, #0
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 fbb6 	bl	80073c8 <RCCEx_PLLSAI2_Config>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006c60:	e003      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	74fb      	strb	r3, [r7, #19]
      break;
 8006c66:	e000      	b.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006c68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c6a:	7cfb      	ldrb	r3, [r7, #19]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10b      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c70:	4b76      	ldr	r3, [pc, #472]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c7e:	4973      	ldr	r1, [pc, #460]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006c86:	e001      	b.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c88:	7cfb      	ldrb	r3, [r7, #19]
 8006c8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d041      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ca0:	d02a      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006ca2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ca6:	d824      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006ca8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cac:	d008      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006cae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006cb2:	d81e      	bhi.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00a      	beq.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006cb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cbc:	d010      	beq.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006cbe:	e018      	b.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006cc0:	4b62      	ldr	r3, [pc, #392]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	4a61      	ldr	r2, [pc, #388]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006ccc:	e015      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fa83 	bl	80071e0 <RCCEx_PLLSAI1_Config>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006cde:	e00c      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3320      	adds	r3, #32
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fb6e 	bl	80073c8 <RCCEx_PLLSAI2_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006cf0:	e003      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	74fb      	strb	r3, [r7, #19]
      break;
 8006cf6:	e000      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006cf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cfa:	7cfb      	ldrb	r3, [r7, #19]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10b      	bne.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006d00:	4b52      	ldr	r3, [pc, #328]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d0e:	494f      	ldr	r1, [pc, #316]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8006d16:	e001      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d18:	7cfb      	ldrb	r3, [r7, #19]
 8006d1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 80a0 	beq.w	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006d2e:	4b47      	ldr	r3, [pc, #284]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00d      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d44:	4b41      	ldr	r3, [pc, #260]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d48:	4a40      	ldr	r2, [pc, #256]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d50:	4b3e      	ldr	r3, [pc, #248]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d60:	4b3b      	ldr	r3, [pc, #236]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a3a      	ldr	r2, [pc, #232]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d6c:	f7fd fb44 	bl	80043f8 <HAL_GetTick>
 8006d70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d72:	e009      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d74:	f7fd fb40 	bl	80043f8 <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d902      	bls.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	74fb      	strb	r3, [r7, #19]
        break;
 8006d86:	e005      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006d88:	4b31      	ldr	r3, [pc, #196]	@ (8006e50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0ef      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006d94:	7cfb      	ldrb	r3, [r7, #19]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d15c      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006da4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01f      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006db2:	697a      	ldr	r2, [r7, #20]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d019      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006db8:	4b24      	ldr	r3, [pc, #144]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006dc4:	4b21      	ldr	r3, [pc, #132]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dca:	4a20      	ldr	r2, [pc, #128]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dda:	4a1c      	ldr	r2, [pc, #112]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006de4:	4a19      	ldr	r2, [pc, #100]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d016      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df6:	f7fd faff 	bl	80043f8 <HAL_GetTick>
 8006dfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dfc:	e00b      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dfe:	f7fd fafb 	bl	80043f8 <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d902      	bls.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	74fb      	strb	r3, [r7, #19]
            break;
 8006e14:	e006      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e16:	4b0d      	ldr	r3, [pc, #52]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0ec      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006e24:	7cfb      	ldrb	r3, [r7, #19]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10c      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e2a:	4b08      	ldr	r3, [pc, #32]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e3a:	4904      	ldr	r1, [pc, #16]	@ (8006e4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006e42:	e009      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006e44:	7cfb      	ldrb	r3, [r7, #19]
 8006e46:	74bb      	strb	r3, [r7, #18]
 8006e48:	e006      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006e4a:	bf00      	nop
 8006e4c:	40021000 	.word	0x40021000
 8006e50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e54:	7cfb      	ldrb	r3, [r7, #19]
 8006e56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e58:	7c7b      	ldrb	r3, [r7, #17]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d105      	bne.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e5e:	4b9e      	ldr	r3, [pc, #632]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e62:	4a9d      	ldr	r2, [pc, #628]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e76:	4b98      	ldr	r3, [pc, #608]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7c:	f023 0203 	bic.w	r2, r3, #3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e84:	4994      	ldr	r1, [pc, #592]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e98:	4b8f      	ldr	r3, [pc, #572]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e9e:	f023 020c 	bic.w	r2, r3, #12
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea6:	498c      	ldr	r1, [pc, #560]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00a      	beq.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006eba:	4b87      	ldr	r3, [pc, #540]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ec0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec8:	4983      	ldr	r1, [pc, #524]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00a      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006edc:	4b7e      	ldr	r3, [pc, #504]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eea:	497b      	ldr	r1, [pc, #492]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0310 	and.w	r3, r3, #16
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006efe:	4b76      	ldr	r3, [pc, #472]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f0c:	4972      	ldr	r1, [pc, #456]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0320 	and.w	r3, r3, #32
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006f20:	4b6d      	ldr	r3, [pc, #436]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f26:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f2e:	496a      	ldr	r1, [pc, #424]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f30:	4313      	orrs	r3, r2
 8006f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f42:	4b65      	ldr	r3, [pc, #404]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f50:	4961      	ldr	r1, [pc, #388]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006f64:	4b5c      	ldr	r3, [pc, #368]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f72:	4959      	ldr	r1, [pc, #356]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006f86:	4b54      	ldr	r3, [pc, #336]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f94:	4950      	ldr	r1, [pc, #320]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006fa8:	4b4b      	ldr	r3, [pc, #300]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb6:	4948      	ldr	r1, [pc, #288]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006fca:	4b43      	ldr	r3, [pc, #268]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fd8:	493f      	ldr	r1, [pc, #252]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d028      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fec:	4b3a      	ldr	r3, [pc, #232]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ff2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ffa:	4937      	ldr	r1, [pc, #220]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800700a:	d106      	bne.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800700c:	4b32      	ldr	r3, [pc, #200]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	4a31      	ldr	r2, [pc, #196]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007016:	60d3      	str	r3, [r2, #12]
 8007018:	e011      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800701e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007022:	d10c      	bne.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3304      	adds	r3, #4
 8007028:	2101      	movs	r1, #1
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f8d8 	bl	80071e0 <RCCEx_PLLSAI1_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007034:	7cfb      	ldrb	r3, [r7, #19]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800703a:	7cfb      	ldrb	r3, [r7, #19]
 800703c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007046:	2b00      	cmp	r3, #0
 8007048:	d028      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800704a:	4b23      	ldr	r3, [pc, #140]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800704c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007050:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007058:	491f      	ldr	r1, [pc, #124]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800705a:	4313      	orrs	r3, r2
 800705c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007068:	d106      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800706a:	4b1b      	ldr	r3, [pc, #108]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	4a1a      	ldr	r2, [pc, #104]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007070:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007074:	60d3      	str	r3, [r2, #12]
 8007076:	e011      	b.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007080:	d10c      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3304      	adds	r3, #4
 8007086:	2101      	movs	r1, #1
 8007088:	4618      	mov	r0, r3
 800708a:	f000 f8a9 	bl	80071e0 <RCCEx_PLLSAI1_Config>
 800708e:	4603      	mov	r3, r0
 8007090:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007092:	7cfb      	ldrb	r3, [r7, #19]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007098:	7cfb      	ldrb	r3, [r7, #19]
 800709a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d02b      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070a8:	4b0b      	ldr	r3, [pc, #44]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070b6:	4908      	ldr	r1, [pc, #32]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070c6:	d109      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070c8:	4b03      	ldr	r3, [pc, #12]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	4a02      	ldr	r2, [pc, #8]	@ (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070d2:	60d3      	str	r3, [r2, #12]
 80070d4:	e014      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80070d6:	bf00      	nop
 80070d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070e4:	d10c      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	3304      	adds	r3, #4
 80070ea:	2101      	movs	r1, #1
 80070ec:	4618      	mov	r0, r3
 80070ee:	f000 f877 	bl	80071e0 <RCCEx_PLLSAI1_Config>
 80070f2:	4603      	mov	r3, r0
 80070f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80070f6:	7cfb      	ldrb	r3, [r7, #19]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d001      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80070fc:	7cfb      	ldrb	r3, [r7, #19]
 80070fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d02f      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800710c:	4b2b      	ldr	r3, [pc, #172]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800710e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007112:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800711a:	4928      	ldr	r1, [pc, #160]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800711c:	4313      	orrs	r3, r2
 800711e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800712a:	d10d      	bne.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3304      	adds	r3, #4
 8007130:	2102      	movs	r1, #2
 8007132:	4618      	mov	r0, r3
 8007134:	f000 f854 	bl	80071e0 <RCCEx_PLLSAI1_Config>
 8007138:	4603      	mov	r3, r0
 800713a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800713c:	7cfb      	ldrb	r3, [r7, #19]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d014      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007142:	7cfb      	ldrb	r3, [r7, #19]
 8007144:	74bb      	strb	r3, [r7, #18]
 8007146:	e011      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800714c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007150:	d10c      	bne.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	3320      	adds	r3, #32
 8007156:	2102      	movs	r1, #2
 8007158:	4618      	mov	r0, r3
 800715a:	f000 f935 	bl	80073c8 <RCCEx_PLLSAI2_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007162:	7cfb      	ldrb	r3, [r7, #19]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007168:	7cfb      	ldrb	r3, [r7, #19]
 800716a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00a      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007178:	4b10      	ldr	r3, [pc, #64]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007186:	490d      	ldr	r1, [pc, #52]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00b      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800719a:	4b08      	ldr	r3, [pc, #32]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800719c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071aa:	4904      	ldr	r1, [pc, #16]	@ (80071bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80071b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40021000 	.word	0x40021000

080071c0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80071c4:	4b05      	ldr	r3, [pc, #20]	@ (80071dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a04      	ldr	r2, [pc, #16]	@ (80071dc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80071ca:	f043 0304 	orr.w	r3, r3, #4
 80071ce:	6013      	str	r3, [r2, #0]
}
 80071d0:	bf00      	nop
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40021000 	.word	0x40021000

080071e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80071ee:	4b75      	ldr	r3, [pc, #468]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d018      	beq.n	800722c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80071fa:	4b72      	ldr	r3, [pc, #456]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f003 0203 	and.w	r2, r3, #3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	429a      	cmp	r2, r3
 8007208:	d10d      	bne.n	8007226 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
       ||
 800720e:	2b00      	cmp	r3, #0
 8007210:	d009      	beq.n	8007226 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007212:	4b6c      	ldr	r3, [pc, #432]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	091b      	lsrs	r3, r3, #4
 8007218:	f003 0307 	and.w	r3, r3, #7
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
       ||
 8007222:	429a      	cmp	r2, r3
 8007224:	d047      	beq.n	80072b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	73fb      	strb	r3, [r7, #15]
 800722a:	e044      	b.n	80072b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b03      	cmp	r3, #3
 8007232:	d018      	beq.n	8007266 <RCCEx_PLLSAI1_Config+0x86>
 8007234:	2b03      	cmp	r3, #3
 8007236:	d825      	bhi.n	8007284 <RCCEx_PLLSAI1_Config+0xa4>
 8007238:	2b01      	cmp	r3, #1
 800723a:	d002      	beq.n	8007242 <RCCEx_PLLSAI1_Config+0x62>
 800723c:	2b02      	cmp	r3, #2
 800723e:	d009      	beq.n	8007254 <RCCEx_PLLSAI1_Config+0x74>
 8007240:	e020      	b.n	8007284 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007242:	4b60      	ldr	r3, [pc, #384]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0302 	and.w	r3, r3, #2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d11d      	bne.n	800728a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007252:	e01a      	b.n	800728a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007254:	4b5b      	ldr	r3, [pc, #364]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800725c:	2b00      	cmp	r3, #0
 800725e:	d116      	bne.n	800728e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007264:	e013      	b.n	800728e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007266:	4b57      	ldr	r3, [pc, #348]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10f      	bne.n	8007292 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007272:	4b54      	ldr	r3, [pc, #336]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d109      	bne.n	8007292 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007282:	e006      	b.n	8007292 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	73fb      	strb	r3, [r7, #15]
      break;
 8007288:	e004      	b.n	8007294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800728a:	bf00      	nop
 800728c:	e002      	b.n	8007294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800728e:	bf00      	nop
 8007290:	e000      	b.n	8007294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007292:	bf00      	nop
    }

    if(status == HAL_OK)
 8007294:	7bfb      	ldrb	r3, [r7, #15]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10d      	bne.n	80072b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800729a:	4b4a      	ldr	r3, [pc, #296]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6819      	ldr	r1, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	011b      	lsls	r3, r3, #4
 80072ae:	430b      	orrs	r3, r1
 80072b0:	4944      	ldr	r1, [pc, #272]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d17d      	bne.n	80073b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80072bc:	4b41      	ldr	r3, [pc, #260]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a40      	ldr	r2, [pc, #256]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80072c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c8:	f7fd f896 	bl	80043f8 <HAL_GetTick>
 80072cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80072ce:	e009      	b.n	80072e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80072d0:	f7fd f892 	bl	80043f8 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d902      	bls.n	80072e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	73fb      	strb	r3, [r7, #15]
        break;
 80072e2:	e005      	b.n	80072f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80072e4:	4b37      	ldr	r3, [pc, #220]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d1ef      	bne.n	80072d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d160      	bne.n	80073b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d111      	bne.n	8007320 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80072fc:	4b31      	ldr	r3, [pc, #196]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6892      	ldr	r2, [r2, #8]
 800730c:	0211      	lsls	r1, r2, #8
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	68d2      	ldr	r2, [r2, #12]
 8007312:	0912      	lsrs	r2, r2, #4
 8007314:	0452      	lsls	r2, r2, #17
 8007316:	430a      	orrs	r2, r1
 8007318:	492a      	ldr	r1, [pc, #168]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800731a:	4313      	orrs	r3, r2
 800731c:	610b      	str	r3, [r1, #16]
 800731e:	e027      	b.n	8007370 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d112      	bne.n	800734c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007326:	4b27      	ldr	r3, [pc, #156]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800732e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6892      	ldr	r2, [r2, #8]
 8007336:	0211      	lsls	r1, r2, #8
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	6912      	ldr	r2, [r2, #16]
 800733c:	0852      	lsrs	r2, r2, #1
 800733e:	3a01      	subs	r2, #1
 8007340:	0552      	lsls	r2, r2, #21
 8007342:	430a      	orrs	r2, r1
 8007344:	491f      	ldr	r1, [pc, #124]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007346:	4313      	orrs	r3, r2
 8007348:	610b      	str	r3, [r1, #16]
 800734a:	e011      	b.n	8007370 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800734c:	4b1d      	ldr	r3, [pc, #116]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007354:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6892      	ldr	r2, [r2, #8]
 800735c:	0211      	lsls	r1, r2, #8
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6952      	ldr	r2, [r2, #20]
 8007362:	0852      	lsrs	r2, r2, #1
 8007364:	3a01      	subs	r2, #1
 8007366:	0652      	lsls	r2, r2, #25
 8007368:	430a      	orrs	r2, r1
 800736a:	4916      	ldr	r1, [pc, #88]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800736c:	4313      	orrs	r3, r2
 800736e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007370:	4b14      	ldr	r3, [pc, #80]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a13      	ldr	r2, [pc, #76]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007376:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800737a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800737c:	f7fd f83c 	bl	80043f8 <HAL_GetTick>
 8007380:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007382:	e009      	b.n	8007398 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007384:	f7fd f838 	bl	80043f8 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d902      	bls.n	8007398 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	73fb      	strb	r3, [r7, #15]
          break;
 8007396:	e005      	b.n	80073a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007398:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d0ef      	beq.n	8007384 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d106      	bne.n	80073b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80073aa:	4b06      	ldr	r3, [pc, #24]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073ac:	691a      	ldr	r2, [r3, #16]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	4904      	ldr	r1, [pc, #16]	@ (80073c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	40021000 	.word	0x40021000

080073c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80073d6:	4b6a      	ldr	r3, [pc, #424]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d018      	beq.n	8007414 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80073e2:	4b67      	ldr	r3, [pc, #412]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f003 0203 	and.w	r2, r3, #3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d10d      	bne.n	800740e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
       ||
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d009      	beq.n	800740e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80073fa:	4b61      	ldr	r3, [pc, #388]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	091b      	lsrs	r3, r3, #4
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	1c5a      	adds	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
       ||
 800740a:	429a      	cmp	r2, r3
 800740c:	d047      	beq.n	800749e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	73fb      	strb	r3, [r7, #15]
 8007412:	e044      	b.n	800749e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b03      	cmp	r3, #3
 800741a:	d018      	beq.n	800744e <RCCEx_PLLSAI2_Config+0x86>
 800741c:	2b03      	cmp	r3, #3
 800741e:	d825      	bhi.n	800746c <RCCEx_PLLSAI2_Config+0xa4>
 8007420:	2b01      	cmp	r3, #1
 8007422:	d002      	beq.n	800742a <RCCEx_PLLSAI2_Config+0x62>
 8007424:	2b02      	cmp	r3, #2
 8007426:	d009      	beq.n	800743c <RCCEx_PLLSAI2_Config+0x74>
 8007428:	e020      	b.n	800746c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800742a:	4b55      	ldr	r3, [pc, #340]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0302 	and.w	r3, r3, #2
 8007432:	2b00      	cmp	r3, #0
 8007434:	d11d      	bne.n	8007472 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800743a:	e01a      	b.n	8007472 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800743c:	4b50      	ldr	r3, [pc, #320]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007444:	2b00      	cmp	r3, #0
 8007446:	d116      	bne.n	8007476 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800744c:	e013      	b.n	8007476 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800744e:	4b4c      	ldr	r3, [pc, #304]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10f      	bne.n	800747a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800745a:	4b49      	ldr	r3, [pc, #292]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d109      	bne.n	800747a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800746a:	e006      	b.n	800747a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
      break;
 8007470:	e004      	b.n	800747c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007472:	bf00      	nop
 8007474:	e002      	b.n	800747c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007476:	bf00      	nop
 8007478:	e000      	b.n	800747c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800747a:	bf00      	nop
    }

    if(status == HAL_OK)
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10d      	bne.n	800749e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007482:	4b3f      	ldr	r3, [pc, #252]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6819      	ldr	r1, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	3b01      	subs	r3, #1
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	430b      	orrs	r3, r1
 8007498:	4939      	ldr	r1, [pc, #228]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800749a:	4313      	orrs	r3, r2
 800749c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d167      	bne.n	8007574 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80074a4:	4b36      	ldr	r3, [pc, #216]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a35      	ldr	r2, [pc, #212]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074b0:	f7fc ffa2 	bl	80043f8 <HAL_GetTick>
 80074b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80074b6:	e009      	b.n	80074cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80074b8:	f7fc ff9e 	bl	80043f8 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d902      	bls.n	80074cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	73fb      	strb	r3, [r7, #15]
        break;
 80074ca:	e005      	b.n	80074d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80074cc:	4b2c      	ldr	r3, [pc, #176]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1ef      	bne.n	80074b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d14a      	bne.n	8007574 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d111      	bne.n	8007508 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80074e4:	4b26      	ldr	r3, [pc, #152]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80074ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	6892      	ldr	r2, [r2, #8]
 80074f4:	0211      	lsls	r1, r2, #8
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	68d2      	ldr	r2, [r2, #12]
 80074fa:	0912      	lsrs	r2, r2, #4
 80074fc:	0452      	lsls	r2, r2, #17
 80074fe:	430a      	orrs	r2, r1
 8007500:	491f      	ldr	r1, [pc, #124]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007502:	4313      	orrs	r3, r2
 8007504:	614b      	str	r3, [r1, #20]
 8007506:	e011      	b.n	800752c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007508:	4b1d      	ldr	r3, [pc, #116]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800750a:	695b      	ldr	r3, [r3, #20]
 800750c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007510:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6892      	ldr	r2, [r2, #8]
 8007518:	0211      	lsls	r1, r2, #8
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6912      	ldr	r2, [r2, #16]
 800751e:	0852      	lsrs	r2, r2, #1
 8007520:	3a01      	subs	r2, #1
 8007522:	0652      	lsls	r2, r2, #25
 8007524:	430a      	orrs	r2, r1
 8007526:	4916      	ldr	r1, [pc, #88]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007528:	4313      	orrs	r3, r2
 800752a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800752c:	4b14      	ldr	r3, [pc, #80]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a13      	ldr	r2, [pc, #76]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007532:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007536:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007538:	f7fc ff5e 	bl	80043f8 <HAL_GetTick>
 800753c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800753e:	e009      	b.n	8007554 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007540:	f7fc ff5a 	bl	80043f8 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d902      	bls.n	8007554 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	73fb      	strb	r3, [r7, #15]
          break;
 8007552:	e005      	b.n	8007560 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007554:	4b0a      	ldr	r3, [pc, #40]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0ef      	beq.n	8007540 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007566:	4b06      	ldr	r3, [pc, #24]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007568:	695a      	ldr	r2, [r3, #20]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	4904      	ldr	r1, [pc, #16]	@ (8007580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007570:	4313      	orrs	r3, r2
 8007572:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40021000 	.word	0x40021000

08007584 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e095      	b.n	80076c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759a:	2b00      	cmp	r3, #0
 800759c:	d108      	bne.n	80075b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075a6:	d009      	beq.n	80075bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	61da      	str	r2, [r3, #28]
 80075ae:	e005      	b.n	80075bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d106      	bne.n	80075dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7fb fb96 	bl	8002d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075fc:	d902      	bls.n	8007604 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e002      	b.n	800760a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007608:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007612:	d007      	beq.n	8007624 <HAL_SPI_Init+0xa0>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800761c:	d002      	beq.n	8007624 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007634:	431a      	orrs	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	431a      	orrs	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	431a      	orrs	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800765c:	431a      	orrs	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007666:	ea42 0103 	orr.w	r1, r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	f003 0204 	and.w	r2, r3, #4
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007688:	f003 0310 	and.w	r3, r3, #16
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007692:	f003 0308 	and.w	r3, r3, #8
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80076a0:	ea42 0103 	orr.w	r1, r2, r3
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}

080076ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b082      	sub	sp, #8
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e040      	b.n	800775e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d106      	bne.n	80076f2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fb fb4f 	bl	8002d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2224      	movs	r2, #36	@ 0x24
 80076f6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0201 	bic.w	r2, r2, #1
 8007706:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fb69 	bl	8007de8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f8ae 	bl	8007878 <UART_SetConfig>
 800771c:	4603      	mov	r3, r0
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e01b      	b.n	800775e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007734:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007744:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0201 	orr.w	r2, r2, #1
 8007754:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fbe8 	bl	8007f2c <UART_CheckIdleState>
 800775c:	4603      	mov	r3, r0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b08a      	sub	sp, #40	@ 0x28
 800776a:	af02      	add	r7, sp, #8
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	603b      	str	r3, [r7, #0]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800777a:	2b20      	cmp	r3, #32
 800777c:	d177      	bne.n	800786e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <HAL_UART_Transmit+0x24>
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e070      	b.n	8007870 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2221      	movs	r2, #33	@ 0x21
 800779a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800779c:	f7fc fe2c 	bl	80043f8 <HAL_GetTick>
 80077a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	88fa      	ldrh	r2, [r7, #6]
 80077a6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	88fa      	ldrh	r2, [r7, #6]
 80077ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ba:	d108      	bne.n	80077ce <HAL_UART_Transmit+0x68>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d104      	bne.n	80077ce <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80077c4:	2300      	movs	r3, #0
 80077c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	61bb      	str	r3, [r7, #24]
 80077cc:	e003      	b.n	80077d6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d2:	2300      	movs	r3, #0
 80077d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077d6:	e02f      	b.n	8007838 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2200      	movs	r2, #0
 80077e0:	2180      	movs	r1, #128	@ 0x80
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 fc4a 	bl	800807c <UART_WaitOnFlagUntilTimeout>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d004      	beq.n	80077f8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2220      	movs	r2, #32
 80077f2:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e03b      	b.n	8007870 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10b      	bne.n	8007816 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	881a      	ldrh	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800780a:	b292      	uxth	r2, r2
 800780c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	3302      	adds	r3, #2
 8007812:	61bb      	str	r3, [r7, #24]
 8007814:	e007      	b.n	8007826 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	781a      	ldrb	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	3301      	adds	r3, #1
 8007824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800783e:	b29b      	uxth	r3, r3
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1c9      	bne.n	80077d8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	2200      	movs	r2, #0
 800784c:	2140      	movs	r1, #64	@ 0x40
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 fc14 	bl	800807c <UART_WaitOnFlagUntilTimeout>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d004      	beq.n	8007864 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2220      	movs	r2, #32
 800785e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e005      	b.n	8007870 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	e000      	b.n	8007870 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800786e:	2302      	movs	r3, #2
  }
}
 8007870:	4618      	mov	r0, r3
 8007872:	3720      	adds	r7, #32
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800787c:	b08a      	sub	sp, #40	@ 0x28
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	431a      	orrs	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	431a      	orrs	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	4313      	orrs	r3, r2
 800789e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4ba4      	ldr	r3, [pc, #656]	@ (8007b38 <UART_SetConfig+0x2c0>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	6812      	ldr	r2, [r2, #0]
 80078ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078b0:	430b      	orrs	r3, r1
 80078b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	68da      	ldr	r2, [r3, #12]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a99      	ldr	r2, [pc, #612]	@ (8007b3c <UART_SetConfig+0x2c4>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d004      	beq.n	80078e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e0:	4313      	orrs	r3, r2
 80078e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f4:	430a      	orrs	r2, r1
 80078f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a90      	ldr	r2, [pc, #576]	@ (8007b40 <UART_SetConfig+0x2c8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d126      	bne.n	8007950 <UART_SetConfig+0xd8>
 8007902:	4b90      	ldr	r3, [pc, #576]	@ (8007b44 <UART_SetConfig+0x2cc>)
 8007904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007908:	f003 0303 	and.w	r3, r3, #3
 800790c:	2b03      	cmp	r3, #3
 800790e:	d81b      	bhi.n	8007948 <UART_SetConfig+0xd0>
 8007910:	a201      	add	r2, pc, #4	@ (adr r2, 8007918 <UART_SetConfig+0xa0>)
 8007912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007916:	bf00      	nop
 8007918:	08007929 	.word	0x08007929
 800791c:	08007939 	.word	0x08007939
 8007920:	08007931 	.word	0x08007931
 8007924:	08007941 	.word	0x08007941
 8007928:	2301      	movs	r3, #1
 800792a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800792e:	e116      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007930:	2302      	movs	r3, #2
 8007932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007936:	e112      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007938:	2304      	movs	r3, #4
 800793a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800793e:	e10e      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007940:	2308      	movs	r3, #8
 8007942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007946:	e10a      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007948:	2310      	movs	r3, #16
 800794a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800794e:	e106      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a7c      	ldr	r2, [pc, #496]	@ (8007b48 <UART_SetConfig+0x2d0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d138      	bne.n	80079cc <UART_SetConfig+0x154>
 800795a:	4b7a      	ldr	r3, [pc, #488]	@ (8007b44 <UART_SetConfig+0x2cc>)
 800795c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007960:	f003 030c 	and.w	r3, r3, #12
 8007964:	2b0c      	cmp	r3, #12
 8007966:	d82d      	bhi.n	80079c4 <UART_SetConfig+0x14c>
 8007968:	a201      	add	r2, pc, #4	@ (adr r2, 8007970 <UART_SetConfig+0xf8>)
 800796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796e:	bf00      	nop
 8007970:	080079a5 	.word	0x080079a5
 8007974:	080079c5 	.word	0x080079c5
 8007978:	080079c5 	.word	0x080079c5
 800797c:	080079c5 	.word	0x080079c5
 8007980:	080079b5 	.word	0x080079b5
 8007984:	080079c5 	.word	0x080079c5
 8007988:	080079c5 	.word	0x080079c5
 800798c:	080079c5 	.word	0x080079c5
 8007990:	080079ad 	.word	0x080079ad
 8007994:	080079c5 	.word	0x080079c5
 8007998:	080079c5 	.word	0x080079c5
 800799c:	080079c5 	.word	0x080079c5
 80079a0:	080079bd 	.word	0x080079bd
 80079a4:	2300      	movs	r3, #0
 80079a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079aa:	e0d8      	b.n	8007b5e <UART_SetConfig+0x2e6>
 80079ac:	2302      	movs	r3, #2
 80079ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079b2:	e0d4      	b.n	8007b5e <UART_SetConfig+0x2e6>
 80079b4:	2304      	movs	r3, #4
 80079b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ba:	e0d0      	b.n	8007b5e <UART_SetConfig+0x2e6>
 80079bc:	2308      	movs	r3, #8
 80079be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079c2:	e0cc      	b.n	8007b5e <UART_SetConfig+0x2e6>
 80079c4:	2310      	movs	r3, #16
 80079c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ca:	e0c8      	b.n	8007b5e <UART_SetConfig+0x2e6>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a5e      	ldr	r2, [pc, #376]	@ (8007b4c <UART_SetConfig+0x2d4>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d125      	bne.n	8007a22 <UART_SetConfig+0x1aa>
 80079d6:	4b5b      	ldr	r3, [pc, #364]	@ (8007b44 <UART_SetConfig+0x2cc>)
 80079d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80079e0:	2b30      	cmp	r3, #48	@ 0x30
 80079e2:	d016      	beq.n	8007a12 <UART_SetConfig+0x19a>
 80079e4:	2b30      	cmp	r3, #48	@ 0x30
 80079e6:	d818      	bhi.n	8007a1a <UART_SetConfig+0x1a2>
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d00a      	beq.n	8007a02 <UART_SetConfig+0x18a>
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d814      	bhi.n	8007a1a <UART_SetConfig+0x1a2>
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <UART_SetConfig+0x182>
 80079f4:	2b10      	cmp	r3, #16
 80079f6:	d008      	beq.n	8007a0a <UART_SetConfig+0x192>
 80079f8:	e00f      	b.n	8007a1a <UART_SetConfig+0x1a2>
 80079fa:	2300      	movs	r3, #0
 80079fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a00:	e0ad      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007a02:	2302      	movs	r3, #2
 8007a04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a08:	e0a9      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007a0a:	2304      	movs	r3, #4
 8007a0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a10:	e0a5      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007a12:	2308      	movs	r3, #8
 8007a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a18:	e0a1      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007a1a:	2310      	movs	r3, #16
 8007a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a20:	e09d      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a4a      	ldr	r2, [pc, #296]	@ (8007b50 <UART_SetConfig+0x2d8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d125      	bne.n	8007a78 <UART_SetConfig+0x200>
 8007a2c:	4b45      	ldr	r3, [pc, #276]	@ (8007b44 <UART_SetConfig+0x2cc>)
 8007a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a32:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007a36:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a38:	d016      	beq.n	8007a68 <UART_SetConfig+0x1f0>
 8007a3a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007a3c:	d818      	bhi.n	8007a70 <UART_SetConfig+0x1f8>
 8007a3e:	2b80      	cmp	r3, #128	@ 0x80
 8007a40:	d00a      	beq.n	8007a58 <UART_SetConfig+0x1e0>
 8007a42:	2b80      	cmp	r3, #128	@ 0x80
 8007a44:	d814      	bhi.n	8007a70 <UART_SetConfig+0x1f8>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d002      	beq.n	8007a50 <UART_SetConfig+0x1d8>
 8007a4a:	2b40      	cmp	r3, #64	@ 0x40
 8007a4c:	d008      	beq.n	8007a60 <UART_SetConfig+0x1e8>
 8007a4e:	e00f      	b.n	8007a70 <UART_SetConfig+0x1f8>
 8007a50:	2300      	movs	r3, #0
 8007a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a56:	e082      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007a58:	2302      	movs	r3, #2
 8007a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a5e:	e07e      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007a60:	2304      	movs	r3, #4
 8007a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a66:	e07a      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007a68:	2308      	movs	r3, #8
 8007a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a6e:	e076      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007a70:	2310      	movs	r3, #16
 8007a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a76:	e072      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a35      	ldr	r2, [pc, #212]	@ (8007b54 <UART_SetConfig+0x2dc>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d12a      	bne.n	8007ad8 <UART_SetConfig+0x260>
 8007a82:	4b30      	ldr	r3, [pc, #192]	@ (8007b44 <UART_SetConfig+0x2cc>)
 8007a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a90:	d01a      	beq.n	8007ac8 <UART_SetConfig+0x250>
 8007a92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a96:	d81b      	bhi.n	8007ad0 <UART_SetConfig+0x258>
 8007a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a9c:	d00c      	beq.n	8007ab8 <UART_SetConfig+0x240>
 8007a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007aa2:	d815      	bhi.n	8007ad0 <UART_SetConfig+0x258>
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d003      	beq.n	8007ab0 <UART_SetConfig+0x238>
 8007aa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007aac:	d008      	beq.n	8007ac0 <UART_SetConfig+0x248>
 8007aae:	e00f      	b.n	8007ad0 <UART_SetConfig+0x258>
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ab6:	e052      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007ab8:	2302      	movs	r3, #2
 8007aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007abe:	e04e      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ac6:	e04a      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007ac8:	2308      	movs	r3, #8
 8007aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ace:	e046      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007ad0:	2310      	movs	r3, #16
 8007ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ad6:	e042      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a17      	ldr	r2, [pc, #92]	@ (8007b3c <UART_SetConfig+0x2c4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d13a      	bne.n	8007b58 <UART_SetConfig+0x2e0>
 8007ae2:	4b18      	ldr	r3, [pc, #96]	@ (8007b44 <UART_SetConfig+0x2cc>)
 8007ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ae8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007aec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007af0:	d01a      	beq.n	8007b28 <UART_SetConfig+0x2b0>
 8007af2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007af6:	d81b      	bhi.n	8007b30 <UART_SetConfig+0x2b8>
 8007af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007afc:	d00c      	beq.n	8007b18 <UART_SetConfig+0x2a0>
 8007afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b02:	d815      	bhi.n	8007b30 <UART_SetConfig+0x2b8>
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d003      	beq.n	8007b10 <UART_SetConfig+0x298>
 8007b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b0c:	d008      	beq.n	8007b20 <UART_SetConfig+0x2a8>
 8007b0e:	e00f      	b.n	8007b30 <UART_SetConfig+0x2b8>
 8007b10:	2300      	movs	r3, #0
 8007b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b16:	e022      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b1e:	e01e      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007b20:	2304      	movs	r3, #4
 8007b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b26:	e01a      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007b28:	2308      	movs	r3, #8
 8007b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b2e:	e016      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007b30:	2310      	movs	r3, #16
 8007b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b36:	e012      	b.n	8007b5e <UART_SetConfig+0x2e6>
 8007b38:	efff69f3 	.word	0xefff69f3
 8007b3c:	40008000 	.word	0x40008000
 8007b40:	40013800 	.word	0x40013800
 8007b44:	40021000 	.word	0x40021000
 8007b48:	40004400 	.word	0x40004400
 8007b4c:	40004800 	.word	0x40004800
 8007b50:	40004c00 	.word	0x40004c00
 8007b54:	40005000 	.word	0x40005000
 8007b58:	2310      	movs	r3, #16
 8007b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a9f      	ldr	r2, [pc, #636]	@ (8007de0 <UART_SetConfig+0x568>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d17a      	bne.n	8007c5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d824      	bhi.n	8007bba <UART_SetConfig+0x342>
 8007b70:	a201      	add	r2, pc, #4	@ (adr r2, 8007b78 <UART_SetConfig+0x300>)
 8007b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b76:	bf00      	nop
 8007b78:	08007b9d 	.word	0x08007b9d
 8007b7c:	08007bbb 	.word	0x08007bbb
 8007b80:	08007ba5 	.word	0x08007ba5
 8007b84:	08007bbb 	.word	0x08007bbb
 8007b88:	08007bab 	.word	0x08007bab
 8007b8c:	08007bbb 	.word	0x08007bbb
 8007b90:	08007bbb 	.word	0x08007bbb
 8007b94:	08007bbb 	.word	0x08007bbb
 8007b98:	08007bb3 	.word	0x08007bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b9c:	f7fe ff9a 	bl	8006ad4 <HAL_RCC_GetPCLK1Freq>
 8007ba0:	61f8      	str	r0, [r7, #28]
        break;
 8007ba2:	e010      	b.n	8007bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ba4:	4b8f      	ldr	r3, [pc, #572]	@ (8007de4 <UART_SetConfig+0x56c>)
 8007ba6:	61fb      	str	r3, [r7, #28]
        break;
 8007ba8:	e00d      	b.n	8007bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007baa:	f7fe fefb 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8007bae:	61f8      	str	r0, [r7, #28]
        break;
 8007bb0:	e009      	b.n	8007bc6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bb6:	61fb      	str	r3, [r7, #28]
        break;
 8007bb8:	e005      	b.n	8007bc6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007bc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80fb 	beq.w	8007dc4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	4413      	add	r3, r2
 8007bd8:	69fa      	ldr	r2, [r7, #28]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d305      	bcc.n	8007bea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d903      	bls.n	8007bf2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007bf0:	e0e8      	b.n	8007dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	461c      	mov	r4, r3
 8007bf8:	4615      	mov	r5, r2
 8007bfa:	f04f 0200 	mov.w	r2, #0
 8007bfe:	f04f 0300 	mov.w	r3, #0
 8007c02:	022b      	lsls	r3, r5, #8
 8007c04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c08:	0222      	lsls	r2, r4, #8
 8007c0a:	68f9      	ldr	r1, [r7, #12]
 8007c0c:	6849      	ldr	r1, [r1, #4]
 8007c0e:	0849      	lsrs	r1, r1, #1
 8007c10:	2000      	movs	r0, #0
 8007c12:	4688      	mov	r8, r1
 8007c14:	4681      	mov	r9, r0
 8007c16:	eb12 0a08 	adds.w	sl, r2, r8
 8007c1a:	eb43 0b09 	adc.w	fp, r3, r9
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2c:	4650      	mov	r0, sl
 8007c2e:	4659      	mov	r1, fp
 8007c30:	f7f8 ffca 	bl	8000bc8 <__aeabi_uldivmod>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4613      	mov	r3, r2
 8007c3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c42:	d308      	bcc.n	8007c56 <UART_SetConfig+0x3de>
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c4a:	d204      	bcs.n	8007c56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	69ba      	ldr	r2, [r7, #24]
 8007c52:	60da      	str	r2, [r3, #12]
 8007c54:	e0b6      	b.n	8007dc4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c5c:	e0b2      	b.n	8007dc4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c66:	d15e      	bne.n	8007d26 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007c68:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d828      	bhi.n	8007cc2 <UART_SetConfig+0x44a>
 8007c70:	a201      	add	r2, pc, #4	@ (adr r2, 8007c78 <UART_SetConfig+0x400>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007c9d 	.word	0x08007c9d
 8007c7c:	08007ca5 	.word	0x08007ca5
 8007c80:	08007cad 	.word	0x08007cad
 8007c84:	08007cc3 	.word	0x08007cc3
 8007c88:	08007cb3 	.word	0x08007cb3
 8007c8c:	08007cc3 	.word	0x08007cc3
 8007c90:	08007cc3 	.word	0x08007cc3
 8007c94:	08007cc3 	.word	0x08007cc3
 8007c98:	08007cbb 	.word	0x08007cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c9c:	f7fe ff1a 	bl	8006ad4 <HAL_RCC_GetPCLK1Freq>
 8007ca0:	61f8      	str	r0, [r7, #28]
        break;
 8007ca2:	e014      	b.n	8007cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ca4:	f7fe ff2c 	bl	8006b00 <HAL_RCC_GetPCLK2Freq>
 8007ca8:	61f8      	str	r0, [r7, #28]
        break;
 8007caa:	e010      	b.n	8007cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cac:	4b4d      	ldr	r3, [pc, #308]	@ (8007de4 <UART_SetConfig+0x56c>)
 8007cae:	61fb      	str	r3, [r7, #28]
        break;
 8007cb0:	e00d      	b.n	8007cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cb2:	f7fe fe77 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8007cb6:	61f8      	str	r0, [r7, #28]
        break;
 8007cb8:	e009      	b.n	8007cce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cbe:	61fb      	str	r3, [r7, #28]
        break;
 8007cc0:	e005      	b.n	8007cce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d077      	beq.n	8007dc4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	005a      	lsls	r2, r3, #1
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	085b      	lsrs	r3, r3, #1
 8007cde:	441a      	add	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ce8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b0f      	cmp	r3, #15
 8007cee:	d916      	bls.n	8007d1e <UART_SetConfig+0x4a6>
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf6:	d212      	bcs.n	8007d1e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cf8:	69bb      	ldr	r3, [r7, #24]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	f023 030f 	bic.w	r3, r3, #15
 8007d00:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	085b      	lsrs	r3, r3, #1
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f003 0307 	and.w	r3, r3, #7
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	8afb      	ldrh	r3, [r7, #22]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	8afa      	ldrh	r2, [r7, #22]
 8007d1a:	60da      	str	r2, [r3, #12]
 8007d1c:	e052      	b.n	8007dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007d24:	e04e      	b.n	8007dc4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007d2a:	2b08      	cmp	r3, #8
 8007d2c:	d827      	bhi.n	8007d7e <UART_SetConfig+0x506>
 8007d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <UART_SetConfig+0x4bc>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d59 	.word	0x08007d59
 8007d38:	08007d61 	.word	0x08007d61
 8007d3c:	08007d69 	.word	0x08007d69
 8007d40:	08007d7f 	.word	0x08007d7f
 8007d44:	08007d6f 	.word	0x08007d6f
 8007d48:	08007d7f 	.word	0x08007d7f
 8007d4c:	08007d7f 	.word	0x08007d7f
 8007d50:	08007d7f 	.word	0x08007d7f
 8007d54:	08007d77 	.word	0x08007d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d58:	f7fe febc 	bl	8006ad4 <HAL_RCC_GetPCLK1Freq>
 8007d5c:	61f8      	str	r0, [r7, #28]
        break;
 8007d5e:	e014      	b.n	8007d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d60:	f7fe fece 	bl	8006b00 <HAL_RCC_GetPCLK2Freq>
 8007d64:	61f8      	str	r0, [r7, #28]
        break;
 8007d66:	e010      	b.n	8007d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d68:	4b1e      	ldr	r3, [pc, #120]	@ (8007de4 <UART_SetConfig+0x56c>)
 8007d6a:	61fb      	str	r3, [r7, #28]
        break;
 8007d6c:	e00d      	b.n	8007d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d6e:	f7fe fe19 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8007d72:	61f8      	str	r0, [r7, #28]
        break;
 8007d74:	e009      	b.n	8007d8a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d7a:	61fb      	str	r3, [r7, #28]
        break;
 8007d7c:	e005      	b.n	8007d8a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d88:	bf00      	nop
    }

    if (pclk != 0U)
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d019      	beq.n	8007dc4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	085a      	lsrs	r2, r3, #1
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	441a      	add	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	2b0f      	cmp	r3, #15
 8007da8:	d909      	bls.n	8007dbe <UART_SetConfig+0x546>
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db0:	d205      	bcs.n	8007dbe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60da      	str	r2, [r3, #12]
 8007dbc:	e002      	b.n	8007dc4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007dd0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3728      	adds	r7, #40	@ 0x28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dde:	bf00      	nop
 8007de0:	40008000 	.word	0x40008000
 8007de4:	00f42400 	.word	0x00f42400

08007de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df4:	f003 0308 	and.w	r3, r3, #8
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00a      	beq.n	8007e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00a      	beq.n	8007e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	430a      	orrs	r2, r1
 8007e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00a      	beq.n	8007e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d00a      	beq.n	8007e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	430a      	orrs	r2, r1
 8007e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7c:	f003 0310 	and.w	r3, r3, #16
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9e:	f003 0320 	and.w	r3, r3, #32
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01a      	beq.n	8007efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ee6:	d10a      	bne.n	8007efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	430a      	orrs	r2, r1
 8007f1e:	605a      	str	r2, [r3, #4]
  }
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b098      	sub	sp, #96	@ 0x60
 8007f30:	af02      	add	r7, sp, #8
 8007f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f3c:	f7fc fa5c 	bl	80043f8 <HAL_GetTick>
 8007f40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0308 	and.w	r3, r3, #8
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d12e      	bne.n	8007fae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f88c 	bl	800807c <UART_WaitOnFlagUntilTimeout>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d021      	beq.n	8007fae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f72:	e853 3f00 	ldrex	r3, [r3]
 8007f76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	461a      	mov	r2, r3
 8007f86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f88:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e6      	bne.n	8007f6a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e062      	b.n	8008074 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0304 	and.w	r3, r3, #4
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d149      	bne.n	8008050 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f856 	bl	800807c <UART_WaitOnFlagUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d03c      	beq.n	8008050 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	623b      	str	r3, [r7, #32]
   return(result);
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ff4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ff6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ffa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e6      	bne.n	8007fd6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3308      	adds	r3, #8
 800800e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	60fb      	str	r3, [r7, #12]
   return(result);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0301 	bic.w	r3, r3, #1
 800801e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3308      	adds	r3, #8
 8008026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008028:	61fa      	str	r2, [r7, #28]
 800802a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	69b9      	ldr	r1, [r7, #24]
 800802e:	69fa      	ldr	r2, [r7, #28]
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	617b      	str	r3, [r7, #20]
   return(result);
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e5      	bne.n	8008008 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e011      	b.n	8008074 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2220      	movs	r2, #32
 8008054:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3758      	adds	r7, #88	@ 0x58
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	603b      	str	r3, [r7, #0]
 8008088:	4613      	mov	r3, r2
 800808a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800808c:	e04f      	b.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008094:	d04b      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008096:	f7fc f9af 	bl	80043f8 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d302      	bcc.n	80080ac <UART_WaitOnFlagUntilTimeout+0x30>
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d101      	bne.n	80080b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e04e      	b.n	800814e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0304 	and.w	r3, r3, #4
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d037      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2b80      	cmp	r3, #128	@ 0x80
 80080c2:	d034      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b40      	cmp	r3, #64	@ 0x40
 80080c8:	d031      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	f003 0308 	and.w	r3, r3, #8
 80080d4:	2b08      	cmp	r3, #8
 80080d6:	d110      	bne.n	80080fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2208      	movs	r2, #8
 80080de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080e0:	68f8      	ldr	r0, [r7, #12]
 80080e2:	f000 f838 	bl	8008156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2208      	movs	r2, #8
 80080ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e029      	b.n	800814e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	69db      	ldr	r3, [r3, #28]
 8008100:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008108:	d111      	bne.n	800812e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008112:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 f81e 	bl	8008156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2220      	movs	r2, #32
 800811e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e00f      	b.n	800814e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	69da      	ldr	r2, [r3, #28]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4013      	ands	r3, r2
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	429a      	cmp	r2, r3
 800813c:	bf0c      	ite	eq
 800813e:	2301      	moveq	r3, #1
 8008140:	2300      	movne	r3, #0
 8008142:	b2db      	uxtb	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	429a      	cmp	r2, r3
 800814a:	d0a0      	beq.n	800808e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008156:	b480      	push	{r7}
 8008158:	b095      	sub	sp, #84	@ 0x54
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008166:	e853 3f00 	ldrex	r3, [r3]
 800816a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800816c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	461a      	mov	r2, r3
 800817a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800817c:	643b      	str	r3, [r7, #64]	@ 0x40
 800817e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008180:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008182:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008184:	e841 2300 	strex	r3, r2, [r1]
 8008188:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800818a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818c:	2b00      	cmp	r3, #0
 800818e:	d1e6      	bne.n	800815e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3308      	adds	r3, #8
 8008196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	e853 3f00 	ldrex	r3, [r3]
 800819e:	61fb      	str	r3, [r7, #28]
   return(result);
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	f023 0301 	bic.w	r3, r3, #1
 80081a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3308      	adds	r3, #8
 80081ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081b8:	e841 2300 	strex	r3, r2, [r1]
 80081bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e5      	bne.n	8008190 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d118      	bne.n	80081fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f023 0310 	bic.w	r3, r3, #16
 80081e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081ea:	61bb      	str	r3, [r7, #24]
 80081ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	6979      	ldr	r1, [r7, #20]
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	613b      	str	r3, [r7, #16]
   return(result);
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e6      	bne.n	80081cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2220      	movs	r2, #32
 8008202:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008212:	bf00      	nop
 8008214:	3754      	adds	r7, #84	@ 0x54
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800821e:	b084      	sub	sp, #16
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	f107 001c 	add.w	r0, r7, #28
 800822c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa69 	bl	8008714 <USB_CoreReset>
 8008242:	4603      	mov	r3, r0
 8008244:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008246:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008252:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	639a      	str	r2, [r3, #56]	@ 0x38
 800825a:	e005      	b.n	8008268 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008260:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008274:	b004      	add	sp, #16
 8008276:	4770      	bx	lr

08008278 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f023 0201 	bic.w	r2, r3, #1
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	460b      	mov	r3, r1
 80082a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082b6:	78fb      	ldrb	r3, [r7, #3]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d115      	bne.n	80082e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082c8:	200a      	movs	r0, #10
 80082ca:	f7fc f8a1 	bl	8004410 <HAL_Delay>
      ms += 10U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	330a      	adds	r3, #10
 80082d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 fa0f 	bl	80086f8 <USB_GetMode>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d01e      	beq.n	800831e <USB_SetCurrentMode+0x84>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80082e4:	d9f0      	bls.n	80082c8 <USB_SetCurrentMode+0x2e>
 80082e6:	e01a      	b.n	800831e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d115      	bne.n	800831a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80082fa:	200a      	movs	r0, #10
 80082fc:	f7fc f888 	bl	8004410 <HAL_Delay>
      ms += 10U;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	330a      	adds	r3, #10
 8008304:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f9f6 	bl	80086f8 <USB_GetMode>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <USB_SetCurrentMode+0x84>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2bc7      	cmp	r3, #199	@ 0xc7
 8008316:	d9f0      	bls.n	80082fa <USB_SetCurrentMode+0x60>
 8008318:	e001      	b.n	800831e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e005      	b.n	800832a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2bc8      	cmp	r3, #200	@ 0xc8
 8008322:	d101      	bne.n	8008328 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e000      	b.n	800832a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008334:	b084      	sub	sp, #16
 8008336:	b580      	push	{r7, lr}
 8008338:	b086      	sub	sp, #24
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800834e:	2300      	movs	r3, #0
 8008350:	613b      	str	r3, [r7, #16]
 8008352:	e009      	b.n	8008368 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	3340      	adds	r3, #64	@ 0x40
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	2200      	movs	r2, #0
 8008360:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	3301      	adds	r3, #1
 8008366:	613b      	str	r3, [r7, #16]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b0e      	cmp	r3, #14
 800836c:	d9f2      	bls.n	8008354 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800836e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008372:	2b00      	cmp	r3, #0
 8008374:	d11c      	bne.n	80083b0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008384:	f043 0302 	orr.w	r3, r3, #2
 8008388:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
 80083ae:	e005      	b.n	80083bc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80083c2:	461a      	mov	r2, r3
 80083c4:	2300      	movs	r3, #0
 80083c6:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083c8:	2103      	movs	r1, #3
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 f95a 	bl	8008684 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083d0:	2110      	movs	r1, #16
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f8f6 	bl	80085c4 <USB_FlushTxFifo>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d001      	beq.n	80083e2 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f920 	bl	8008628 <USB_FlushRxFifo>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083f8:	461a      	mov	r2, r3
 80083fa:	2300      	movs	r3, #0
 80083fc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008404:	461a      	mov	r2, r3
 8008406:	2300      	movs	r3, #0
 8008408:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008410:	461a      	mov	r2, r3
 8008412:	2300      	movs	r3, #0
 8008414:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008416:	2300      	movs	r3, #0
 8008418:	613b      	str	r3, [r7, #16]
 800841a:	e043      	b.n	80084a4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	015a      	lsls	r2, r3, #5
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	4413      	add	r3, r2
 8008424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800842e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008432:	d118      	bne.n	8008466 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10a      	bne.n	8008450 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	015a      	lsls	r2, r3, #5
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4413      	add	r3, r2
 8008442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008446:	461a      	mov	r2, r3
 8008448:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	e013      	b.n	8008478 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	015a      	lsls	r2, r3, #5
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800845c:	461a      	mov	r2, r3
 800845e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	e008      	b.n	8008478 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008472:	461a      	mov	r2, r3
 8008474:	2300      	movs	r3, #0
 8008476:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008484:	461a      	mov	r2, r3
 8008486:	2300      	movs	r3, #0
 8008488:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008496:	461a      	mov	r2, r3
 8008498:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800849c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	3301      	adds	r3, #1
 80084a2:	613b      	str	r3, [r7, #16]
 80084a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084a8:	461a      	mov	r2, r3
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d3b5      	bcc.n	800841c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084b0:	2300      	movs	r3, #0
 80084b2:	613b      	str	r3, [r7, #16]
 80084b4:	e043      	b.n	800853e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084cc:	d118      	bne.n	8008500 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	015a      	lsls	r2, r3, #5
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4413      	add	r3, r2
 80084dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e0:	461a      	mov	r2, r3
 80084e2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80084e6:	6013      	str	r3, [r2, #0]
 80084e8:	e013      	b.n	8008512 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084f6:	461a      	mov	r2, r3
 80084f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	e008      	b.n	8008512 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	015a      	lsls	r2, r3, #5
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	4413      	add	r3, r2
 8008508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800850c:	461a      	mov	r2, r3
 800850e:	2300      	movs	r3, #0
 8008510:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	4413      	add	r3, r2
 800851a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800851e:	461a      	mov	r2, r3
 8008520:	2300      	movs	r3, #0
 8008522:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008530:	461a      	mov	r2, r3
 8008532:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008536:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	3301      	adds	r3, #1
 800853c:	613b      	str	r3, [r7, #16]
 800853e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008542:	461a      	mov	r2, r3
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	4293      	cmp	r3, r2
 8008548:	d3b5      	bcc.n	80084b6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800855c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800856a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	699b      	ldr	r3, [r3, #24]
 8008570:	f043 0210 	orr.w	r2, r3, #16
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	699a      	ldr	r2, [r3, #24]
 800857c:	4b10      	ldr	r3, [pc, #64]	@ (80085c0 <USB_DevInit+0x28c>)
 800857e:	4313      	orrs	r3, r2
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008584:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	f043 0208 	orr.w	r2, r3, #8
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008598:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800859c:	2b01      	cmp	r3, #1
 800859e:	d107      	bne.n	80085b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085a8:	f043 0304 	orr.w	r3, r3, #4
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085bc:	b004      	add	sp, #16
 80085be:	4770      	bx	lr
 80085c0:	803c3800 	.word	0x803c3800

080085c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3301      	adds	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085de:	d901      	bls.n	80085e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80085e0:	2303      	movs	r3, #3
 80085e2:	e01b      	b.n	800861c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	daf2      	bge.n	80085d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	019b      	lsls	r3, r3, #6
 80085f4:	f043 0220 	orr.w	r2, r3, #32
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3301      	adds	r3, #1
 8008600:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008608:	d901      	bls.n	800860e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800860a:	2303      	movs	r3, #3
 800860c:	e006      	b.n	800861c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b20      	cmp	r3, #32
 8008618:	d0f0      	beq.n	80085fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008630:	2300      	movs	r3, #0
 8008632:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3301      	adds	r3, #1
 8008638:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008640:	d901      	bls.n	8008646 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e018      	b.n	8008678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	daf2      	bge.n	8008634 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2210      	movs	r2, #16
 8008656:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008664:	d901      	bls.n	800866a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	e006      	b.n	8008678 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	f003 0310 	and.w	r3, r3, #16
 8008672:	2b10      	cmp	r3, #16
 8008674:	d0f0      	beq.n	8008658 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	78fb      	ldrb	r3, [r7, #3]
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086a4:	4313      	orrs	r3, r2
 80086a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b085      	sub	sp, #20
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80086d0:	f023 0303 	bic.w	r3, r3, #3
 80086d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80086e4:	f043 0302 	orr.w	r3, r3, #2
 80086e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	f003 0301 	and.w	r3, r3, #1
}
 8008708:	4618      	mov	r0, r3
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3301      	adds	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800872c:	d901      	bls.n	8008732 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e01b      	b.n	800876a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	2b00      	cmp	r3, #0
 8008738:	daf2      	bge.n	8008720 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f043 0201 	orr.w	r2, r3, #1
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3301      	adds	r3, #1
 800874e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008756:	d901      	bls.n	800875c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	e006      	b.n	800876a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	f003 0301 	and.w	r3, r3, #1
 8008764:	2b01      	cmp	r3, #1
 8008766:	d0f0      	beq.n	800874a <USB_CoreReset+0x36>

  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <__cvt>:
 8008776:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800877a:	ec57 6b10 	vmov	r6, r7, d0
 800877e:	2f00      	cmp	r7, #0
 8008780:	460c      	mov	r4, r1
 8008782:	4619      	mov	r1, r3
 8008784:	463b      	mov	r3, r7
 8008786:	bfbb      	ittet	lt
 8008788:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800878c:	461f      	movlt	r7, r3
 800878e:	2300      	movge	r3, #0
 8008790:	232d      	movlt	r3, #45	@ 0x2d
 8008792:	700b      	strb	r3, [r1, #0]
 8008794:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008796:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800879a:	4691      	mov	r9, r2
 800879c:	f023 0820 	bic.w	r8, r3, #32
 80087a0:	bfbc      	itt	lt
 80087a2:	4632      	movlt	r2, r6
 80087a4:	4616      	movlt	r6, r2
 80087a6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80087aa:	d005      	beq.n	80087b8 <__cvt+0x42>
 80087ac:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80087b0:	d100      	bne.n	80087b4 <__cvt+0x3e>
 80087b2:	3401      	adds	r4, #1
 80087b4:	2102      	movs	r1, #2
 80087b6:	e000      	b.n	80087ba <__cvt+0x44>
 80087b8:	2103      	movs	r1, #3
 80087ba:	ab03      	add	r3, sp, #12
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	ab02      	add	r3, sp, #8
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	ec47 6b10 	vmov	d0, r6, r7
 80087c6:	4653      	mov	r3, sl
 80087c8:	4622      	mov	r2, r4
 80087ca:	f000 feb5 	bl	8009538 <_dtoa_r>
 80087ce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80087d2:	4605      	mov	r5, r0
 80087d4:	d119      	bne.n	800880a <__cvt+0x94>
 80087d6:	f019 0f01 	tst.w	r9, #1
 80087da:	d00e      	beq.n	80087fa <__cvt+0x84>
 80087dc:	eb00 0904 	add.w	r9, r0, r4
 80087e0:	2200      	movs	r2, #0
 80087e2:	2300      	movs	r3, #0
 80087e4:	4630      	mov	r0, r6
 80087e6:	4639      	mov	r1, r7
 80087e8:	f7f8 f97e 	bl	8000ae8 <__aeabi_dcmpeq>
 80087ec:	b108      	cbz	r0, 80087f2 <__cvt+0x7c>
 80087ee:	f8cd 900c 	str.w	r9, [sp, #12]
 80087f2:	2230      	movs	r2, #48	@ 0x30
 80087f4:	9b03      	ldr	r3, [sp, #12]
 80087f6:	454b      	cmp	r3, r9
 80087f8:	d31e      	bcc.n	8008838 <__cvt+0xc2>
 80087fa:	9b03      	ldr	r3, [sp, #12]
 80087fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087fe:	1b5b      	subs	r3, r3, r5
 8008800:	4628      	mov	r0, r5
 8008802:	6013      	str	r3, [r2, #0]
 8008804:	b004      	add	sp, #16
 8008806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800880a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800880e:	eb00 0904 	add.w	r9, r0, r4
 8008812:	d1e5      	bne.n	80087e0 <__cvt+0x6a>
 8008814:	7803      	ldrb	r3, [r0, #0]
 8008816:	2b30      	cmp	r3, #48	@ 0x30
 8008818:	d10a      	bne.n	8008830 <__cvt+0xba>
 800881a:	2200      	movs	r2, #0
 800881c:	2300      	movs	r3, #0
 800881e:	4630      	mov	r0, r6
 8008820:	4639      	mov	r1, r7
 8008822:	f7f8 f961 	bl	8000ae8 <__aeabi_dcmpeq>
 8008826:	b918      	cbnz	r0, 8008830 <__cvt+0xba>
 8008828:	f1c4 0401 	rsb	r4, r4, #1
 800882c:	f8ca 4000 	str.w	r4, [sl]
 8008830:	f8da 3000 	ldr.w	r3, [sl]
 8008834:	4499      	add	r9, r3
 8008836:	e7d3      	b.n	80087e0 <__cvt+0x6a>
 8008838:	1c59      	adds	r1, r3, #1
 800883a:	9103      	str	r1, [sp, #12]
 800883c:	701a      	strb	r2, [r3, #0]
 800883e:	e7d9      	b.n	80087f4 <__cvt+0x7e>

08008840 <__exponent>:
 8008840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008842:	2900      	cmp	r1, #0
 8008844:	bfba      	itte	lt
 8008846:	4249      	neglt	r1, r1
 8008848:	232d      	movlt	r3, #45	@ 0x2d
 800884a:	232b      	movge	r3, #43	@ 0x2b
 800884c:	2909      	cmp	r1, #9
 800884e:	7002      	strb	r2, [r0, #0]
 8008850:	7043      	strb	r3, [r0, #1]
 8008852:	dd29      	ble.n	80088a8 <__exponent+0x68>
 8008854:	f10d 0307 	add.w	r3, sp, #7
 8008858:	461d      	mov	r5, r3
 800885a:	270a      	movs	r7, #10
 800885c:	461a      	mov	r2, r3
 800885e:	fbb1 f6f7 	udiv	r6, r1, r7
 8008862:	fb07 1416 	mls	r4, r7, r6, r1
 8008866:	3430      	adds	r4, #48	@ 0x30
 8008868:	f802 4c01 	strb.w	r4, [r2, #-1]
 800886c:	460c      	mov	r4, r1
 800886e:	2c63      	cmp	r4, #99	@ 0x63
 8008870:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008874:	4631      	mov	r1, r6
 8008876:	dcf1      	bgt.n	800885c <__exponent+0x1c>
 8008878:	3130      	adds	r1, #48	@ 0x30
 800887a:	1e94      	subs	r4, r2, #2
 800887c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008880:	1c41      	adds	r1, r0, #1
 8008882:	4623      	mov	r3, r4
 8008884:	42ab      	cmp	r3, r5
 8008886:	d30a      	bcc.n	800889e <__exponent+0x5e>
 8008888:	f10d 0309 	add.w	r3, sp, #9
 800888c:	1a9b      	subs	r3, r3, r2
 800888e:	42ac      	cmp	r4, r5
 8008890:	bf88      	it	hi
 8008892:	2300      	movhi	r3, #0
 8008894:	3302      	adds	r3, #2
 8008896:	4403      	add	r3, r0
 8008898:	1a18      	subs	r0, r3, r0
 800889a:	b003      	add	sp, #12
 800889c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80088a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80088a6:	e7ed      	b.n	8008884 <__exponent+0x44>
 80088a8:	2330      	movs	r3, #48	@ 0x30
 80088aa:	3130      	adds	r1, #48	@ 0x30
 80088ac:	7083      	strb	r3, [r0, #2]
 80088ae:	70c1      	strb	r1, [r0, #3]
 80088b0:	1d03      	adds	r3, r0, #4
 80088b2:	e7f1      	b.n	8008898 <__exponent+0x58>

080088b4 <_printf_float>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	b08d      	sub	sp, #52	@ 0x34
 80088ba:	460c      	mov	r4, r1
 80088bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80088c0:	4616      	mov	r6, r2
 80088c2:	461f      	mov	r7, r3
 80088c4:	4605      	mov	r5, r0
 80088c6:	f000 fd7f 	bl	80093c8 <_localeconv_r>
 80088ca:	6803      	ldr	r3, [r0, #0]
 80088cc:	9304      	str	r3, [sp, #16]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7f7 fcde 	bl	8000290 <strlen>
 80088d4:	2300      	movs	r3, #0
 80088d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80088d8:	f8d8 3000 	ldr.w	r3, [r8]
 80088dc:	9005      	str	r0, [sp, #20]
 80088de:	3307      	adds	r3, #7
 80088e0:	f023 0307 	bic.w	r3, r3, #7
 80088e4:	f103 0208 	add.w	r2, r3, #8
 80088e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80088ec:	f8d4 b000 	ldr.w	fp, [r4]
 80088f0:	f8c8 2000 	str.w	r2, [r8]
 80088f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80088f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80088fc:	9307      	str	r3, [sp, #28]
 80088fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8008902:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008906:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800890a:	4b9c      	ldr	r3, [pc, #624]	@ (8008b7c <_printf_float+0x2c8>)
 800890c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008910:	f7f8 f91c 	bl	8000b4c <__aeabi_dcmpun>
 8008914:	bb70      	cbnz	r0, 8008974 <_printf_float+0xc0>
 8008916:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800891a:	4b98      	ldr	r3, [pc, #608]	@ (8008b7c <_printf_float+0x2c8>)
 800891c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008920:	f7f8 f8f6 	bl	8000b10 <__aeabi_dcmple>
 8008924:	bb30      	cbnz	r0, 8008974 <_printf_float+0xc0>
 8008926:	2200      	movs	r2, #0
 8008928:	2300      	movs	r3, #0
 800892a:	4640      	mov	r0, r8
 800892c:	4649      	mov	r1, r9
 800892e:	f7f8 f8e5 	bl	8000afc <__aeabi_dcmplt>
 8008932:	b110      	cbz	r0, 800893a <_printf_float+0x86>
 8008934:	232d      	movs	r3, #45	@ 0x2d
 8008936:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800893a:	4a91      	ldr	r2, [pc, #580]	@ (8008b80 <_printf_float+0x2cc>)
 800893c:	4b91      	ldr	r3, [pc, #580]	@ (8008b84 <_printf_float+0x2d0>)
 800893e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008942:	bf8c      	ite	hi
 8008944:	4690      	movhi	r8, r2
 8008946:	4698      	movls	r8, r3
 8008948:	2303      	movs	r3, #3
 800894a:	6123      	str	r3, [r4, #16]
 800894c:	f02b 0304 	bic.w	r3, fp, #4
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	9700      	str	r7, [sp, #0]
 8008958:	4633      	mov	r3, r6
 800895a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800895c:	4621      	mov	r1, r4
 800895e:	4628      	mov	r0, r5
 8008960:	f000 f9d2 	bl	8008d08 <_printf_common>
 8008964:	3001      	adds	r0, #1
 8008966:	f040 808d 	bne.w	8008a84 <_printf_float+0x1d0>
 800896a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800896e:	b00d      	add	sp, #52	@ 0x34
 8008970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008974:	4642      	mov	r2, r8
 8008976:	464b      	mov	r3, r9
 8008978:	4640      	mov	r0, r8
 800897a:	4649      	mov	r1, r9
 800897c:	f7f8 f8e6 	bl	8000b4c <__aeabi_dcmpun>
 8008980:	b140      	cbz	r0, 8008994 <_printf_float+0xe0>
 8008982:	464b      	mov	r3, r9
 8008984:	2b00      	cmp	r3, #0
 8008986:	bfbc      	itt	lt
 8008988:	232d      	movlt	r3, #45	@ 0x2d
 800898a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800898e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b88 <_printf_float+0x2d4>)
 8008990:	4b7e      	ldr	r3, [pc, #504]	@ (8008b8c <_printf_float+0x2d8>)
 8008992:	e7d4      	b.n	800893e <_printf_float+0x8a>
 8008994:	6863      	ldr	r3, [r4, #4]
 8008996:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800899a:	9206      	str	r2, [sp, #24]
 800899c:	1c5a      	adds	r2, r3, #1
 800899e:	d13b      	bne.n	8008a18 <_printf_float+0x164>
 80089a0:	2306      	movs	r3, #6
 80089a2:	6063      	str	r3, [r4, #4]
 80089a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80089a8:	2300      	movs	r3, #0
 80089aa:	6022      	str	r2, [r4, #0]
 80089ac:	9303      	str	r3, [sp, #12]
 80089ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80089b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80089b4:	ab09      	add	r3, sp, #36	@ 0x24
 80089b6:	9300      	str	r3, [sp, #0]
 80089b8:	6861      	ldr	r1, [r4, #4]
 80089ba:	ec49 8b10 	vmov	d0, r8, r9
 80089be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80089c2:	4628      	mov	r0, r5
 80089c4:	f7ff fed7 	bl	8008776 <__cvt>
 80089c8:	9b06      	ldr	r3, [sp, #24]
 80089ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80089cc:	2b47      	cmp	r3, #71	@ 0x47
 80089ce:	4680      	mov	r8, r0
 80089d0:	d129      	bne.n	8008a26 <_printf_float+0x172>
 80089d2:	1cc8      	adds	r0, r1, #3
 80089d4:	db02      	blt.n	80089dc <_printf_float+0x128>
 80089d6:	6863      	ldr	r3, [r4, #4]
 80089d8:	4299      	cmp	r1, r3
 80089da:	dd41      	ble.n	8008a60 <_printf_float+0x1ac>
 80089dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80089e0:	fa5f fa8a 	uxtb.w	sl, sl
 80089e4:	3901      	subs	r1, #1
 80089e6:	4652      	mov	r2, sl
 80089e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80089ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80089ee:	f7ff ff27 	bl	8008840 <__exponent>
 80089f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089f4:	1813      	adds	r3, r2, r0
 80089f6:	2a01      	cmp	r2, #1
 80089f8:	4681      	mov	r9, r0
 80089fa:	6123      	str	r3, [r4, #16]
 80089fc:	dc02      	bgt.n	8008a04 <_printf_float+0x150>
 80089fe:	6822      	ldr	r2, [r4, #0]
 8008a00:	07d2      	lsls	r2, r2, #31
 8008a02:	d501      	bpl.n	8008a08 <_printf_float+0x154>
 8008a04:	3301      	adds	r3, #1
 8008a06:	6123      	str	r3, [r4, #16]
 8008a08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d0a2      	beq.n	8008956 <_printf_float+0xa2>
 8008a10:	232d      	movs	r3, #45	@ 0x2d
 8008a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a16:	e79e      	b.n	8008956 <_printf_float+0xa2>
 8008a18:	9a06      	ldr	r2, [sp, #24]
 8008a1a:	2a47      	cmp	r2, #71	@ 0x47
 8008a1c:	d1c2      	bne.n	80089a4 <_printf_float+0xf0>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1c0      	bne.n	80089a4 <_printf_float+0xf0>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e7bd      	b.n	80089a2 <_printf_float+0xee>
 8008a26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a2a:	d9db      	bls.n	80089e4 <_printf_float+0x130>
 8008a2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008a30:	d118      	bne.n	8008a64 <_printf_float+0x1b0>
 8008a32:	2900      	cmp	r1, #0
 8008a34:	6863      	ldr	r3, [r4, #4]
 8008a36:	dd0b      	ble.n	8008a50 <_printf_float+0x19c>
 8008a38:	6121      	str	r1, [r4, #16]
 8008a3a:	b913      	cbnz	r3, 8008a42 <_printf_float+0x18e>
 8008a3c:	6822      	ldr	r2, [r4, #0]
 8008a3e:	07d0      	lsls	r0, r2, #31
 8008a40:	d502      	bpl.n	8008a48 <_printf_float+0x194>
 8008a42:	3301      	adds	r3, #1
 8008a44:	440b      	add	r3, r1
 8008a46:	6123      	str	r3, [r4, #16]
 8008a48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008a4a:	f04f 0900 	mov.w	r9, #0
 8008a4e:	e7db      	b.n	8008a08 <_printf_float+0x154>
 8008a50:	b913      	cbnz	r3, 8008a58 <_printf_float+0x1a4>
 8008a52:	6822      	ldr	r2, [r4, #0]
 8008a54:	07d2      	lsls	r2, r2, #31
 8008a56:	d501      	bpl.n	8008a5c <_printf_float+0x1a8>
 8008a58:	3302      	adds	r3, #2
 8008a5a:	e7f4      	b.n	8008a46 <_printf_float+0x192>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e7f2      	b.n	8008a46 <_printf_float+0x192>
 8008a60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008a64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a66:	4299      	cmp	r1, r3
 8008a68:	db05      	blt.n	8008a76 <_printf_float+0x1c2>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	6121      	str	r1, [r4, #16]
 8008a6e:	07d8      	lsls	r0, r3, #31
 8008a70:	d5ea      	bpl.n	8008a48 <_printf_float+0x194>
 8008a72:	1c4b      	adds	r3, r1, #1
 8008a74:	e7e7      	b.n	8008a46 <_printf_float+0x192>
 8008a76:	2900      	cmp	r1, #0
 8008a78:	bfd4      	ite	le
 8008a7a:	f1c1 0202 	rsble	r2, r1, #2
 8008a7e:	2201      	movgt	r2, #1
 8008a80:	4413      	add	r3, r2
 8008a82:	e7e0      	b.n	8008a46 <_printf_float+0x192>
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	055a      	lsls	r2, r3, #21
 8008a88:	d407      	bmi.n	8008a9a <_printf_float+0x1e6>
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	4642      	mov	r2, r8
 8008a8e:	4631      	mov	r1, r6
 8008a90:	4628      	mov	r0, r5
 8008a92:	47b8      	blx	r7
 8008a94:	3001      	adds	r0, #1
 8008a96:	d12b      	bne.n	8008af0 <_printf_float+0x23c>
 8008a98:	e767      	b.n	800896a <_printf_float+0xb6>
 8008a9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008a9e:	f240 80dd 	bls.w	8008c5c <_printf_float+0x3a8>
 8008aa2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f7f8 f81d 	bl	8000ae8 <__aeabi_dcmpeq>
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d033      	beq.n	8008b1a <_printf_float+0x266>
 8008ab2:	4a37      	ldr	r2, [pc, #220]	@ (8008b90 <_printf_float+0x2dc>)
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	4631      	mov	r1, r6
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b8      	blx	r7
 8008abc:	3001      	adds	r0, #1
 8008abe:	f43f af54 	beq.w	800896a <_printf_float+0xb6>
 8008ac2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008ac6:	4543      	cmp	r3, r8
 8008ac8:	db02      	blt.n	8008ad0 <_printf_float+0x21c>
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	07d8      	lsls	r0, r3, #31
 8008ace:	d50f      	bpl.n	8008af0 <_printf_float+0x23c>
 8008ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f af45 	beq.w	800896a <_printf_float+0xb6>
 8008ae0:	f04f 0900 	mov.w	r9, #0
 8008ae4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008ae8:	f104 0a1a 	add.w	sl, r4, #26
 8008aec:	45c8      	cmp	r8, r9
 8008aee:	dc09      	bgt.n	8008b04 <_printf_float+0x250>
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	079b      	lsls	r3, r3, #30
 8008af4:	f100 8103 	bmi.w	8008cfe <_printf_float+0x44a>
 8008af8:	68e0      	ldr	r0, [r4, #12]
 8008afa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008afc:	4298      	cmp	r0, r3
 8008afe:	bfb8      	it	lt
 8008b00:	4618      	movlt	r0, r3
 8008b02:	e734      	b.n	800896e <_printf_float+0xba>
 8008b04:	2301      	movs	r3, #1
 8008b06:	4652      	mov	r2, sl
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f af2b 	beq.w	800896a <_printf_float+0xb6>
 8008b14:	f109 0901 	add.w	r9, r9, #1
 8008b18:	e7e8      	b.n	8008aec <_printf_float+0x238>
 8008b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	dc39      	bgt.n	8008b94 <_printf_float+0x2e0>
 8008b20:	4a1b      	ldr	r2, [pc, #108]	@ (8008b90 <_printf_float+0x2dc>)
 8008b22:	2301      	movs	r3, #1
 8008b24:	4631      	mov	r1, r6
 8008b26:	4628      	mov	r0, r5
 8008b28:	47b8      	blx	r7
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	f43f af1d 	beq.w	800896a <_printf_float+0xb6>
 8008b30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008b34:	ea59 0303 	orrs.w	r3, r9, r3
 8008b38:	d102      	bne.n	8008b40 <_printf_float+0x28c>
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	07d9      	lsls	r1, r3, #31
 8008b3e:	d5d7      	bpl.n	8008af0 <_printf_float+0x23c>
 8008b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b44:	4631      	mov	r1, r6
 8008b46:	4628      	mov	r0, r5
 8008b48:	47b8      	blx	r7
 8008b4a:	3001      	adds	r0, #1
 8008b4c:	f43f af0d 	beq.w	800896a <_printf_float+0xb6>
 8008b50:	f04f 0a00 	mov.w	sl, #0
 8008b54:	f104 0b1a 	add.w	fp, r4, #26
 8008b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5a:	425b      	negs	r3, r3
 8008b5c:	4553      	cmp	r3, sl
 8008b5e:	dc01      	bgt.n	8008b64 <_printf_float+0x2b0>
 8008b60:	464b      	mov	r3, r9
 8008b62:	e793      	b.n	8008a8c <_printf_float+0x1d8>
 8008b64:	2301      	movs	r3, #1
 8008b66:	465a      	mov	r2, fp
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	47b8      	blx	r7
 8008b6e:	3001      	adds	r0, #1
 8008b70:	f43f aefb 	beq.w	800896a <_printf_float+0xb6>
 8008b74:	f10a 0a01 	add.w	sl, sl, #1
 8008b78:	e7ee      	b.n	8008b58 <_printf_float+0x2a4>
 8008b7a:	bf00      	nop
 8008b7c:	7fefffff 	.word	0x7fefffff
 8008b80:	0800b798 	.word	0x0800b798
 8008b84:	0800b794 	.word	0x0800b794
 8008b88:	0800b7a0 	.word	0x0800b7a0
 8008b8c:	0800b79c 	.word	0x0800b79c
 8008b90:	0800b7a4 	.word	0x0800b7a4
 8008b94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b9a:	4553      	cmp	r3, sl
 8008b9c:	bfa8      	it	ge
 8008b9e:	4653      	movge	r3, sl
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	4699      	mov	r9, r3
 8008ba4:	dc36      	bgt.n	8008c14 <_printf_float+0x360>
 8008ba6:	f04f 0b00 	mov.w	fp, #0
 8008baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bae:	f104 021a 	add.w	r2, r4, #26
 8008bb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008bb4:	9306      	str	r3, [sp, #24]
 8008bb6:	eba3 0309 	sub.w	r3, r3, r9
 8008bba:	455b      	cmp	r3, fp
 8008bbc:	dc31      	bgt.n	8008c22 <_printf_float+0x36e>
 8008bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc0:	459a      	cmp	sl, r3
 8008bc2:	dc3a      	bgt.n	8008c3a <_printf_float+0x386>
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	07da      	lsls	r2, r3, #31
 8008bc8:	d437      	bmi.n	8008c3a <_printf_float+0x386>
 8008bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bcc:	ebaa 0903 	sub.w	r9, sl, r3
 8008bd0:	9b06      	ldr	r3, [sp, #24]
 8008bd2:	ebaa 0303 	sub.w	r3, sl, r3
 8008bd6:	4599      	cmp	r9, r3
 8008bd8:	bfa8      	it	ge
 8008bda:	4699      	movge	r9, r3
 8008bdc:	f1b9 0f00 	cmp.w	r9, #0
 8008be0:	dc33      	bgt.n	8008c4a <_printf_float+0x396>
 8008be2:	f04f 0800 	mov.w	r8, #0
 8008be6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bea:	f104 0b1a 	add.w	fp, r4, #26
 8008bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf0:	ebaa 0303 	sub.w	r3, sl, r3
 8008bf4:	eba3 0309 	sub.w	r3, r3, r9
 8008bf8:	4543      	cmp	r3, r8
 8008bfa:	f77f af79 	ble.w	8008af0 <_printf_float+0x23c>
 8008bfe:	2301      	movs	r3, #1
 8008c00:	465a      	mov	r2, fp
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	47b8      	blx	r7
 8008c08:	3001      	adds	r0, #1
 8008c0a:	f43f aeae 	beq.w	800896a <_printf_float+0xb6>
 8008c0e:	f108 0801 	add.w	r8, r8, #1
 8008c12:	e7ec      	b.n	8008bee <_printf_float+0x33a>
 8008c14:	4642      	mov	r2, r8
 8008c16:	4631      	mov	r1, r6
 8008c18:	4628      	mov	r0, r5
 8008c1a:	47b8      	blx	r7
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	d1c2      	bne.n	8008ba6 <_printf_float+0x2f2>
 8008c20:	e6a3      	b.n	800896a <_printf_float+0xb6>
 8008c22:	2301      	movs	r3, #1
 8008c24:	4631      	mov	r1, r6
 8008c26:	4628      	mov	r0, r5
 8008c28:	9206      	str	r2, [sp, #24]
 8008c2a:	47b8      	blx	r7
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	f43f ae9c 	beq.w	800896a <_printf_float+0xb6>
 8008c32:	9a06      	ldr	r2, [sp, #24]
 8008c34:	f10b 0b01 	add.w	fp, fp, #1
 8008c38:	e7bb      	b.n	8008bb2 <_printf_float+0x2fe>
 8008c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c3e:	4631      	mov	r1, r6
 8008c40:	4628      	mov	r0, r5
 8008c42:	47b8      	blx	r7
 8008c44:	3001      	adds	r0, #1
 8008c46:	d1c0      	bne.n	8008bca <_printf_float+0x316>
 8008c48:	e68f      	b.n	800896a <_printf_float+0xb6>
 8008c4a:	9a06      	ldr	r2, [sp, #24]
 8008c4c:	464b      	mov	r3, r9
 8008c4e:	4442      	add	r2, r8
 8008c50:	4631      	mov	r1, r6
 8008c52:	4628      	mov	r0, r5
 8008c54:	47b8      	blx	r7
 8008c56:	3001      	adds	r0, #1
 8008c58:	d1c3      	bne.n	8008be2 <_printf_float+0x32e>
 8008c5a:	e686      	b.n	800896a <_printf_float+0xb6>
 8008c5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c60:	f1ba 0f01 	cmp.w	sl, #1
 8008c64:	dc01      	bgt.n	8008c6a <_printf_float+0x3b6>
 8008c66:	07db      	lsls	r3, r3, #31
 8008c68:	d536      	bpl.n	8008cd8 <_printf_float+0x424>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	4642      	mov	r2, r8
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b8      	blx	r7
 8008c74:	3001      	adds	r0, #1
 8008c76:	f43f ae78 	beq.w	800896a <_printf_float+0xb6>
 8008c7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c7e:	4631      	mov	r1, r6
 8008c80:	4628      	mov	r0, r5
 8008c82:	47b8      	blx	r7
 8008c84:	3001      	adds	r0, #1
 8008c86:	f43f ae70 	beq.w	800896a <_printf_float+0xb6>
 8008c8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008c8e:	2200      	movs	r2, #0
 8008c90:	2300      	movs	r3, #0
 8008c92:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008c96:	f7f7 ff27 	bl	8000ae8 <__aeabi_dcmpeq>
 8008c9a:	b9c0      	cbnz	r0, 8008cce <_printf_float+0x41a>
 8008c9c:	4653      	mov	r3, sl
 8008c9e:	f108 0201 	add.w	r2, r8, #1
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	d10c      	bne.n	8008cc6 <_printf_float+0x412>
 8008cac:	e65d      	b.n	800896a <_printf_float+0xb6>
 8008cae:	2301      	movs	r3, #1
 8008cb0:	465a      	mov	r2, fp
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	47b8      	blx	r7
 8008cb8:	3001      	adds	r0, #1
 8008cba:	f43f ae56 	beq.w	800896a <_printf_float+0xb6>
 8008cbe:	f108 0801 	add.w	r8, r8, #1
 8008cc2:	45d0      	cmp	r8, sl
 8008cc4:	dbf3      	blt.n	8008cae <_printf_float+0x3fa>
 8008cc6:	464b      	mov	r3, r9
 8008cc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ccc:	e6df      	b.n	8008a8e <_printf_float+0x1da>
 8008cce:	f04f 0800 	mov.w	r8, #0
 8008cd2:	f104 0b1a 	add.w	fp, r4, #26
 8008cd6:	e7f4      	b.n	8008cc2 <_printf_float+0x40e>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	4642      	mov	r2, r8
 8008cdc:	e7e1      	b.n	8008ca2 <_printf_float+0x3ee>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	464a      	mov	r2, r9
 8008ce2:	4631      	mov	r1, r6
 8008ce4:	4628      	mov	r0, r5
 8008ce6:	47b8      	blx	r7
 8008ce8:	3001      	adds	r0, #1
 8008cea:	f43f ae3e 	beq.w	800896a <_printf_float+0xb6>
 8008cee:	f108 0801 	add.w	r8, r8, #1
 8008cf2:	68e3      	ldr	r3, [r4, #12]
 8008cf4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008cf6:	1a5b      	subs	r3, r3, r1
 8008cf8:	4543      	cmp	r3, r8
 8008cfa:	dcf0      	bgt.n	8008cde <_printf_float+0x42a>
 8008cfc:	e6fc      	b.n	8008af8 <_printf_float+0x244>
 8008cfe:	f04f 0800 	mov.w	r8, #0
 8008d02:	f104 0919 	add.w	r9, r4, #25
 8008d06:	e7f4      	b.n	8008cf2 <_printf_float+0x43e>

08008d08 <_printf_common>:
 8008d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	4698      	mov	r8, r3
 8008d10:	688a      	ldr	r2, [r1, #8]
 8008d12:	690b      	ldr	r3, [r1, #16]
 8008d14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	bfb8      	it	lt
 8008d1c:	4613      	movlt	r3, r2
 8008d1e:	6033      	str	r3, [r6, #0]
 8008d20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008d24:	4607      	mov	r7, r0
 8008d26:	460c      	mov	r4, r1
 8008d28:	b10a      	cbz	r2, 8008d2e <_printf_common+0x26>
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	6033      	str	r3, [r6, #0]
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	0699      	lsls	r1, r3, #26
 8008d32:	bf42      	ittt	mi
 8008d34:	6833      	ldrmi	r3, [r6, #0]
 8008d36:	3302      	addmi	r3, #2
 8008d38:	6033      	strmi	r3, [r6, #0]
 8008d3a:	6825      	ldr	r5, [r4, #0]
 8008d3c:	f015 0506 	ands.w	r5, r5, #6
 8008d40:	d106      	bne.n	8008d50 <_printf_common+0x48>
 8008d42:	f104 0a19 	add.w	sl, r4, #25
 8008d46:	68e3      	ldr	r3, [r4, #12]
 8008d48:	6832      	ldr	r2, [r6, #0]
 8008d4a:	1a9b      	subs	r3, r3, r2
 8008d4c:	42ab      	cmp	r3, r5
 8008d4e:	dc26      	bgt.n	8008d9e <_printf_common+0x96>
 8008d50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008d54:	6822      	ldr	r2, [r4, #0]
 8008d56:	3b00      	subs	r3, #0
 8008d58:	bf18      	it	ne
 8008d5a:	2301      	movne	r3, #1
 8008d5c:	0692      	lsls	r2, r2, #26
 8008d5e:	d42b      	bmi.n	8008db8 <_printf_common+0xb0>
 8008d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008d64:	4641      	mov	r1, r8
 8008d66:	4638      	mov	r0, r7
 8008d68:	47c8      	blx	r9
 8008d6a:	3001      	adds	r0, #1
 8008d6c:	d01e      	beq.n	8008dac <_printf_common+0xa4>
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	6922      	ldr	r2, [r4, #16]
 8008d72:	f003 0306 	and.w	r3, r3, #6
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	bf02      	ittt	eq
 8008d7a:	68e5      	ldreq	r5, [r4, #12]
 8008d7c:	6833      	ldreq	r3, [r6, #0]
 8008d7e:	1aed      	subeq	r5, r5, r3
 8008d80:	68a3      	ldr	r3, [r4, #8]
 8008d82:	bf0c      	ite	eq
 8008d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d88:	2500      	movne	r5, #0
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	bfc4      	itt	gt
 8008d8e:	1a9b      	subgt	r3, r3, r2
 8008d90:	18ed      	addgt	r5, r5, r3
 8008d92:	2600      	movs	r6, #0
 8008d94:	341a      	adds	r4, #26
 8008d96:	42b5      	cmp	r5, r6
 8008d98:	d11a      	bne.n	8008dd0 <_printf_common+0xc8>
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	e008      	b.n	8008db0 <_printf_common+0xa8>
 8008d9e:	2301      	movs	r3, #1
 8008da0:	4652      	mov	r2, sl
 8008da2:	4641      	mov	r1, r8
 8008da4:	4638      	mov	r0, r7
 8008da6:	47c8      	blx	r9
 8008da8:	3001      	adds	r0, #1
 8008daa:	d103      	bne.n	8008db4 <_printf_common+0xac>
 8008dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db4:	3501      	adds	r5, #1
 8008db6:	e7c6      	b.n	8008d46 <_printf_common+0x3e>
 8008db8:	18e1      	adds	r1, r4, r3
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	2030      	movs	r0, #48	@ 0x30
 8008dbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008dc2:	4422      	add	r2, r4
 8008dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008dc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008dcc:	3302      	adds	r3, #2
 8008dce:	e7c7      	b.n	8008d60 <_printf_common+0x58>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	4622      	mov	r2, r4
 8008dd4:	4641      	mov	r1, r8
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	47c8      	blx	r9
 8008dda:	3001      	adds	r0, #1
 8008ddc:	d0e6      	beq.n	8008dac <_printf_common+0xa4>
 8008dde:	3601      	adds	r6, #1
 8008de0:	e7d9      	b.n	8008d96 <_printf_common+0x8e>
	...

08008de4 <_printf_i>:
 8008de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008de8:	7e0f      	ldrb	r7, [r1, #24]
 8008dea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008dec:	2f78      	cmp	r7, #120	@ 0x78
 8008dee:	4691      	mov	r9, r2
 8008df0:	4680      	mov	r8, r0
 8008df2:	460c      	mov	r4, r1
 8008df4:	469a      	mov	sl, r3
 8008df6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008dfa:	d807      	bhi.n	8008e0c <_printf_i+0x28>
 8008dfc:	2f62      	cmp	r7, #98	@ 0x62
 8008dfe:	d80a      	bhi.n	8008e16 <_printf_i+0x32>
 8008e00:	2f00      	cmp	r7, #0
 8008e02:	f000 80d1 	beq.w	8008fa8 <_printf_i+0x1c4>
 8008e06:	2f58      	cmp	r7, #88	@ 0x58
 8008e08:	f000 80b8 	beq.w	8008f7c <_printf_i+0x198>
 8008e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008e14:	e03a      	b.n	8008e8c <_printf_i+0xa8>
 8008e16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008e1a:	2b15      	cmp	r3, #21
 8008e1c:	d8f6      	bhi.n	8008e0c <_printf_i+0x28>
 8008e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e24 <_printf_i+0x40>)
 8008e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e24:	08008e7d 	.word	0x08008e7d
 8008e28:	08008e91 	.word	0x08008e91
 8008e2c:	08008e0d 	.word	0x08008e0d
 8008e30:	08008e0d 	.word	0x08008e0d
 8008e34:	08008e0d 	.word	0x08008e0d
 8008e38:	08008e0d 	.word	0x08008e0d
 8008e3c:	08008e91 	.word	0x08008e91
 8008e40:	08008e0d 	.word	0x08008e0d
 8008e44:	08008e0d 	.word	0x08008e0d
 8008e48:	08008e0d 	.word	0x08008e0d
 8008e4c:	08008e0d 	.word	0x08008e0d
 8008e50:	08008f8f 	.word	0x08008f8f
 8008e54:	08008ebb 	.word	0x08008ebb
 8008e58:	08008f49 	.word	0x08008f49
 8008e5c:	08008e0d 	.word	0x08008e0d
 8008e60:	08008e0d 	.word	0x08008e0d
 8008e64:	08008fb1 	.word	0x08008fb1
 8008e68:	08008e0d 	.word	0x08008e0d
 8008e6c:	08008ebb 	.word	0x08008ebb
 8008e70:	08008e0d 	.word	0x08008e0d
 8008e74:	08008e0d 	.word	0x08008e0d
 8008e78:	08008f51 	.word	0x08008f51
 8008e7c:	6833      	ldr	r3, [r6, #0]
 8008e7e:	1d1a      	adds	r2, r3, #4
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	6032      	str	r2, [r6, #0]
 8008e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008e88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e09c      	b.n	8008fca <_printf_i+0x1e6>
 8008e90:	6833      	ldr	r3, [r6, #0]
 8008e92:	6820      	ldr	r0, [r4, #0]
 8008e94:	1d19      	adds	r1, r3, #4
 8008e96:	6031      	str	r1, [r6, #0]
 8008e98:	0606      	lsls	r6, r0, #24
 8008e9a:	d501      	bpl.n	8008ea0 <_printf_i+0xbc>
 8008e9c:	681d      	ldr	r5, [r3, #0]
 8008e9e:	e003      	b.n	8008ea8 <_printf_i+0xc4>
 8008ea0:	0645      	lsls	r5, r0, #25
 8008ea2:	d5fb      	bpl.n	8008e9c <_printf_i+0xb8>
 8008ea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ea8:	2d00      	cmp	r5, #0
 8008eaa:	da03      	bge.n	8008eb4 <_printf_i+0xd0>
 8008eac:	232d      	movs	r3, #45	@ 0x2d
 8008eae:	426d      	negs	r5, r5
 8008eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008eb4:	4858      	ldr	r0, [pc, #352]	@ (8009018 <_printf_i+0x234>)
 8008eb6:	230a      	movs	r3, #10
 8008eb8:	e011      	b.n	8008ede <_printf_i+0xfa>
 8008eba:	6821      	ldr	r1, [r4, #0]
 8008ebc:	6833      	ldr	r3, [r6, #0]
 8008ebe:	0608      	lsls	r0, r1, #24
 8008ec0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008ec4:	d402      	bmi.n	8008ecc <_printf_i+0xe8>
 8008ec6:	0649      	lsls	r1, r1, #25
 8008ec8:	bf48      	it	mi
 8008eca:	b2ad      	uxthmi	r5, r5
 8008ecc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ece:	4852      	ldr	r0, [pc, #328]	@ (8009018 <_printf_i+0x234>)
 8008ed0:	6033      	str	r3, [r6, #0]
 8008ed2:	bf14      	ite	ne
 8008ed4:	230a      	movne	r3, #10
 8008ed6:	2308      	moveq	r3, #8
 8008ed8:	2100      	movs	r1, #0
 8008eda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ede:	6866      	ldr	r6, [r4, #4]
 8008ee0:	60a6      	str	r6, [r4, #8]
 8008ee2:	2e00      	cmp	r6, #0
 8008ee4:	db05      	blt.n	8008ef2 <_printf_i+0x10e>
 8008ee6:	6821      	ldr	r1, [r4, #0]
 8008ee8:	432e      	orrs	r6, r5
 8008eea:	f021 0104 	bic.w	r1, r1, #4
 8008eee:	6021      	str	r1, [r4, #0]
 8008ef0:	d04b      	beq.n	8008f8a <_printf_i+0x1a6>
 8008ef2:	4616      	mov	r6, r2
 8008ef4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ef8:	fb03 5711 	mls	r7, r3, r1, r5
 8008efc:	5dc7      	ldrb	r7, [r0, r7]
 8008efe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008f02:	462f      	mov	r7, r5
 8008f04:	42bb      	cmp	r3, r7
 8008f06:	460d      	mov	r5, r1
 8008f08:	d9f4      	bls.n	8008ef4 <_printf_i+0x110>
 8008f0a:	2b08      	cmp	r3, #8
 8008f0c:	d10b      	bne.n	8008f26 <_printf_i+0x142>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	07df      	lsls	r7, r3, #31
 8008f12:	d508      	bpl.n	8008f26 <_printf_i+0x142>
 8008f14:	6923      	ldr	r3, [r4, #16]
 8008f16:	6861      	ldr	r1, [r4, #4]
 8008f18:	4299      	cmp	r1, r3
 8008f1a:	bfde      	ittt	le
 8008f1c:	2330      	movle	r3, #48	@ 0x30
 8008f1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008f22:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008f26:	1b92      	subs	r2, r2, r6
 8008f28:	6122      	str	r2, [r4, #16]
 8008f2a:	f8cd a000 	str.w	sl, [sp]
 8008f2e:	464b      	mov	r3, r9
 8008f30:	aa03      	add	r2, sp, #12
 8008f32:	4621      	mov	r1, r4
 8008f34:	4640      	mov	r0, r8
 8008f36:	f7ff fee7 	bl	8008d08 <_printf_common>
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	d14a      	bne.n	8008fd4 <_printf_i+0x1f0>
 8008f3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f42:	b004      	add	sp, #16
 8008f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	f043 0320 	orr.w	r3, r3, #32
 8008f4e:	6023      	str	r3, [r4, #0]
 8008f50:	4832      	ldr	r0, [pc, #200]	@ (800901c <_printf_i+0x238>)
 8008f52:	2778      	movs	r7, #120	@ 0x78
 8008f54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008f58:	6823      	ldr	r3, [r4, #0]
 8008f5a:	6831      	ldr	r1, [r6, #0]
 8008f5c:	061f      	lsls	r7, r3, #24
 8008f5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008f62:	d402      	bmi.n	8008f6a <_printf_i+0x186>
 8008f64:	065f      	lsls	r7, r3, #25
 8008f66:	bf48      	it	mi
 8008f68:	b2ad      	uxthmi	r5, r5
 8008f6a:	6031      	str	r1, [r6, #0]
 8008f6c:	07d9      	lsls	r1, r3, #31
 8008f6e:	bf44      	itt	mi
 8008f70:	f043 0320 	orrmi.w	r3, r3, #32
 8008f74:	6023      	strmi	r3, [r4, #0]
 8008f76:	b11d      	cbz	r5, 8008f80 <_printf_i+0x19c>
 8008f78:	2310      	movs	r3, #16
 8008f7a:	e7ad      	b.n	8008ed8 <_printf_i+0xf4>
 8008f7c:	4826      	ldr	r0, [pc, #152]	@ (8009018 <_printf_i+0x234>)
 8008f7e:	e7e9      	b.n	8008f54 <_printf_i+0x170>
 8008f80:	6823      	ldr	r3, [r4, #0]
 8008f82:	f023 0320 	bic.w	r3, r3, #32
 8008f86:	6023      	str	r3, [r4, #0]
 8008f88:	e7f6      	b.n	8008f78 <_printf_i+0x194>
 8008f8a:	4616      	mov	r6, r2
 8008f8c:	e7bd      	b.n	8008f0a <_printf_i+0x126>
 8008f8e:	6833      	ldr	r3, [r6, #0]
 8008f90:	6825      	ldr	r5, [r4, #0]
 8008f92:	6961      	ldr	r1, [r4, #20]
 8008f94:	1d18      	adds	r0, r3, #4
 8008f96:	6030      	str	r0, [r6, #0]
 8008f98:	062e      	lsls	r6, r5, #24
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	d501      	bpl.n	8008fa2 <_printf_i+0x1be>
 8008f9e:	6019      	str	r1, [r3, #0]
 8008fa0:	e002      	b.n	8008fa8 <_printf_i+0x1c4>
 8008fa2:	0668      	lsls	r0, r5, #25
 8008fa4:	d5fb      	bpl.n	8008f9e <_printf_i+0x1ba>
 8008fa6:	8019      	strh	r1, [r3, #0]
 8008fa8:	2300      	movs	r3, #0
 8008faa:	6123      	str	r3, [r4, #16]
 8008fac:	4616      	mov	r6, r2
 8008fae:	e7bc      	b.n	8008f2a <_printf_i+0x146>
 8008fb0:	6833      	ldr	r3, [r6, #0]
 8008fb2:	1d1a      	adds	r2, r3, #4
 8008fb4:	6032      	str	r2, [r6, #0]
 8008fb6:	681e      	ldr	r6, [r3, #0]
 8008fb8:	6862      	ldr	r2, [r4, #4]
 8008fba:	2100      	movs	r1, #0
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f7f7 f917 	bl	80001f0 <memchr>
 8008fc2:	b108      	cbz	r0, 8008fc8 <_printf_i+0x1e4>
 8008fc4:	1b80      	subs	r0, r0, r6
 8008fc6:	6060      	str	r0, [r4, #4]
 8008fc8:	6863      	ldr	r3, [r4, #4]
 8008fca:	6123      	str	r3, [r4, #16]
 8008fcc:	2300      	movs	r3, #0
 8008fce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fd2:	e7aa      	b.n	8008f2a <_printf_i+0x146>
 8008fd4:	6923      	ldr	r3, [r4, #16]
 8008fd6:	4632      	mov	r2, r6
 8008fd8:	4649      	mov	r1, r9
 8008fda:	4640      	mov	r0, r8
 8008fdc:	47d0      	blx	sl
 8008fde:	3001      	adds	r0, #1
 8008fe0:	d0ad      	beq.n	8008f3e <_printf_i+0x15a>
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	079b      	lsls	r3, r3, #30
 8008fe6:	d413      	bmi.n	8009010 <_printf_i+0x22c>
 8008fe8:	68e0      	ldr	r0, [r4, #12]
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	4298      	cmp	r0, r3
 8008fee:	bfb8      	it	lt
 8008ff0:	4618      	movlt	r0, r3
 8008ff2:	e7a6      	b.n	8008f42 <_printf_i+0x15e>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	4632      	mov	r2, r6
 8008ff8:	4649      	mov	r1, r9
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	47d0      	blx	sl
 8008ffe:	3001      	adds	r0, #1
 8009000:	d09d      	beq.n	8008f3e <_printf_i+0x15a>
 8009002:	3501      	adds	r5, #1
 8009004:	68e3      	ldr	r3, [r4, #12]
 8009006:	9903      	ldr	r1, [sp, #12]
 8009008:	1a5b      	subs	r3, r3, r1
 800900a:	42ab      	cmp	r3, r5
 800900c:	dcf2      	bgt.n	8008ff4 <_printf_i+0x210>
 800900e:	e7eb      	b.n	8008fe8 <_printf_i+0x204>
 8009010:	2500      	movs	r5, #0
 8009012:	f104 0619 	add.w	r6, r4, #25
 8009016:	e7f5      	b.n	8009004 <_printf_i+0x220>
 8009018:	0800b7a6 	.word	0x0800b7a6
 800901c:	0800b7b7 	.word	0x0800b7b7

08009020 <srand>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4b10      	ldr	r3, [pc, #64]	@ (8009064 <srand+0x44>)
 8009024:	681d      	ldr	r5, [r3, #0]
 8009026:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8009028:	4604      	mov	r4, r0
 800902a:	b9b3      	cbnz	r3, 800905a <srand+0x3a>
 800902c:	2018      	movs	r0, #24
 800902e:	f001 f995 	bl	800a35c <malloc>
 8009032:	4602      	mov	r2, r0
 8009034:	6328      	str	r0, [r5, #48]	@ 0x30
 8009036:	b920      	cbnz	r0, 8009042 <srand+0x22>
 8009038:	4b0b      	ldr	r3, [pc, #44]	@ (8009068 <srand+0x48>)
 800903a:	480c      	ldr	r0, [pc, #48]	@ (800906c <srand+0x4c>)
 800903c:	2146      	movs	r1, #70	@ 0x46
 800903e:	f000 f9d5 	bl	80093ec <__assert_func>
 8009042:	490b      	ldr	r1, [pc, #44]	@ (8009070 <srand+0x50>)
 8009044:	4b0b      	ldr	r3, [pc, #44]	@ (8009074 <srand+0x54>)
 8009046:	e9c0 1300 	strd	r1, r3, [r0]
 800904a:	4b0b      	ldr	r3, [pc, #44]	@ (8009078 <srand+0x58>)
 800904c:	6083      	str	r3, [r0, #8]
 800904e:	230b      	movs	r3, #11
 8009050:	8183      	strh	r3, [r0, #12]
 8009052:	2100      	movs	r1, #0
 8009054:	2001      	movs	r0, #1
 8009056:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800905a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800905c:	2200      	movs	r2, #0
 800905e:	611c      	str	r4, [r3, #16]
 8009060:	615a      	str	r2, [r3, #20]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	200000e0 	.word	0x200000e0
 8009068:	0800b7c8 	.word	0x0800b7c8
 800906c:	0800b7df 	.word	0x0800b7df
 8009070:	abcd330e 	.word	0xabcd330e
 8009074:	e66d1234 	.word	0xe66d1234
 8009078:	0005deec 	.word	0x0005deec

0800907c <rand>:
 800907c:	4b16      	ldr	r3, [pc, #88]	@ (80090d8 <rand+0x5c>)
 800907e:	b510      	push	{r4, lr}
 8009080:	681c      	ldr	r4, [r3, #0]
 8009082:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009084:	b9b3      	cbnz	r3, 80090b4 <rand+0x38>
 8009086:	2018      	movs	r0, #24
 8009088:	f001 f968 	bl	800a35c <malloc>
 800908c:	4602      	mov	r2, r0
 800908e:	6320      	str	r0, [r4, #48]	@ 0x30
 8009090:	b920      	cbnz	r0, 800909c <rand+0x20>
 8009092:	4b12      	ldr	r3, [pc, #72]	@ (80090dc <rand+0x60>)
 8009094:	4812      	ldr	r0, [pc, #72]	@ (80090e0 <rand+0x64>)
 8009096:	2152      	movs	r1, #82	@ 0x52
 8009098:	f000 f9a8 	bl	80093ec <__assert_func>
 800909c:	4911      	ldr	r1, [pc, #68]	@ (80090e4 <rand+0x68>)
 800909e:	4b12      	ldr	r3, [pc, #72]	@ (80090e8 <rand+0x6c>)
 80090a0:	e9c0 1300 	strd	r1, r3, [r0]
 80090a4:	4b11      	ldr	r3, [pc, #68]	@ (80090ec <rand+0x70>)
 80090a6:	6083      	str	r3, [r0, #8]
 80090a8:	230b      	movs	r3, #11
 80090aa:	8183      	strh	r3, [r0, #12]
 80090ac:	2100      	movs	r1, #0
 80090ae:	2001      	movs	r0, #1
 80090b0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80090b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80090b6:	480e      	ldr	r0, [pc, #56]	@ (80090f0 <rand+0x74>)
 80090b8:	690b      	ldr	r3, [r1, #16]
 80090ba:	694c      	ldr	r4, [r1, #20]
 80090bc:	4a0d      	ldr	r2, [pc, #52]	@ (80090f4 <rand+0x78>)
 80090be:	4358      	muls	r0, r3
 80090c0:	fb02 0004 	mla	r0, r2, r4, r0
 80090c4:	fba3 3202 	umull	r3, r2, r3, r2
 80090c8:	3301      	adds	r3, #1
 80090ca:	eb40 0002 	adc.w	r0, r0, r2
 80090ce:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80090d2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80090d6:	bd10      	pop	{r4, pc}
 80090d8:	200000e0 	.word	0x200000e0
 80090dc:	0800b7c8 	.word	0x0800b7c8
 80090e0:	0800b7df 	.word	0x0800b7df
 80090e4:	abcd330e 	.word	0xabcd330e
 80090e8:	e66d1234 	.word	0xe66d1234
 80090ec:	0005deec 	.word	0x0005deec
 80090f0:	5851f42d 	.word	0x5851f42d
 80090f4:	4c957f2d 	.word	0x4c957f2d

080090f8 <std>:
 80090f8:	2300      	movs	r3, #0
 80090fa:	b510      	push	{r4, lr}
 80090fc:	4604      	mov	r4, r0
 80090fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009106:	6083      	str	r3, [r0, #8]
 8009108:	8181      	strh	r1, [r0, #12]
 800910a:	6643      	str	r3, [r0, #100]	@ 0x64
 800910c:	81c2      	strh	r2, [r0, #14]
 800910e:	6183      	str	r3, [r0, #24]
 8009110:	4619      	mov	r1, r3
 8009112:	2208      	movs	r2, #8
 8009114:	305c      	adds	r0, #92	@ 0x5c
 8009116:	f000 f921 	bl	800935c <memset>
 800911a:	4b0d      	ldr	r3, [pc, #52]	@ (8009150 <std+0x58>)
 800911c:	6263      	str	r3, [r4, #36]	@ 0x24
 800911e:	4b0d      	ldr	r3, [pc, #52]	@ (8009154 <std+0x5c>)
 8009120:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009122:	4b0d      	ldr	r3, [pc, #52]	@ (8009158 <std+0x60>)
 8009124:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009126:	4b0d      	ldr	r3, [pc, #52]	@ (800915c <std+0x64>)
 8009128:	6323      	str	r3, [r4, #48]	@ 0x30
 800912a:	4b0d      	ldr	r3, [pc, #52]	@ (8009160 <std+0x68>)
 800912c:	6224      	str	r4, [r4, #32]
 800912e:	429c      	cmp	r4, r3
 8009130:	d006      	beq.n	8009140 <std+0x48>
 8009132:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009136:	4294      	cmp	r4, r2
 8009138:	d002      	beq.n	8009140 <std+0x48>
 800913a:	33d0      	adds	r3, #208	@ 0xd0
 800913c:	429c      	cmp	r4, r3
 800913e:	d105      	bne.n	800914c <std+0x54>
 8009140:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009148:	f000 b93a 	b.w	80093c0 <__retarget_lock_init_recursive>
 800914c:	bd10      	pop	{r4, pc}
 800914e:	bf00      	nop
 8009150:	0800ad15 	.word	0x0800ad15
 8009154:	0800ad37 	.word	0x0800ad37
 8009158:	0800ad6f 	.word	0x0800ad6f
 800915c:	0800ad93 	.word	0x0800ad93
 8009160:	20001494 	.word	0x20001494

08009164 <stdio_exit_handler>:
 8009164:	4a02      	ldr	r2, [pc, #8]	@ (8009170 <stdio_exit_handler+0xc>)
 8009166:	4903      	ldr	r1, [pc, #12]	@ (8009174 <stdio_exit_handler+0x10>)
 8009168:	4803      	ldr	r0, [pc, #12]	@ (8009178 <stdio_exit_handler+0x14>)
 800916a:	f000 b869 	b.w	8009240 <_fwalk_sglue>
 800916e:	bf00      	nop
 8009170:	200000d4 	.word	0x200000d4
 8009174:	0800a5b9 	.word	0x0800a5b9
 8009178:	200000e4 	.word	0x200000e4

0800917c <cleanup_stdio>:
 800917c:	6841      	ldr	r1, [r0, #4]
 800917e:	4b0c      	ldr	r3, [pc, #48]	@ (80091b0 <cleanup_stdio+0x34>)
 8009180:	4299      	cmp	r1, r3
 8009182:	b510      	push	{r4, lr}
 8009184:	4604      	mov	r4, r0
 8009186:	d001      	beq.n	800918c <cleanup_stdio+0x10>
 8009188:	f001 fa16 	bl	800a5b8 <_fflush_r>
 800918c:	68a1      	ldr	r1, [r4, #8]
 800918e:	4b09      	ldr	r3, [pc, #36]	@ (80091b4 <cleanup_stdio+0x38>)
 8009190:	4299      	cmp	r1, r3
 8009192:	d002      	beq.n	800919a <cleanup_stdio+0x1e>
 8009194:	4620      	mov	r0, r4
 8009196:	f001 fa0f 	bl	800a5b8 <_fflush_r>
 800919a:	68e1      	ldr	r1, [r4, #12]
 800919c:	4b06      	ldr	r3, [pc, #24]	@ (80091b8 <cleanup_stdio+0x3c>)
 800919e:	4299      	cmp	r1, r3
 80091a0:	d004      	beq.n	80091ac <cleanup_stdio+0x30>
 80091a2:	4620      	mov	r0, r4
 80091a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091a8:	f001 ba06 	b.w	800a5b8 <_fflush_r>
 80091ac:	bd10      	pop	{r4, pc}
 80091ae:	bf00      	nop
 80091b0:	20001494 	.word	0x20001494
 80091b4:	200014fc 	.word	0x200014fc
 80091b8:	20001564 	.word	0x20001564

080091bc <global_stdio_init.part.0>:
 80091bc:	b510      	push	{r4, lr}
 80091be:	4b0b      	ldr	r3, [pc, #44]	@ (80091ec <global_stdio_init.part.0+0x30>)
 80091c0:	4c0b      	ldr	r4, [pc, #44]	@ (80091f0 <global_stdio_init.part.0+0x34>)
 80091c2:	4a0c      	ldr	r2, [pc, #48]	@ (80091f4 <global_stdio_init.part.0+0x38>)
 80091c4:	601a      	str	r2, [r3, #0]
 80091c6:	4620      	mov	r0, r4
 80091c8:	2200      	movs	r2, #0
 80091ca:	2104      	movs	r1, #4
 80091cc:	f7ff ff94 	bl	80090f8 <std>
 80091d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80091d4:	2201      	movs	r2, #1
 80091d6:	2109      	movs	r1, #9
 80091d8:	f7ff ff8e 	bl	80090f8 <std>
 80091dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80091e0:	2202      	movs	r2, #2
 80091e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e6:	2112      	movs	r1, #18
 80091e8:	f7ff bf86 	b.w	80090f8 <std>
 80091ec:	200015cc 	.word	0x200015cc
 80091f0:	20001494 	.word	0x20001494
 80091f4:	08009165 	.word	0x08009165

080091f8 <__sfp_lock_acquire>:
 80091f8:	4801      	ldr	r0, [pc, #4]	@ (8009200 <__sfp_lock_acquire+0x8>)
 80091fa:	f000 b8e2 	b.w	80093c2 <__retarget_lock_acquire_recursive>
 80091fe:	bf00      	nop
 8009200:	200015d1 	.word	0x200015d1

08009204 <__sfp_lock_release>:
 8009204:	4801      	ldr	r0, [pc, #4]	@ (800920c <__sfp_lock_release+0x8>)
 8009206:	f000 b8dd 	b.w	80093c4 <__retarget_lock_release_recursive>
 800920a:	bf00      	nop
 800920c:	200015d1 	.word	0x200015d1

08009210 <__sinit>:
 8009210:	b510      	push	{r4, lr}
 8009212:	4604      	mov	r4, r0
 8009214:	f7ff fff0 	bl	80091f8 <__sfp_lock_acquire>
 8009218:	6a23      	ldr	r3, [r4, #32]
 800921a:	b11b      	cbz	r3, 8009224 <__sinit+0x14>
 800921c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009220:	f7ff bff0 	b.w	8009204 <__sfp_lock_release>
 8009224:	4b04      	ldr	r3, [pc, #16]	@ (8009238 <__sinit+0x28>)
 8009226:	6223      	str	r3, [r4, #32]
 8009228:	4b04      	ldr	r3, [pc, #16]	@ (800923c <__sinit+0x2c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1f5      	bne.n	800921c <__sinit+0xc>
 8009230:	f7ff ffc4 	bl	80091bc <global_stdio_init.part.0>
 8009234:	e7f2      	b.n	800921c <__sinit+0xc>
 8009236:	bf00      	nop
 8009238:	0800917d 	.word	0x0800917d
 800923c:	200015cc 	.word	0x200015cc

08009240 <_fwalk_sglue>:
 8009240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009244:	4607      	mov	r7, r0
 8009246:	4688      	mov	r8, r1
 8009248:	4614      	mov	r4, r2
 800924a:	2600      	movs	r6, #0
 800924c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009250:	f1b9 0901 	subs.w	r9, r9, #1
 8009254:	d505      	bpl.n	8009262 <_fwalk_sglue+0x22>
 8009256:	6824      	ldr	r4, [r4, #0]
 8009258:	2c00      	cmp	r4, #0
 800925a:	d1f7      	bne.n	800924c <_fwalk_sglue+0xc>
 800925c:	4630      	mov	r0, r6
 800925e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009262:	89ab      	ldrh	r3, [r5, #12]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d907      	bls.n	8009278 <_fwalk_sglue+0x38>
 8009268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800926c:	3301      	adds	r3, #1
 800926e:	d003      	beq.n	8009278 <_fwalk_sglue+0x38>
 8009270:	4629      	mov	r1, r5
 8009272:	4638      	mov	r0, r7
 8009274:	47c0      	blx	r8
 8009276:	4306      	orrs	r6, r0
 8009278:	3568      	adds	r5, #104	@ 0x68
 800927a:	e7e9      	b.n	8009250 <_fwalk_sglue+0x10>

0800927c <iprintf>:
 800927c:	b40f      	push	{r0, r1, r2, r3}
 800927e:	b507      	push	{r0, r1, r2, lr}
 8009280:	4906      	ldr	r1, [pc, #24]	@ (800929c <iprintf+0x20>)
 8009282:	ab04      	add	r3, sp, #16
 8009284:	6808      	ldr	r0, [r1, #0]
 8009286:	f853 2b04 	ldr.w	r2, [r3], #4
 800928a:	6881      	ldr	r1, [r0, #8]
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	f000 ff4d 	bl	800a12c <_vfiprintf_r>
 8009292:	b003      	add	sp, #12
 8009294:	f85d eb04 	ldr.w	lr, [sp], #4
 8009298:	b004      	add	sp, #16
 800929a:	4770      	bx	lr
 800929c:	200000e0 	.word	0x200000e0

080092a0 <_puts_r>:
 80092a0:	6a03      	ldr	r3, [r0, #32]
 80092a2:	b570      	push	{r4, r5, r6, lr}
 80092a4:	6884      	ldr	r4, [r0, #8]
 80092a6:	4605      	mov	r5, r0
 80092a8:	460e      	mov	r6, r1
 80092aa:	b90b      	cbnz	r3, 80092b0 <_puts_r+0x10>
 80092ac:	f7ff ffb0 	bl	8009210 <__sinit>
 80092b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092b2:	07db      	lsls	r3, r3, #31
 80092b4:	d405      	bmi.n	80092c2 <_puts_r+0x22>
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	0598      	lsls	r0, r3, #22
 80092ba:	d402      	bmi.n	80092c2 <_puts_r+0x22>
 80092bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092be:	f000 f880 	bl	80093c2 <__retarget_lock_acquire_recursive>
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	0719      	lsls	r1, r3, #28
 80092c6:	d502      	bpl.n	80092ce <_puts_r+0x2e>
 80092c8:	6923      	ldr	r3, [r4, #16]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d135      	bne.n	800933a <_puts_r+0x9a>
 80092ce:	4621      	mov	r1, r4
 80092d0:	4628      	mov	r0, r5
 80092d2:	f001 fdb3 	bl	800ae3c <__swsetup_r>
 80092d6:	b380      	cbz	r0, 800933a <_puts_r+0x9a>
 80092d8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80092dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092de:	07da      	lsls	r2, r3, #31
 80092e0:	d405      	bmi.n	80092ee <_puts_r+0x4e>
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	059b      	lsls	r3, r3, #22
 80092e6:	d402      	bmi.n	80092ee <_puts_r+0x4e>
 80092e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ea:	f000 f86b 	bl	80093c4 <__retarget_lock_release_recursive>
 80092ee:	4628      	mov	r0, r5
 80092f0:	bd70      	pop	{r4, r5, r6, pc}
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	da04      	bge.n	8009300 <_puts_r+0x60>
 80092f6:	69a2      	ldr	r2, [r4, #24]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	dc17      	bgt.n	800932c <_puts_r+0x8c>
 80092fc:	290a      	cmp	r1, #10
 80092fe:	d015      	beq.n	800932c <_puts_r+0x8c>
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	6022      	str	r2, [r4, #0]
 8009306:	7019      	strb	r1, [r3, #0]
 8009308:	68a3      	ldr	r3, [r4, #8]
 800930a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800930e:	3b01      	subs	r3, #1
 8009310:	60a3      	str	r3, [r4, #8]
 8009312:	2900      	cmp	r1, #0
 8009314:	d1ed      	bne.n	80092f2 <_puts_r+0x52>
 8009316:	2b00      	cmp	r3, #0
 8009318:	da11      	bge.n	800933e <_puts_r+0x9e>
 800931a:	4622      	mov	r2, r4
 800931c:	210a      	movs	r1, #10
 800931e:	4628      	mov	r0, r5
 8009320:	f001 fd4e 	bl	800adc0 <__swbuf_r>
 8009324:	3001      	adds	r0, #1
 8009326:	d0d7      	beq.n	80092d8 <_puts_r+0x38>
 8009328:	250a      	movs	r5, #10
 800932a:	e7d7      	b.n	80092dc <_puts_r+0x3c>
 800932c:	4622      	mov	r2, r4
 800932e:	4628      	mov	r0, r5
 8009330:	f001 fd46 	bl	800adc0 <__swbuf_r>
 8009334:	3001      	adds	r0, #1
 8009336:	d1e7      	bne.n	8009308 <_puts_r+0x68>
 8009338:	e7ce      	b.n	80092d8 <_puts_r+0x38>
 800933a:	3e01      	subs	r6, #1
 800933c:	e7e4      	b.n	8009308 <_puts_r+0x68>
 800933e:	6823      	ldr	r3, [r4, #0]
 8009340:	1c5a      	adds	r2, r3, #1
 8009342:	6022      	str	r2, [r4, #0]
 8009344:	220a      	movs	r2, #10
 8009346:	701a      	strb	r2, [r3, #0]
 8009348:	e7ee      	b.n	8009328 <_puts_r+0x88>
	...

0800934c <puts>:
 800934c:	4b02      	ldr	r3, [pc, #8]	@ (8009358 <puts+0xc>)
 800934e:	4601      	mov	r1, r0
 8009350:	6818      	ldr	r0, [r3, #0]
 8009352:	f7ff bfa5 	b.w	80092a0 <_puts_r>
 8009356:	bf00      	nop
 8009358:	200000e0 	.word	0x200000e0

0800935c <memset>:
 800935c:	4402      	add	r2, r0
 800935e:	4603      	mov	r3, r0
 8009360:	4293      	cmp	r3, r2
 8009362:	d100      	bne.n	8009366 <memset+0xa>
 8009364:	4770      	bx	lr
 8009366:	f803 1b01 	strb.w	r1, [r3], #1
 800936a:	e7f9      	b.n	8009360 <memset+0x4>

0800936c <__errno>:
 800936c:	4b01      	ldr	r3, [pc, #4]	@ (8009374 <__errno+0x8>)
 800936e:	6818      	ldr	r0, [r3, #0]
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	200000e0 	.word	0x200000e0

08009378 <__libc_init_array>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	4d0d      	ldr	r5, [pc, #52]	@ (80093b0 <__libc_init_array+0x38>)
 800937c:	4c0d      	ldr	r4, [pc, #52]	@ (80093b4 <__libc_init_array+0x3c>)
 800937e:	1b64      	subs	r4, r4, r5
 8009380:	10a4      	asrs	r4, r4, #2
 8009382:	2600      	movs	r6, #0
 8009384:	42a6      	cmp	r6, r4
 8009386:	d109      	bne.n	800939c <__libc_init_array+0x24>
 8009388:	4d0b      	ldr	r5, [pc, #44]	@ (80093b8 <__libc_init_array+0x40>)
 800938a:	4c0c      	ldr	r4, [pc, #48]	@ (80093bc <__libc_init_array+0x44>)
 800938c:	f001 ff50 	bl	800b230 <_init>
 8009390:	1b64      	subs	r4, r4, r5
 8009392:	10a4      	asrs	r4, r4, #2
 8009394:	2600      	movs	r6, #0
 8009396:	42a6      	cmp	r6, r4
 8009398:	d105      	bne.n	80093a6 <__libc_init_array+0x2e>
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	f855 3b04 	ldr.w	r3, [r5], #4
 80093a0:	4798      	blx	r3
 80093a2:	3601      	adds	r6, #1
 80093a4:	e7ee      	b.n	8009384 <__libc_init_array+0xc>
 80093a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80093aa:	4798      	blx	r3
 80093ac:	3601      	adds	r6, #1
 80093ae:	e7f2      	b.n	8009396 <__libc_init_array+0x1e>
 80093b0:	0800bb6c 	.word	0x0800bb6c
 80093b4:	0800bb6c 	.word	0x0800bb6c
 80093b8:	0800bb6c 	.word	0x0800bb6c
 80093bc:	0800bb70 	.word	0x0800bb70

080093c0 <__retarget_lock_init_recursive>:
 80093c0:	4770      	bx	lr

080093c2 <__retarget_lock_acquire_recursive>:
 80093c2:	4770      	bx	lr

080093c4 <__retarget_lock_release_recursive>:
 80093c4:	4770      	bx	lr
	...

080093c8 <_localeconv_r>:
 80093c8:	4800      	ldr	r0, [pc, #0]	@ (80093cc <_localeconv_r+0x4>)
 80093ca:	4770      	bx	lr
 80093cc:	20000220 	.word	0x20000220

080093d0 <memcpy>:
 80093d0:	440a      	add	r2, r1
 80093d2:	4291      	cmp	r1, r2
 80093d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80093d8:	d100      	bne.n	80093dc <memcpy+0xc>
 80093da:	4770      	bx	lr
 80093dc:	b510      	push	{r4, lr}
 80093de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093e6:	4291      	cmp	r1, r2
 80093e8:	d1f9      	bne.n	80093de <memcpy+0xe>
 80093ea:	bd10      	pop	{r4, pc}

080093ec <__assert_func>:
 80093ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093ee:	4614      	mov	r4, r2
 80093f0:	461a      	mov	r2, r3
 80093f2:	4b09      	ldr	r3, [pc, #36]	@ (8009418 <__assert_func+0x2c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4605      	mov	r5, r0
 80093f8:	68d8      	ldr	r0, [r3, #12]
 80093fa:	b14c      	cbz	r4, 8009410 <__assert_func+0x24>
 80093fc:	4b07      	ldr	r3, [pc, #28]	@ (800941c <__assert_func+0x30>)
 80093fe:	9100      	str	r1, [sp, #0]
 8009400:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009404:	4906      	ldr	r1, [pc, #24]	@ (8009420 <__assert_func+0x34>)
 8009406:	462b      	mov	r3, r5
 8009408:	f001 fcc8 	bl	800ad9c <fiprintf>
 800940c:	f001 fe46 	bl	800b09c <abort>
 8009410:	4b04      	ldr	r3, [pc, #16]	@ (8009424 <__assert_func+0x38>)
 8009412:	461c      	mov	r4, r3
 8009414:	e7f3      	b.n	80093fe <__assert_func+0x12>
 8009416:	bf00      	nop
 8009418:	200000e0 	.word	0x200000e0
 800941c:	0800b837 	.word	0x0800b837
 8009420:	0800b844 	.word	0x0800b844
 8009424:	0800b872 	.word	0x0800b872

08009428 <quorem>:
 8009428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	6903      	ldr	r3, [r0, #16]
 800942e:	690c      	ldr	r4, [r1, #16]
 8009430:	42a3      	cmp	r3, r4
 8009432:	4607      	mov	r7, r0
 8009434:	db7e      	blt.n	8009534 <quorem+0x10c>
 8009436:	3c01      	subs	r4, #1
 8009438:	f101 0814 	add.w	r8, r1, #20
 800943c:	00a3      	lsls	r3, r4, #2
 800943e:	f100 0514 	add.w	r5, r0, #20
 8009442:	9300      	str	r3, [sp, #0]
 8009444:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009448:	9301      	str	r3, [sp, #4]
 800944a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800944e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009452:	3301      	adds	r3, #1
 8009454:	429a      	cmp	r2, r3
 8009456:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800945a:	fbb2 f6f3 	udiv	r6, r2, r3
 800945e:	d32e      	bcc.n	80094be <quorem+0x96>
 8009460:	f04f 0a00 	mov.w	sl, #0
 8009464:	46c4      	mov	ip, r8
 8009466:	46ae      	mov	lr, r5
 8009468:	46d3      	mov	fp, sl
 800946a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800946e:	b298      	uxth	r0, r3
 8009470:	fb06 a000 	mla	r0, r6, r0, sl
 8009474:	0c02      	lsrs	r2, r0, #16
 8009476:	0c1b      	lsrs	r3, r3, #16
 8009478:	fb06 2303 	mla	r3, r6, r3, r2
 800947c:	f8de 2000 	ldr.w	r2, [lr]
 8009480:	b280      	uxth	r0, r0
 8009482:	b292      	uxth	r2, r2
 8009484:	1a12      	subs	r2, r2, r0
 8009486:	445a      	add	r2, fp
 8009488:	f8de 0000 	ldr.w	r0, [lr]
 800948c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009490:	b29b      	uxth	r3, r3
 8009492:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009496:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800949a:	b292      	uxth	r2, r2
 800949c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80094a0:	45e1      	cmp	r9, ip
 80094a2:	f84e 2b04 	str.w	r2, [lr], #4
 80094a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80094aa:	d2de      	bcs.n	800946a <quorem+0x42>
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	58eb      	ldr	r3, [r5, r3]
 80094b0:	b92b      	cbnz	r3, 80094be <quorem+0x96>
 80094b2:	9b01      	ldr	r3, [sp, #4]
 80094b4:	3b04      	subs	r3, #4
 80094b6:	429d      	cmp	r5, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	d32f      	bcc.n	800951c <quorem+0xf4>
 80094bc:	613c      	str	r4, [r7, #16]
 80094be:	4638      	mov	r0, r7
 80094c0:	f001 fb20 	bl	800ab04 <__mcmp>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	db25      	blt.n	8009514 <quorem+0xec>
 80094c8:	4629      	mov	r1, r5
 80094ca:	2000      	movs	r0, #0
 80094cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80094d0:	f8d1 c000 	ldr.w	ip, [r1]
 80094d4:	fa1f fe82 	uxth.w	lr, r2
 80094d8:	fa1f f38c 	uxth.w	r3, ip
 80094dc:	eba3 030e 	sub.w	r3, r3, lr
 80094e0:	4403      	add	r3, r0
 80094e2:	0c12      	lsrs	r2, r2, #16
 80094e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80094e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094f2:	45c1      	cmp	r9, r8
 80094f4:	f841 3b04 	str.w	r3, [r1], #4
 80094f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094fc:	d2e6      	bcs.n	80094cc <quorem+0xa4>
 80094fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009502:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009506:	b922      	cbnz	r2, 8009512 <quorem+0xea>
 8009508:	3b04      	subs	r3, #4
 800950a:	429d      	cmp	r5, r3
 800950c:	461a      	mov	r2, r3
 800950e:	d30b      	bcc.n	8009528 <quorem+0x100>
 8009510:	613c      	str	r4, [r7, #16]
 8009512:	3601      	adds	r6, #1
 8009514:	4630      	mov	r0, r6
 8009516:	b003      	add	sp, #12
 8009518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800951c:	6812      	ldr	r2, [r2, #0]
 800951e:	3b04      	subs	r3, #4
 8009520:	2a00      	cmp	r2, #0
 8009522:	d1cb      	bne.n	80094bc <quorem+0x94>
 8009524:	3c01      	subs	r4, #1
 8009526:	e7c6      	b.n	80094b6 <quorem+0x8e>
 8009528:	6812      	ldr	r2, [r2, #0]
 800952a:	3b04      	subs	r3, #4
 800952c:	2a00      	cmp	r2, #0
 800952e:	d1ef      	bne.n	8009510 <quorem+0xe8>
 8009530:	3c01      	subs	r4, #1
 8009532:	e7ea      	b.n	800950a <quorem+0xe2>
 8009534:	2000      	movs	r0, #0
 8009536:	e7ee      	b.n	8009516 <quorem+0xee>

08009538 <_dtoa_r>:
 8009538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800953c:	69c7      	ldr	r7, [r0, #28]
 800953e:	b097      	sub	sp, #92	@ 0x5c
 8009540:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009544:	ec55 4b10 	vmov	r4, r5, d0
 8009548:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800954a:	9107      	str	r1, [sp, #28]
 800954c:	4681      	mov	r9, r0
 800954e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009550:	9311      	str	r3, [sp, #68]	@ 0x44
 8009552:	b97f      	cbnz	r7, 8009574 <_dtoa_r+0x3c>
 8009554:	2010      	movs	r0, #16
 8009556:	f000 ff01 	bl	800a35c <malloc>
 800955a:	4602      	mov	r2, r0
 800955c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009560:	b920      	cbnz	r0, 800956c <_dtoa_r+0x34>
 8009562:	4ba9      	ldr	r3, [pc, #676]	@ (8009808 <_dtoa_r+0x2d0>)
 8009564:	21ef      	movs	r1, #239	@ 0xef
 8009566:	48a9      	ldr	r0, [pc, #676]	@ (800980c <_dtoa_r+0x2d4>)
 8009568:	f7ff ff40 	bl	80093ec <__assert_func>
 800956c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009570:	6007      	str	r7, [r0, #0]
 8009572:	60c7      	str	r7, [r0, #12]
 8009574:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009578:	6819      	ldr	r1, [r3, #0]
 800957a:	b159      	cbz	r1, 8009594 <_dtoa_r+0x5c>
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	604a      	str	r2, [r1, #4]
 8009580:	2301      	movs	r3, #1
 8009582:	4093      	lsls	r3, r2
 8009584:	608b      	str	r3, [r1, #8]
 8009586:	4648      	mov	r0, r9
 8009588:	f001 f88a 	bl	800a6a0 <_Bfree>
 800958c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009590:	2200      	movs	r2, #0
 8009592:	601a      	str	r2, [r3, #0]
 8009594:	1e2b      	subs	r3, r5, #0
 8009596:	bfb9      	ittee	lt
 8009598:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800959c:	9305      	strlt	r3, [sp, #20]
 800959e:	2300      	movge	r3, #0
 80095a0:	6033      	strge	r3, [r6, #0]
 80095a2:	9f05      	ldr	r7, [sp, #20]
 80095a4:	4b9a      	ldr	r3, [pc, #616]	@ (8009810 <_dtoa_r+0x2d8>)
 80095a6:	bfbc      	itt	lt
 80095a8:	2201      	movlt	r2, #1
 80095aa:	6032      	strlt	r2, [r6, #0]
 80095ac:	43bb      	bics	r3, r7
 80095ae:	d112      	bne.n	80095d6 <_dtoa_r+0x9e>
 80095b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80095b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095bc:	4323      	orrs	r3, r4
 80095be:	f000 855a 	beq.w	800a076 <_dtoa_r+0xb3e>
 80095c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009824 <_dtoa_r+0x2ec>
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 855c 	beq.w	800a086 <_dtoa_r+0xb4e>
 80095ce:	f10a 0303 	add.w	r3, sl, #3
 80095d2:	f000 bd56 	b.w	800a082 <_dtoa_r+0xb4a>
 80095d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80095da:	2200      	movs	r2, #0
 80095dc:	ec51 0b17 	vmov	r0, r1, d7
 80095e0:	2300      	movs	r3, #0
 80095e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80095e6:	f7f7 fa7f 	bl	8000ae8 <__aeabi_dcmpeq>
 80095ea:	4680      	mov	r8, r0
 80095ec:	b158      	cbz	r0, 8009606 <_dtoa_r+0xce>
 80095ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80095f0:	2301      	movs	r3, #1
 80095f2:	6013      	str	r3, [r2, #0]
 80095f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095f6:	b113      	cbz	r3, 80095fe <_dtoa_r+0xc6>
 80095f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80095fa:	4b86      	ldr	r3, [pc, #536]	@ (8009814 <_dtoa_r+0x2dc>)
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009828 <_dtoa_r+0x2f0>
 8009602:	f000 bd40 	b.w	800a086 <_dtoa_r+0xb4e>
 8009606:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800960a:	aa14      	add	r2, sp, #80	@ 0x50
 800960c:	a915      	add	r1, sp, #84	@ 0x54
 800960e:	4648      	mov	r0, r9
 8009610:	f001 fb28 	bl	800ac64 <__d2b>
 8009614:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009618:	9002      	str	r0, [sp, #8]
 800961a:	2e00      	cmp	r6, #0
 800961c:	d078      	beq.n	8009710 <_dtoa_r+0x1d8>
 800961e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009620:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009628:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800962c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009630:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009634:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009638:	4619      	mov	r1, r3
 800963a:	2200      	movs	r2, #0
 800963c:	4b76      	ldr	r3, [pc, #472]	@ (8009818 <_dtoa_r+0x2e0>)
 800963e:	f7f6 fe33 	bl	80002a8 <__aeabi_dsub>
 8009642:	a36b      	add	r3, pc, #428	@ (adr r3, 80097f0 <_dtoa_r+0x2b8>)
 8009644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009648:	f7f6 ffe6 	bl	8000618 <__aeabi_dmul>
 800964c:	a36a      	add	r3, pc, #424	@ (adr r3, 80097f8 <_dtoa_r+0x2c0>)
 800964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009652:	f7f6 fe2b 	bl	80002ac <__adddf3>
 8009656:	4604      	mov	r4, r0
 8009658:	4630      	mov	r0, r6
 800965a:	460d      	mov	r5, r1
 800965c:	f7f6 ff72 	bl	8000544 <__aeabi_i2d>
 8009660:	a367      	add	r3, pc, #412	@ (adr r3, 8009800 <_dtoa_r+0x2c8>)
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009666:	f7f6 ffd7 	bl	8000618 <__aeabi_dmul>
 800966a:	4602      	mov	r2, r0
 800966c:	460b      	mov	r3, r1
 800966e:	4620      	mov	r0, r4
 8009670:	4629      	mov	r1, r5
 8009672:	f7f6 fe1b 	bl	80002ac <__adddf3>
 8009676:	4604      	mov	r4, r0
 8009678:	460d      	mov	r5, r1
 800967a:	f7f7 fa7d 	bl	8000b78 <__aeabi_d2iz>
 800967e:	2200      	movs	r2, #0
 8009680:	4607      	mov	r7, r0
 8009682:	2300      	movs	r3, #0
 8009684:	4620      	mov	r0, r4
 8009686:	4629      	mov	r1, r5
 8009688:	f7f7 fa38 	bl	8000afc <__aeabi_dcmplt>
 800968c:	b140      	cbz	r0, 80096a0 <_dtoa_r+0x168>
 800968e:	4638      	mov	r0, r7
 8009690:	f7f6 ff58 	bl	8000544 <__aeabi_i2d>
 8009694:	4622      	mov	r2, r4
 8009696:	462b      	mov	r3, r5
 8009698:	f7f7 fa26 	bl	8000ae8 <__aeabi_dcmpeq>
 800969c:	b900      	cbnz	r0, 80096a0 <_dtoa_r+0x168>
 800969e:	3f01      	subs	r7, #1
 80096a0:	2f16      	cmp	r7, #22
 80096a2:	d852      	bhi.n	800974a <_dtoa_r+0x212>
 80096a4:	4b5d      	ldr	r3, [pc, #372]	@ (800981c <_dtoa_r+0x2e4>)
 80096a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096b2:	f7f7 fa23 	bl	8000afc <__aeabi_dcmplt>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d049      	beq.n	800974e <_dtoa_r+0x216>
 80096ba:	3f01      	subs	r7, #1
 80096bc:	2300      	movs	r3, #0
 80096be:	9310      	str	r3, [sp, #64]	@ 0x40
 80096c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80096c2:	1b9b      	subs	r3, r3, r6
 80096c4:	1e5a      	subs	r2, r3, #1
 80096c6:	bf45      	ittet	mi
 80096c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80096cc:	9300      	strmi	r3, [sp, #0]
 80096ce:	2300      	movpl	r3, #0
 80096d0:	2300      	movmi	r3, #0
 80096d2:	9206      	str	r2, [sp, #24]
 80096d4:	bf54      	ite	pl
 80096d6:	9300      	strpl	r3, [sp, #0]
 80096d8:	9306      	strmi	r3, [sp, #24]
 80096da:	2f00      	cmp	r7, #0
 80096dc:	db39      	blt.n	8009752 <_dtoa_r+0x21a>
 80096de:	9b06      	ldr	r3, [sp, #24]
 80096e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80096e2:	443b      	add	r3, r7
 80096e4:	9306      	str	r3, [sp, #24]
 80096e6:	2300      	movs	r3, #0
 80096e8:	9308      	str	r3, [sp, #32]
 80096ea:	9b07      	ldr	r3, [sp, #28]
 80096ec:	2b09      	cmp	r3, #9
 80096ee:	d863      	bhi.n	80097b8 <_dtoa_r+0x280>
 80096f0:	2b05      	cmp	r3, #5
 80096f2:	bfc4      	itt	gt
 80096f4:	3b04      	subgt	r3, #4
 80096f6:	9307      	strgt	r3, [sp, #28]
 80096f8:	9b07      	ldr	r3, [sp, #28]
 80096fa:	f1a3 0302 	sub.w	r3, r3, #2
 80096fe:	bfcc      	ite	gt
 8009700:	2400      	movgt	r4, #0
 8009702:	2401      	movle	r4, #1
 8009704:	2b03      	cmp	r3, #3
 8009706:	d863      	bhi.n	80097d0 <_dtoa_r+0x298>
 8009708:	e8df f003 	tbb	[pc, r3]
 800970c:	2b375452 	.word	0x2b375452
 8009710:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009714:	441e      	add	r6, r3
 8009716:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800971a:	2b20      	cmp	r3, #32
 800971c:	bfc1      	itttt	gt
 800971e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009722:	409f      	lslgt	r7, r3
 8009724:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009728:	fa24 f303 	lsrgt.w	r3, r4, r3
 800972c:	bfd6      	itet	le
 800972e:	f1c3 0320 	rsble	r3, r3, #32
 8009732:	ea47 0003 	orrgt.w	r0, r7, r3
 8009736:	fa04 f003 	lslle.w	r0, r4, r3
 800973a:	f7f6 fef3 	bl	8000524 <__aeabi_ui2d>
 800973e:	2201      	movs	r2, #1
 8009740:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009744:	3e01      	subs	r6, #1
 8009746:	9212      	str	r2, [sp, #72]	@ 0x48
 8009748:	e776      	b.n	8009638 <_dtoa_r+0x100>
 800974a:	2301      	movs	r3, #1
 800974c:	e7b7      	b.n	80096be <_dtoa_r+0x186>
 800974e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009750:	e7b6      	b.n	80096c0 <_dtoa_r+0x188>
 8009752:	9b00      	ldr	r3, [sp, #0]
 8009754:	1bdb      	subs	r3, r3, r7
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	427b      	negs	r3, r7
 800975a:	9308      	str	r3, [sp, #32]
 800975c:	2300      	movs	r3, #0
 800975e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009760:	e7c3      	b.n	80096ea <_dtoa_r+0x1b2>
 8009762:	2301      	movs	r3, #1
 8009764:	9309      	str	r3, [sp, #36]	@ 0x24
 8009766:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009768:	eb07 0b03 	add.w	fp, r7, r3
 800976c:	f10b 0301 	add.w	r3, fp, #1
 8009770:	2b01      	cmp	r3, #1
 8009772:	9303      	str	r3, [sp, #12]
 8009774:	bfb8      	it	lt
 8009776:	2301      	movlt	r3, #1
 8009778:	e006      	b.n	8009788 <_dtoa_r+0x250>
 800977a:	2301      	movs	r3, #1
 800977c:	9309      	str	r3, [sp, #36]	@ 0x24
 800977e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009780:	2b00      	cmp	r3, #0
 8009782:	dd28      	ble.n	80097d6 <_dtoa_r+0x29e>
 8009784:	469b      	mov	fp, r3
 8009786:	9303      	str	r3, [sp, #12]
 8009788:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800978c:	2100      	movs	r1, #0
 800978e:	2204      	movs	r2, #4
 8009790:	f102 0514 	add.w	r5, r2, #20
 8009794:	429d      	cmp	r5, r3
 8009796:	d926      	bls.n	80097e6 <_dtoa_r+0x2ae>
 8009798:	6041      	str	r1, [r0, #4]
 800979a:	4648      	mov	r0, r9
 800979c:	f000 ff40 	bl	800a620 <_Balloc>
 80097a0:	4682      	mov	sl, r0
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d142      	bne.n	800982c <_dtoa_r+0x2f4>
 80097a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009820 <_dtoa_r+0x2e8>)
 80097a8:	4602      	mov	r2, r0
 80097aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80097ae:	e6da      	b.n	8009566 <_dtoa_r+0x2e>
 80097b0:	2300      	movs	r3, #0
 80097b2:	e7e3      	b.n	800977c <_dtoa_r+0x244>
 80097b4:	2300      	movs	r3, #0
 80097b6:	e7d5      	b.n	8009764 <_dtoa_r+0x22c>
 80097b8:	2401      	movs	r4, #1
 80097ba:	2300      	movs	r3, #0
 80097bc:	9307      	str	r3, [sp, #28]
 80097be:	9409      	str	r4, [sp, #36]	@ 0x24
 80097c0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80097c4:	2200      	movs	r2, #0
 80097c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80097ca:	2312      	movs	r3, #18
 80097cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80097ce:	e7db      	b.n	8009788 <_dtoa_r+0x250>
 80097d0:	2301      	movs	r3, #1
 80097d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80097d4:	e7f4      	b.n	80097c0 <_dtoa_r+0x288>
 80097d6:	f04f 0b01 	mov.w	fp, #1
 80097da:	f8cd b00c 	str.w	fp, [sp, #12]
 80097de:	465b      	mov	r3, fp
 80097e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80097e4:	e7d0      	b.n	8009788 <_dtoa_r+0x250>
 80097e6:	3101      	adds	r1, #1
 80097e8:	0052      	lsls	r2, r2, #1
 80097ea:	e7d1      	b.n	8009790 <_dtoa_r+0x258>
 80097ec:	f3af 8000 	nop.w
 80097f0:	636f4361 	.word	0x636f4361
 80097f4:	3fd287a7 	.word	0x3fd287a7
 80097f8:	8b60c8b3 	.word	0x8b60c8b3
 80097fc:	3fc68a28 	.word	0x3fc68a28
 8009800:	509f79fb 	.word	0x509f79fb
 8009804:	3fd34413 	.word	0x3fd34413
 8009808:	0800b7c8 	.word	0x0800b7c8
 800980c:	0800b880 	.word	0x0800b880
 8009810:	7ff00000 	.word	0x7ff00000
 8009814:	0800b7a5 	.word	0x0800b7a5
 8009818:	3ff80000 	.word	0x3ff80000
 800981c:	0800b998 	.word	0x0800b998
 8009820:	0800b8d8 	.word	0x0800b8d8
 8009824:	0800b87c 	.word	0x0800b87c
 8009828:	0800b7a4 	.word	0x0800b7a4
 800982c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009830:	6018      	str	r0, [r3, #0]
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	2b0e      	cmp	r3, #14
 8009836:	f200 80a1 	bhi.w	800997c <_dtoa_r+0x444>
 800983a:	2c00      	cmp	r4, #0
 800983c:	f000 809e 	beq.w	800997c <_dtoa_r+0x444>
 8009840:	2f00      	cmp	r7, #0
 8009842:	dd33      	ble.n	80098ac <_dtoa_r+0x374>
 8009844:	4b9c      	ldr	r3, [pc, #624]	@ (8009ab8 <_dtoa_r+0x580>)
 8009846:	f007 020f 	and.w	r2, r7, #15
 800984a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800984e:	ed93 7b00 	vldr	d7, [r3]
 8009852:	05f8      	lsls	r0, r7, #23
 8009854:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009858:	ea4f 1427 	mov.w	r4, r7, asr #4
 800985c:	d516      	bpl.n	800988c <_dtoa_r+0x354>
 800985e:	4b97      	ldr	r3, [pc, #604]	@ (8009abc <_dtoa_r+0x584>)
 8009860:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009864:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009868:	f7f7 f800 	bl	800086c <__aeabi_ddiv>
 800986c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009870:	f004 040f 	and.w	r4, r4, #15
 8009874:	2603      	movs	r6, #3
 8009876:	4d91      	ldr	r5, [pc, #580]	@ (8009abc <_dtoa_r+0x584>)
 8009878:	b954      	cbnz	r4, 8009890 <_dtoa_r+0x358>
 800987a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800987e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009882:	f7f6 fff3 	bl	800086c <__aeabi_ddiv>
 8009886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800988a:	e028      	b.n	80098de <_dtoa_r+0x3a6>
 800988c:	2602      	movs	r6, #2
 800988e:	e7f2      	b.n	8009876 <_dtoa_r+0x33e>
 8009890:	07e1      	lsls	r1, r4, #31
 8009892:	d508      	bpl.n	80098a6 <_dtoa_r+0x36e>
 8009894:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009898:	e9d5 2300 	ldrd	r2, r3, [r5]
 800989c:	f7f6 febc 	bl	8000618 <__aeabi_dmul>
 80098a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80098a4:	3601      	adds	r6, #1
 80098a6:	1064      	asrs	r4, r4, #1
 80098a8:	3508      	adds	r5, #8
 80098aa:	e7e5      	b.n	8009878 <_dtoa_r+0x340>
 80098ac:	f000 80af 	beq.w	8009a0e <_dtoa_r+0x4d6>
 80098b0:	427c      	negs	r4, r7
 80098b2:	4b81      	ldr	r3, [pc, #516]	@ (8009ab8 <_dtoa_r+0x580>)
 80098b4:	4d81      	ldr	r5, [pc, #516]	@ (8009abc <_dtoa_r+0x584>)
 80098b6:	f004 020f 	and.w	r2, r4, #15
 80098ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80098c6:	f7f6 fea7 	bl	8000618 <__aeabi_dmul>
 80098ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098ce:	1124      	asrs	r4, r4, #4
 80098d0:	2300      	movs	r3, #0
 80098d2:	2602      	movs	r6, #2
 80098d4:	2c00      	cmp	r4, #0
 80098d6:	f040 808f 	bne.w	80099f8 <_dtoa_r+0x4c0>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1d3      	bne.n	8009886 <_dtoa_r+0x34e>
 80098de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80098e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 8094 	beq.w	8009a12 <_dtoa_r+0x4da>
 80098ea:	4b75      	ldr	r3, [pc, #468]	@ (8009ac0 <_dtoa_r+0x588>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	4620      	mov	r0, r4
 80098f0:	4629      	mov	r1, r5
 80098f2:	f7f7 f903 	bl	8000afc <__aeabi_dcmplt>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f000 808b 	beq.w	8009a12 <_dtoa_r+0x4da>
 80098fc:	9b03      	ldr	r3, [sp, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 8087 	beq.w	8009a12 <_dtoa_r+0x4da>
 8009904:	f1bb 0f00 	cmp.w	fp, #0
 8009908:	dd34      	ble.n	8009974 <_dtoa_r+0x43c>
 800990a:	4620      	mov	r0, r4
 800990c:	4b6d      	ldr	r3, [pc, #436]	@ (8009ac4 <_dtoa_r+0x58c>)
 800990e:	2200      	movs	r2, #0
 8009910:	4629      	mov	r1, r5
 8009912:	f7f6 fe81 	bl	8000618 <__aeabi_dmul>
 8009916:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800991a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800991e:	3601      	adds	r6, #1
 8009920:	465c      	mov	r4, fp
 8009922:	4630      	mov	r0, r6
 8009924:	f7f6 fe0e 	bl	8000544 <__aeabi_i2d>
 8009928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800992c:	f7f6 fe74 	bl	8000618 <__aeabi_dmul>
 8009930:	4b65      	ldr	r3, [pc, #404]	@ (8009ac8 <_dtoa_r+0x590>)
 8009932:	2200      	movs	r2, #0
 8009934:	f7f6 fcba 	bl	80002ac <__adddf3>
 8009938:	4605      	mov	r5, r0
 800993a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800993e:	2c00      	cmp	r4, #0
 8009940:	d16a      	bne.n	8009a18 <_dtoa_r+0x4e0>
 8009942:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009946:	4b61      	ldr	r3, [pc, #388]	@ (8009acc <_dtoa_r+0x594>)
 8009948:	2200      	movs	r2, #0
 800994a:	f7f6 fcad 	bl	80002a8 <__aeabi_dsub>
 800994e:	4602      	mov	r2, r0
 8009950:	460b      	mov	r3, r1
 8009952:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009956:	462a      	mov	r2, r5
 8009958:	4633      	mov	r3, r6
 800995a:	f7f7 f8ed 	bl	8000b38 <__aeabi_dcmpgt>
 800995e:	2800      	cmp	r0, #0
 8009960:	f040 8298 	bne.w	8009e94 <_dtoa_r+0x95c>
 8009964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009968:	462a      	mov	r2, r5
 800996a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800996e:	f7f7 f8c5 	bl	8000afc <__aeabi_dcmplt>
 8009972:	bb38      	cbnz	r0, 80099c4 <_dtoa_r+0x48c>
 8009974:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009978:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800997c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800997e:	2b00      	cmp	r3, #0
 8009980:	f2c0 8157 	blt.w	8009c32 <_dtoa_r+0x6fa>
 8009984:	2f0e      	cmp	r7, #14
 8009986:	f300 8154 	bgt.w	8009c32 <_dtoa_r+0x6fa>
 800998a:	4b4b      	ldr	r3, [pc, #300]	@ (8009ab8 <_dtoa_r+0x580>)
 800998c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009990:	ed93 7b00 	vldr	d7, [r3]
 8009994:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009996:	2b00      	cmp	r3, #0
 8009998:	ed8d 7b00 	vstr	d7, [sp]
 800999c:	f280 80e5 	bge.w	8009b6a <_dtoa_r+0x632>
 80099a0:	9b03      	ldr	r3, [sp, #12]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f300 80e1 	bgt.w	8009b6a <_dtoa_r+0x632>
 80099a8:	d10c      	bne.n	80099c4 <_dtoa_r+0x48c>
 80099aa:	4b48      	ldr	r3, [pc, #288]	@ (8009acc <_dtoa_r+0x594>)
 80099ac:	2200      	movs	r2, #0
 80099ae:	ec51 0b17 	vmov	r0, r1, d7
 80099b2:	f7f6 fe31 	bl	8000618 <__aeabi_dmul>
 80099b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099ba:	f7f7 f8b3 	bl	8000b24 <__aeabi_dcmpge>
 80099be:	2800      	cmp	r0, #0
 80099c0:	f000 8266 	beq.w	8009e90 <_dtoa_r+0x958>
 80099c4:	2400      	movs	r4, #0
 80099c6:	4625      	mov	r5, r4
 80099c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099ca:	4656      	mov	r6, sl
 80099cc:	ea6f 0803 	mvn.w	r8, r3
 80099d0:	2700      	movs	r7, #0
 80099d2:	4621      	mov	r1, r4
 80099d4:	4648      	mov	r0, r9
 80099d6:	f000 fe63 	bl	800a6a0 <_Bfree>
 80099da:	2d00      	cmp	r5, #0
 80099dc:	f000 80bd 	beq.w	8009b5a <_dtoa_r+0x622>
 80099e0:	b12f      	cbz	r7, 80099ee <_dtoa_r+0x4b6>
 80099e2:	42af      	cmp	r7, r5
 80099e4:	d003      	beq.n	80099ee <_dtoa_r+0x4b6>
 80099e6:	4639      	mov	r1, r7
 80099e8:	4648      	mov	r0, r9
 80099ea:	f000 fe59 	bl	800a6a0 <_Bfree>
 80099ee:	4629      	mov	r1, r5
 80099f0:	4648      	mov	r0, r9
 80099f2:	f000 fe55 	bl	800a6a0 <_Bfree>
 80099f6:	e0b0      	b.n	8009b5a <_dtoa_r+0x622>
 80099f8:	07e2      	lsls	r2, r4, #31
 80099fa:	d505      	bpl.n	8009a08 <_dtoa_r+0x4d0>
 80099fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a00:	f7f6 fe0a 	bl	8000618 <__aeabi_dmul>
 8009a04:	3601      	adds	r6, #1
 8009a06:	2301      	movs	r3, #1
 8009a08:	1064      	asrs	r4, r4, #1
 8009a0a:	3508      	adds	r5, #8
 8009a0c:	e762      	b.n	80098d4 <_dtoa_r+0x39c>
 8009a0e:	2602      	movs	r6, #2
 8009a10:	e765      	b.n	80098de <_dtoa_r+0x3a6>
 8009a12:	9c03      	ldr	r4, [sp, #12]
 8009a14:	46b8      	mov	r8, r7
 8009a16:	e784      	b.n	8009922 <_dtoa_r+0x3ea>
 8009a18:	4b27      	ldr	r3, [pc, #156]	@ (8009ab8 <_dtoa_r+0x580>)
 8009a1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a24:	4454      	add	r4, sl
 8009a26:	2900      	cmp	r1, #0
 8009a28:	d054      	beq.n	8009ad4 <_dtoa_r+0x59c>
 8009a2a:	4929      	ldr	r1, [pc, #164]	@ (8009ad0 <_dtoa_r+0x598>)
 8009a2c:	2000      	movs	r0, #0
 8009a2e:	f7f6 ff1d 	bl	800086c <__aeabi_ddiv>
 8009a32:	4633      	mov	r3, r6
 8009a34:	462a      	mov	r2, r5
 8009a36:	f7f6 fc37 	bl	80002a8 <__aeabi_dsub>
 8009a3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009a3e:	4656      	mov	r6, sl
 8009a40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a44:	f7f7 f898 	bl	8000b78 <__aeabi_d2iz>
 8009a48:	4605      	mov	r5, r0
 8009a4a:	f7f6 fd7b 	bl	8000544 <__aeabi_i2d>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a56:	f7f6 fc27 	bl	80002a8 <__aeabi_dsub>
 8009a5a:	3530      	adds	r5, #48	@ 0x30
 8009a5c:	4602      	mov	r2, r0
 8009a5e:	460b      	mov	r3, r1
 8009a60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a64:	f806 5b01 	strb.w	r5, [r6], #1
 8009a68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a6c:	f7f7 f846 	bl	8000afc <__aeabi_dcmplt>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d172      	bne.n	8009b5a <_dtoa_r+0x622>
 8009a74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a78:	4911      	ldr	r1, [pc, #68]	@ (8009ac0 <_dtoa_r+0x588>)
 8009a7a:	2000      	movs	r0, #0
 8009a7c:	f7f6 fc14 	bl	80002a8 <__aeabi_dsub>
 8009a80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a84:	f7f7 f83a 	bl	8000afc <__aeabi_dcmplt>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	f040 80b4 	bne.w	8009bf6 <_dtoa_r+0x6be>
 8009a8e:	42a6      	cmp	r6, r4
 8009a90:	f43f af70 	beq.w	8009974 <_dtoa_r+0x43c>
 8009a94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a98:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac4 <_dtoa_r+0x58c>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f7f6 fdbc 	bl	8000618 <__aeabi_dmul>
 8009aa0:	4b08      	ldr	r3, [pc, #32]	@ (8009ac4 <_dtoa_r+0x58c>)
 8009aa2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aac:	f7f6 fdb4 	bl	8000618 <__aeabi_dmul>
 8009ab0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ab4:	e7c4      	b.n	8009a40 <_dtoa_r+0x508>
 8009ab6:	bf00      	nop
 8009ab8:	0800b998 	.word	0x0800b998
 8009abc:	0800b970 	.word	0x0800b970
 8009ac0:	3ff00000 	.word	0x3ff00000
 8009ac4:	40240000 	.word	0x40240000
 8009ac8:	401c0000 	.word	0x401c0000
 8009acc:	40140000 	.word	0x40140000
 8009ad0:	3fe00000 	.word	0x3fe00000
 8009ad4:	4631      	mov	r1, r6
 8009ad6:	4628      	mov	r0, r5
 8009ad8:	f7f6 fd9e 	bl	8000618 <__aeabi_dmul>
 8009adc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ae0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009ae2:	4656      	mov	r6, sl
 8009ae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ae8:	f7f7 f846 	bl	8000b78 <__aeabi_d2iz>
 8009aec:	4605      	mov	r5, r0
 8009aee:	f7f6 fd29 	bl	8000544 <__aeabi_i2d>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009afa:	f7f6 fbd5 	bl	80002a8 <__aeabi_dsub>
 8009afe:	3530      	adds	r5, #48	@ 0x30
 8009b00:	f806 5b01 	strb.w	r5, [r6], #1
 8009b04:	4602      	mov	r2, r0
 8009b06:	460b      	mov	r3, r1
 8009b08:	42a6      	cmp	r6, r4
 8009b0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b0e:	f04f 0200 	mov.w	r2, #0
 8009b12:	d124      	bne.n	8009b5e <_dtoa_r+0x626>
 8009b14:	4baf      	ldr	r3, [pc, #700]	@ (8009dd4 <_dtoa_r+0x89c>)
 8009b16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b1a:	f7f6 fbc7 	bl	80002ac <__adddf3>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b26:	f7f7 f807 	bl	8000b38 <__aeabi_dcmpgt>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d163      	bne.n	8009bf6 <_dtoa_r+0x6be>
 8009b2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b32:	49a8      	ldr	r1, [pc, #672]	@ (8009dd4 <_dtoa_r+0x89c>)
 8009b34:	2000      	movs	r0, #0
 8009b36:	f7f6 fbb7 	bl	80002a8 <__aeabi_dsub>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b42:	f7f6 ffdb 	bl	8000afc <__aeabi_dcmplt>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	f43f af14 	beq.w	8009974 <_dtoa_r+0x43c>
 8009b4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009b4e:	1e73      	subs	r3, r6, #1
 8009b50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b56:	2b30      	cmp	r3, #48	@ 0x30
 8009b58:	d0f8      	beq.n	8009b4c <_dtoa_r+0x614>
 8009b5a:	4647      	mov	r7, r8
 8009b5c:	e03b      	b.n	8009bd6 <_dtoa_r+0x69e>
 8009b5e:	4b9e      	ldr	r3, [pc, #632]	@ (8009dd8 <_dtoa_r+0x8a0>)
 8009b60:	f7f6 fd5a 	bl	8000618 <__aeabi_dmul>
 8009b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b68:	e7bc      	b.n	8009ae4 <_dtoa_r+0x5ac>
 8009b6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009b6e:	4656      	mov	r6, sl
 8009b70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b74:	4620      	mov	r0, r4
 8009b76:	4629      	mov	r1, r5
 8009b78:	f7f6 fe78 	bl	800086c <__aeabi_ddiv>
 8009b7c:	f7f6 fffc 	bl	8000b78 <__aeabi_d2iz>
 8009b80:	4680      	mov	r8, r0
 8009b82:	f7f6 fcdf 	bl	8000544 <__aeabi_i2d>
 8009b86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b8a:	f7f6 fd45 	bl	8000618 <__aeabi_dmul>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4620      	mov	r0, r4
 8009b94:	4629      	mov	r1, r5
 8009b96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009b9a:	f7f6 fb85 	bl	80002a8 <__aeabi_dsub>
 8009b9e:	f806 4b01 	strb.w	r4, [r6], #1
 8009ba2:	9d03      	ldr	r5, [sp, #12]
 8009ba4:	eba6 040a 	sub.w	r4, r6, sl
 8009ba8:	42a5      	cmp	r5, r4
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	d133      	bne.n	8009c18 <_dtoa_r+0x6e0>
 8009bb0:	f7f6 fb7c 	bl	80002ac <__adddf3>
 8009bb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bb8:	4604      	mov	r4, r0
 8009bba:	460d      	mov	r5, r1
 8009bbc:	f7f6 ffbc 	bl	8000b38 <__aeabi_dcmpgt>
 8009bc0:	b9c0      	cbnz	r0, 8009bf4 <_dtoa_r+0x6bc>
 8009bc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	4629      	mov	r1, r5
 8009bca:	f7f6 ff8d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009bce:	b110      	cbz	r0, 8009bd6 <_dtoa_r+0x69e>
 8009bd0:	f018 0f01 	tst.w	r8, #1
 8009bd4:	d10e      	bne.n	8009bf4 <_dtoa_r+0x6bc>
 8009bd6:	9902      	ldr	r1, [sp, #8]
 8009bd8:	4648      	mov	r0, r9
 8009bda:	f000 fd61 	bl	800a6a0 <_Bfree>
 8009bde:	2300      	movs	r3, #0
 8009be0:	7033      	strb	r3, [r6, #0]
 8009be2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009be4:	3701      	adds	r7, #1
 8009be6:	601f      	str	r7, [r3, #0]
 8009be8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 824b 	beq.w	800a086 <_dtoa_r+0xb4e>
 8009bf0:	601e      	str	r6, [r3, #0]
 8009bf2:	e248      	b.n	800a086 <_dtoa_r+0xb4e>
 8009bf4:	46b8      	mov	r8, r7
 8009bf6:	4633      	mov	r3, r6
 8009bf8:	461e      	mov	r6, r3
 8009bfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bfe:	2a39      	cmp	r2, #57	@ 0x39
 8009c00:	d106      	bne.n	8009c10 <_dtoa_r+0x6d8>
 8009c02:	459a      	cmp	sl, r3
 8009c04:	d1f8      	bne.n	8009bf8 <_dtoa_r+0x6c0>
 8009c06:	2230      	movs	r2, #48	@ 0x30
 8009c08:	f108 0801 	add.w	r8, r8, #1
 8009c0c:	f88a 2000 	strb.w	r2, [sl]
 8009c10:	781a      	ldrb	r2, [r3, #0]
 8009c12:	3201      	adds	r2, #1
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	e7a0      	b.n	8009b5a <_dtoa_r+0x622>
 8009c18:	4b6f      	ldr	r3, [pc, #444]	@ (8009dd8 <_dtoa_r+0x8a0>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f7f6 fcfc 	bl	8000618 <__aeabi_dmul>
 8009c20:	2200      	movs	r2, #0
 8009c22:	2300      	movs	r3, #0
 8009c24:	4604      	mov	r4, r0
 8009c26:	460d      	mov	r5, r1
 8009c28:	f7f6 ff5e 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d09f      	beq.n	8009b70 <_dtoa_r+0x638>
 8009c30:	e7d1      	b.n	8009bd6 <_dtoa_r+0x69e>
 8009c32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	f000 80ea 	beq.w	8009e0e <_dtoa_r+0x8d6>
 8009c3a:	9a07      	ldr	r2, [sp, #28]
 8009c3c:	2a01      	cmp	r2, #1
 8009c3e:	f300 80cd 	bgt.w	8009ddc <_dtoa_r+0x8a4>
 8009c42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009c44:	2a00      	cmp	r2, #0
 8009c46:	f000 80c1 	beq.w	8009dcc <_dtoa_r+0x894>
 8009c4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009c4e:	9c08      	ldr	r4, [sp, #32]
 8009c50:	9e00      	ldr	r6, [sp, #0]
 8009c52:	9a00      	ldr	r2, [sp, #0]
 8009c54:	441a      	add	r2, r3
 8009c56:	9200      	str	r2, [sp, #0]
 8009c58:	9a06      	ldr	r2, [sp, #24]
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	441a      	add	r2, r3
 8009c5e:	4648      	mov	r0, r9
 8009c60:	9206      	str	r2, [sp, #24]
 8009c62:	f000 fdd1 	bl	800a808 <__i2b>
 8009c66:	4605      	mov	r5, r0
 8009c68:	b166      	cbz	r6, 8009c84 <_dtoa_r+0x74c>
 8009c6a:	9b06      	ldr	r3, [sp, #24]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	dd09      	ble.n	8009c84 <_dtoa_r+0x74c>
 8009c70:	42b3      	cmp	r3, r6
 8009c72:	9a00      	ldr	r2, [sp, #0]
 8009c74:	bfa8      	it	ge
 8009c76:	4633      	movge	r3, r6
 8009c78:	1ad2      	subs	r2, r2, r3
 8009c7a:	9200      	str	r2, [sp, #0]
 8009c7c:	9a06      	ldr	r2, [sp, #24]
 8009c7e:	1af6      	subs	r6, r6, r3
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	9306      	str	r3, [sp, #24]
 8009c84:	9b08      	ldr	r3, [sp, #32]
 8009c86:	b30b      	cbz	r3, 8009ccc <_dtoa_r+0x794>
 8009c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f000 80c6 	beq.w	8009e1c <_dtoa_r+0x8e4>
 8009c90:	2c00      	cmp	r4, #0
 8009c92:	f000 80c0 	beq.w	8009e16 <_dtoa_r+0x8de>
 8009c96:	4629      	mov	r1, r5
 8009c98:	4622      	mov	r2, r4
 8009c9a:	4648      	mov	r0, r9
 8009c9c:	f000 fe6c 	bl	800a978 <__pow5mult>
 8009ca0:	9a02      	ldr	r2, [sp, #8]
 8009ca2:	4601      	mov	r1, r0
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	4648      	mov	r0, r9
 8009ca8:	f000 fdc4 	bl	800a834 <__multiply>
 8009cac:	9902      	ldr	r1, [sp, #8]
 8009cae:	4680      	mov	r8, r0
 8009cb0:	4648      	mov	r0, r9
 8009cb2:	f000 fcf5 	bl	800a6a0 <_Bfree>
 8009cb6:	9b08      	ldr	r3, [sp, #32]
 8009cb8:	1b1b      	subs	r3, r3, r4
 8009cba:	9308      	str	r3, [sp, #32]
 8009cbc:	f000 80b1 	beq.w	8009e22 <_dtoa_r+0x8ea>
 8009cc0:	9a08      	ldr	r2, [sp, #32]
 8009cc2:	4641      	mov	r1, r8
 8009cc4:	4648      	mov	r0, r9
 8009cc6:	f000 fe57 	bl	800a978 <__pow5mult>
 8009cca:	9002      	str	r0, [sp, #8]
 8009ccc:	2101      	movs	r1, #1
 8009cce:	4648      	mov	r0, r9
 8009cd0:	f000 fd9a 	bl	800a808 <__i2b>
 8009cd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f000 81d8 	beq.w	800a08e <_dtoa_r+0xb56>
 8009cde:	461a      	mov	r2, r3
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	4648      	mov	r0, r9
 8009ce4:	f000 fe48 	bl	800a978 <__pow5mult>
 8009ce8:	9b07      	ldr	r3, [sp, #28]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	4604      	mov	r4, r0
 8009cee:	f300 809f 	bgt.w	8009e30 <_dtoa_r+0x8f8>
 8009cf2:	9b04      	ldr	r3, [sp, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f040 8097 	bne.w	8009e28 <_dtoa_r+0x8f0>
 8009cfa:	9b05      	ldr	r3, [sp, #20]
 8009cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f040 8093 	bne.w	8009e2c <_dtoa_r+0x8f4>
 8009d06:	9b05      	ldr	r3, [sp, #20]
 8009d08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d0c:	0d1b      	lsrs	r3, r3, #20
 8009d0e:	051b      	lsls	r3, r3, #20
 8009d10:	b133      	cbz	r3, 8009d20 <_dtoa_r+0x7e8>
 8009d12:	9b00      	ldr	r3, [sp, #0]
 8009d14:	3301      	adds	r3, #1
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	9b06      	ldr	r3, [sp, #24]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	9306      	str	r3, [sp, #24]
 8009d1e:	2301      	movs	r3, #1
 8009d20:	9308      	str	r3, [sp, #32]
 8009d22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 81b8 	beq.w	800a09a <_dtoa_r+0xb62>
 8009d2a:	6923      	ldr	r3, [r4, #16]
 8009d2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d30:	6918      	ldr	r0, [r3, #16]
 8009d32:	f000 fd1d 	bl	800a770 <__hi0bits>
 8009d36:	f1c0 0020 	rsb	r0, r0, #32
 8009d3a:	9b06      	ldr	r3, [sp, #24]
 8009d3c:	4418      	add	r0, r3
 8009d3e:	f010 001f 	ands.w	r0, r0, #31
 8009d42:	f000 8082 	beq.w	8009e4a <_dtoa_r+0x912>
 8009d46:	f1c0 0320 	rsb	r3, r0, #32
 8009d4a:	2b04      	cmp	r3, #4
 8009d4c:	dd73      	ble.n	8009e36 <_dtoa_r+0x8fe>
 8009d4e:	9b00      	ldr	r3, [sp, #0]
 8009d50:	f1c0 001c 	rsb	r0, r0, #28
 8009d54:	4403      	add	r3, r0
 8009d56:	9300      	str	r3, [sp, #0]
 8009d58:	9b06      	ldr	r3, [sp, #24]
 8009d5a:	4403      	add	r3, r0
 8009d5c:	4406      	add	r6, r0
 8009d5e:	9306      	str	r3, [sp, #24]
 8009d60:	9b00      	ldr	r3, [sp, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	dd05      	ble.n	8009d72 <_dtoa_r+0x83a>
 8009d66:	9902      	ldr	r1, [sp, #8]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	4648      	mov	r0, r9
 8009d6c:	f000 fe5e 	bl	800aa2c <__lshift>
 8009d70:	9002      	str	r0, [sp, #8]
 8009d72:	9b06      	ldr	r3, [sp, #24]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	dd05      	ble.n	8009d84 <_dtoa_r+0x84c>
 8009d78:	4621      	mov	r1, r4
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	4648      	mov	r0, r9
 8009d7e:	f000 fe55 	bl	800aa2c <__lshift>
 8009d82:	4604      	mov	r4, r0
 8009d84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d061      	beq.n	8009e4e <_dtoa_r+0x916>
 8009d8a:	9802      	ldr	r0, [sp, #8]
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	f000 feb9 	bl	800ab04 <__mcmp>
 8009d92:	2800      	cmp	r0, #0
 8009d94:	da5b      	bge.n	8009e4e <_dtoa_r+0x916>
 8009d96:	2300      	movs	r3, #0
 8009d98:	9902      	ldr	r1, [sp, #8]
 8009d9a:	220a      	movs	r2, #10
 8009d9c:	4648      	mov	r0, r9
 8009d9e:	f000 fca1 	bl	800a6e4 <__multadd>
 8009da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da4:	9002      	str	r0, [sp, #8]
 8009da6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f000 8177 	beq.w	800a09e <_dtoa_r+0xb66>
 8009db0:	4629      	mov	r1, r5
 8009db2:	2300      	movs	r3, #0
 8009db4:	220a      	movs	r2, #10
 8009db6:	4648      	mov	r0, r9
 8009db8:	f000 fc94 	bl	800a6e4 <__multadd>
 8009dbc:	f1bb 0f00 	cmp.w	fp, #0
 8009dc0:	4605      	mov	r5, r0
 8009dc2:	dc6f      	bgt.n	8009ea4 <_dtoa_r+0x96c>
 8009dc4:	9b07      	ldr	r3, [sp, #28]
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	dc49      	bgt.n	8009e5e <_dtoa_r+0x926>
 8009dca:	e06b      	b.n	8009ea4 <_dtoa_r+0x96c>
 8009dcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009dce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009dd2:	e73c      	b.n	8009c4e <_dtoa_r+0x716>
 8009dd4:	3fe00000 	.word	0x3fe00000
 8009dd8:	40240000 	.word	0x40240000
 8009ddc:	9b03      	ldr	r3, [sp, #12]
 8009dde:	1e5c      	subs	r4, r3, #1
 8009de0:	9b08      	ldr	r3, [sp, #32]
 8009de2:	42a3      	cmp	r3, r4
 8009de4:	db09      	blt.n	8009dfa <_dtoa_r+0x8c2>
 8009de6:	1b1c      	subs	r4, r3, r4
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f6bf af30 	bge.w	8009c50 <_dtoa_r+0x718>
 8009df0:	9b00      	ldr	r3, [sp, #0]
 8009df2:	9a03      	ldr	r2, [sp, #12]
 8009df4:	1a9e      	subs	r6, r3, r2
 8009df6:	2300      	movs	r3, #0
 8009df8:	e72b      	b.n	8009c52 <_dtoa_r+0x71a>
 8009dfa:	9b08      	ldr	r3, [sp, #32]
 8009dfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009dfe:	9408      	str	r4, [sp, #32]
 8009e00:	1ae3      	subs	r3, r4, r3
 8009e02:	441a      	add	r2, r3
 8009e04:	9e00      	ldr	r6, [sp, #0]
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	920d      	str	r2, [sp, #52]	@ 0x34
 8009e0a:	2400      	movs	r4, #0
 8009e0c:	e721      	b.n	8009c52 <_dtoa_r+0x71a>
 8009e0e:	9c08      	ldr	r4, [sp, #32]
 8009e10:	9e00      	ldr	r6, [sp, #0]
 8009e12:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009e14:	e728      	b.n	8009c68 <_dtoa_r+0x730>
 8009e16:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009e1a:	e751      	b.n	8009cc0 <_dtoa_r+0x788>
 8009e1c:	9a08      	ldr	r2, [sp, #32]
 8009e1e:	9902      	ldr	r1, [sp, #8]
 8009e20:	e750      	b.n	8009cc4 <_dtoa_r+0x78c>
 8009e22:	f8cd 8008 	str.w	r8, [sp, #8]
 8009e26:	e751      	b.n	8009ccc <_dtoa_r+0x794>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	e779      	b.n	8009d20 <_dtoa_r+0x7e8>
 8009e2c:	9b04      	ldr	r3, [sp, #16]
 8009e2e:	e777      	b.n	8009d20 <_dtoa_r+0x7e8>
 8009e30:	2300      	movs	r3, #0
 8009e32:	9308      	str	r3, [sp, #32]
 8009e34:	e779      	b.n	8009d2a <_dtoa_r+0x7f2>
 8009e36:	d093      	beq.n	8009d60 <_dtoa_r+0x828>
 8009e38:	9a00      	ldr	r2, [sp, #0]
 8009e3a:	331c      	adds	r3, #28
 8009e3c:	441a      	add	r2, r3
 8009e3e:	9200      	str	r2, [sp, #0]
 8009e40:	9a06      	ldr	r2, [sp, #24]
 8009e42:	441a      	add	r2, r3
 8009e44:	441e      	add	r6, r3
 8009e46:	9206      	str	r2, [sp, #24]
 8009e48:	e78a      	b.n	8009d60 <_dtoa_r+0x828>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	e7f4      	b.n	8009e38 <_dtoa_r+0x900>
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	46b8      	mov	r8, r7
 8009e54:	dc20      	bgt.n	8009e98 <_dtoa_r+0x960>
 8009e56:	469b      	mov	fp, r3
 8009e58:	9b07      	ldr	r3, [sp, #28]
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	dd1e      	ble.n	8009e9c <_dtoa_r+0x964>
 8009e5e:	f1bb 0f00 	cmp.w	fp, #0
 8009e62:	f47f adb1 	bne.w	80099c8 <_dtoa_r+0x490>
 8009e66:	4621      	mov	r1, r4
 8009e68:	465b      	mov	r3, fp
 8009e6a:	2205      	movs	r2, #5
 8009e6c:	4648      	mov	r0, r9
 8009e6e:	f000 fc39 	bl	800a6e4 <__multadd>
 8009e72:	4601      	mov	r1, r0
 8009e74:	4604      	mov	r4, r0
 8009e76:	9802      	ldr	r0, [sp, #8]
 8009e78:	f000 fe44 	bl	800ab04 <__mcmp>
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	f77f ada3 	ble.w	80099c8 <_dtoa_r+0x490>
 8009e82:	4656      	mov	r6, sl
 8009e84:	2331      	movs	r3, #49	@ 0x31
 8009e86:	f806 3b01 	strb.w	r3, [r6], #1
 8009e8a:	f108 0801 	add.w	r8, r8, #1
 8009e8e:	e59f      	b.n	80099d0 <_dtoa_r+0x498>
 8009e90:	9c03      	ldr	r4, [sp, #12]
 8009e92:	46b8      	mov	r8, r7
 8009e94:	4625      	mov	r5, r4
 8009e96:	e7f4      	b.n	8009e82 <_dtoa_r+0x94a>
 8009e98:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f000 8101 	beq.w	800a0a6 <_dtoa_r+0xb6e>
 8009ea4:	2e00      	cmp	r6, #0
 8009ea6:	dd05      	ble.n	8009eb4 <_dtoa_r+0x97c>
 8009ea8:	4629      	mov	r1, r5
 8009eaa:	4632      	mov	r2, r6
 8009eac:	4648      	mov	r0, r9
 8009eae:	f000 fdbd 	bl	800aa2c <__lshift>
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	9b08      	ldr	r3, [sp, #32]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d05c      	beq.n	8009f74 <_dtoa_r+0xa3c>
 8009eba:	6869      	ldr	r1, [r5, #4]
 8009ebc:	4648      	mov	r0, r9
 8009ebe:	f000 fbaf 	bl	800a620 <_Balloc>
 8009ec2:	4606      	mov	r6, r0
 8009ec4:	b928      	cbnz	r0, 8009ed2 <_dtoa_r+0x99a>
 8009ec6:	4b82      	ldr	r3, [pc, #520]	@ (800a0d0 <_dtoa_r+0xb98>)
 8009ec8:	4602      	mov	r2, r0
 8009eca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ece:	f7ff bb4a 	b.w	8009566 <_dtoa_r+0x2e>
 8009ed2:	692a      	ldr	r2, [r5, #16]
 8009ed4:	3202      	adds	r2, #2
 8009ed6:	0092      	lsls	r2, r2, #2
 8009ed8:	f105 010c 	add.w	r1, r5, #12
 8009edc:	300c      	adds	r0, #12
 8009ede:	f7ff fa77 	bl	80093d0 <memcpy>
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	4648      	mov	r0, r9
 8009ee8:	f000 fda0 	bl	800aa2c <__lshift>
 8009eec:	f10a 0301 	add.w	r3, sl, #1
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	eb0a 030b 	add.w	r3, sl, fp
 8009ef6:	9308      	str	r3, [sp, #32]
 8009ef8:	9b04      	ldr	r3, [sp, #16]
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	462f      	mov	r7, r5
 8009f00:	9306      	str	r3, [sp, #24]
 8009f02:	4605      	mov	r5, r0
 8009f04:	9b00      	ldr	r3, [sp, #0]
 8009f06:	9802      	ldr	r0, [sp, #8]
 8009f08:	4621      	mov	r1, r4
 8009f0a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009f0e:	f7ff fa8b 	bl	8009428 <quorem>
 8009f12:	4603      	mov	r3, r0
 8009f14:	3330      	adds	r3, #48	@ 0x30
 8009f16:	9003      	str	r0, [sp, #12]
 8009f18:	4639      	mov	r1, r7
 8009f1a:	9802      	ldr	r0, [sp, #8]
 8009f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f1e:	f000 fdf1 	bl	800ab04 <__mcmp>
 8009f22:	462a      	mov	r2, r5
 8009f24:	9004      	str	r0, [sp, #16]
 8009f26:	4621      	mov	r1, r4
 8009f28:	4648      	mov	r0, r9
 8009f2a:	f000 fe07 	bl	800ab3c <__mdiff>
 8009f2e:	68c2      	ldr	r2, [r0, #12]
 8009f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f32:	4606      	mov	r6, r0
 8009f34:	bb02      	cbnz	r2, 8009f78 <_dtoa_r+0xa40>
 8009f36:	4601      	mov	r1, r0
 8009f38:	9802      	ldr	r0, [sp, #8]
 8009f3a:	f000 fde3 	bl	800ab04 <__mcmp>
 8009f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f40:	4602      	mov	r2, r0
 8009f42:	4631      	mov	r1, r6
 8009f44:	4648      	mov	r0, r9
 8009f46:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f4a:	f000 fba9 	bl	800a6a0 <_Bfree>
 8009f4e:	9b07      	ldr	r3, [sp, #28]
 8009f50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f52:	9e00      	ldr	r6, [sp, #0]
 8009f54:	ea42 0103 	orr.w	r1, r2, r3
 8009f58:	9b06      	ldr	r3, [sp, #24]
 8009f5a:	4319      	orrs	r1, r3
 8009f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f5e:	d10d      	bne.n	8009f7c <_dtoa_r+0xa44>
 8009f60:	2b39      	cmp	r3, #57	@ 0x39
 8009f62:	d027      	beq.n	8009fb4 <_dtoa_r+0xa7c>
 8009f64:	9a04      	ldr	r2, [sp, #16]
 8009f66:	2a00      	cmp	r2, #0
 8009f68:	dd01      	ble.n	8009f6e <_dtoa_r+0xa36>
 8009f6a:	9b03      	ldr	r3, [sp, #12]
 8009f6c:	3331      	adds	r3, #49	@ 0x31
 8009f6e:	f88b 3000 	strb.w	r3, [fp]
 8009f72:	e52e      	b.n	80099d2 <_dtoa_r+0x49a>
 8009f74:	4628      	mov	r0, r5
 8009f76:	e7b9      	b.n	8009eec <_dtoa_r+0x9b4>
 8009f78:	2201      	movs	r2, #1
 8009f7a:	e7e2      	b.n	8009f42 <_dtoa_r+0xa0a>
 8009f7c:	9904      	ldr	r1, [sp, #16]
 8009f7e:	2900      	cmp	r1, #0
 8009f80:	db04      	blt.n	8009f8c <_dtoa_r+0xa54>
 8009f82:	9807      	ldr	r0, [sp, #28]
 8009f84:	4301      	orrs	r1, r0
 8009f86:	9806      	ldr	r0, [sp, #24]
 8009f88:	4301      	orrs	r1, r0
 8009f8a:	d120      	bne.n	8009fce <_dtoa_r+0xa96>
 8009f8c:	2a00      	cmp	r2, #0
 8009f8e:	ddee      	ble.n	8009f6e <_dtoa_r+0xa36>
 8009f90:	9902      	ldr	r1, [sp, #8]
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	2201      	movs	r2, #1
 8009f96:	4648      	mov	r0, r9
 8009f98:	f000 fd48 	bl	800aa2c <__lshift>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	9002      	str	r0, [sp, #8]
 8009fa0:	f000 fdb0 	bl	800ab04 <__mcmp>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	9b00      	ldr	r3, [sp, #0]
 8009fa8:	dc02      	bgt.n	8009fb0 <_dtoa_r+0xa78>
 8009faa:	d1e0      	bne.n	8009f6e <_dtoa_r+0xa36>
 8009fac:	07da      	lsls	r2, r3, #31
 8009fae:	d5de      	bpl.n	8009f6e <_dtoa_r+0xa36>
 8009fb0:	2b39      	cmp	r3, #57	@ 0x39
 8009fb2:	d1da      	bne.n	8009f6a <_dtoa_r+0xa32>
 8009fb4:	2339      	movs	r3, #57	@ 0x39
 8009fb6:	f88b 3000 	strb.w	r3, [fp]
 8009fba:	4633      	mov	r3, r6
 8009fbc:	461e      	mov	r6, r3
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009fc4:	2a39      	cmp	r2, #57	@ 0x39
 8009fc6:	d04e      	beq.n	800a066 <_dtoa_r+0xb2e>
 8009fc8:	3201      	adds	r2, #1
 8009fca:	701a      	strb	r2, [r3, #0]
 8009fcc:	e501      	b.n	80099d2 <_dtoa_r+0x49a>
 8009fce:	2a00      	cmp	r2, #0
 8009fd0:	dd03      	ble.n	8009fda <_dtoa_r+0xaa2>
 8009fd2:	2b39      	cmp	r3, #57	@ 0x39
 8009fd4:	d0ee      	beq.n	8009fb4 <_dtoa_r+0xa7c>
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	e7c9      	b.n	8009f6e <_dtoa_r+0xa36>
 8009fda:	9a00      	ldr	r2, [sp, #0]
 8009fdc:	9908      	ldr	r1, [sp, #32]
 8009fde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009fe2:	428a      	cmp	r2, r1
 8009fe4:	d028      	beq.n	800a038 <_dtoa_r+0xb00>
 8009fe6:	9902      	ldr	r1, [sp, #8]
 8009fe8:	2300      	movs	r3, #0
 8009fea:	220a      	movs	r2, #10
 8009fec:	4648      	mov	r0, r9
 8009fee:	f000 fb79 	bl	800a6e4 <__multadd>
 8009ff2:	42af      	cmp	r7, r5
 8009ff4:	9002      	str	r0, [sp, #8]
 8009ff6:	f04f 0300 	mov.w	r3, #0
 8009ffa:	f04f 020a 	mov.w	r2, #10
 8009ffe:	4639      	mov	r1, r7
 800a000:	4648      	mov	r0, r9
 800a002:	d107      	bne.n	800a014 <_dtoa_r+0xadc>
 800a004:	f000 fb6e 	bl	800a6e4 <__multadd>
 800a008:	4607      	mov	r7, r0
 800a00a:	4605      	mov	r5, r0
 800a00c:	9b00      	ldr	r3, [sp, #0]
 800a00e:	3301      	adds	r3, #1
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	e777      	b.n	8009f04 <_dtoa_r+0x9cc>
 800a014:	f000 fb66 	bl	800a6e4 <__multadd>
 800a018:	4629      	mov	r1, r5
 800a01a:	4607      	mov	r7, r0
 800a01c:	2300      	movs	r3, #0
 800a01e:	220a      	movs	r2, #10
 800a020:	4648      	mov	r0, r9
 800a022:	f000 fb5f 	bl	800a6e4 <__multadd>
 800a026:	4605      	mov	r5, r0
 800a028:	e7f0      	b.n	800a00c <_dtoa_r+0xad4>
 800a02a:	f1bb 0f00 	cmp.w	fp, #0
 800a02e:	bfcc      	ite	gt
 800a030:	465e      	movgt	r6, fp
 800a032:	2601      	movle	r6, #1
 800a034:	4456      	add	r6, sl
 800a036:	2700      	movs	r7, #0
 800a038:	9902      	ldr	r1, [sp, #8]
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	2201      	movs	r2, #1
 800a03e:	4648      	mov	r0, r9
 800a040:	f000 fcf4 	bl	800aa2c <__lshift>
 800a044:	4621      	mov	r1, r4
 800a046:	9002      	str	r0, [sp, #8]
 800a048:	f000 fd5c 	bl	800ab04 <__mcmp>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	dcb4      	bgt.n	8009fba <_dtoa_r+0xa82>
 800a050:	d102      	bne.n	800a058 <_dtoa_r+0xb20>
 800a052:	9b00      	ldr	r3, [sp, #0]
 800a054:	07db      	lsls	r3, r3, #31
 800a056:	d4b0      	bmi.n	8009fba <_dtoa_r+0xa82>
 800a058:	4633      	mov	r3, r6
 800a05a:	461e      	mov	r6, r3
 800a05c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a060:	2a30      	cmp	r2, #48	@ 0x30
 800a062:	d0fa      	beq.n	800a05a <_dtoa_r+0xb22>
 800a064:	e4b5      	b.n	80099d2 <_dtoa_r+0x49a>
 800a066:	459a      	cmp	sl, r3
 800a068:	d1a8      	bne.n	8009fbc <_dtoa_r+0xa84>
 800a06a:	2331      	movs	r3, #49	@ 0x31
 800a06c:	f108 0801 	add.w	r8, r8, #1
 800a070:	f88a 3000 	strb.w	r3, [sl]
 800a074:	e4ad      	b.n	80099d2 <_dtoa_r+0x49a>
 800a076:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a078:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a0d4 <_dtoa_r+0xb9c>
 800a07c:	b11b      	cbz	r3, 800a086 <_dtoa_r+0xb4e>
 800a07e:	f10a 0308 	add.w	r3, sl, #8
 800a082:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a084:	6013      	str	r3, [r2, #0]
 800a086:	4650      	mov	r0, sl
 800a088:	b017      	add	sp, #92	@ 0x5c
 800a08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08e:	9b07      	ldr	r3, [sp, #28]
 800a090:	2b01      	cmp	r3, #1
 800a092:	f77f ae2e 	ble.w	8009cf2 <_dtoa_r+0x7ba>
 800a096:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a098:	9308      	str	r3, [sp, #32]
 800a09a:	2001      	movs	r0, #1
 800a09c:	e64d      	b.n	8009d3a <_dtoa_r+0x802>
 800a09e:	f1bb 0f00 	cmp.w	fp, #0
 800a0a2:	f77f aed9 	ble.w	8009e58 <_dtoa_r+0x920>
 800a0a6:	4656      	mov	r6, sl
 800a0a8:	9802      	ldr	r0, [sp, #8]
 800a0aa:	4621      	mov	r1, r4
 800a0ac:	f7ff f9bc 	bl	8009428 <quorem>
 800a0b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a0b4:	f806 3b01 	strb.w	r3, [r6], #1
 800a0b8:	eba6 020a 	sub.w	r2, r6, sl
 800a0bc:	4593      	cmp	fp, r2
 800a0be:	ddb4      	ble.n	800a02a <_dtoa_r+0xaf2>
 800a0c0:	9902      	ldr	r1, [sp, #8]
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	220a      	movs	r2, #10
 800a0c6:	4648      	mov	r0, r9
 800a0c8:	f000 fb0c 	bl	800a6e4 <__multadd>
 800a0cc:	9002      	str	r0, [sp, #8]
 800a0ce:	e7eb      	b.n	800a0a8 <_dtoa_r+0xb70>
 800a0d0:	0800b8d8 	.word	0x0800b8d8
 800a0d4:	0800b873 	.word	0x0800b873

0800a0d8 <__sfputc_r>:
 800a0d8:	6893      	ldr	r3, [r2, #8]
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	b410      	push	{r4}
 800a0e0:	6093      	str	r3, [r2, #8]
 800a0e2:	da08      	bge.n	800a0f6 <__sfputc_r+0x1e>
 800a0e4:	6994      	ldr	r4, [r2, #24]
 800a0e6:	42a3      	cmp	r3, r4
 800a0e8:	db01      	blt.n	800a0ee <__sfputc_r+0x16>
 800a0ea:	290a      	cmp	r1, #10
 800a0ec:	d103      	bne.n	800a0f6 <__sfputc_r+0x1e>
 800a0ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0f2:	f000 be65 	b.w	800adc0 <__swbuf_r>
 800a0f6:	6813      	ldr	r3, [r2, #0]
 800a0f8:	1c58      	adds	r0, r3, #1
 800a0fa:	6010      	str	r0, [r2, #0]
 800a0fc:	7019      	strb	r1, [r3, #0]
 800a0fe:	4608      	mov	r0, r1
 800a100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <__sfputs_r>:
 800a106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a108:	4606      	mov	r6, r0
 800a10a:	460f      	mov	r7, r1
 800a10c:	4614      	mov	r4, r2
 800a10e:	18d5      	adds	r5, r2, r3
 800a110:	42ac      	cmp	r4, r5
 800a112:	d101      	bne.n	800a118 <__sfputs_r+0x12>
 800a114:	2000      	movs	r0, #0
 800a116:	e007      	b.n	800a128 <__sfputs_r+0x22>
 800a118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a11c:	463a      	mov	r2, r7
 800a11e:	4630      	mov	r0, r6
 800a120:	f7ff ffda 	bl	800a0d8 <__sfputc_r>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d1f3      	bne.n	800a110 <__sfputs_r+0xa>
 800a128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a12c <_vfiprintf_r>:
 800a12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a130:	460d      	mov	r5, r1
 800a132:	b09d      	sub	sp, #116	@ 0x74
 800a134:	4614      	mov	r4, r2
 800a136:	4698      	mov	r8, r3
 800a138:	4606      	mov	r6, r0
 800a13a:	b118      	cbz	r0, 800a144 <_vfiprintf_r+0x18>
 800a13c:	6a03      	ldr	r3, [r0, #32]
 800a13e:	b90b      	cbnz	r3, 800a144 <_vfiprintf_r+0x18>
 800a140:	f7ff f866 	bl	8009210 <__sinit>
 800a144:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a146:	07d9      	lsls	r1, r3, #31
 800a148:	d405      	bmi.n	800a156 <_vfiprintf_r+0x2a>
 800a14a:	89ab      	ldrh	r3, [r5, #12]
 800a14c:	059a      	lsls	r2, r3, #22
 800a14e:	d402      	bmi.n	800a156 <_vfiprintf_r+0x2a>
 800a150:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a152:	f7ff f936 	bl	80093c2 <__retarget_lock_acquire_recursive>
 800a156:	89ab      	ldrh	r3, [r5, #12]
 800a158:	071b      	lsls	r3, r3, #28
 800a15a:	d501      	bpl.n	800a160 <_vfiprintf_r+0x34>
 800a15c:	692b      	ldr	r3, [r5, #16]
 800a15e:	b99b      	cbnz	r3, 800a188 <_vfiprintf_r+0x5c>
 800a160:	4629      	mov	r1, r5
 800a162:	4630      	mov	r0, r6
 800a164:	f000 fe6a 	bl	800ae3c <__swsetup_r>
 800a168:	b170      	cbz	r0, 800a188 <_vfiprintf_r+0x5c>
 800a16a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a16c:	07dc      	lsls	r4, r3, #31
 800a16e:	d504      	bpl.n	800a17a <_vfiprintf_r+0x4e>
 800a170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a174:	b01d      	add	sp, #116	@ 0x74
 800a176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17a:	89ab      	ldrh	r3, [r5, #12]
 800a17c:	0598      	lsls	r0, r3, #22
 800a17e:	d4f7      	bmi.n	800a170 <_vfiprintf_r+0x44>
 800a180:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a182:	f7ff f91f 	bl	80093c4 <__retarget_lock_release_recursive>
 800a186:	e7f3      	b.n	800a170 <_vfiprintf_r+0x44>
 800a188:	2300      	movs	r3, #0
 800a18a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a18c:	2320      	movs	r3, #32
 800a18e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a192:	f8cd 800c 	str.w	r8, [sp, #12]
 800a196:	2330      	movs	r3, #48	@ 0x30
 800a198:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a348 <_vfiprintf_r+0x21c>
 800a19c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1a0:	f04f 0901 	mov.w	r9, #1
 800a1a4:	4623      	mov	r3, r4
 800a1a6:	469a      	mov	sl, r3
 800a1a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1ac:	b10a      	cbz	r2, 800a1b2 <_vfiprintf_r+0x86>
 800a1ae:	2a25      	cmp	r2, #37	@ 0x25
 800a1b0:	d1f9      	bne.n	800a1a6 <_vfiprintf_r+0x7a>
 800a1b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a1b6:	d00b      	beq.n	800a1d0 <_vfiprintf_r+0xa4>
 800a1b8:	465b      	mov	r3, fp
 800a1ba:	4622      	mov	r2, r4
 800a1bc:	4629      	mov	r1, r5
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f7ff ffa1 	bl	800a106 <__sfputs_r>
 800a1c4:	3001      	adds	r0, #1
 800a1c6:	f000 80a7 	beq.w	800a318 <_vfiprintf_r+0x1ec>
 800a1ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1cc:	445a      	add	r2, fp
 800a1ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f000 809f 	beq.w	800a318 <_vfiprintf_r+0x1ec>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1e4:	f10a 0a01 	add.w	sl, sl, #1
 800a1e8:	9304      	str	r3, [sp, #16]
 800a1ea:	9307      	str	r3, [sp, #28]
 800a1ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1f2:	4654      	mov	r4, sl
 800a1f4:	2205      	movs	r2, #5
 800a1f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fa:	4853      	ldr	r0, [pc, #332]	@ (800a348 <_vfiprintf_r+0x21c>)
 800a1fc:	f7f5 fff8 	bl	80001f0 <memchr>
 800a200:	9a04      	ldr	r2, [sp, #16]
 800a202:	b9d8      	cbnz	r0, 800a23c <_vfiprintf_r+0x110>
 800a204:	06d1      	lsls	r1, r2, #27
 800a206:	bf44      	itt	mi
 800a208:	2320      	movmi	r3, #32
 800a20a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a20e:	0713      	lsls	r3, r2, #28
 800a210:	bf44      	itt	mi
 800a212:	232b      	movmi	r3, #43	@ 0x2b
 800a214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a218:	f89a 3000 	ldrb.w	r3, [sl]
 800a21c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a21e:	d015      	beq.n	800a24c <_vfiprintf_r+0x120>
 800a220:	9a07      	ldr	r2, [sp, #28]
 800a222:	4654      	mov	r4, sl
 800a224:	2000      	movs	r0, #0
 800a226:	f04f 0c0a 	mov.w	ip, #10
 800a22a:	4621      	mov	r1, r4
 800a22c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a230:	3b30      	subs	r3, #48	@ 0x30
 800a232:	2b09      	cmp	r3, #9
 800a234:	d94b      	bls.n	800a2ce <_vfiprintf_r+0x1a2>
 800a236:	b1b0      	cbz	r0, 800a266 <_vfiprintf_r+0x13a>
 800a238:	9207      	str	r2, [sp, #28]
 800a23a:	e014      	b.n	800a266 <_vfiprintf_r+0x13a>
 800a23c:	eba0 0308 	sub.w	r3, r0, r8
 800a240:	fa09 f303 	lsl.w	r3, r9, r3
 800a244:	4313      	orrs	r3, r2
 800a246:	9304      	str	r3, [sp, #16]
 800a248:	46a2      	mov	sl, r4
 800a24a:	e7d2      	b.n	800a1f2 <_vfiprintf_r+0xc6>
 800a24c:	9b03      	ldr	r3, [sp, #12]
 800a24e:	1d19      	adds	r1, r3, #4
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	9103      	str	r1, [sp, #12]
 800a254:	2b00      	cmp	r3, #0
 800a256:	bfbb      	ittet	lt
 800a258:	425b      	neglt	r3, r3
 800a25a:	f042 0202 	orrlt.w	r2, r2, #2
 800a25e:	9307      	strge	r3, [sp, #28]
 800a260:	9307      	strlt	r3, [sp, #28]
 800a262:	bfb8      	it	lt
 800a264:	9204      	strlt	r2, [sp, #16]
 800a266:	7823      	ldrb	r3, [r4, #0]
 800a268:	2b2e      	cmp	r3, #46	@ 0x2e
 800a26a:	d10a      	bne.n	800a282 <_vfiprintf_r+0x156>
 800a26c:	7863      	ldrb	r3, [r4, #1]
 800a26e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a270:	d132      	bne.n	800a2d8 <_vfiprintf_r+0x1ac>
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	1d1a      	adds	r2, r3, #4
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	9203      	str	r2, [sp, #12]
 800a27a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a27e:	3402      	adds	r4, #2
 800a280:	9305      	str	r3, [sp, #20]
 800a282:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a358 <_vfiprintf_r+0x22c>
 800a286:	7821      	ldrb	r1, [r4, #0]
 800a288:	2203      	movs	r2, #3
 800a28a:	4650      	mov	r0, sl
 800a28c:	f7f5 ffb0 	bl	80001f0 <memchr>
 800a290:	b138      	cbz	r0, 800a2a2 <_vfiprintf_r+0x176>
 800a292:	9b04      	ldr	r3, [sp, #16]
 800a294:	eba0 000a 	sub.w	r0, r0, sl
 800a298:	2240      	movs	r2, #64	@ 0x40
 800a29a:	4082      	lsls	r2, r0
 800a29c:	4313      	orrs	r3, r2
 800a29e:	3401      	adds	r4, #1
 800a2a0:	9304      	str	r3, [sp, #16]
 800a2a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a6:	4829      	ldr	r0, [pc, #164]	@ (800a34c <_vfiprintf_r+0x220>)
 800a2a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2ac:	2206      	movs	r2, #6
 800a2ae:	f7f5 ff9f 	bl	80001f0 <memchr>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d03f      	beq.n	800a336 <_vfiprintf_r+0x20a>
 800a2b6:	4b26      	ldr	r3, [pc, #152]	@ (800a350 <_vfiprintf_r+0x224>)
 800a2b8:	bb1b      	cbnz	r3, 800a302 <_vfiprintf_r+0x1d6>
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	3307      	adds	r3, #7
 800a2be:	f023 0307 	bic.w	r3, r3, #7
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	9303      	str	r3, [sp, #12]
 800a2c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c8:	443b      	add	r3, r7
 800a2ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2cc:	e76a      	b.n	800a1a4 <_vfiprintf_r+0x78>
 800a2ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	2001      	movs	r0, #1
 800a2d6:	e7a8      	b.n	800a22a <_vfiprintf_r+0xfe>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	3401      	adds	r4, #1
 800a2dc:	9305      	str	r3, [sp, #20]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	f04f 0c0a 	mov.w	ip, #10
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ea:	3a30      	subs	r2, #48	@ 0x30
 800a2ec:	2a09      	cmp	r2, #9
 800a2ee:	d903      	bls.n	800a2f8 <_vfiprintf_r+0x1cc>
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0c6      	beq.n	800a282 <_vfiprintf_r+0x156>
 800a2f4:	9105      	str	r1, [sp, #20]
 800a2f6:	e7c4      	b.n	800a282 <_vfiprintf_r+0x156>
 800a2f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	2301      	movs	r3, #1
 800a300:	e7f0      	b.n	800a2e4 <_vfiprintf_r+0x1b8>
 800a302:	ab03      	add	r3, sp, #12
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	462a      	mov	r2, r5
 800a308:	4b12      	ldr	r3, [pc, #72]	@ (800a354 <_vfiprintf_r+0x228>)
 800a30a:	a904      	add	r1, sp, #16
 800a30c:	4630      	mov	r0, r6
 800a30e:	f7fe fad1 	bl	80088b4 <_printf_float>
 800a312:	4607      	mov	r7, r0
 800a314:	1c78      	adds	r0, r7, #1
 800a316:	d1d6      	bne.n	800a2c6 <_vfiprintf_r+0x19a>
 800a318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a31a:	07d9      	lsls	r1, r3, #31
 800a31c:	d405      	bmi.n	800a32a <_vfiprintf_r+0x1fe>
 800a31e:	89ab      	ldrh	r3, [r5, #12]
 800a320:	059a      	lsls	r2, r3, #22
 800a322:	d402      	bmi.n	800a32a <_vfiprintf_r+0x1fe>
 800a324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a326:	f7ff f84d 	bl	80093c4 <__retarget_lock_release_recursive>
 800a32a:	89ab      	ldrh	r3, [r5, #12]
 800a32c:	065b      	lsls	r3, r3, #25
 800a32e:	f53f af1f 	bmi.w	800a170 <_vfiprintf_r+0x44>
 800a332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a334:	e71e      	b.n	800a174 <_vfiprintf_r+0x48>
 800a336:	ab03      	add	r3, sp, #12
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	462a      	mov	r2, r5
 800a33c:	4b05      	ldr	r3, [pc, #20]	@ (800a354 <_vfiprintf_r+0x228>)
 800a33e:	a904      	add	r1, sp, #16
 800a340:	4630      	mov	r0, r6
 800a342:	f7fe fd4f 	bl	8008de4 <_printf_i>
 800a346:	e7e4      	b.n	800a312 <_vfiprintf_r+0x1e6>
 800a348:	0800b8e9 	.word	0x0800b8e9
 800a34c:	0800b8f3 	.word	0x0800b8f3
 800a350:	080088b5 	.word	0x080088b5
 800a354:	0800a107 	.word	0x0800a107
 800a358:	0800b8ef 	.word	0x0800b8ef

0800a35c <malloc>:
 800a35c:	4b02      	ldr	r3, [pc, #8]	@ (800a368 <malloc+0xc>)
 800a35e:	4601      	mov	r1, r0
 800a360:	6818      	ldr	r0, [r3, #0]
 800a362:	f000 b825 	b.w	800a3b0 <_malloc_r>
 800a366:	bf00      	nop
 800a368:	200000e0 	.word	0x200000e0

0800a36c <sbrk_aligned>:
 800a36c:	b570      	push	{r4, r5, r6, lr}
 800a36e:	4e0f      	ldr	r6, [pc, #60]	@ (800a3ac <sbrk_aligned+0x40>)
 800a370:	460c      	mov	r4, r1
 800a372:	6831      	ldr	r1, [r6, #0]
 800a374:	4605      	mov	r5, r0
 800a376:	b911      	cbnz	r1, 800a37e <sbrk_aligned+0x12>
 800a378:	f000 fe4c 	bl	800b014 <_sbrk_r>
 800a37c:	6030      	str	r0, [r6, #0]
 800a37e:	4621      	mov	r1, r4
 800a380:	4628      	mov	r0, r5
 800a382:	f000 fe47 	bl	800b014 <_sbrk_r>
 800a386:	1c43      	adds	r3, r0, #1
 800a388:	d103      	bne.n	800a392 <sbrk_aligned+0x26>
 800a38a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a38e:	4620      	mov	r0, r4
 800a390:	bd70      	pop	{r4, r5, r6, pc}
 800a392:	1cc4      	adds	r4, r0, #3
 800a394:	f024 0403 	bic.w	r4, r4, #3
 800a398:	42a0      	cmp	r0, r4
 800a39a:	d0f8      	beq.n	800a38e <sbrk_aligned+0x22>
 800a39c:	1a21      	subs	r1, r4, r0
 800a39e:	4628      	mov	r0, r5
 800a3a0:	f000 fe38 	bl	800b014 <_sbrk_r>
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	d1f2      	bne.n	800a38e <sbrk_aligned+0x22>
 800a3a8:	e7ef      	b.n	800a38a <sbrk_aligned+0x1e>
 800a3aa:	bf00      	nop
 800a3ac:	200015d4 	.word	0x200015d4

0800a3b0 <_malloc_r>:
 800a3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b4:	1ccd      	adds	r5, r1, #3
 800a3b6:	f025 0503 	bic.w	r5, r5, #3
 800a3ba:	3508      	adds	r5, #8
 800a3bc:	2d0c      	cmp	r5, #12
 800a3be:	bf38      	it	cc
 800a3c0:	250c      	movcc	r5, #12
 800a3c2:	2d00      	cmp	r5, #0
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	db01      	blt.n	800a3cc <_malloc_r+0x1c>
 800a3c8:	42a9      	cmp	r1, r5
 800a3ca:	d904      	bls.n	800a3d6 <_malloc_r+0x26>
 800a3cc:	230c      	movs	r3, #12
 800a3ce:	6033      	str	r3, [r6, #0]
 800a3d0:	2000      	movs	r0, #0
 800a3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4ac <_malloc_r+0xfc>
 800a3da:	f000 f915 	bl	800a608 <__malloc_lock>
 800a3de:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e2:	461c      	mov	r4, r3
 800a3e4:	bb44      	cbnz	r4, 800a438 <_malloc_r+0x88>
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	f7ff ffbf 	bl	800a36c <sbrk_aligned>
 800a3ee:	1c43      	adds	r3, r0, #1
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	d158      	bne.n	800a4a6 <_malloc_r+0xf6>
 800a3f4:	f8d8 4000 	ldr.w	r4, [r8]
 800a3f8:	4627      	mov	r7, r4
 800a3fa:	2f00      	cmp	r7, #0
 800a3fc:	d143      	bne.n	800a486 <_malloc_r+0xd6>
 800a3fe:	2c00      	cmp	r4, #0
 800a400:	d04b      	beq.n	800a49a <_malloc_r+0xea>
 800a402:	6823      	ldr	r3, [r4, #0]
 800a404:	4639      	mov	r1, r7
 800a406:	4630      	mov	r0, r6
 800a408:	eb04 0903 	add.w	r9, r4, r3
 800a40c:	f000 fe02 	bl	800b014 <_sbrk_r>
 800a410:	4581      	cmp	r9, r0
 800a412:	d142      	bne.n	800a49a <_malloc_r+0xea>
 800a414:	6821      	ldr	r1, [r4, #0]
 800a416:	1a6d      	subs	r5, r5, r1
 800a418:	4629      	mov	r1, r5
 800a41a:	4630      	mov	r0, r6
 800a41c:	f7ff ffa6 	bl	800a36c <sbrk_aligned>
 800a420:	3001      	adds	r0, #1
 800a422:	d03a      	beq.n	800a49a <_malloc_r+0xea>
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	442b      	add	r3, r5
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	f8d8 3000 	ldr.w	r3, [r8]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	bb62      	cbnz	r2, 800a48c <_malloc_r+0xdc>
 800a432:	f8c8 7000 	str.w	r7, [r8]
 800a436:	e00f      	b.n	800a458 <_malloc_r+0xa8>
 800a438:	6822      	ldr	r2, [r4, #0]
 800a43a:	1b52      	subs	r2, r2, r5
 800a43c:	d420      	bmi.n	800a480 <_malloc_r+0xd0>
 800a43e:	2a0b      	cmp	r2, #11
 800a440:	d917      	bls.n	800a472 <_malloc_r+0xc2>
 800a442:	1961      	adds	r1, r4, r5
 800a444:	42a3      	cmp	r3, r4
 800a446:	6025      	str	r5, [r4, #0]
 800a448:	bf18      	it	ne
 800a44a:	6059      	strne	r1, [r3, #4]
 800a44c:	6863      	ldr	r3, [r4, #4]
 800a44e:	bf08      	it	eq
 800a450:	f8c8 1000 	streq.w	r1, [r8]
 800a454:	5162      	str	r2, [r4, r5]
 800a456:	604b      	str	r3, [r1, #4]
 800a458:	4630      	mov	r0, r6
 800a45a:	f000 f8db 	bl	800a614 <__malloc_unlock>
 800a45e:	f104 000b 	add.w	r0, r4, #11
 800a462:	1d23      	adds	r3, r4, #4
 800a464:	f020 0007 	bic.w	r0, r0, #7
 800a468:	1ac2      	subs	r2, r0, r3
 800a46a:	bf1c      	itt	ne
 800a46c:	1a1b      	subne	r3, r3, r0
 800a46e:	50a3      	strne	r3, [r4, r2]
 800a470:	e7af      	b.n	800a3d2 <_malloc_r+0x22>
 800a472:	6862      	ldr	r2, [r4, #4]
 800a474:	42a3      	cmp	r3, r4
 800a476:	bf0c      	ite	eq
 800a478:	f8c8 2000 	streq.w	r2, [r8]
 800a47c:	605a      	strne	r2, [r3, #4]
 800a47e:	e7eb      	b.n	800a458 <_malloc_r+0xa8>
 800a480:	4623      	mov	r3, r4
 800a482:	6864      	ldr	r4, [r4, #4]
 800a484:	e7ae      	b.n	800a3e4 <_malloc_r+0x34>
 800a486:	463c      	mov	r4, r7
 800a488:	687f      	ldr	r7, [r7, #4]
 800a48a:	e7b6      	b.n	800a3fa <_malloc_r+0x4a>
 800a48c:	461a      	mov	r2, r3
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	42a3      	cmp	r3, r4
 800a492:	d1fb      	bne.n	800a48c <_malloc_r+0xdc>
 800a494:	2300      	movs	r3, #0
 800a496:	6053      	str	r3, [r2, #4]
 800a498:	e7de      	b.n	800a458 <_malloc_r+0xa8>
 800a49a:	230c      	movs	r3, #12
 800a49c:	6033      	str	r3, [r6, #0]
 800a49e:	4630      	mov	r0, r6
 800a4a0:	f000 f8b8 	bl	800a614 <__malloc_unlock>
 800a4a4:	e794      	b.n	800a3d0 <_malloc_r+0x20>
 800a4a6:	6005      	str	r5, [r0, #0]
 800a4a8:	e7d6      	b.n	800a458 <_malloc_r+0xa8>
 800a4aa:	bf00      	nop
 800a4ac:	200015d8 	.word	0x200015d8

0800a4b0 <__sflush_r>:
 800a4b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b8:	0716      	lsls	r6, r2, #28
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	460c      	mov	r4, r1
 800a4be:	d454      	bmi.n	800a56a <__sflush_r+0xba>
 800a4c0:	684b      	ldr	r3, [r1, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dc02      	bgt.n	800a4cc <__sflush_r+0x1c>
 800a4c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	dd48      	ble.n	800a55e <__sflush_r+0xae>
 800a4cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4ce:	2e00      	cmp	r6, #0
 800a4d0:	d045      	beq.n	800a55e <__sflush_r+0xae>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4d8:	682f      	ldr	r7, [r5, #0]
 800a4da:	6a21      	ldr	r1, [r4, #32]
 800a4dc:	602b      	str	r3, [r5, #0]
 800a4de:	d030      	beq.n	800a542 <__sflush_r+0x92>
 800a4e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	0759      	lsls	r1, r3, #29
 800a4e6:	d505      	bpl.n	800a4f4 <__sflush_r+0x44>
 800a4e8:	6863      	ldr	r3, [r4, #4]
 800a4ea:	1ad2      	subs	r2, r2, r3
 800a4ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4ee:	b10b      	cbz	r3, 800a4f4 <__sflush_r+0x44>
 800a4f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4f2:	1ad2      	subs	r2, r2, r3
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4f8:	6a21      	ldr	r1, [r4, #32]
 800a4fa:	4628      	mov	r0, r5
 800a4fc:	47b0      	blx	r6
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	d106      	bne.n	800a512 <__sflush_r+0x62>
 800a504:	6829      	ldr	r1, [r5, #0]
 800a506:	291d      	cmp	r1, #29
 800a508:	d82b      	bhi.n	800a562 <__sflush_r+0xb2>
 800a50a:	4a2a      	ldr	r2, [pc, #168]	@ (800a5b4 <__sflush_r+0x104>)
 800a50c:	40ca      	lsrs	r2, r1
 800a50e:	07d6      	lsls	r6, r2, #31
 800a510:	d527      	bpl.n	800a562 <__sflush_r+0xb2>
 800a512:	2200      	movs	r2, #0
 800a514:	6062      	str	r2, [r4, #4]
 800a516:	04d9      	lsls	r1, r3, #19
 800a518:	6922      	ldr	r2, [r4, #16]
 800a51a:	6022      	str	r2, [r4, #0]
 800a51c:	d504      	bpl.n	800a528 <__sflush_r+0x78>
 800a51e:	1c42      	adds	r2, r0, #1
 800a520:	d101      	bne.n	800a526 <__sflush_r+0x76>
 800a522:	682b      	ldr	r3, [r5, #0]
 800a524:	b903      	cbnz	r3, 800a528 <__sflush_r+0x78>
 800a526:	6560      	str	r0, [r4, #84]	@ 0x54
 800a528:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a52a:	602f      	str	r7, [r5, #0]
 800a52c:	b1b9      	cbz	r1, 800a55e <__sflush_r+0xae>
 800a52e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a532:	4299      	cmp	r1, r3
 800a534:	d002      	beq.n	800a53c <__sflush_r+0x8c>
 800a536:	4628      	mov	r0, r5
 800a538:	f000 fdcc 	bl	800b0d4 <_free_r>
 800a53c:	2300      	movs	r3, #0
 800a53e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a540:	e00d      	b.n	800a55e <__sflush_r+0xae>
 800a542:	2301      	movs	r3, #1
 800a544:	4628      	mov	r0, r5
 800a546:	47b0      	blx	r6
 800a548:	4602      	mov	r2, r0
 800a54a:	1c50      	adds	r0, r2, #1
 800a54c:	d1c9      	bne.n	800a4e2 <__sflush_r+0x32>
 800a54e:	682b      	ldr	r3, [r5, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0c6      	beq.n	800a4e2 <__sflush_r+0x32>
 800a554:	2b1d      	cmp	r3, #29
 800a556:	d001      	beq.n	800a55c <__sflush_r+0xac>
 800a558:	2b16      	cmp	r3, #22
 800a55a:	d11e      	bne.n	800a59a <__sflush_r+0xea>
 800a55c:	602f      	str	r7, [r5, #0]
 800a55e:	2000      	movs	r0, #0
 800a560:	e022      	b.n	800a5a8 <__sflush_r+0xf8>
 800a562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a566:	b21b      	sxth	r3, r3
 800a568:	e01b      	b.n	800a5a2 <__sflush_r+0xf2>
 800a56a:	690f      	ldr	r7, [r1, #16]
 800a56c:	2f00      	cmp	r7, #0
 800a56e:	d0f6      	beq.n	800a55e <__sflush_r+0xae>
 800a570:	0793      	lsls	r3, r2, #30
 800a572:	680e      	ldr	r6, [r1, #0]
 800a574:	bf08      	it	eq
 800a576:	694b      	ldreq	r3, [r1, #20]
 800a578:	600f      	str	r7, [r1, #0]
 800a57a:	bf18      	it	ne
 800a57c:	2300      	movne	r3, #0
 800a57e:	eba6 0807 	sub.w	r8, r6, r7
 800a582:	608b      	str	r3, [r1, #8]
 800a584:	f1b8 0f00 	cmp.w	r8, #0
 800a588:	dde9      	ble.n	800a55e <__sflush_r+0xae>
 800a58a:	6a21      	ldr	r1, [r4, #32]
 800a58c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a58e:	4643      	mov	r3, r8
 800a590:	463a      	mov	r2, r7
 800a592:	4628      	mov	r0, r5
 800a594:	47b0      	blx	r6
 800a596:	2800      	cmp	r0, #0
 800a598:	dc08      	bgt.n	800a5ac <__sflush_r+0xfc>
 800a59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5ac:	4407      	add	r7, r0
 800a5ae:	eba8 0800 	sub.w	r8, r8, r0
 800a5b2:	e7e7      	b.n	800a584 <__sflush_r+0xd4>
 800a5b4:	20400001 	.word	0x20400001

0800a5b8 <_fflush_r>:
 800a5b8:	b538      	push	{r3, r4, r5, lr}
 800a5ba:	690b      	ldr	r3, [r1, #16]
 800a5bc:	4605      	mov	r5, r0
 800a5be:	460c      	mov	r4, r1
 800a5c0:	b913      	cbnz	r3, 800a5c8 <_fflush_r+0x10>
 800a5c2:	2500      	movs	r5, #0
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	b118      	cbz	r0, 800a5d2 <_fflush_r+0x1a>
 800a5ca:	6a03      	ldr	r3, [r0, #32]
 800a5cc:	b90b      	cbnz	r3, 800a5d2 <_fflush_r+0x1a>
 800a5ce:	f7fe fe1f 	bl	8009210 <__sinit>
 800a5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d0f3      	beq.n	800a5c2 <_fflush_r+0xa>
 800a5da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5dc:	07d0      	lsls	r0, r2, #31
 800a5de:	d404      	bmi.n	800a5ea <_fflush_r+0x32>
 800a5e0:	0599      	lsls	r1, r3, #22
 800a5e2:	d402      	bmi.n	800a5ea <_fflush_r+0x32>
 800a5e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5e6:	f7fe feec 	bl	80093c2 <__retarget_lock_acquire_recursive>
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	f7ff ff5f 	bl	800a4b0 <__sflush_r>
 800a5f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5f4:	07da      	lsls	r2, r3, #31
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	d4e4      	bmi.n	800a5c4 <_fflush_r+0xc>
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	059b      	lsls	r3, r3, #22
 800a5fe:	d4e1      	bmi.n	800a5c4 <_fflush_r+0xc>
 800a600:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a602:	f7fe fedf 	bl	80093c4 <__retarget_lock_release_recursive>
 800a606:	e7dd      	b.n	800a5c4 <_fflush_r+0xc>

0800a608 <__malloc_lock>:
 800a608:	4801      	ldr	r0, [pc, #4]	@ (800a610 <__malloc_lock+0x8>)
 800a60a:	f7fe beda 	b.w	80093c2 <__retarget_lock_acquire_recursive>
 800a60e:	bf00      	nop
 800a610:	200015d0 	.word	0x200015d0

0800a614 <__malloc_unlock>:
 800a614:	4801      	ldr	r0, [pc, #4]	@ (800a61c <__malloc_unlock+0x8>)
 800a616:	f7fe bed5 	b.w	80093c4 <__retarget_lock_release_recursive>
 800a61a:	bf00      	nop
 800a61c:	200015d0 	.word	0x200015d0

0800a620 <_Balloc>:
 800a620:	b570      	push	{r4, r5, r6, lr}
 800a622:	69c6      	ldr	r6, [r0, #28]
 800a624:	4604      	mov	r4, r0
 800a626:	460d      	mov	r5, r1
 800a628:	b976      	cbnz	r6, 800a648 <_Balloc+0x28>
 800a62a:	2010      	movs	r0, #16
 800a62c:	f7ff fe96 	bl	800a35c <malloc>
 800a630:	4602      	mov	r2, r0
 800a632:	61e0      	str	r0, [r4, #28]
 800a634:	b920      	cbnz	r0, 800a640 <_Balloc+0x20>
 800a636:	4b18      	ldr	r3, [pc, #96]	@ (800a698 <_Balloc+0x78>)
 800a638:	4818      	ldr	r0, [pc, #96]	@ (800a69c <_Balloc+0x7c>)
 800a63a:	216b      	movs	r1, #107	@ 0x6b
 800a63c:	f7fe fed6 	bl	80093ec <__assert_func>
 800a640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a644:	6006      	str	r6, [r0, #0]
 800a646:	60c6      	str	r6, [r0, #12]
 800a648:	69e6      	ldr	r6, [r4, #28]
 800a64a:	68f3      	ldr	r3, [r6, #12]
 800a64c:	b183      	cbz	r3, 800a670 <_Balloc+0x50>
 800a64e:	69e3      	ldr	r3, [r4, #28]
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a656:	b9b8      	cbnz	r0, 800a688 <_Balloc+0x68>
 800a658:	2101      	movs	r1, #1
 800a65a:	fa01 f605 	lsl.w	r6, r1, r5
 800a65e:	1d72      	adds	r2, r6, #5
 800a660:	0092      	lsls	r2, r2, #2
 800a662:	4620      	mov	r0, r4
 800a664:	f000 fd21 	bl	800b0aa <_calloc_r>
 800a668:	b160      	cbz	r0, 800a684 <_Balloc+0x64>
 800a66a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a66e:	e00e      	b.n	800a68e <_Balloc+0x6e>
 800a670:	2221      	movs	r2, #33	@ 0x21
 800a672:	2104      	movs	r1, #4
 800a674:	4620      	mov	r0, r4
 800a676:	f000 fd18 	bl	800b0aa <_calloc_r>
 800a67a:	69e3      	ldr	r3, [r4, #28]
 800a67c:	60f0      	str	r0, [r6, #12]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1e4      	bne.n	800a64e <_Balloc+0x2e>
 800a684:	2000      	movs	r0, #0
 800a686:	bd70      	pop	{r4, r5, r6, pc}
 800a688:	6802      	ldr	r2, [r0, #0]
 800a68a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a68e:	2300      	movs	r3, #0
 800a690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a694:	e7f7      	b.n	800a686 <_Balloc+0x66>
 800a696:	bf00      	nop
 800a698:	0800b7c8 	.word	0x0800b7c8
 800a69c:	0800b8fa 	.word	0x0800b8fa

0800a6a0 <_Bfree>:
 800a6a0:	b570      	push	{r4, r5, r6, lr}
 800a6a2:	69c6      	ldr	r6, [r0, #28]
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	b976      	cbnz	r6, 800a6c8 <_Bfree+0x28>
 800a6aa:	2010      	movs	r0, #16
 800a6ac:	f7ff fe56 	bl	800a35c <malloc>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	61e8      	str	r0, [r5, #28]
 800a6b4:	b920      	cbnz	r0, 800a6c0 <_Bfree+0x20>
 800a6b6:	4b09      	ldr	r3, [pc, #36]	@ (800a6dc <_Bfree+0x3c>)
 800a6b8:	4809      	ldr	r0, [pc, #36]	@ (800a6e0 <_Bfree+0x40>)
 800a6ba:	218f      	movs	r1, #143	@ 0x8f
 800a6bc:	f7fe fe96 	bl	80093ec <__assert_func>
 800a6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c4:	6006      	str	r6, [r0, #0]
 800a6c6:	60c6      	str	r6, [r0, #12]
 800a6c8:	b13c      	cbz	r4, 800a6da <_Bfree+0x3a>
 800a6ca:	69eb      	ldr	r3, [r5, #28]
 800a6cc:	6862      	ldr	r2, [r4, #4]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6d4:	6021      	str	r1, [r4, #0]
 800a6d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6da:	bd70      	pop	{r4, r5, r6, pc}
 800a6dc:	0800b7c8 	.word	0x0800b7c8
 800a6e0:	0800b8fa 	.word	0x0800b8fa

0800a6e4 <__multadd>:
 800a6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e8:	690d      	ldr	r5, [r1, #16]
 800a6ea:	4607      	mov	r7, r0
 800a6ec:	460c      	mov	r4, r1
 800a6ee:	461e      	mov	r6, r3
 800a6f0:	f101 0c14 	add.w	ip, r1, #20
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	f8dc 3000 	ldr.w	r3, [ip]
 800a6fa:	b299      	uxth	r1, r3
 800a6fc:	fb02 6101 	mla	r1, r2, r1, r6
 800a700:	0c1e      	lsrs	r6, r3, #16
 800a702:	0c0b      	lsrs	r3, r1, #16
 800a704:	fb02 3306 	mla	r3, r2, r6, r3
 800a708:	b289      	uxth	r1, r1
 800a70a:	3001      	adds	r0, #1
 800a70c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a710:	4285      	cmp	r5, r0
 800a712:	f84c 1b04 	str.w	r1, [ip], #4
 800a716:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a71a:	dcec      	bgt.n	800a6f6 <__multadd+0x12>
 800a71c:	b30e      	cbz	r6, 800a762 <__multadd+0x7e>
 800a71e:	68a3      	ldr	r3, [r4, #8]
 800a720:	42ab      	cmp	r3, r5
 800a722:	dc19      	bgt.n	800a758 <__multadd+0x74>
 800a724:	6861      	ldr	r1, [r4, #4]
 800a726:	4638      	mov	r0, r7
 800a728:	3101      	adds	r1, #1
 800a72a:	f7ff ff79 	bl	800a620 <_Balloc>
 800a72e:	4680      	mov	r8, r0
 800a730:	b928      	cbnz	r0, 800a73e <__multadd+0x5a>
 800a732:	4602      	mov	r2, r0
 800a734:	4b0c      	ldr	r3, [pc, #48]	@ (800a768 <__multadd+0x84>)
 800a736:	480d      	ldr	r0, [pc, #52]	@ (800a76c <__multadd+0x88>)
 800a738:	21ba      	movs	r1, #186	@ 0xba
 800a73a:	f7fe fe57 	bl	80093ec <__assert_func>
 800a73e:	6922      	ldr	r2, [r4, #16]
 800a740:	3202      	adds	r2, #2
 800a742:	f104 010c 	add.w	r1, r4, #12
 800a746:	0092      	lsls	r2, r2, #2
 800a748:	300c      	adds	r0, #12
 800a74a:	f7fe fe41 	bl	80093d0 <memcpy>
 800a74e:	4621      	mov	r1, r4
 800a750:	4638      	mov	r0, r7
 800a752:	f7ff ffa5 	bl	800a6a0 <_Bfree>
 800a756:	4644      	mov	r4, r8
 800a758:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a75c:	3501      	adds	r5, #1
 800a75e:	615e      	str	r6, [r3, #20]
 800a760:	6125      	str	r5, [r4, #16]
 800a762:	4620      	mov	r0, r4
 800a764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a768:	0800b8d8 	.word	0x0800b8d8
 800a76c:	0800b8fa 	.word	0x0800b8fa

0800a770 <__hi0bits>:
 800a770:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a774:	4603      	mov	r3, r0
 800a776:	bf36      	itet	cc
 800a778:	0403      	lslcc	r3, r0, #16
 800a77a:	2000      	movcs	r0, #0
 800a77c:	2010      	movcc	r0, #16
 800a77e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a782:	bf3c      	itt	cc
 800a784:	021b      	lslcc	r3, r3, #8
 800a786:	3008      	addcc	r0, #8
 800a788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a78c:	bf3c      	itt	cc
 800a78e:	011b      	lslcc	r3, r3, #4
 800a790:	3004      	addcc	r0, #4
 800a792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a796:	bf3c      	itt	cc
 800a798:	009b      	lslcc	r3, r3, #2
 800a79a:	3002      	addcc	r0, #2
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	db05      	blt.n	800a7ac <__hi0bits+0x3c>
 800a7a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a7a4:	f100 0001 	add.w	r0, r0, #1
 800a7a8:	bf08      	it	eq
 800a7aa:	2020      	moveq	r0, #32
 800a7ac:	4770      	bx	lr

0800a7ae <__lo0bits>:
 800a7ae:	6803      	ldr	r3, [r0, #0]
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	f013 0007 	ands.w	r0, r3, #7
 800a7b6:	d00b      	beq.n	800a7d0 <__lo0bits+0x22>
 800a7b8:	07d9      	lsls	r1, r3, #31
 800a7ba:	d421      	bmi.n	800a800 <__lo0bits+0x52>
 800a7bc:	0798      	lsls	r0, r3, #30
 800a7be:	bf49      	itett	mi
 800a7c0:	085b      	lsrmi	r3, r3, #1
 800a7c2:	089b      	lsrpl	r3, r3, #2
 800a7c4:	2001      	movmi	r0, #1
 800a7c6:	6013      	strmi	r3, [r2, #0]
 800a7c8:	bf5c      	itt	pl
 800a7ca:	6013      	strpl	r3, [r2, #0]
 800a7cc:	2002      	movpl	r0, #2
 800a7ce:	4770      	bx	lr
 800a7d0:	b299      	uxth	r1, r3
 800a7d2:	b909      	cbnz	r1, 800a7d8 <__lo0bits+0x2a>
 800a7d4:	0c1b      	lsrs	r3, r3, #16
 800a7d6:	2010      	movs	r0, #16
 800a7d8:	b2d9      	uxtb	r1, r3
 800a7da:	b909      	cbnz	r1, 800a7e0 <__lo0bits+0x32>
 800a7dc:	3008      	adds	r0, #8
 800a7de:	0a1b      	lsrs	r3, r3, #8
 800a7e0:	0719      	lsls	r1, r3, #28
 800a7e2:	bf04      	itt	eq
 800a7e4:	091b      	lsreq	r3, r3, #4
 800a7e6:	3004      	addeq	r0, #4
 800a7e8:	0799      	lsls	r1, r3, #30
 800a7ea:	bf04      	itt	eq
 800a7ec:	089b      	lsreq	r3, r3, #2
 800a7ee:	3002      	addeq	r0, #2
 800a7f0:	07d9      	lsls	r1, r3, #31
 800a7f2:	d403      	bmi.n	800a7fc <__lo0bits+0x4e>
 800a7f4:	085b      	lsrs	r3, r3, #1
 800a7f6:	f100 0001 	add.w	r0, r0, #1
 800a7fa:	d003      	beq.n	800a804 <__lo0bits+0x56>
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	4770      	bx	lr
 800a800:	2000      	movs	r0, #0
 800a802:	4770      	bx	lr
 800a804:	2020      	movs	r0, #32
 800a806:	4770      	bx	lr

0800a808 <__i2b>:
 800a808:	b510      	push	{r4, lr}
 800a80a:	460c      	mov	r4, r1
 800a80c:	2101      	movs	r1, #1
 800a80e:	f7ff ff07 	bl	800a620 <_Balloc>
 800a812:	4602      	mov	r2, r0
 800a814:	b928      	cbnz	r0, 800a822 <__i2b+0x1a>
 800a816:	4b05      	ldr	r3, [pc, #20]	@ (800a82c <__i2b+0x24>)
 800a818:	4805      	ldr	r0, [pc, #20]	@ (800a830 <__i2b+0x28>)
 800a81a:	f240 1145 	movw	r1, #325	@ 0x145
 800a81e:	f7fe fde5 	bl	80093ec <__assert_func>
 800a822:	2301      	movs	r3, #1
 800a824:	6144      	str	r4, [r0, #20]
 800a826:	6103      	str	r3, [r0, #16]
 800a828:	bd10      	pop	{r4, pc}
 800a82a:	bf00      	nop
 800a82c:	0800b8d8 	.word	0x0800b8d8
 800a830:	0800b8fa 	.word	0x0800b8fa

0800a834 <__multiply>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	4617      	mov	r7, r2
 800a83a:	690a      	ldr	r2, [r1, #16]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	429a      	cmp	r2, r3
 800a840:	bfa8      	it	ge
 800a842:	463b      	movge	r3, r7
 800a844:	4689      	mov	r9, r1
 800a846:	bfa4      	itt	ge
 800a848:	460f      	movge	r7, r1
 800a84a:	4699      	movge	r9, r3
 800a84c:	693d      	ldr	r5, [r7, #16]
 800a84e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	6879      	ldr	r1, [r7, #4]
 800a856:	eb05 060a 	add.w	r6, r5, sl
 800a85a:	42b3      	cmp	r3, r6
 800a85c:	b085      	sub	sp, #20
 800a85e:	bfb8      	it	lt
 800a860:	3101      	addlt	r1, #1
 800a862:	f7ff fedd 	bl	800a620 <_Balloc>
 800a866:	b930      	cbnz	r0, 800a876 <__multiply+0x42>
 800a868:	4602      	mov	r2, r0
 800a86a:	4b41      	ldr	r3, [pc, #260]	@ (800a970 <__multiply+0x13c>)
 800a86c:	4841      	ldr	r0, [pc, #260]	@ (800a974 <__multiply+0x140>)
 800a86e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a872:	f7fe fdbb 	bl	80093ec <__assert_func>
 800a876:	f100 0414 	add.w	r4, r0, #20
 800a87a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a87e:	4623      	mov	r3, r4
 800a880:	2200      	movs	r2, #0
 800a882:	4573      	cmp	r3, lr
 800a884:	d320      	bcc.n	800a8c8 <__multiply+0x94>
 800a886:	f107 0814 	add.w	r8, r7, #20
 800a88a:	f109 0114 	add.w	r1, r9, #20
 800a88e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a892:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a896:	9302      	str	r3, [sp, #8]
 800a898:	1beb      	subs	r3, r5, r7
 800a89a:	3b15      	subs	r3, #21
 800a89c:	f023 0303 	bic.w	r3, r3, #3
 800a8a0:	3304      	adds	r3, #4
 800a8a2:	3715      	adds	r7, #21
 800a8a4:	42bd      	cmp	r5, r7
 800a8a6:	bf38      	it	cc
 800a8a8:	2304      	movcc	r3, #4
 800a8aa:	9301      	str	r3, [sp, #4]
 800a8ac:	9b02      	ldr	r3, [sp, #8]
 800a8ae:	9103      	str	r1, [sp, #12]
 800a8b0:	428b      	cmp	r3, r1
 800a8b2:	d80c      	bhi.n	800a8ce <__multiply+0x9a>
 800a8b4:	2e00      	cmp	r6, #0
 800a8b6:	dd03      	ble.n	800a8c0 <__multiply+0x8c>
 800a8b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d055      	beq.n	800a96c <__multiply+0x138>
 800a8c0:	6106      	str	r6, [r0, #16]
 800a8c2:	b005      	add	sp, #20
 800a8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c8:	f843 2b04 	str.w	r2, [r3], #4
 800a8cc:	e7d9      	b.n	800a882 <__multiply+0x4e>
 800a8ce:	f8b1 a000 	ldrh.w	sl, [r1]
 800a8d2:	f1ba 0f00 	cmp.w	sl, #0
 800a8d6:	d01f      	beq.n	800a918 <__multiply+0xe4>
 800a8d8:	46c4      	mov	ip, r8
 800a8da:	46a1      	mov	r9, r4
 800a8dc:	2700      	movs	r7, #0
 800a8de:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a8e2:	f8d9 3000 	ldr.w	r3, [r9]
 800a8e6:	fa1f fb82 	uxth.w	fp, r2
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	fb0a 330b 	mla	r3, sl, fp, r3
 800a8f0:	443b      	add	r3, r7
 800a8f2:	f8d9 7000 	ldr.w	r7, [r9]
 800a8f6:	0c12      	lsrs	r2, r2, #16
 800a8f8:	0c3f      	lsrs	r7, r7, #16
 800a8fa:	fb0a 7202 	mla	r2, sl, r2, r7
 800a8fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a902:	b29b      	uxth	r3, r3
 800a904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a908:	4565      	cmp	r5, ip
 800a90a:	f849 3b04 	str.w	r3, [r9], #4
 800a90e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a912:	d8e4      	bhi.n	800a8de <__multiply+0xaa>
 800a914:	9b01      	ldr	r3, [sp, #4]
 800a916:	50e7      	str	r7, [r4, r3]
 800a918:	9b03      	ldr	r3, [sp, #12]
 800a91a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a91e:	3104      	adds	r1, #4
 800a920:	f1b9 0f00 	cmp.w	r9, #0
 800a924:	d020      	beq.n	800a968 <__multiply+0x134>
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	4647      	mov	r7, r8
 800a92a:	46a4      	mov	ip, r4
 800a92c:	f04f 0a00 	mov.w	sl, #0
 800a930:	f8b7 b000 	ldrh.w	fp, [r7]
 800a934:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a938:	fb09 220b 	mla	r2, r9, fp, r2
 800a93c:	4452      	add	r2, sl
 800a93e:	b29b      	uxth	r3, r3
 800a940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a944:	f84c 3b04 	str.w	r3, [ip], #4
 800a948:	f857 3b04 	ldr.w	r3, [r7], #4
 800a94c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a950:	f8bc 3000 	ldrh.w	r3, [ip]
 800a954:	fb09 330a 	mla	r3, r9, sl, r3
 800a958:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a95c:	42bd      	cmp	r5, r7
 800a95e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a962:	d8e5      	bhi.n	800a930 <__multiply+0xfc>
 800a964:	9a01      	ldr	r2, [sp, #4]
 800a966:	50a3      	str	r3, [r4, r2]
 800a968:	3404      	adds	r4, #4
 800a96a:	e79f      	b.n	800a8ac <__multiply+0x78>
 800a96c:	3e01      	subs	r6, #1
 800a96e:	e7a1      	b.n	800a8b4 <__multiply+0x80>
 800a970:	0800b8d8 	.word	0x0800b8d8
 800a974:	0800b8fa 	.word	0x0800b8fa

0800a978 <__pow5mult>:
 800a978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a97c:	4615      	mov	r5, r2
 800a97e:	f012 0203 	ands.w	r2, r2, #3
 800a982:	4607      	mov	r7, r0
 800a984:	460e      	mov	r6, r1
 800a986:	d007      	beq.n	800a998 <__pow5mult+0x20>
 800a988:	4c25      	ldr	r4, [pc, #148]	@ (800aa20 <__pow5mult+0xa8>)
 800a98a:	3a01      	subs	r2, #1
 800a98c:	2300      	movs	r3, #0
 800a98e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a992:	f7ff fea7 	bl	800a6e4 <__multadd>
 800a996:	4606      	mov	r6, r0
 800a998:	10ad      	asrs	r5, r5, #2
 800a99a:	d03d      	beq.n	800aa18 <__pow5mult+0xa0>
 800a99c:	69fc      	ldr	r4, [r7, #28]
 800a99e:	b97c      	cbnz	r4, 800a9c0 <__pow5mult+0x48>
 800a9a0:	2010      	movs	r0, #16
 800a9a2:	f7ff fcdb 	bl	800a35c <malloc>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	61f8      	str	r0, [r7, #28]
 800a9aa:	b928      	cbnz	r0, 800a9b8 <__pow5mult+0x40>
 800a9ac:	4b1d      	ldr	r3, [pc, #116]	@ (800aa24 <__pow5mult+0xac>)
 800a9ae:	481e      	ldr	r0, [pc, #120]	@ (800aa28 <__pow5mult+0xb0>)
 800a9b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a9b4:	f7fe fd1a 	bl	80093ec <__assert_func>
 800a9b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9bc:	6004      	str	r4, [r0, #0]
 800a9be:	60c4      	str	r4, [r0, #12]
 800a9c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a9c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9c8:	b94c      	cbnz	r4, 800a9de <__pow5mult+0x66>
 800a9ca:	f240 2171 	movw	r1, #625	@ 0x271
 800a9ce:	4638      	mov	r0, r7
 800a9d0:	f7ff ff1a 	bl	800a808 <__i2b>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9da:	4604      	mov	r4, r0
 800a9dc:	6003      	str	r3, [r0, #0]
 800a9de:	f04f 0900 	mov.w	r9, #0
 800a9e2:	07eb      	lsls	r3, r5, #31
 800a9e4:	d50a      	bpl.n	800a9fc <__pow5mult+0x84>
 800a9e6:	4631      	mov	r1, r6
 800a9e8:	4622      	mov	r2, r4
 800a9ea:	4638      	mov	r0, r7
 800a9ec:	f7ff ff22 	bl	800a834 <__multiply>
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	4680      	mov	r8, r0
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f7ff fe53 	bl	800a6a0 <_Bfree>
 800a9fa:	4646      	mov	r6, r8
 800a9fc:	106d      	asrs	r5, r5, #1
 800a9fe:	d00b      	beq.n	800aa18 <__pow5mult+0xa0>
 800aa00:	6820      	ldr	r0, [r4, #0]
 800aa02:	b938      	cbnz	r0, 800aa14 <__pow5mult+0x9c>
 800aa04:	4622      	mov	r2, r4
 800aa06:	4621      	mov	r1, r4
 800aa08:	4638      	mov	r0, r7
 800aa0a:	f7ff ff13 	bl	800a834 <__multiply>
 800aa0e:	6020      	str	r0, [r4, #0]
 800aa10:	f8c0 9000 	str.w	r9, [r0]
 800aa14:	4604      	mov	r4, r0
 800aa16:	e7e4      	b.n	800a9e2 <__pow5mult+0x6a>
 800aa18:	4630      	mov	r0, r6
 800aa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1e:	bf00      	nop
 800aa20:	0800b960 	.word	0x0800b960
 800aa24:	0800b7c8 	.word	0x0800b7c8
 800aa28:	0800b8fa 	.word	0x0800b8fa

0800aa2c <__lshift>:
 800aa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa30:	460c      	mov	r4, r1
 800aa32:	6849      	ldr	r1, [r1, #4]
 800aa34:	6923      	ldr	r3, [r4, #16]
 800aa36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	4691      	mov	r9, r2
 800aa40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa44:	f108 0601 	add.w	r6, r8, #1
 800aa48:	42b3      	cmp	r3, r6
 800aa4a:	db0b      	blt.n	800aa64 <__lshift+0x38>
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	f7ff fde7 	bl	800a620 <_Balloc>
 800aa52:	4605      	mov	r5, r0
 800aa54:	b948      	cbnz	r0, 800aa6a <__lshift+0x3e>
 800aa56:	4602      	mov	r2, r0
 800aa58:	4b28      	ldr	r3, [pc, #160]	@ (800aafc <__lshift+0xd0>)
 800aa5a:	4829      	ldr	r0, [pc, #164]	@ (800ab00 <__lshift+0xd4>)
 800aa5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa60:	f7fe fcc4 	bl	80093ec <__assert_func>
 800aa64:	3101      	adds	r1, #1
 800aa66:	005b      	lsls	r3, r3, #1
 800aa68:	e7ee      	b.n	800aa48 <__lshift+0x1c>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	f100 0114 	add.w	r1, r0, #20
 800aa70:	f100 0210 	add.w	r2, r0, #16
 800aa74:	4618      	mov	r0, r3
 800aa76:	4553      	cmp	r3, sl
 800aa78:	db33      	blt.n	800aae2 <__lshift+0xb6>
 800aa7a:	6920      	ldr	r0, [r4, #16]
 800aa7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa80:	f104 0314 	add.w	r3, r4, #20
 800aa84:	f019 091f 	ands.w	r9, r9, #31
 800aa88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa90:	d02b      	beq.n	800aaea <__lshift+0xbe>
 800aa92:	f1c9 0e20 	rsb	lr, r9, #32
 800aa96:	468a      	mov	sl, r1
 800aa98:	2200      	movs	r2, #0
 800aa9a:	6818      	ldr	r0, [r3, #0]
 800aa9c:	fa00 f009 	lsl.w	r0, r0, r9
 800aaa0:	4310      	orrs	r0, r2
 800aaa2:	f84a 0b04 	str.w	r0, [sl], #4
 800aaa6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaaa:	459c      	cmp	ip, r3
 800aaac:	fa22 f20e 	lsr.w	r2, r2, lr
 800aab0:	d8f3      	bhi.n	800aa9a <__lshift+0x6e>
 800aab2:	ebac 0304 	sub.w	r3, ip, r4
 800aab6:	3b15      	subs	r3, #21
 800aab8:	f023 0303 	bic.w	r3, r3, #3
 800aabc:	3304      	adds	r3, #4
 800aabe:	f104 0015 	add.w	r0, r4, #21
 800aac2:	4560      	cmp	r0, ip
 800aac4:	bf88      	it	hi
 800aac6:	2304      	movhi	r3, #4
 800aac8:	50ca      	str	r2, [r1, r3]
 800aaca:	b10a      	cbz	r2, 800aad0 <__lshift+0xa4>
 800aacc:	f108 0602 	add.w	r6, r8, #2
 800aad0:	3e01      	subs	r6, #1
 800aad2:	4638      	mov	r0, r7
 800aad4:	612e      	str	r6, [r5, #16]
 800aad6:	4621      	mov	r1, r4
 800aad8:	f7ff fde2 	bl	800a6a0 <_Bfree>
 800aadc:	4628      	mov	r0, r5
 800aade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aae6:	3301      	adds	r3, #1
 800aae8:	e7c5      	b.n	800aa76 <__lshift+0x4a>
 800aaea:	3904      	subs	r1, #4
 800aaec:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf0:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaf4:	459c      	cmp	ip, r3
 800aaf6:	d8f9      	bhi.n	800aaec <__lshift+0xc0>
 800aaf8:	e7ea      	b.n	800aad0 <__lshift+0xa4>
 800aafa:	bf00      	nop
 800aafc:	0800b8d8 	.word	0x0800b8d8
 800ab00:	0800b8fa 	.word	0x0800b8fa

0800ab04 <__mcmp>:
 800ab04:	690a      	ldr	r2, [r1, #16]
 800ab06:	4603      	mov	r3, r0
 800ab08:	6900      	ldr	r0, [r0, #16]
 800ab0a:	1a80      	subs	r0, r0, r2
 800ab0c:	b530      	push	{r4, r5, lr}
 800ab0e:	d10e      	bne.n	800ab2e <__mcmp+0x2a>
 800ab10:	3314      	adds	r3, #20
 800ab12:	3114      	adds	r1, #20
 800ab14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab24:	4295      	cmp	r5, r2
 800ab26:	d003      	beq.n	800ab30 <__mcmp+0x2c>
 800ab28:	d205      	bcs.n	800ab36 <__mcmp+0x32>
 800ab2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab2e:	bd30      	pop	{r4, r5, pc}
 800ab30:	42a3      	cmp	r3, r4
 800ab32:	d3f3      	bcc.n	800ab1c <__mcmp+0x18>
 800ab34:	e7fb      	b.n	800ab2e <__mcmp+0x2a>
 800ab36:	2001      	movs	r0, #1
 800ab38:	e7f9      	b.n	800ab2e <__mcmp+0x2a>
	...

0800ab3c <__mdiff>:
 800ab3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab40:	4689      	mov	r9, r1
 800ab42:	4606      	mov	r6, r0
 800ab44:	4611      	mov	r1, r2
 800ab46:	4648      	mov	r0, r9
 800ab48:	4614      	mov	r4, r2
 800ab4a:	f7ff ffdb 	bl	800ab04 <__mcmp>
 800ab4e:	1e05      	subs	r5, r0, #0
 800ab50:	d112      	bne.n	800ab78 <__mdiff+0x3c>
 800ab52:	4629      	mov	r1, r5
 800ab54:	4630      	mov	r0, r6
 800ab56:	f7ff fd63 	bl	800a620 <_Balloc>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	b928      	cbnz	r0, 800ab6a <__mdiff+0x2e>
 800ab5e:	4b3f      	ldr	r3, [pc, #252]	@ (800ac5c <__mdiff+0x120>)
 800ab60:	f240 2137 	movw	r1, #567	@ 0x237
 800ab64:	483e      	ldr	r0, [pc, #248]	@ (800ac60 <__mdiff+0x124>)
 800ab66:	f7fe fc41 	bl	80093ec <__assert_func>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab70:	4610      	mov	r0, r2
 800ab72:	b003      	add	sp, #12
 800ab74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab78:	bfbc      	itt	lt
 800ab7a:	464b      	movlt	r3, r9
 800ab7c:	46a1      	movlt	r9, r4
 800ab7e:	4630      	mov	r0, r6
 800ab80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ab84:	bfba      	itte	lt
 800ab86:	461c      	movlt	r4, r3
 800ab88:	2501      	movlt	r5, #1
 800ab8a:	2500      	movge	r5, #0
 800ab8c:	f7ff fd48 	bl	800a620 <_Balloc>
 800ab90:	4602      	mov	r2, r0
 800ab92:	b918      	cbnz	r0, 800ab9c <__mdiff+0x60>
 800ab94:	4b31      	ldr	r3, [pc, #196]	@ (800ac5c <__mdiff+0x120>)
 800ab96:	f240 2145 	movw	r1, #581	@ 0x245
 800ab9a:	e7e3      	b.n	800ab64 <__mdiff+0x28>
 800ab9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aba0:	6926      	ldr	r6, [r4, #16]
 800aba2:	60c5      	str	r5, [r0, #12]
 800aba4:	f109 0310 	add.w	r3, r9, #16
 800aba8:	f109 0514 	add.w	r5, r9, #20
 800abac:	f104 0e14 	add.w	lr, r4, #20
 800abb0:	f100 0b14 	add.w	fp, r0, #20
 800abb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800abb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800abbc:	9301      	str	r3, [sp, #4]
 800abbe:	46d9      	mov	r9, fp
 800abc0:	f04f 0c00 	mov.w	ip, #0
 800abc4:	9b01      	ldr	r3, [sp, #4]
 800abc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800abca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800abce:	9301      	str	r3, [sp, #4]
 800abd0:	fa1f f38a 	uxth.w	r3, sl
 800abd4:	4619      	mov	r1, r3
 800abd6:	b283      	uxth	r3, r0
 800abd8:	1acb      	subs	r3, r1, r3
 800abda:	0c00      	lsrs	r0, r0, #16
 800abdc:	4463      	add	r3, ip
 800abde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800abe2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800abec:	4576      	cmp	r6, lr
 800abee:	f849 3b04 	str.w	r3, [r9], #4
 800abf2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800abf6:	d8e5      	bhi.n	800abc4 <__mdiff+0x88>
 800abf8:	1b33      	subs	r3, r6, r4
 800abfa:	3b15      	subs	r3, #21
 800abfc:	f023 0303 	bic.w	r3, r3, #3
 800ac00:	3415      	adds	r4, #21
 800ac02:	3304      	adds	r3, #4
 800ac04:	42a6      	cmp	r6, r4
 800ac06:	bf38      	it	cc
 800ac08:	2304      	movcc	r3, #4
 800ac0a:	441d      	add	r5, r3
 800ac0c:	445b      	add	r3, fp
 800ac0e:	461e      	mov	r6, r3
 800ac10:	462c      	mov	r4, r5
 800ac12:	4544      	cmp	r4, r8
 800ac14:	d30e      	bcc.n	800ac34 <__mdiff+0xf8>
 800ac16:	f108 0103 	add.w	r1, r8, #3
 800ac1a:	1b49      	subs	r1, r1, r5
 800ac1c:	f021 0103 	bic.w	r1, r1, #3
 800ac20:	3d03      	subs	r5, #3
 800ac22:	45a8      	cmp	r8, r5
 800ac24:	bf38      	it	cc
 800ac26:	2100      	movcc	r1, #0
 800ac28:	440b      	add	r3, r1
 800ac2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac2e:	b191      	cbz	r1, 800ac56 <__mdiff+0x11a>
 800ac30:	6117      	str	r7, [r2, #16]
 800ac32:	e79d      	b.n	800ab70 <__mdiff+0x34>
 800ac34:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac38:	46e6      	mov	lr, ip
 800ac3a:	0c08      	lsrs	r0, r1, #16
 800ac3c:	fa1c fc81 	uxtah	ip, ip, r1
 800ac40:	4471      	add	r1, lr
 800ac42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ac46:	b289      	uxth	r1, r1
 800ac48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac4c:	f846 1b04 	str.w	r1, [r6], #4
 800ac50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac54:	e7dd      	b.n	800ac12 <__mdiff+0xd6>
 800ac56:	3f01      	subs	r7, #1
 800ac58:	e7e7      	b.n	800ac2a <__mdiff+0xee>
 800ac5a:	bf00      	nop
 800ac5c:	0800b8d8 	.word	0x0800b8d8
 800ac60:	0800b8fa 	.word	0x0800b8fa

0800ac64 <__d2b>:
 800ac64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac68:	460f      	mov	r7, r1
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	ec59 8b10 	vmov	r8, r9, d0
 800ac70:	4616      	mov	r6, r2
 800ac72:	f7ff fcd5 	bl	800a620 <_Balloc>
 800ac76:	4604      	mov	r4, r0
 800ac78:	b930      	cbnz	r0, 800ac88 <__d2b+0x24>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	4b23      	ldr	r3, [pc, #140]	@ (800ad0c <__d2b+0xa8>)
 800ac7e:	4824      	ldr	r0, [pc, #144]	@ (800ad10 <__d2b+0xac>)
 800ac80:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac84:	f7fe fbb2 	bl	80093ec <__assert_func>
 800ac88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac90:	b10d      	cbz	r5, 800ac96 <__d2b+0x32>
 800ac92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac96:	9301      	str	r3, [sp, #4]
 800ac98:	f1b8 0300 	subs.w	r3, r8, #0
 800ac9c:	d023      	beq.n	800ace6 <__d2b+0x82>
 800ac9e:	4668      	mov	r0, sp
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	f7ff fd84 	bl	800a7ae <__lo0bits>
 800aca6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acaa:	b1d0      	cbz	r0, 800ace2 <__d2b+0x7e>
 800acac:	f1c0 0320 	rsb	r3, r0, #32
 800acb0:	fa02 f303 	lsl.w	r3, r2, r3
 800acb4:	430b      	orrs	r3, r1
 800acb6:	40c2      	lsrs	r2, r0
 800acb8:	6163      	str	r3, [r4, #20]
 800acba:	9201      	str	r2, [sp, #4]
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	61a3      	str	r3, [r4, #24]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	bf0c      	ite	eq
 800acc4:	2201      	moveq	r2, #1
 800acc6:	2202      	movne	r2, #2
 800acc8:	6122      	str	r2, [r4, #16]
 800acca:	b1a5      	cbz	r5, 800acf6 <__d2b+0x92>
 800accc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800acd0:	4405      	add	r5, r0
 800acd2:	603d      	str	r5, [r7, #0]
 800acd4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800acd8:	6030      	str	r0, [r6, #0]
 800acda:	4620      	mov	r0, r4
 800acdc:	b003      	add	sp, #12
 800acde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ace2:	6161      	str	r1, [r4, #20]
 800ace4:	e7ea      	b.n	800acbc <__d2b+0x58>
 800ace6:	a801      	add	r0, sp, #4
 800ace8:	f7ff fd61 	bl	800a7ae <__lo0bits>
 800acec:	9b01      	ldr	r3, [sp, #4]
 800acee:	6163      	str	r3, [r4, #20]
 800acf0:	3020      	adds	r0, #32
 800acf2:	2201      	movs	r2, #1
 800acf4:	e7e8      	b.n	800acc8 <__d2b+0x64>
 800acf6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acfa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800acfe:	6038      	str	r0, [r7, #0]
 800ad00:	6918      	ldr	r0, [r3, #16]
 800ad02:	f7ff fd35 	bl	800a770 <__hi0bits>
 800ad06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad0a:	e7e5      	b.n	800acd8 <__d2b+0x74>
 800ad0c:	0800b8d8 	.word	0x0800b8d8
 800ad10:	0800b8fa 	.word	0x0800b8fa

0800ad14 <__sread>:
 800ad14:	b510      	push	{r4, lr}
 800ad16:	460c      	mov	r4, r1
 800ad18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad1c:	f000 f968 	bl	800aff0 <_read_r>
 800ad20:	2800      	cmp	r0, #0
 800ad22:	bfab      	itete	ge
 800ad24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad26:	89a3      	ldrhlt	r3, [r4, #12]
 800ad28:	181b      	addge	r3, r3, r0
 800ad2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad2e:	bfac      	ite	ge
 800ad30:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad32:	81a3      	strhlt	r3, [r4, #12]
 800ad34:	bd10      	pop	{r4, pc}

0800ad36 <__swrite>:
 800ad36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad3a:	461f      	mov	r7, r3
 800ad3c:	898b      	ldrh	r3, [r1, #12]
 800ad3e:	05db      	lsls	r3, r3, #23
 800ad40:	4605      	mov	r5, r0
 800ad42:	460c      	mov	r4, r1
 800ad44:	4616      	mov	r6, r2
 800ad46:	d505      	bpl.n	800ad54 <__swrite+0x1e>
 800ad48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f000 f93c 	bl	800afcc <_lseek_r>
 800ad54:	89a3      	ldrh	r3, [r4, #12]
 800ad56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad5e:	81a3      	strh	r3, [r4, #12]
 800ad60:	4632      	mov	r2, r6
 800ad62:	463b      	mov	r3, r7
 800ad64:	4628      	mov	r0, r5
 800ad66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad6a:	f000 b963 	b.w	800b034 <_write_r>

0800ad6e <__sseek>:
 800ad6e:	b510      	push	{r4, lr}
 800ad70:	460c      	mov	r4, r1
 800ad72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad76:	f000 f929 	bl	800afcc <_lseek_r>
 800ad7a:	1c43      	adds	r3, r0, #1
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	bf15      	itete	ne
 800ad80:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad8a:	81a3      	strheq	r3, [r4, #12]
 800ad8c:	bf18      	it	ne
 800ad8e:	81a3      	strhne	r3, [r4, #12]
 800ad90:	bd10      	pop	{r4, pc}

0800ad92 <__sclose>:
 800ad92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad96:	f000 b95f 	b.w	800b058 <_close_r>
	...

0800ad9c <fiprintf>:
 800ad9c:	b40e      	push	{r1, r2, r3}
 800ad9e:	b503      	push	{r0, r1, lr}
 800ada0:	4601      	mov	r1, r0
 800ada2:	ab03      	add	r3, sp, #12
 800ada4:	4805      	ldr	r0, [pc, #20]	@ (800adbc <fiprintf+0x20>)
 800ada6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adaa:	6800      	ldr	r0, [r0, #0]
 800adac:	9301      	str	r3, [sp, #4]
 800adae:	f7ff f9bd 	bl	800a12c <_vfiprintf_r>
 800adb2:	b002      	add	sp, #8
 800adb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adb8:	b003      	add	sp, #12
 800adba:	4770      	bx	lr
 800adbc:	200000e0 	.word	0x200000e0

0800adc0 <__swbuf_r>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	460e      	mov	r6, r1
 800adc4:	4614      	mov	r4, r2
 800adc6:	4605      	mov	r5, r0
 800adc8:	b118      	cbz	r0, 800add2 <__swbuf_r+0x12>
 800adca:	6a03      	ldr	r3, [r0, #32]
 800adcc:	b90b      	cbnz	r3, 800add2 <__swbuf_r+0x12>
 800adce:	f7fe fa1f 	bl	8009210 <__sinit>
 800add2:	69a3      	ldr	r3, [r4, #24]
 800add4:	60a3      	str	r3, [r4, #8]
 800add6:	89a3      	ldrh	r3, [r4, #12]
 800add8:	071a      	lsls	r2, r3, #28
 800adda:	d501      	bpl.n	800ade0 <__swbuf_r+0x20>
 800addc:	6923      	ldr	r3, [r4, #16]
 800adde:	b943      	cbnz	r3, 800adf2 <__swbuf_r+0x32>
 800ade0:	4621      	mov	r1, r4
 800ade2:	4628      	mov	r0, r5
 800ade4:	f000 f82a 	bl	800ae3c <__swsetup_r>
 800ade8:	b118      	cbz	r0, 800adf2 <__swbuf_r+0x32>
 800adea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800adee:	4638      	mov	r0, r7
 800adf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	6922      	ldr	r2, [r4, #16]
 800adf6:	1a98      	subs	r0, r3, r2
 800adf8:	6963      	ldr	r3, [r4, #20]
 800adfa:	b2f6      	uxtb	r6, r6
 800adfc:	4283      	cmp	r3, r0
 800adfe:	4637      	mov	r7, r6
 800ae00:	dc05      	bgt.n	800ae0e <__swbuf_r+0x4e>
 800ae02:	4621      	mov	r1, r4
 800ae04:	4628      	mov	r0, r5
 800ae06:	f7ff fbd7 	bl	800a5b8 <_fflush_r>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d1ed      	bne.n	800adea <__swbuf_r+0x2a>
 800ae0e:	68a3      	ldr	r3, [r4, #8]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	60a3      	str	r3, [r4, #8]
 800ae14:	6823      	ldr	r3, [r4, #0]
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	6022      	str	r2, [r4, #0]
 800ae1a:	701e      	strb	r6, [r3, #0]
 800ae1c:	6962      	ldr	r2, [r4, #20]
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d004      	beq.n	800ae2e <__swbuf_r+0x6e>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	07db      	lsls	r3, r3, #31
 800ae28:	d5e1      	bpl.n	800adee <__swbuf_r+0x2e>
 800ae2a:	2e0a      	cmp	r6, #10
 800ae2c:	d1df      	bne.n	800adee <__swbuf_r+0x2e>
 800ae2e:	4621      	mov	r1, r4
 800ae30:	4628      	mov	r0, r5
 800ae32:	f7ff fbc1 	bl	800a5b8 <_fflush_r>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d0d9      	beq.n	800adee <__swbuf_r+0x2e>
 800ae3a:	e7d6      	b.n	800adea <__swbuf_r+0x2a>

0800ae3c <__swsetup_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4b29      	ldr	r3, [pc, #164]	@ (800aee4 <__swsetup_r+0xa8>)
 800ae40:	4605      	mov	r5, r0
 800ae42:	6818      	ldr	r0, [r3, #0]
 800ae44:	460c      	mov	r4, r1
 800ae46:	b118      	cbz	r0, 800ae50 <__swsetup_r+0x14>
 800ae48:	6a03      	ldr	r3, [r0, #32]
 800ae4a:	b90b      	cbnz	r3, 800ae50 <__swsetup_r+0x14>
 800ae4c:	f7fe f9e0 	bl	8009210 <__sinit>
 800ae50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae54:	0719      	lsls	r1, r3, #28
 800ae56:	d422      	bmi.n	800ae9e <__swsetup_r+0x62>
 800ae58:	06da      	lsls	r2, r3, #27
 800ae5a:	d407      	bmi.n	800ae6c <__swsetup_r+0x30>
 800ae5c:	2209      	movs	r2, #9
 800ae5e:	602a      	str	r2, [r5, #0]
 800ae60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae64:	81a3      	strh	r3, [r4, #12]
 800ae66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae6a:	e033      	b.n	800aed4 <__swsetup_r+0x98>
 800ae6c:	0758      	lsls	r0, r3, #29
 800ae6e:	d512      	bpl.n	800ae96 <__swsetup_r+0x5a>
 800ae70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae72:	b141      	cbz	r1, 800ae86 <__swsetup_r+0x4a>
 800ae74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae78:	4299      	cmp	r1, r3
 800ae7a:	d002      	beq.n	800ae82 <__swsetup_r+0x46>
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	f000 f929 	bl	800b0d4 <_free_r>
 800ae82:	2300      	movs	r3, #0
 800ae84:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae8c:	81a3      	strh	r3, [r4, #12]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	6063      	str	r3, [r4, #4]
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	f043 0308 	orr.w	r3, r3, #8
 800ae9c:	81a3      	strh	r3, [r4, #12]
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	b94b      	cbnz	r3, 800aeb6 <__swsetup_r+0x7a>
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeac:	d003      	beq.n	800aeb6 <__swsetup_r+0x7a>
 800aeae:	4621      	mov	r1, r4
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f000 f83f 	bl	800af34 <__smakebuf_r>
 800aeb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeba:	f013 0201 	ands.w	r2, r3, #1
 800aebe:	d00a      	beq.n	800aed6 <__swsetup_r+0x9a>
 800aec0:	2200      	movs	r2, #0
 800aec2:	60a2      	str	r2, [r4, #8]
 800aec4:	6962      	ldr	r2, [r4, #20]
 800aec6:	4252      	negs	r2, r2
 800aec8:	61a2      	str	r2, [r4, #24]
 800aeca:	6922      	ldr	r2, [r4, #16]
 800aecc:	b942      	cbnz	r2, 800aee0 <__swsetup_r+0xa4>
 800aece:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aed2:	d1c5      	bne.n	800ae60 <__swsetup_r+0x24>
 800aed4:	bd38      	pop	{r3, r4, r5, pc}
 800aed6:	0799      	lsls	r1, r3, #30
 800aed8:	bf58      	it	pl
 800aeda:	6962      	ldrpl	r2, [r4, #20]
 800aedc:	60a2      	str	r2, [r4, #8]
 800aede:	e7f4      	b.n	800aeca <__swsetup_r+0x8e>
 800aee0:	2000      	movs	r0, #0
 800aee2:	e7f7      	b.n	800aed4 <__swsetup_r+0x98>
 800aee4:	200000e0 	.word	0x200000e0

0800aee8 <__swhatbuf_r>:
 800aee8:	b570      	push	{r4, r5, r6, lr}
 800aeea:	460c      	mov	r4, r1
 800aeec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef0:	2900      	cmp	r1, #0
 800aef2:	b096      	sub	sp, #88	@ 0x58
 800aef4:	4615      	mov	r5, r2
 800aef6:	461e      	mov	r6, r3
 800aef8:	da0d      	bge.n	800af16 <__swhatbuf_r+0x2e>
 800aefa:	89a3      	ldrh	r3, [r4, #12]
 800aefc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af00:	f04f 0100 	mov.w	r1, #0
 800af04:	bf14      	ite	ne
 800af06:	2340      	movne	r3, #64	@ 0x40
 800af08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af0c:	2000      	movs	r0, #0
 800af0e:	6031      	str	r1, [r6, #0]
 800af10:	602b      	str	r3, [r5, #0]
 800af12:	b016      	add	sp, #88	@ 0x58
 800af14:	bd70      	pop	{r4, r5, r6, pc}
 800af16:	466a      	mov	r2, sp
 800af18:	f000 f8ae 	bl	800b078 <_fstat_r>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	dbec      	blt.n	800aefa <__swhatbuf_r+0x12>
 800af20:	9901      	ldr	r1, [sp, #4]
 800af22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af2a:	4259      	negs	r1, r3
 800af2c:	4159      	adcs	r1, r3
 800af2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af32:	e7eb      	b.n	800af0c <__swhatbuf_r+0x24>

0800af34 <__smakebuf_r>:
 800af34:	898b      	ldrh	r3, [r1, #12]
 800af36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af38:	079d      	lsls	r5, r3, #30
 800af3a:	4606      	mov	r6, r0
 800af3c:	460c      	mov	r4, r1
 800af3e:	d507      	bpl.n	800af50 <__smakebuf_r+0x1c>
 800af40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	6123      	str	r3, [r4, #16]
 800af48:	2301      	movs	r3, #1
 800af4a:	6163      	str	r3, [r4, #20]
 800af4c:	b003      	add	sp, #12
 800af4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af50:	ab01      	add	r3, sp, #4
 800af52:	466a      	mov	r2, sp
 800af54:	f7ff ffc8 	bl	800aee8 <__swhatbuf_r>
 800af58:	9f00      	ldr	r7, [sp, #0]
 800af5a:	4605      	mov	r5, r0
 800af5c:	4639      	mov	r1, r7
 800af5e:	4630      	mov	r0, r6
 800af60:	f7ff fa26 	bl	800a3b0 <_malloc_r>
 800af64:	b948      	cbnz	r0, 800af7a <__smakebuf_r+0x46>
 800af66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af6a:	059a      	lsls	r2, r3, #22
 800af6c:	d4ee      	bmi.n	800af4c <__smakebuf_r+0x18>
 800af6e:	f023 0303 	bic.w	r3, r3, #3
 800af72:	f043 0302 	orr.w	r3, r3, #2
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	e7e2      	b.n	800af40 <__smakebuf_r+0xc>
 800af7a:	89a3      	ldrh	r3, [r4, #12]
 800af7c:	6020      	str	r0, [r4, #0]
 800af7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af82:	81a3      	strh	r3, [r4, #12]
 800af84:	9b01      	ldr	r3, [sp, #4]
 800af86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af8a:	b15b      	cbz	r3, 800afa4 <__smakebuf_r+0x70>
 800af8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af90:	4630      	mov	r0, r6
 800af92:	f000 f80b 	bl	800afac <_isatty_r>
 800af96:	b128      	cbz	r0, 800afa4 <__smakebuf_r+0x70>
 800af98:	89a3      	ldrh	r3, [r4, #12]
 800af9a:	f023 0303 	bic.w	r3, r3, #3
 800af9e:	f043 0301 	orr.w	r3, r3, #1
 800afa2:	81a3      	strh	r3, [r4, #12]
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	431d      	orrs	r5, r3
 800afa8:	81a5      	strh	r5, [r4, #12]
 800afaa:	e7cf      	b.n	800af4c <__smakebuf_r+0x18>

0800afac <_isatty_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4d06      	ldr	r5, [pc, #24]	@ (800afc8 <_isatty_r+0x1c>)
 800afb0:	2300      	movs	r3, #0
 800afb2:	4604      	mov	r4, r0
 800afb4:	4608      	mov	r0, r1
 800afb6:	602b      	str	r3, [r5, #0]
 800afb8:	f7f8 f8e5 	bl	8003186 <_isatty>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d102      	bne.n	800afc6 <_isatty_r+0x1a>
 800afc0:	682b      	ldr	r3, [r5, #0]
 800afc2:	b103      	cbz	r3, 800afc6 <_isatty_r+0x1a>
 800afc4:	6023      	str	r3, [r4, #0]
 800afc6:	bd38      	pop	{r3, r4, r5, pc}
 800afc8:	200015dc 	.word	0x200015dc

0800afcc <_lseek_r>:
 800afcc:	b538      	push	{r3, r4, r5, lr}
 800afce:	4d07      	ldr	r5, [pc, #28]	@ (800afec <_lseek_r+0x20>)
 800afd0:	4604      	mov	r4, r0
 800afd2:	4608      	mov	r0, r1
 800afd4:	4611      	mov	r1, r2
 800afd6:	2200      	movs	r2, #0
 800afd8:	602a      	str	r2, [r5, #0]
 800afda:	461a      	mov	r2, r3
 800afdc:	f7f8 f8de 	bl	800319c <_lseek>
 800afe0:	1c43      	adds	r3, r0, #1
 800afe2:	d102      	bne.n	800afea <_lseek_r+0x1e>
 800afe4:	682b      	ldr	r3, [r5, #0]
 800afe6:	b103      	cbz	r3, 800afea <_lseek_r+0x1e>
 800afe8:	6023      	str	r3, [r4, #0]
 800afea:	bd38      	pop	{r3, r4, r5, pc}
 800afec:	200015dc 	.word	0x200015dc

0800aff0 <_read_r>:
 800aff0:	b538      	push	{r3, r4, r5, lr}
 800aff2:	4d07      	ldr	r5, [pc, #28]	@ (800b010 <_read_r+0x20>)
 800aff4:	4604      	mov	r4, r0
 800aff6:	4608      	mov	r0, r1
 800aff8:	4611      	mov	r1, r2
 800affa:	2200      	movs	r2, #0
 800affc:	602a      	str	r2, [r5, #0]
 800affe:	461a      	mov	r2, r3
 800b000:	f7f8 f888 	bl	8003114 <_read>
 800b004:	1c43      	adds	r3, r0, #1
 800b006:	d102      	bne.n	800b00e <_read_r+0x1e>
 800b008:	682b      	ldr	r3, [r5, #0]
 800b00a:	b103      	cbz	r3, 800b00e <_read_r+0x1e>
 800b00c:	6023      	str	r3, [r4, #0]
 800b00e:	bd38      	pop	{r3, r4, r5, pc}
 800b010:	200015dc 	.word	0x200015dc

0800b014 <_sbrk_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4d06      	ldr	r5, [pc, #24]	@ (800b030 <_sbrk_r+0x1c>)
 800b018:	2300      	movs	r3, #0
 800b01a:	4604      	mov	r4, r0
 800b01c:	4608      	mov	r0, r1
 800b01e:	602b      	str	r3, [r5, #0]
 800b020:	f7f8 f8ca 	bl	80031b8 <_sbrk>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d102      	bne.n	800b02e <_sbrk_r+0x1a>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	b103      	cbz	r3, 800b02e <_sbrk_r+0x1a>
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	200015dc 	.word	0x200015dc

0800b034 <_write_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4d07      	ldr	r5, [pc, #28]	@ (800b054 <_write_r+0x20>)
 800b038:	4604      	mov	r4, r0
 800b03a:	4608      	mov	r0, r1
 800b03c:	4611      	mov	r1, r2
 800b03e:	2200      	movs	r2, #0
 800b040:	602a      	str	r2, [r5, #0]
 800b042:	461a      	mov	r2, r3
 800b044:	f7f6 f8c4 	bl	80011d0 <_write>
 800b048:	1c43      	adds	r3, r0, #1
 800b04a:	d102      	bne.n	800b052 <_write_r+0x1e>
 800b04c:	682b      	ldr	r3, [r5, #0]
 800b04e:	b103      	cbz	r3, 800b052 <_write_r+0x1e>
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	200015dc 	.word	0x200015dc

0800b058 <_close_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d06      	ldr	r5, [pc, #24]	@ (800b074 <_close_r+0x1c>)
 800b05c:	2300      	movs	r3, #0
 800b05e:	4604      	mov	r4, r0
 800b060:	4608      	mov	r0, r1
 800b062:	602b      	str	r3, [r5, #0]
 800b064:	f7f8 f873 	bl	800314e <_close>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d102      	bne.n	800b072 <_close_r+0x1a>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	b103      	cbz	r3, 800b072 <_close_r+0x1a>
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	200015dc 	.word	0x200015dc

0800b078 <_fstat_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	4d07      	ldr	r5, [pc, #28]	@ (800b098 <_fstat_r+0x20>)
 800b07c:	2300      	movs	r3, #0
 800b07e:	4604      	mov	r4, r0
 800b080:	4608      	mov	r0, r1
 800b082:	4611      	mov	r1, r2
 800b084:	602b      	str	r3, [r5, #0]
 800b086:	f7f8 f86e 	bl	8003166 <_fstat>
 800b08a:	1c43      	adds	r3, r0, #1
 800b08c:	d102      	bne.n	800b094 <_fstat_r+0x1c>
 800b08e:	682b      	ldr	r3, [r5, #0]
 800b090:	b103      	cbz	r3, 800b094 <_fstat_r+0x1c>
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	bd38      	pop	{r3, r4, r5, pc}
 800b096:	bf00      	nop
 800b098:	200015dc 	.word	0x200015dc

0800b09c <abort>:
 800b09c:	b508      	push	{r3, lr}
 800b09e:	2006      	movs	r0, #6
 800b0a0:	f000 f8aa 	bl	800b1f8 <raise>
 800b0a4:	2001      	movs	r0, #1
 800b0a6:	f7f8 f82a 	bl	80030fe <_exit>

0800b0aa <_calloc_r>:
 800b0aa:	b570      	push	{r4, r5, r6, lr}
 800b0ac:	fba1 5402 	umull	r5, r4, r1, r2
 800b0b0:	b934      	cbnz	r4, 800b0c0 <_calloc_r+0x16>
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	f7ff f97c 	bl	800a3b0 <_malloc_r>
 800b0b8:	4606      	mov	r6, r0
 800b0ba:	b928      	cbnz	r0, 800b0c8 <_calloc_r+0x1e>
 800b0bc:	4630      	mov	r0, r6
 800b0be:	bd70      	pop	{r4, r5, r6, pc}
 800b0c0:	220c      	movs	r2, #12
 800b0c2:	6002      	str	r2, [r0, #0]
 800b0c4:	2600      	movs	r6, #0
 800b0c6:	e7f9      	b.n	800b0bc <_calloc_r+0x12>
 800b0c8:	462a      	mov	r2, r5
 800b0ca:	4621      	mov	r1, r4
 800b0cc:	f7fe f946 	bl	800935c <memset>
 800b0d0:	e7f4      	b.n	800b0bc <_calloc_r+0x12>
	...

0800b0d4 <_free_r>:
 800b0d4:	b538      	push	{r3, r4, r5, lr}
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	2900      	cmp	r1, #0
 800b0da:	d041      	beq.n	800b160 <_free_r+0x8c>
 800b0dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0e0:	1f0c      	subs	r4, r1, #4
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	bfb8      	it	lt
 800b0e6:	18e4      	addlt	r4, r4, r3
 800b0e8:	f7ff fa8e 	bl	800a608 <__malloc_lock>
 800b0ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b164 <_free_r+0x90>)
 800b0ee:	6813      	ldr	r3, [r2, #0]
 800b0f0:	b933      	cbnz	r3, 800b100 <_free_r+0x2c>
 800b0f2:	6063      	str	r3, [r4, #4]
 800b0f4:	6014      	str	r4, [r2, #0]
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0fc:	f7ff ba8a 	b.w	800a614 <__malloc_unlock>
 800b100:	42a3      	cmp	r3, r4
 800b102:	d908      	bls.n	800b116 <_free_r+0x42>
 800b104:	6820      	ldr	r0, [r4, #0]
 800b106:	1821      	adds	r1, r4, r0
 800b108:	428b      	cmp	r3, r1
 800b10a:	bf01      	itttt	eq
 800b10c:	6819      	ldreq	r1, [r3, #0]
 800b10e:	685b      	ldreq	r3, [r3, #4]
 800b110:	1809      	addeq	r1, r1, r0
 800b112:	6021      	streq	r1, [r4, #0]
 800b114:	e7ed      	b.n	800b0f2 <_free_r+0x1e>
 800b116:	461a      	mov	r2, r3
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	b10b      	cbz	r3, 800b120 <_free_r+0x4c>
 800b11c:	42a3      	cmp	r3, r4
 800b11e:	d9fa      	bls.n	800b116 <_free_r+0x42>
 800b120:	6811      	ldr	r1, [r2, #0]
 800b122:	1850      	adds	r0, r2, r1
 800b124:	42a0      	cmp	r0, r4
 800b126:	d10b      	bne.n	800b140 <_free_r+0x6c>
 800b128:	6820      	ldr	r0, [r4, #0]
 800b12a:	4401      	add	r1, r0
 800b12c:	1850      	adds	r0, r2, r1
 800b12e:	4283      	cmp	r3, r0
 800b130:	6011      	str	r1, [r2, #0]
 800b132:	d1e0      	bne.n	800b0f6 <_free_r+0x22>
 800b134:	6818      	ldr	r0, [r3, #0]
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	6053      	str	r3, [r2, #4]
 800b13a:	4408      	add	r0, r1
 800b13c:	6010      	str	r0, [r2, #0]
 800b13e:	e7da      	b.n	800b0f6 <_free_r+0x22>
 800b140:	d902      	bls.n	800b148 <_free_r+0x74>
 800b142:	230c      	movs	r3, #12
 800b144:	602b      	str	r3, [r5, #0]
 800b146:	e7d6      	b.n	800b0f6 <_free_r+0x22>
 800b148:	6820      	ldr	r0, [r4, #0]
 800b14a:	1821      	adds	r1, r4, r0
 800b14c:	428b      	cmp	r3, r1
 800b14e:	bf04      	itt	eq
 800b150:	6819      	ldreq	r1, [r3, #0]
 800b152:	685b      	ldreq	r3, [r3, #4]
 800b154:	6063      	str	r3, [r4, #4]
 800b156:	bf04      	itt	eq
 800b158:	1809      	addeq	r1, r1, r0
 800b15a:	6021      	streq	r1, [r4, #0]
 800b15c:	6054      	str	r4, [r2, #4]
 800b15e:	e7ca      	b.n	800b0f6 <_free_r+0x22>
 800b160:	bd38      	pop	{r3, r4, r5, pc}
 800b162:	bf00      	nop
 800b164:	200015d8 	.word	0x200015d8

0800b168 <__ascii_mbtowc>:
 800b168:	b082      	sub	sp, #8
 800b16a:	b901      	cbnz	r1, 800b16e <__ascii_mbtowc+0x6>
 800b16c:	a901      	add	r1, sp, #4
 800b16e:	b142      	cbz	r2, 800b182 <__ascii_mbtowc+0x1a>
 800b170:	b14b      	cbz	r3, 800b186 <__ascii_mbtowc+0x1e>
 800b172:	7813      	ldrb	r3, [r2, #0]
 800b174:	600b      	str	r3, [r1, #0]
 800b176:	7812      	ldrb	r2, [r2, #0]
 800b178:	1e10      	subs	r0, r2, #0
 800b17a:	bf18      	it	ne
 800b17c:	2001      	movne	r0, #1
 800b17e:	b002      	add	sp, #8
 800b180:	4770      	bx	lr
 800b182:	4610      	mov	r0, r2
 800b184:	e7fb      	b.n	800b17e <__ascii_mbtowc+0x16>
 800b186:	f06f 0001 	mvn.w	r0, #1
 800b18a:	e7f8      	b.n	800b17e <__ascii_mbtowc+0x16>

0800b18c <__ascii_wctomb>:
 800b18c:	4603      	mov	r3, r0
 800b18e:	4608      	mov	r0, r1
 800b190:	b141      	cbz	r1, 800b1a4 <__ascii_wctomb+0x18>
 800b192:	2aff      	cmp	r2, #255	@ 0xff
 800b194:	d904      	bls.n	800b1a0 <__ascii_wctomb+0x14>
 800b196:	228a      	movs	r2, #138	@ 0x8a
 800b198:	601a      	str	r2, [r3, #0]
 800b19a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b19e:	4770      	bx	lr
 800b1a0:	700a      	strb	r2, [r1, #0]
 800b1a2:	2001      	movs	r0, #1
 800b1a4:	4770      	bx	lr

0800b1a6 <_raise_r>:
 800b1a6:	291f      	cmp	r1, #31
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	4605      	mov	r5, r0
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	d904      	bls.n	800b1ba <_raise_r+0x14>
 800b1b0:	2316      	movs	r3, #22
 800b1b2:	6003      	str	r3, [r0, #0]
 800b1b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1b8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1bc:	b112      	cbz	r2, 800b1c4 <_raise_r+0x1e>
 800b1be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1c2:	b94b      	cbnz	r3, 800b1d8 <_raise_r+0x32>
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	f000 f831 	bl	800b22c <_getpid_r>
 800b1ca:	4622      	mov	r2, r4
 800b1cc:	4601      	mov	r1, r0
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1d4:	f000 b818 	b.w	800b208 <_kill_r>
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d00a      	beq.n	800b1f2 <_raise_r+0x4c>
 800b1dc:	1c59      	adds	r1, r3, #1
 800b1de:	d103      	bne.n	800b1e8 <_raise_r+0x42>
 800b1e0:	2316      	movs	r3, #22
 800b1e2:	6003      	str	r3, [r0, #0]
 800b1e4:	2001      	movs	r0, #1
 800b1e6:	e7e7      	b.n	800b1b8 <_raise_r+0x12>
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	4798      	blx	r3
 800b1f2:	2000      	movs	r0, #0
 800b1f4:	e7e0      	b.n	800b1b8 <_raise_r+0x12>
	...

0800b1f8 <raise>:
 800b1f8:	4b02      	ldr	r3, [pc, #8]	@ (800b204 <raise+0xc>)
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	6818      	ldr	r0, [r3, #0]
 800b1fe:	f7ff bfd2 	b.w	800b1a6 <_raise_r>
 800b202:	bf00      	nop
 800b204:	200000e0 	.word	0x200000e0

0800b208 <_kill_r>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	4d07      	ldr	r5, [pc, #28]	@ (800b228 <_kill_r+0x20>)
 800b20c:	2300      	movs	r3, #0
 800b20e:	4604      	mov	r4, r0
 800b210:	4608      	mov	r0, r1
 800b212:	4611      	mov	r1, r2
 800b214:	602b      	str	r3, [r5, #0]
 800b216:	f7f7 ff62 	bl	80030de <_kill>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	d102      	bne.n	800b224 <_kill_r+0x1c>
 800b21e:	682b      	ldr	r3, [r5, #0]
 800b220:	b103      	cbz	r3, 800b224 <_kill_r+0x1c>
 800b222:	6023      	str	r3, [r4, #0]
 800b224:	bd38      	pop	{r3, r4, r5, pc}
 800b226:	bf00      	nop
 800b228:	200015dc 	.word	0x200015dc

0800b22c <_getpid_r>:
 800b22c:	f7f7 bf4f 	b.w	80030ce <_getpid>

0800b230 <_init>:
 800b230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b232:	bf00      	nop
 800b234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b236:	bc08      	pop	{r3}
 800b238:	469e      	mov	lr, r3
 800b23a:	4770      	bx	lr

0800b23c <_fini>:
 800b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23e:	bf00      	nop
 800b240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b242:	bc08      	pop	{r3}
 800b244:	469e      	mov	lr, r3
 800b246:	4770      	bx	lr
