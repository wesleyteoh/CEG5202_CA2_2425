
CA2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ba0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08009d30  08009d30  0000ad30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a13c  0800a13c  0000c298  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a13c  0800a13c  0000b13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a144  0800a144  0000c298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a144  0800a144  0000b144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a148  0800a148  0000b148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000298  20000000  0800a14c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000298  0800a3e4  0000c298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  0800a3e4  0000cbc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c298  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b87b  00000000  00000000  0000c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004120  00000000  00000000  00027b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  0002bc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b0  00000000  00000000  0002d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ade9  00000000  00000000  0002e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec5d  00000000  00000000  000597c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa505  00000000  00000000  0007841e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ae0  00000000  00000000  00172968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0017a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000298 	.word	0x20000298
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d18 	.word	0x08009d18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000029c 	.word	0x2000029c
 80001cc:	08009d18 	.word	0x08009d18

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//To print to terminal
int _write(int file, char *ptr, int len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	4804      	ldr	r0, [pc, #16]	@ (8000efc <_write+0x28>)
 8000eec:	f005 fa77 	bl	80063de <HAL_UART_Transmit>
    return len;
 8000ef0:	687b      	ldr	r3, [r7, #4]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200003e8 	.word	0x200003e8

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f04:	b092      	sub	sp, #72	@ 0x48
 8000f06:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	initialise_monitor_handles();
 8000f08:	f000 ff48 	bl	8001d9c <initialise_monitor_handles>
	HAL_Init();
 8000f0c:	f002 f83c 	bl	8002f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f10:	f000 f898 	bl	8001044 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f14:	f000 fa60 	bl	80013d8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f18:	f000 f8f6 	bl	8001108 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f1c:	f000 f92c 	bl	8001178 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f20:	f000 f968 	bl	80011f4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f24:	f000 f98c 	bl	8001240 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f28:	f000 f9c8 	bl	80012bc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f2c:	f000 f9f6 	bl	800131c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f30:	f000 fa24 	bl	800137c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE BEGIN 2 */
  BSP_TSENSOR_Init();//Temperature init
 8000f34:	f001 fa86 	bl	8002444 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();//Humidity init
 8000f38:	f001 fa0a 	bl	8002350 <BSP_HSENSOR_Init>
  BSP_PSENSOR_Init();//Pressure init
 8000f3c:	f001 fa62 	bl	8002404 <BSP_PSENSOR_Init>
  BSP_MAGNETO_Init();//Magnetometer init
 8000f40:	f001 fa34 	bl	80023ac <BSP_MAGNETO_Init>
  BSP_GYRO_Init();//Gyroscope init
 8000f44:	f001 f9c0 	bl	80022c8 <BSP_GYRO_Init>
  BSP_ACCELERO_Init();//Accelerometer init
 8000f48:	f001 f966 	bl	8002218 <BSP_ACCELERO_Init>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //	  To make LED flash
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8000f4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f50:	4838      	ldr	r0, [pc, #224]	@ (8001034 <main+0x134>)
 8000f52:	f002 fd85 	bl	8003a60 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_9);
 8000f56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f5a:	4837      	ldr	r0, [pc, #220]	@ (8001038 <main+0x138>)
 8000f5c:	f002 fd80 	bl	8003a60 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000f60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f64:	f002 f884 	bl	8003070 <HAL_Delay>

	float accel_data[3];
	int16_t accel_data_i16[3] = { 0 };			// array to store the x, y and z readings.
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	809a      	strh	r2, [r3, #4]
	BSP_ACCELERO_AccGetXYZ(accel_data_i16);		// read accelerometer
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 f98e 	bl	8002298 <BSP_ACCELERO_AccGetXYZ>
	// the function above returns 16 bit integers which are 100 * acceleration_in_m/s2. Converting to float to print the actual acceleration.
	accel_data[0] = (float)accel_data_i16[0] / 100.0f;
 8000f7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f88:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800103c <main+0x13c>
 8000f8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f90:	edc7 7a05 	vstr	s15, [r7, #20]
	accel_data[1] = (float)accel_data_i16[1] / 100.0f;
 8000f94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f98:	ee07 3a90 	vmov	s15, r3
 8000f9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800103c <main+0x13c>
 8000fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fa8:	edc7 7a06 	vstr	s15, [r7, #24]
	accel_data[2] = (float)accel_data_i16[2] / 100.0f;
 8000fac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb8:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800103c <main+0x13c>
 8000fbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fc0:	edc7 7a07 	vstr	s15, [r7, #28]

	float temp_data;
	temp_data = BSP_TSENSOR_ReadTemp();			// read temperature sensor
 8000fc4:	f001 fa5a 	bl	800247c <BSP_TSENSOR_ReadTemp>
 8000fc8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24

	float humidity_data;
	humidity_data = BSP_HSENSOR_ReadHumidity();
 8000fcc:	f001 f9e0 	bl	8002390 <BSP_HSENSOR_ReadHumidity>
 8000fd0:	ed87 0a08 	vstr	s0, [r7, #32]

	printf("Accel X : %f; Accel Y : %f; Accel Z : %f; Temperature : %f Humidity : %f \r\n", accel_data[0], accel_data[1], accel_data[2], temp_data, humidity_data);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff fab6 	bl	8000548 <__aeabi_f2d>
 8000fdc:	e9c7 0100 	strd	r0, r1, [r7]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fab0 	bl	8000548 <__aeabi_f2d>
 8000fe8:	4604      	mov	r4, r0
 8000fea:	460d      	mov	r5, r1
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff faaa 	bl	8000548 <__aeabi_f2d>
 8000ff4:	4680      	mov	r8, r0
 8000ff6:	4689      	mov	r9, r1
 8000ff8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ffa:	f7ff faa5 	bl	8000548 <__aeabi_f2d>
 8000ffe:	4682      	mov	sl, r0
 8001000:	468b      	mov	fp, r1
 8001002:	6a38      	ldr	r0, [r7, #32]
 8001004:	f7ff faa0 	bl	8000548 <__aeabi_f2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001010:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001014:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001018:	e9cd 4500 	strd	r4, r5, [sp]
 800101c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001020:	4807      	ldr	r0, [pc, #28]	@ (8001040 <main+0x140>)
 8001022:	f006 fefb 	bl	8007e1c <iprintf>

	HAL_Delay(1000);	// read once a ~second.
 8001026:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800102a:	f002 f821 	bl	8003070 <HAL_Delay>
  {
 800102e:	bf00      	nop
 8001030:	e78c      	b.n	8000f4c <main+0x4c>
 8001032:	bf00      	nop
 8001034:	48000400 	.word	0x48000400
 8001038:	48000800 	.word	0x48000800
 800103c:	42c80000 	.word	0x42c80000
 8001040:	08009d30 	.word	0x08009d30

08001044 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b096      	sub	sp, #88	@ 0x58
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	2244      	movs	r2, #68	@ 0x44
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f006 fef4 	bl	8007e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	463b      	mov	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001066:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800106a:	f003 fcd9 	bl	8004a20 <HAL_PWREx_ControlVoltageScaling>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001074:	f000 fb62 	bl	800173c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001078:	f003 fcb4 	bl	80049e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800107c:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <SystemClock_Config+0xc0>)
 800107e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001082:	4a20      	ldr	r2, [pc, #128]	@ (8001104 <SystemClock_Config+0xc0>)
 8001084:	f023 0318 	bic.w	r3, r3, #24
 8001088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800108c:	2314      	movs	r3, #20
 800108e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001090:	2301      	movs	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001094:	2301      	movs	r3, #1
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800109c:	2360      	movs	r3, #96	@ 0x60
 800109e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a0:	2302      	movs	r3, #2
 80010a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010a4:	2301      	movs	r3, #1
 80010a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80010ac:	2328      	movs	r3, #40	@ 0x28
 80010ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010b0:	2307      	movs	r3, #7
 80010b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4618      	mov	r0, r3
 80010c2:	f003 fdcf 	bl	8004c64 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010cc:	f000 fb36 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2303      	movs	r3, #3
 80010d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	2104      	movs	r1, #4
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 f997 	bl	800541c <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010f4:	f000 fb22 	bl	800173c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010f8:	f004 fe9e 	bl	8005e38 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010fc:	bf00      	nop
 80010fe:	3758      	adds	r7, #88	@ 0x58
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40021000 	.word	0x40021000

08001108 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800110c:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 800110e:	4a19      	ldr	r2, [pc, #100]	@ (8001174 <MX_DFSDM1_Init+0x6c>)
 8001110:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001112:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 8001114:	2201      	movs	r2, #1
 8001116:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001118:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 8001120:	2202      	movs	r2, #2
 8001122:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800112a:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 800112c:	2200      	movs	r2, #0
 800112e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 8001132:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001136:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001138:	4b0d      	ldr	r3, [pc, #52]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800113e:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 8001140:	2204      	movs	r2, #4
 8001142:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001144:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 800114c:	2201      	movs	r2, #1
 800114e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 8001152:	2200      	movs	r2, #0
 8001154:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001156:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 8001158:	2200      	movs	r2, #0
 800115a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800115c:	4804      	ldr	r0, [pc, #16]	@ (8001170 <MX_DFSDM1_Init+0x68>)
 800115e:	f002 f8bd 	bl	80032dc <HAL_DFSDM_ChannelInit>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001168:	f000 fae8 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200002b4 	.word	0x200002b4
 8001174:	40016020 	.word	0x40016020

08001178 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800117c:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <MX_I2C2_Init+0x74>)
 800117e:	4a1c      	ldr	r2, [pc, #112]	@ (80011f0 <MX_I2C2_Init+0x78>)
 8001180:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8001182:	4b1a      	ldr	r3, [pc, #104]	@ (80011ec <MX_I2C2_Init+0x74>)
 8001184:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001188:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800118a:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <MX_I2C2_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <MX_I2C2_Init+0x74>)
 8001192:	2201      	movs	r2, #1
 8001194:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <MX_I2C2_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <MX_I2C2_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <MX_I2C2_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a8:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <MX_I2C2_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ae:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <MX_I2C2_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011b4:	480d      	ldr	r0, [pc, #52]	@ (80011ec <MX_I2C2_Init+0x74>)
 80011b6:	f002 fc90 	bl	8003ada <HAL_I2C_Init>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011c0:	f000 fabc 	bl	800173c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011c4:	2100      	movs	r1, #0
 80011c6:	4809      	ldr	r0, [pc, #36]	@ (80011ec <MX_I2C2_Init+0x74>)
 80011c8:	f003 fa42 	bl	8004650 <HAL_I2CEx_ConfigAnalogFilter>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80011d2:	f000 fab3 	bl	800173c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011d6:	2100      	movs	r1, #0
 80011d8:	4804      	ldr	r0, [pc, #16]	@ (80011ec <MX_I2C2_Init+0x74>)
 80011da:	f003 fa84 	bl	80046e6 <HAL_I2CEx_ConfigDigitalFilter>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80011e4:	f000 faaa 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200002ec 	.word	0x200002ec
 80011f0:	40005800 	.word	0x40005800

080011f4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_QUADSPI_Init+0x44>)
 80011fa:	4a10      	ldr	r2, [pc, #64]	@ (800123c <MX_QUADSPI_Init+0x48>)
 80011fc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_QUADSPI_Init+0x44>)
 8001200:	2202      	movs	r2, #2
 8001202:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_QUADSPI_Init+0x44>)
 8001206:	2204      	movs	r2, #4
 8001208:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <MX_QUADSPI_Init+0x44>)
 800120c:	2210      	movs	r2, #16
 800120e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001210:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_QUADSPI_Init+0x44>)
 8001212:	2217      	movs	r2, #23
 8001214:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <MX_QUADSPI_Init+0x44>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_QUADSPI_Init+0x44>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_QUADSPI_Init+0x44>)
 8001224:	f003 fc62 	bl	8004aec <HAL_QSPI_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800122e:	f000 fa85 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000340 	.word	0x20000340
 800123c:	a0001000 	.word	0xa0001000

08001240 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <MX_SPI3_Init+0x74>)
 8001246:	4a1c      	ldr	r2, [pc, #112]	@ (80012b8 <MX_SPI3_Init+0x78>)
 8001248:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <MX_SPI3_Init+0x74>)
 800124c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001250:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <MX_SPI3_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001258:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <MX_SPI3_Init+0x74>)
 800125a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800125e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001260:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <MX_SPI3_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001266:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <MX_SPI3_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_SPI3_Init+0x74>)
 800126e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001272:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_SPI3_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_SPI3_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_SPI3_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <MX_SPI3_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_SPI3_Init+0x74>)
 800128e:	2207      	movs	r2, #7
 8001290:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <MX_SPI3_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_SPI3_Init+0x74>)
 800129a:	2208      	movs	r2, #8
 800129c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <MX_SPI3_Init+0x74>)
 80012a0:	f004 ffac 	bl	80061fc <HAL_SPI_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012aa:	f000 fa47 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000384 	.word	0x20000384
 80012b8:	40003c00 	.word	0x40003c00

080012bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <MX_USART1_UART_Init+0x58>)
 80012c2:	4a15      	ldr	r2, [pc, #84]	@ (8001318 <MX_USART1_UART_Init+0x5c>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012c6:	4b13      	ldr	r3, [pc, #76]	@ (8001314 <MX_USART1_UART_Init+0x58>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_USART1_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <MX_USART1_UART_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <MX_USART1_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001314 <MX_USART1_UART_Init+0x58>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <MX_USART1_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <MX_USART1_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	@ (8001314 <MX_USART1_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f8:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <MX_USART1_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <MX_USART1_UART_Init+0x58>)
 8001300:	f005 f81f 	bl	8006342 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800130a:	f000 fa17 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200003e8 	.word	0x200003e8
 8001318:	40013800 	.word	0x40013800

0800131c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <MX_USART3_UART_Init+0x58>)
 8001322:	4a15      	ldr	r2, [pc, #84]	@ (8001378 <MX_USART3_UART_Init+0x5c>)
 8001324:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001326:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <MX_USART3_UART_Init+0x58>)
 8001328:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800132c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_USART3_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <MX_USART3_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_USART3_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <MX_USART3_UART_Init+0x58>)
 8001342:	220c      	movs	r2, #12
 8001344:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <MX_USART3_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800134c:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_USART3_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001352:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <MX_USART3_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_USART3_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800135e:	4805      	ldr	r0, [pc, #20]	@ (8001374 <MX_USART3_UART_Init+0x58>)
 8001360:	f004 ffef 	bl	8006342 <HAL_UART_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800136a:	f000 f9e7 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000470 	.word	0x20000470
 8001378:	40004800 	.word	0x40004800

0800137c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001380:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001382:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001386:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800138a:	2206      	movs	r2, #6
 800138c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001390:	2202      	movs	r2, #2
 8001392:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001396:	2202      	movs	r2, #2
 8001398:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80013ac:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013b2:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013be:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c0:	f003 f9dd 	bl	800477e <HAL_PCD_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013ca:	f000 f9b7 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200004f8 	.word	0x200004f8

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	4bbd      	ldr	r3, [pc, #756]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	4abc      	ldr	r2, [pc, #752]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013fa:	4bba      	ldr	r3, [pc, #744]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001406:	4bb7      	ldr	r3, [pc, #732]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4ab6      	ldr	r2, [pc, #728]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 800140c:	f043 0304 	orr.w	r3, r3, #4
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4bb4      	ldr	r3, [pc, #720]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0304 	and.w	r3, r3, #4
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	4bb1      	ldr	r3, [pc, #708]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001422:	4ab0      	ldr	r2, [pc, #704]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800142a:	4bae      	ldr	r3, [pc, #696]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4bab      	ldr	r3, [pc, #684]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143a:	4aaa      	ldr	r2, [pc, #680]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001442:	4ba8      	ldr	r3, [pc, #672]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144e:	4ba5      	ldr	r3, [pc, #660]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	4aa4      	ldr	r2, [pc, #656]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145a:	4ba2      	ldr	r3, [pc, #648]	@ (80016e4 <MX_GPIO_Init+0x30c>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800146c:	489e      	ldr	r0, [pc, #632]	@ (80016e8 <MX_GPIO_Init+0x310>)
 800146e:	f002 fadf 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800147c:	f002 fad8 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001480:	2200      	movs	r2, #0
 8001482:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8001486:	4899      	ldr	r0, [pc, #612]	@ (80016ec <MX_GPIO_Init+0x314>)
 8001488:	f002 fad2 	bl	8003a30 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001492:	4897      	ldr	r0, [pc, #604]	@ (80016f0 <MX_GPIO_Init+0x318>)
 8001494:	f002 facc 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001498:	2201      	movs	r2, #1
 800149a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800149e:	4894      	ldr	r0, [pc, #592]	@ (80016f0 <MX_GPIO_Init+0x318>)
 80014a0:	f002 fac6 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80014aa:	4892      	ldr	r0, [pc, #584]	@ (80016f4 <MX_GPIO_Init+0x31c>)
 80014ac:	f002 fac0 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	2120      	movs	r1, #32
 80014b4:	488d      	ldr	r0, [pc, #564]	@ (80016ec <MX_GPIO_Init+0x314>)
 80014b6:	f002 fabb 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2101      	movs	r1, #1
 80014be:	488a      	ldr	r0, [pc, #552]	@ (80016e8 <MX_GPIO_Init+0x310>)
 80014c0:	f002 fab6 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80014c4:	f240 1315 	movw	r3, #277	@ 0x115
 80014c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4882      	ldr	r0, [pc, #520]	@ (80016e8 <MX_GPIO_Init+0x310>)
 80014de:	f002 f809 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80014e2:	236a      	movs	r3, #106	@ 0x6a
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	487c      	ldr	r0, [pc, #496]	@ (80016e8 <MX_GPIO_Init+0x310>)
 80014f8:	f001 fffc 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80014fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001502:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001506:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	4878      	ldr	r0, [pc, #480]	@ (80016f4 <MX_GPIO_Init+0x31c>)
 8001514:	f001 ffee 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001518:	233f      	movs	r3, #63	@ 0x3f
 800151a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800151c:	230b      	movs	r3, #11
 800151e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4619      	mov	r1, r3
 800152a:	4872      	ldr	r0, [pc, #456]	@ (80016f4 <MX_GPIO_Init+0x31c>)
 800152c:	f001 ffe2 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001530:	2303      	movs	r3, #3
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001540:	2308      	movs	r3, #8
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154e:	f001 ffd1 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001552:	f248 1304 	movw	r3, #33028	@ 0x8104
 8001556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156e:	f001 ffc1 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001572:	2308      	movs	r3, #8
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001582:	2301      	movs	r3, #1
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001590:	f001 ffb0 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001594:	2310      	movs	r3, #16
 8001596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001598:	230b      	movs	r3, #11
 800159a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015aa:	f001 ffa3 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80015ae:	23e0      	movs	r3, #224	@ 0xe0
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015be:	2305      	movs	r3, #5
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4619      	mov	r1, r3
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015cc:	f001 ff92 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80015d0:	2301      	movs	r3, #1
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4841      	ldr	r0, [pc, #260]	@ (80016ec <MX_GPIO_Init+0x314>)
 80015e6:	f001 ff85 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80015ea:	2302      	movs	r3, #2
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015ee:	230b      	movs	r3, #11
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	483b      	ldr	r0, [pc, #236]	@ (80016ec <MX_GPIO_Init+0x314>)
 80015fe:	f001 ff79 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001602:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8001606:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	4619      	mov	r1, r3
 800161a:	4834      	ldr	r0, [pc, #208]	@ (80016ec <MX_GPIO_Init+0x314>)
 800161c:	f001 ff6a 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001620:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001624:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001626:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	4619      	mov	r1, r3
 8001636:	482e      	ldr	r0, [pc, #184]	@ (80016f0 <MX_GPIO_Init+0x318>)
 8001638:	f001 ff5c 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800163c:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4826      	ldr	r0, [pc, #152]	@ (80016f0 <MX_GPIO_Init+0x318>)
 8001656:	f001 ff4d 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800165a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001660:	2301      	movs	r3, #1
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4820      	ldr	r0, [pc, #128]	@ (80016f4 <MX_GPIO_Init+0x31c>)
 8001674:	f001 ff3e 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001678:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800167e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	4819      	ldr	r0, [pc, #100]	@ (80016f4 <MX_GPIO_Init+0x31c>)
 8001690:	f001 ff30 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001694:	2302      	movs	r3, #2
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a4:	2305      	movs	r3, #5
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	4810      	ldr	r0, [pc, #64]	@ (80016f0 <MX_GPIO_Init+0x318>)
 80016b0:	f001 ff20 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80016b4:	2378      	movs	r3, #120	@ 0x78
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016c4:	2307      	movs	r3, #7
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4808      	ldr	r0, [pc, #32]	@ (80016f0 <MX_GPIO_Init+0x318>)
 80016d0:	f001 ff10 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80016d4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80016d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016da:	2312      	movs	r3, #18
 80016dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	e00a      	b.n	80016f8 <MX_GPIO_Init+0x320>
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48001000 	.word	0x48001000
 80016ec:	48000400 	.word	0x48000400
 80016f0:	48000c00 	.word	0x48000c00
 80016f4:	48000800 	.word	0x48000800
 80016f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fe:	2304      	movs	r3, #4
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	480b      	ldr	r0, [pc, #44]	@ (8001738 <MX_GPIO_Init+0x360>)
 800170a:	f001 fef3 	bl	80034f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	2017      	movs	r0, #23
 8001714:	f001 fdab 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001718:	2017      	movs	r0, #23
 800171a:	f001 fdc4 	bl	80032a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2028      	movs	r0, #40	@ 0x28
 8001724:	f001 fda3 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001728:	2028      	movs	r0, #40	@ 0x28
 800172a:	f001 fdbc 	bl	80032a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	@ 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	48000400 	.word	0x48000400

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <Error_Handler+0x8>

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_MspInit+0x44>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001752:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <HAL_MspInit+0x44>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6613      	str	r3, [r2, #96]	@ 0x60
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <HAL_MspInit+0x44>)
 800175c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_MspInit+0x44>)
 8001768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_MspInit+0x44>)
 800176c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001770:	6593      	str	r3, [r2, #88]	@ 0x58
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_MspInit+0x44>)
 8001774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177a:	603b      	str	r3, [r7, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000

08001790 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b0ac      	sub	sp, #176	@ 0xb0
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2288      	movs	r2, #136	@ 0x88
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f006 fb45 	bl	8007e40 <memset>
  if(DFSDM1_Init == 0)
 80017b6:	4b25      	ldr	r3, [pc, #148]	@ (800184c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d142      	bne.n	8001844 <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80017be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017ca:	f107 0314 	add.w	r3, r7, #20
 80017ce:	4618      	mov	r0, r3
 80017d0:	f004 f848 	bl	8005864 <HAL_RCCEx_PeriphCLKConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80017da:	f7ff ffaf 	bl	800173c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001850 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017f6:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	4a15      	ldr	r2, [pc, #84]	@ (8001850 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80017fc:	f043 0310 	orr.w	r3, r3, #16
 8001800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	f003 0310 	and.w	r3, r3, #16
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800180e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001816:	2302      	movs	r3, #2
 8001818:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001828:	2306      	movs	r3, #6
 800182a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800182e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001832:	4619      	mov	r1, r3
 8001834:	4807      	ldr	r0, [pc, #28]	@ (8001854 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001836:	f001 fe5d 	bl	80034f4 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 800183a:	4b04      	ldr	r3, [pc, #16]	@ (800184c <HAL_DFSDM_ChannelMspInit+0xbc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	3301      	adds	r3, #1
 8001840:	4a02      	ldr	r2, [pc, #8]	@ (800184c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001842:	6013      	str	r3, [r2, #0]
  }

}
 8001844:	bf00      	nop
 8001846:	37b0      	adds	r7, #176	@ 0xb0
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200009dc 	.word	0x200009dc
 8001850:	40021000 	.word	0x40021000
 8001854:	48001000 	.word	0x48001000

08001858 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b0ac      	sub	sp, #176	@ 0xb0
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2288      	movs	r2, #136	@ 0x88
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f006 fae1 	bl	8007e40 <memset>
  if(hi2c->Instance==I2C2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a21      	ldr	r2, [pc, #132]	@ (8001908 <HAL_I2C_MspInit+0xb0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d13b      	bne.n	8001900 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800188c:	2300      	movs	r3, #0
 800188e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4618      	mov	r0, r3
 8001896:	f003 ffe5 	bl	8005864 <HAL_RCCEx_PeriphCLKConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018a0:	f7ff ff4c 	bl	800173c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	4b19      	ldr	r3, [pc, #100]	@ (800190c <HAL_I2C_MspInit+0xb4>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a8:	4a18      	ldr	r2, [pc, #96]	@ (800190c <HAL_I2C_MspInit+0xb4>)
 80018aa:	f043 0302 	orr.w	r3, r3, #2
 80018ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b0:	4b16      	ldr	r3, [pc, #88]	@ (800190c <HAL_I2C_MspInit+0xb4>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80018bc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80018c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c4:	2312      	movs	r3, #18
 80018c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018d6:	2304      	movs	r3, #4
 80018d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018e0:	4619      	mov	r1, r3
 80018e2:	480b      	ldr	r0, [pc, #44]	@ (8001910 <HAL_I2C_MspInit+0xb8>)
 80018e4:	f001 fe06 	bl	80034f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018e8:	4b08      	ldr	r3, [pc, #32]	@ (800190c <HAL_I2C_MspInit+0xb4>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ec:	4a07      	ldr	r2, [pc, #28]	@ (800190c <HAL_I2C_MspInit+0xb4>)
 80018ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f4:	4b05      	ldr	r3, [pc, #20]	@ (800190c <HAL_I2C_MspInit+0xb4>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001900:	bf00      	nop
 8001902:	37b0      	adds	r7, #176	@ 0xb0
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40005800 	.word	0x40005800
 800190c:	40021000 	.word	0x40021000
 8001910:	48000400 	.word	0x48000400

08001914 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a0b      	ldr	r2, [pc, #44]	@ (8001950 <HAL_I2C_MspDeInit+0x3c>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10f      	bne.n	8001946 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <HAL_I2C_MspDeInit+0x40>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192a:	4a0a      	ldr	r2, [pc, #40]	@ (8001954 <HAL_I2C_MspDeInit+0x40>)
 800192c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001930:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001932:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001936:	4808      	ldr	r0, [pc, #32]	@ (8001958 <HAL_I2C_MspDeInit+0x44>)
 8001938:	f001 ff86 	bl	8003848 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 800193c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001940:	4805      	ldr	r0, [pc, #20]	@ (8001958 <HAL_I2C_MspDeInit+0x44>)
 8001942:	f001 ff81 	bl	8003848 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40005800 	.word	0x40005800
 8001954:	40021000 	.word	0x40021000
 8001958:	48000400 	.word	0x48000400

0800195c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08a      	sub	sp, #40	@ 0x28
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a17      	ldr	r2, [pc, #92]	@ (80019d8 <HAL_QSPI_MspInit+0x7c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d128      	bne.n	80019d0 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <HAL_QSPI_MspInit+0x80>)
 8001980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001982:	4a16      	ldr	r2, [pc, #88]	@ (80019dc <HAL_QSPI_MspInit+0x80>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001988:	6513      	str	r3, [r2, #80]	@ 0x50
 800198a:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <HAL_QSPI_MspInit+0x80>)
 800198c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800198e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001996:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_QSPI_MspInit+0x80>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	4a10      	ldr	r2, [pc, #64]	@ (80019dc <HAL_QSPI_MspInit+0x80>)
 800199c:	f043 0310 	orr.w	r3, r3, #16
 80019a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <HAL_QSPI_MspInit+0x80>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	f003 0310 	and.w	r3, r3, #16
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80019ae:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80019b2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80019c0:	230a      	movs	r3, #10
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <HAL_QSPI_MspInit+0x84>)
 80019cc:	f001 fd92 	bl	80034f4 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	@ 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	a0001000 	.word	0xa0001000
 80019dc:	40021000 	.word	0x40021000
 80019e0:	48001000 	.word	0x48001000

080019e4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	@ 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a17      	ldr	r2, [pc, #92]	@ (8001a60 <HAL_SPI_MspInit+0x7c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d128      	bne.n	8001a58 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a06:	4b17      	ldr	r3, [pc, #92]	@ (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	4a16      	ldr	r2, [pc, #88]	@ (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a12:	4b14      	ldr	r3, [pc, #80]	@ (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1e:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	4a10      	ldr	r2, [pc, #64]	@ (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <HAL_SPI_MspInit+0x80>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001a36:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a48:	2306      	movs	r3, #6
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4619      	mov	r1, r3
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <HAL_SPI_MspInit+0x84>)
 8001a54:	f001 fd4e 	bl	80034f4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001a58:	bf00      	nop
 8001a5a:	3728      	adds	r7, #40	@ 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40003c00 	.word	0x40003c00
 8001a64:	40021000 	.word	0x40021000
 8001a68:	48000800 	.word	0x48000800

08001a6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0ae      	sub	sp, #184	@ 0xb8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	2288      	movs	r2, #136	@ 0x88
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f006 f9d7 	bl	8007e40 <memset>
  if(huart->Instance==USART1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a42      	ldr	r2, [pc, #264]	@ (8001ba0 <HAL_UART_MspInit+0x134>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d13b      	bne.n	8001b14 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 fedb 	bl	8005864 <HAL_RCCEx_PeriphCLKConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ab4:	f7ff fe42 	bl	800173c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001aba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abc:	4a39      	ldr	r2, [pc, #228]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001abe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ac2:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ac4:	4b37      	ldr	r3, [pc, #220]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad0:	4b34      	ldr	r3, [pc, #208]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad4:	4a33      	ldr	r2, [pc, #204]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001ad6:	f043 0302 	orr.w	r3, r3, #2
 8001ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001adc:	4b31      	ldr	r3, [pc, #196]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001ae8:	23c0      	movs	r3, #192	@ 0xc0
 8001aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afa:	2303      	movs	r3, #3
 8001afc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b00:	2307      	movs	r3, #7
 8001b02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b06:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4826      	ldr	r0, [pc, #152]	@ (8001ba8 <HAL_UART_MspInit+0x13c>)
 8001b0e:	f001 fcf1 	bl	80034f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b12:	e040      	b.n	8001b96 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a24      	ldr	r2, [pc, #144]	@ (8001bac <HAL_UART_MspInit+0x140>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d13b      	bne.n	8001b96 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b1e:	2304      	movs	r3, #4
 8001b20:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b22:	2300      	movs	r3, #0
 8001b24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f003 fe9a 	bl	8005864 <HAL_RCCEx_PeriphCLKConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001b36:	f7ff fe01 	bl	800173c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	4a19      	ldr	r2, [pc, #100]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001b40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b46:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b52:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b56:	4a13      	ldr	r2, [pc, #76]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_UART_MspInit+0x138>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001b6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b84:	2307      	movs	r3, #7
 8001b86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4807      	ldr	r0, [pc, #28]	@ (8001bb0 <HAL_UART_MspInit+0x144>)
 8001b92:	f001 fcaf 	bl	80034f4 <HAL_GPIO_Init>
}
 8001b96:	bf00      	nop
 8001b98:	37b8      	adds	r7, #184	@ 0xb8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	40004800 	.word	0x40004800
 8001bb0:	48000c00 	.word	0x48000c00

08001bb4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b0ac      	sub	sp, #176	@ 0xb0
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2288      	movs	r2, #136	@ 0x88
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f006 f933 	bl	8007e40 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001be2:	d17c      	bne.n	8001cde <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001be4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001be8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001bea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001bee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001bfa:	2318      	movs	r3, #24
 8001bfc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001c0a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c0e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 fe25 	bl	8005864 <HAL_RCCEx_PeriphCLKConfig>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001c20:	f7ff fd8c 	bl	800173c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b30      	ldr	r3, [pc, #192]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c28:	4a2f      	ldr	r2, [pc, #188]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c54:	4619      	mov	r1, r3
 8001c56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c5a:	f001 fc4b 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001c5e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001c62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c78:	230a      	movs	r3, #10
 8001c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c82:	4619      	mov	r1, r3
 8001c84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c88:	f001 fc34 	bl	80034f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c90:	4a15      	ldr	r2, [pc, #84]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001c92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c98:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca4:	4b10      	ldr	r3, [pc, #64]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d114      	bne.n	8001cda <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001cc8:	f002 ff00 	bl	8004acc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ccc:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	4a05      	ldr	r2, [pc, #20]	@ (8001ce8 <HAL_PCD_MspInit+0x134>)
 8001cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001cd8:	e001      	b.n	8001cde <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001cda:	f002 fef7 	bl	8004acc <HAL_PWREx_EnableVddUSB>
}
 8001cde:	bf00      	nop
 8001ce0:	37b0      	adds	r7, #176	@ 0xb0
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40021000 	.word	0x40021000

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cf0:	bf00      	nop
 8001cf2:	e7fd      	b.n	8001cf0 <NMI_Handler+0x4>

08001cf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <HardFault_Handler+0x4>

08001cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d00:	bf00      	nop
 8001d02:	e7fd      	b.n	8001d00 <MemManage_Handler+0x4>

08001d04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <BusFault_Handler+0x4>

08001d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	bf00      	nop
 8001d12:	e7fd      	b.n	8001d10 <UsageFault_Handler+0x4>

08001d14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d42:	f001 f975 	bl	8003030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001d4e:	2020      	movs	r0, #32
 8001d50:	f001 fea0 	bl	8003a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001d54:	2040      	movs	r0, #64	@ 0x40
 8001d56:	f001 fe9d 	bl	8003a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001d5a:	2080      	movs	r0, #128	@ 0x80
 8001d5c:	f001 fe9a 	bl	8003a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001d60:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d64:	f001 fe96 	bl	8003a94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001d70:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001d74:	f001 fe8e 	bl	8003a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001d78:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001d7c:	f001 fe8a 	bl	8003a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001d80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d84:	f001 fe86 	bl	8003a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001d88:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d8c:	f001 fe82 	bl	8003a94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001d90:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001d94:	f001 fe7e 	bl	8003a94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_getpid>:

int _getpid(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  return 1;
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_kill>:

int _kill(int pid, int sig)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dc4:	f006 f844 	bl	8007e50 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2216      	movs	r2, #22
 8001dcc:	601a      	str	r2, [r3, #0]
  return -1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_exit>:

void _exit (int status)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001de2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffe7 	bl	8001dba <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <_exit+0x12>

08001df0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	e00a      	b.n	8001e18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e02:	f3af 8000 	nop.w
 8001e06:	4601      	mov	r1, r0
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	60ba      	str	r2, [r7, #8]
 8001e0e:	b2ca      	uxtb	r2, r1
 8001e10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3301      	adds	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	dbf0      	blt.n	8001e02 <_read+0x12>
  }

  return len;
 8001e20:	687b      	ldr	r3, [r7, #4]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e52:	605a      	str	r2, [r3, #4]
  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_isatty>:

int _isatty(int file)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ef0 <_sbrk+0x5c>)
 8001e9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <_sbrk+0x60>)
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <_sbrk+0x64>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	@ (8001efc <_sbrk+0x68>)
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d207      	bcs.n	8001ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec4:	f005 ffc4 	bl	8007e50 <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	220c      	movs	r2, #12
 8001ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ed2:	e009      	b.n	8001ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eda:	4b07      	ldr	r3, [pc, #28]	@ (8001ef8 <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a05      	ldr	r2, [pc, #20]	@ (8001ef8 <_sbrk+0x64>)
 8001ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20018000 	.word	0x20018000
 8001ef4:	00000400 	.word	0x00000400
 8001ef8:	200009e0 	.word	0x200009e0
 8001efc:	20000bc8 	.word	0x20000bc8

08001f00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <SystemInit+0x20>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f0a:	4a05      	ldr	r2, [pc, #20]	@ (8001f20 <SystemInit+0x20>)
 8001f0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f28:	f7ff ffea 	bl	8001f00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f2c:	480c      	ldr	r0, [pc, #48]	@ (8001f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f2e:	490d      	ldr	r1, [pc, #52]	@ (8001f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f30:	4a0d      	ldr	r2, [pc, #52]	@ (8001f68 <LoopForever+0xe>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f34:	e002      	b.n	8001f3c <LoopCopyDataInit>

08001f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f3a:	3304      	adds	r3, #4

08001f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f40:	d3f9      	bcc.n	8001f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f44:	4c0a      	ldr	r4, [pc, #40]	@ (8001f70 <LoopForever+0x16>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f48:	e001      	b.n	8001f4e <LoopFillZerobss>

08001f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f4c:	3204      	adds	r2, #4

08001f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f50:	d3fb      	bcc.n	8001f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f52:	f005 ff83 	bl	8007e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f56:	f7fe ffd3 	bl	8000f00 <main>

08001f5a <LoopForever>:

LoopForever:
    b LoopForever
 8001f5a:	e7fe      	b.n	8001f5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f64:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 8001f68:	0800a14c 	.word	0x0800a14c
  ldr r2, =_sbss
 8001f6c:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 8001f70:	20000bc4 	.word	0x20000bc4

08001f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC1_2_IRQHandler>
	...

08001f78 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	@ 0x28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001f80:	4b27      	ldr	r3, [pc, #156]	@ (8002020 <I2Cx_MspInit+0xa8>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f84:	4a26      	ldr	r2, [pc, #152]	@ (8002020 <I2Cx_MspInit+0xa8>)
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f8c:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <I2Cx_MspInit+0xa8>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001f98:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f9c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001f9e:	2312      	movs	r3, #18
 8001fa0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001faa:	2304      	movs	r3, #4
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	481b      	ldr	r0, [pc, #108]	@ (8002024 <I2Cx_MspInit+0xac>)
 8001fb6:	f001 fa9d 	bl	80034f4 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4818      	ldr	r0, [pc, #96]	@ (8002024 <I2Cx_MspInit+0xac>)
 8001fc2:	f001 fa97 	bl	80034f4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001fc6:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <I2Cx_MspInit+0xa8>)
 8001fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fca:	4a15      	ldr	r2, [pc, #84]	@ (8002020 <I2Cx_MspInit+0xa8>)
 8001fcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fd2:	4b13      	ldr	r3, [pc, #76]	@ (8002020 <I2Cx_MspInit+0xa8>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001fde:	4b10      	ldr	r3, [pc, #64]	@ (8002020 <I2Cx_MspInit+0xa8>)
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8002020 <I2Cx_MspInit+0xa8>)
 8001fe4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fe8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <I2Cx_MspInit+0xa8>)
 8001fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fee:	4a0c      	ldr	r2, [pc, #48]	@ (8002020 <I2Cx_MspInit+0xa8>)
 8001ff0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001ff4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	210f      	movs	r1, #15
 8001ffa:	2021      	movs	r0, #33	@ 0x21
 8001ffc:	f001 f937 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002000:	2021      	movs	r0, #33	@ 0x21
 8002002:	f001 f950 	bl	80032a6 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	210f      	movs	r1, #15
 800200a:	2022      	movs	r0, #34	@ 0x22
 800200c:	f001 f92f 	bl	800326e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002010:	2022      	movs	r0, #34	@ 0x22
 8002012:	f001 f948 	bl	80032a6 <HAL_NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	@ 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	48000400 	.word	0x48000400

08002028 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a12      	ldr	r2, [pc, #72]	@ (800207c <I2Cx_Init+0x54>)
 8002034:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a11      	ldr	r2, [pc, #68]	@ (8002080 <I2Cx_Init+0x58>)
 800203a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ff89 	bl	8001f78 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f001 fd37 	bl	8003ada <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800206c:	2100      	movs	r1, #0
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f002 faee 	bl	8004650 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40005800 	.word	0x40005800
 8002080:	00702681 	.word	0x00702681

08002084 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af04      	add	r7, sp, #16
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	4608      	mov	r0, r1
 800208e:	4611      	mov	r1, r2
 8002090:	461a      	mov	r2, r3
 8002092:	4603      	mov	r3, r0
 8002094:	72fb      	strb	r3, [r7, #11]
 8002096:	460b      	mov	r3, r1
 8002098:	813b      	strh	r3, [r7, #8]
 800209a:	4613      	mov	r3, r2
 800209c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020a2:	7afb      	ldrb	r3, [r7, #11]
 80020a4:	b299      	uxth	r1, r3
 80020a6:	88f8      	ldrh	r0, [r7, #6]
 80020a8:	893a      	ldrh	r2, [r7, #8]
 80020aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ae:	9302      	str	r3, [sp, #8]
 80020b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	6a3b      	ldr	r3, [r7, #32]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	4603      	mov	r3, r0
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f001 feec 	bl	8003e98 <HAL_I2C_Mem_Read>
 80020c0:	4603      	mov	r3, r0
 80020c2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80020ca:	7afb      	ldrb	r3, [r7, #11]
 80020cc:	4619      	mov	r1, r3
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 f832 	bl	8002138 <I2Cx_Error>
  }
  return status;
 80020d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b08a      	sub	sp, #40	@ 0x28
 80020e2:	af04      	add	r7, sp, #16
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	4608      	mov	r0, r1
 80020e8:	4611      	mov	r1, r2
 80020ea:	461a      	mov	r2, r3
 80020ec:	4603      	mov	r3, r0
 80020ee:	72fb      	strb	r3, [r7, #11]
 80020f0:	460b      	mov	r3, r1
 80020f2:	813b      	strh	r3, [r7, #8]
 80020f4:	4613      	mov	r3, r2
 80020f6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	b299      	uxth	r1, r3
 8002100:	88f8      	ldrh	r0, [r7, #6]
 8002102:	893a      	ldrh	r2, [r7, #8]
 8002104:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002108:	9302      	str	r3, [sp, #8]
 800210a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800210c:	9301      	str	r3, [sp, #4]
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4603      	mov	r3, r0
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f001 fdab 	bl	8003c70 <HAL_I2C_Mem_Write>
 800211a:	4603      	mov	r3, r0
 800211c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800211e:	7dfb      	ldrb	r3, [r7, #23]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d004      	beq.n	800212e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002124:	7afb      	ldrb	r3, [r7, #11]
 8002126:	4619      	mov	r1, r3
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f805 	bl	8002138 <I2Cx_Error>
  }
  return status;
 800212e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f001 fd63 	bl	8003c10 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ff6c 	bl	8002028 <I2Cx_Init>
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800215c:	4802      	ldr	r0, [pc, #8]	@ (8002168 <SENSOR_IO_Init+0x10>)
 800215e:	f7ff ff63 	bl	8002028 <I2Cx_Init>
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200009e4 	.word	0x200009e4

0800216c <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af02      	add	r7, sp, #8
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
 8002176:	460b      	mov	r3, r1
 8002178:	71bb      	strb	r3, [r7, #6]
 800217a:	4613      	mov	r3, r2
 800217c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	b29a      	uxth	r2, r3
 8002182:	79f9      	ldrb	r1, [r7, #7]
 8002184:	2301      	movs	r3, #1
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	1d7b      	adds	r3, r7, #5
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	2301      	movs	r3, #1
 800218e:	4803      	ldr	r0, [pc, #12]	@ (800219c <SENSOR_IO_Write+0x30>)
 8002190:	f7ff ffa5 	bl	80020de <I2Cx_WriteMultiple>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200009e4 	.word	0x200009e4

080021a0 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	4603      	mov	r3, r0
 80021a8:	460a      	mov	r2, r1
 80021aa:	71fb      	strb	r3, [r7, #7]
 80021ac:	4613      	mov	r3, r2
 80021ae:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80021b4:	79bb      	ldrb	r3, [r7, #6]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	79f9      	ldrb	r1, [r7, #7]
 80021ba:	2301      	movs	r3, #1
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	f107 030f 	add.w	r3, r7, #15
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2301      	movs	r3, #1
 80021c6:	4804      	ldr	r0, [pc, #16]	@ (80021d8 <SENSOR_IO_Read+0x38>)
 80021c8:	f7ff ff5c 	bl	8002084 <I2Cx_ReadMultiple>

  return read_value;
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200009e4 	.word	0x200009e4

080021dc <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af02      	add	r7, sp, #8
 80021e2:	603a      	str	r2, [r7, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
 80021ea:	460b      	mov	r3, r1
 80021ec:	71bb      	strb	r3, [r7, #6]
 80021ee:	4613      	mov	r3, r2
 80021f0:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80021f2:	79bb      	ldrb	r3, [r7, #6]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	79f9      	ldrb	r1, [r7, #7]
 80021f8:	88bb      	ldrh	r3, [r7, #4]
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2301      	movs	r3, #1
 8002202:	4804      	ldr	r0, [pc, #16]	@ (8002214 <SENSOR_IO_ReadMultiple+0x38>)
 8002204:	f7ff ff3e 	bl	8002084 <I2Cx_ReadMultiple>
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200009e4 	.word	0x200009e4

08002218 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002222:	2300      	movs	r3, #0
 8002224:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002226:	4b1a      	ldr	r3, [pc, #104]	@ (8002290 <BSP_ACCELERO_Init+0x78>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	4798      	blx	r3
 800222c:	4603      	mov	r3, r0
 800222e:	2b6a      	cmp	r3, #106	@ 0x6a
 8002230:	d002      	beq.n	8002238 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
 8002236:	e025      	b.n	8002284 <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002238:	4b16      	ldr	r3, [pc, #88]	@ (8002294 <BSP_ACCELERO_Init+0x7c>)
 800223a:	4a15      	ldr	r2, [pc, #84]	@ (8002290 <BSP_ACCELERO_Init+0x78>)
 800223c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800223e:	2330      	movs	r3, #48	@ 0x30
 8002240:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002242:	2300      	movs	r3, #0
 8002244:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002246:	2300      	movs	r3, #0
 8002248:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800224a:	2340      	movs	r3, #64	@ 0x40
 800224c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002256:	797a      	ldrb	r2, [r7, #5]
 8002258:	7abb      	ldrb	r3, [r7, #10]
 800225a:	4313      	orrs	r3, r2
 800225c:	b2db      	uxtb	r3, r3
 800225e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002260:	7a3b      	ldrb	r3, [r7, #8]
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	b2db      	uxtb	r3, r3
 8002268:	b21b      	sxth	r3, r3
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	b21a      	sxth	r2, r3
 800226e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	b21b      	sxth	r3, r3
 8002276:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <BSP_ACCELERO_Init+0x7c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	89ba      	ldrh	r2, [r7, #12]
 8002280:	4610      	mov	r0, r2
 8002282:	4798      	blx	r3
  }  

  return ret;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000060 	.word	0x20000060
 8002294:	20000a38 	.word	0x20000a38

08002298 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d009      	beq.n	80022bc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80022b2:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	4798      	blx	r3
    }
  }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20000a38 	.word	0x20000a38

080022c8 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80022d2:	2300      	movs	r3, #0
 80022d4:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80022d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002348 <BSP_GYRO_Init+0x80>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	4798      	blx	r3
 80022dc:	4603      	mov	r3, r0
 80022de:	2b6a      	cmp	r3, #106	@ 0x6a
 80022e0:	d002      	beq.n	80022e8 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	e029      	b.n	800233c <BSP_GYRO_Init+0x74>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80022e8:	4b18      	ldr	r3, [pc, #96]	@ (800234c <BSP_GYRO_Init+0x84>)
 80022ea:	4a17      	ldr	r2, [pc, #92]	@ (8002348 <BSP_GYRO_Init+0x80>)
 80022ec:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80022f2:	2330      	movs	r3, #48	@ 0x30
 80022f4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80022fe:	2340      	movs	r3, #64	@ 0x40
 8002300:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002306:	230c      	movs	r3, #12
 8002308:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 800230a:	7aba      	ldrb	r2, [r7, #10]
 800230c:	797b      	ldrb	r3, [r7, #5]
 800230e:	4313      	orrs	r3, r2
 8002310:	b2db      	uxtb	r3, r3
 8002312:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002314:	7a3b      	ldrb	r3, [r7, #8]
 8002316:	f043 0304 	orr.w	r3, r3, #4
 800231a:	b2db      	uxtb	r3, r3
 800231c:	b21b      	sxth	r3, r3
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	b21a      	sxth	r2, r3
 8002322:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	b21b      	sxth	r3, r3
 800232a:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 800232c:	4b07      	ldr	r3, [pc, #28]	@ (800234c <BSP_GYRO_Init+0x84>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	89ba      	ldrh	r2, [r7, #12]
 8002334:	4610      	mov	r0, r2
 8002336:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800233c:	7bfb      	ldrb	r3, [r7, #15]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000094 	.word	0x20000094
 800234c:	20000a3c 	.word	0x20000a3c

08002350 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002356:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <BSP_HSENSOR_Init+0x38>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	20be      	movs	r0, #190	@ 0xbe
 800235c:	4798      	blx	r3
 800235e:	4603      	mov	r3, r0
 8002360:	2bbc      	cmp	r3, #188	@ 0xbc
 8002362:	d002      	beq.n	800236a <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	e009      	b.n	800237e <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800236a:	4b08      	ldr	r3, [pc, #32]	@ (800238c <BSP_HSENSOR_Init+0x3c>)
 800236c:	4a06      	ldr	r2, [pc, #24]	@ (8002388 <BSP_HSENSOR_Init+0x38>)
 800236e:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002370:	4b06      	ldr	r3, [pc, #24]	@ (800238c <BSP_HSENSOR_Init+0x3c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	20be      	movs	r0, #190	@ 0xbe
 8002378:	4798      	blx	r3
    ret = HSENSOR_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800237e:	687b      	ldr	r3, [r7, #4]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000004 	.word	0x20000004
 800238c:	20000a40 	.word	0x20000a40

08002390 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002394:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <BSP_HSENSOR_ReadHumidity+0x18>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	20be      	movs	r0, #190	@ 0xbe
 800239c:	4798      	blx	r3
 800239e:	eef0 7a40 	vmov.f32	s15, s0
}
 80023a2:	eeb0 0a67 	vmov.f32	s0, s15
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000a40 	.word	0x20000a40

080023ac <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80023b6:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <BSP_MAGNETO_Init+0x50>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	4798      	blx	r3
 80023bc:	4603      	mov	r3, r0
 80023be:	2b3d      	cmp	r3, #61	@ 0x3d
 80023c0:	d002      	beq.n	80023c8 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	71fb      	strb	r3, [r7, #7]
 80023c6:	e013      	b.n	80023f0 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80023c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <BSP_MAGNETO_Init+0x54>)
 80023ca:	4a0c      	ldr	r2, [pc, #48]	@ (80023fc <BSP_MAGNETO_Init+0x50>)
 80023cc:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80023ce:	2358      	movs	r3, #88	@ 0x58
 80023d0:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80023da:	2308      	movs	r3, #8
 80023dc:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80023de:	2340      	movs	r3, #64	@ 0x40
 80023e0:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80023e2:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <BSP_MAGNETO_Init+0x54>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	463a      	mov	r2, r7
 80023ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023ee:	4798      	blx	r3
  } 

  return ret;  
 80023f0:	79fb      	ldrb	r3, [r7, #7]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000020 	.word	0x20000020
 8002400:	20000a44 	.word	0x20000a44

08002404 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800240a:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <BSP_PSENSOR_Init+0x38>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	20ba      	movs	r0, #186	@ 0xba
 8002410:	4798      	blx	r3
 8002412:	4603      	mov	r3, r0
 8002414:	2bb1      	cmp	r3, #177	@ 0xb1
 8002416:	d002      	beq.n	800241e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	607b      	str	r3, [r7, #4]
 800241c:	e009      	b.n	8002432 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <BSP_PSENSOR_Init+0x3c>)
 8002420:	4a06      	ldr	r2, [pc, #24]	@ (800243c <BSP_PSENSOR_Init+0x38>)
 8002422:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002424:	4b06      	ldr	r3, [pc, #24]	@ (8002440 <BSP_PSENSOR_Init+0x3c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	20ba      	movs	r0, #186	@ 0xba
 800242c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002432:	687b      	ldr	r3, [r7, #4]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000054 	.word	0x20000054
 8002440:	20000a48 	.word	0x20000a48

08002444 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <BSP_TSENSOR_Init+0x30>)
 8002450:	4a09      	ldr	r2, [pc, #36]	@ (8002478 <BSP_TSENSOR_Init+0x34>)
 8002452:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002454:	f7ff fe80 	bl	8002158 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002458:	4b06      	ldr	r3, [pc, #24]	@ (8002474 <BSP_TSENSOR_Init+0x30>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2100      	movs	r1, #0
 8002460:	20be      	movs	r0, #190	@ 0xbe
 8002462:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002468:	79fb      	ldrb	r3, [r7, #7]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000a4c 	.word	0x20000a4c
 8002478:	20000010 	.word	0x20000010

0800247c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002480:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <BSP_TSENSOR_ReadTemp+0x18>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	20be      	movs	r0, #190	@ 0xbe
 8002488:	4798      	blx	r3
 800248a:	eef0 7a40 	vmov.f32	s15, s0
}
 800248e:	eeb0 0a67 	vmov.f32	s0, s15
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000a4c 	.word	0x20000a4c

08002498 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2120      	movs	r1, #32
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff fe79 	bl	80021a0 <SENSOR_IO_Read>
 80024ae:	4603      	mov	r3, r0
 80024b0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f023 0304 	bic.w	r3, r3, #4
 80024b8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80024ba:	7bfb      	ldrb	r3, [r7, #15]
 80024bc:	f043 0304 	orr.w	r3, r3, #4
 80024c0:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	f023 0303 	bic.w	r3, r3, #3
 80024c8:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80024d8:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	2120      	movs	r1, #32
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fe42 	bl	800216c <SENSOR_IO_Write>
}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80024fa:	2300      	movs	r3, #0
 80024fc:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80024fe:	f7ff fe2b 	bl	8002158 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	210f      	movs	r1, #15
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fe49 	bl	80021a0 <SENSOR_IO_Read>
 800250e:	4603      	mov	r3, r0
 8002510:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b088      	sub	sp, #32
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002526:	88fb      	ldrh	r3, [r7, #6]
 8002528:	b2d8      	uxtb	r0, r3
 800252a:	f107 020c 	add.w	r2, r7, #12
 800252e:	2302      	movs	r3, #2
 8002530:	21b0      	movs	r1, #176	@ 0xb0
 8002532:	f7ff fe53 	bl	80021dc <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002536:	7b3b      	ldrb	r3, [r7, #12]
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	b2db      	uxtb	r3, r3
 800253c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800253e:	7b7b      	ldrb	r3, [r7, #13]
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	b2db      	uxtb	r3, r3
 8002544:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	b2d8      	uxtb	r0, r3
 800254a:	f107 020c 	add.w	r2, r7, #12
 800254e:	2302      	movs	r3, #2
 8002550:	21b6      	movs	r1, #182	@ 0xb6
 8002552:	f7ff fe43 	bl	80021dc <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002556:	7b7b      	ldrb	r3, [r7, #13]
 8002558:	b21b      	sxth	r3, r3
 800255a:	021b      	lsls	r3, r3, #8
 800255c:	b21a      	sxth	r2, r3
 800255e:	7b3b      	ldrb	r3, [r7, #12]
 8002560:	b21b      	sxth	r3, r3
 8002562:	4313      	orrs	r3, r2
 8002564:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	b2d8      	uxtb	r0, r3
 800256a:	f107 020c 	add.w	r2, r7, #12
 800256e:	2302      	movs	r3, #2
 8002570:	21ba      	movs	r1, #186	@ 0xba
 8002572:	f7ff fe33 	bl	80021dc <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002576:	7b7b      	ldrb	r3, [r7, #13]
 8002578:	b21b      	sxth	r3, r3
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	b21a      	sxth	r2, r3
 800257e:	7b3b      	ldrb	r3, [r7, #12]
 8002580:	b21b      	sxth	r3, r3
 8002582:	4313      	orrs	r3, r2
 8002584:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	b2d8      	uxtb	r0, r3
 800258a:	f107 020c 	add.w	r2, r7, #12
 800258e:	2302      	movs	r3, #2
 8002590:	21a8      	movs	r1, #168	@ 0xa8
 8002592:	f7ff fe23 	bl	80021dc <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002596:	7b7b      	ldrb	r3, [r7, #13]
 8002598:	b21b      	sxth	r3, r3
 800259a:	021b      	lsls	r3, r3, #8
 800259c:	b21a      	sxth	r2, r3
 800259e:	7b3b      	ldrb	r3, [r7, #12]
 80025a0:	b21b      	sxth	r3, r3
 80025a2:	4313      	orrs	r3, r2
 80025a4:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 80025a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80025aa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	ee07 3a90 	vmov	s15, r3
 80025b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b8:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80025bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ca:	ee67 6a27 	vmul.f32	s13, s14, s15
 80025ce:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80025d2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f4:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80025f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80025fc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002604:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002608:	edd7 7a04 	vldr	s15, [r7, #16]
 800260c:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002650 <HTS221_H_ReadHumidity+0x134>
 8002610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002618:	dd01      	ble.n	800261e <HTS221_H_ReadHumidity+0x102>
 800261a:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <HTS221_H_ReadHumidity+0x138>)
 800261c:	e00a      	b.n	8002634 <HTS221_H_ReadHumidity+0x118>
        : tmp_f;
 800261e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262a:	d502      	bpl.n	8002632 <HTS221_H_ReadHumidity+0x116>
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	e000      	b.n	8002634 <HTS221_H_ReadHumidity+0x118>
 8002632:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002634:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002636:	edd7 7a04 	vldr	s15, [r7, #16]
 800263a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800263e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002642:	eef0 7a66 	vmov.f32	s15, s13
}
 8002646:	eeb0 0a67 	vmov.f32	s0, s15
 800264a:	3720      	adds	r7, #32
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	447a0000 	.word	0x447a0000
 8002654:	447a0000 	.word	0x447a0000

08002658 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002664:	88fb      	ldrh	r3, [r7, #6]
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2120      	movs	r1, #32
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fd98 	bl	80021a0 <SENSOR_IO_Read>
 8002670:	4603      	mov	r3, r0
 8002672:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	f023 0304 	bic.w	r3, r3, #4
 800267a:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	f023 0303 	bic.w	r3, r3, #3
 800268a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800269a:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	2120      	movs	r1, #32
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fd61 	bl	800216c <SENSOR_IO_Write>
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b088      	sub	sp, #32
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	b2d8      	uxtb	r0, r3
 80026c0:	f107 0208 	add.w	r2, r7, #8
 80026c4:	2302      	movs	r3, #2
 80026c6:	21b2      	movs	r1, #178	@ 0xb2
 80026c8:	f7ff fd88 	bl	80021dc <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80026cc:	88fb      	ldrh	r3, [r7, #6]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2135      	movs	r1, #53	@ 0x35
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fd64 	bl	80021a0 <SENSOR_IO_Read>
 80026d8:	4603      	mov	r3, r0
 80026da:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80026dc:	7ffb      	ldrb	r3, [r7, #31]
 80026de:	b21b      	sxth	r3, r3
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	b21b      	sxth	r3, r3
 80026e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026e8:	b21a      	sxth	r2, r3
 80026ea:	7a3b      	ldrb	r3, [r7, #8]
 80026ec:	b21b      	sxth	r3, r3
 80026ee:	4313      	orrs	r3, r2
 80026f0:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80026f2:	7ffb      	ldrb	r3, [r7, #31]
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	019b      	lsls	r3, r3, #6
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026fe:	b21a      	sxth	r2, r3
 8002700:	7a7b      	ldrb	r3, [r7, #9]
 8002702:	b21b      	sxth	r3, r3
 8002704:	4313      	orrs	r3, r2
 8002706:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002708:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800270c:	10db      	asrs	r3, r3, #3
 800270e:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002710:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002714:	10db      	asrs	r3, r3, #3
 8002716:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	b2d8      	uxtb	r0, r3
 800271c:	f107 0208 	add.w	r2, r7, #8
 8002720:	2304      	movs	r3, #4
 8002722:	21bc      	movs	r1, #188	@ 0xbc
 8002724:	f7ff fd5a 	bl	80021dc <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002728:	7a7b      	ldrb	r3, [r7, #9]
 800272a:	b21b      	sxth	r3, r3
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	b21a      	sxth	r2, r3
 8002730:	7a3b      	ldrb	r3, [r7, #8]
 8002732:	b21b      	sxth	r3, r3
 8002734:	4313      	orrs	r3, r2
 8002736:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002738:	7afb      	ldrb	r3, [r7, #11]
 800273a:	b21b      	sxth	r3, r3
 800273c:	021b      	lsls	r3, r3, #8
 800273e:	b21a      	sxth	r2, r3
 8002740:	7abb      	ldrb	r3, [r7, #10]
 8002742:	b21b      	sxth	r3, r3
 8002744:	4313      	orrs	r3, r2
 8002746:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	b2d8      	uxtb	r0, r3
 800274c:	f107 0208 	add.w	r2, r7, #8
 8002750:	2302      	movs	r3, #2
 8002752:	21aa      	movs	r1, #170	@ 0xaa
 8002754:	f7ff fd42 	bl	80021dc <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002758:	7a7b      	ldrb	r3, [r7, #9]
 800275a:	b21b      	sxth	r3, r3
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	b21a      	sxth	r2, r3
 8002760:	7a3b      	ldrb	r3, [r7, #8]
 8002762:	b21b      	sxth	r3, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002768:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800276c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800277a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800277e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	ee07 3a90 	vmov	s15, r3
 8002788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800278c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002790:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002794:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027aa:	ee07 3a90 	vmov	s15, r3
 80027ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b6:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	ee07 3a90 	vmov	s15, r3
}
 80027c0:	eeb0 0a67 	vmov.f32	s0, s15
 80027c4:	3720      	adds	r7, #32
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b082      	sub	sp, #8
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	463b      	mov	r3, r7
 80027d2:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80027d6:	783b      	ldrb	r3, [r7, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	2120      	movs	r1, #32
 80027dc:	203c      	movs	r0, #60	@ 0x3c
 80027de:	f7ff fcc5 	bl	800216c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80027e2:	787b      	ldrb	r3, [r7, #1]
 80027e4:	461a      	mov	r2, r3
 80027e6:	2121      	movs	r1, #33	@ 0x21
 80027e8:	203c      	movs	r0, #60	@ 0x3c
 80027ea:	f7ff fcbf 	bl	800216c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80027ee:	78bb      	ldrb	r3, [r7, #2]
 80027f0:	461a      	mov	r2, r3
 80027f2:	2122      	movs	r1, #34	@ 0x22
 80027f4:	203c      	movs	r0, #60	@ 0x3c
 80027f6:	f7ff fcb9 	bl	800216c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	461a      	mov	r2, r3
 80027fe:	2123      	movs	r1, #35	@ 0x23
 8002800:	203c      	movs	r0, #60	@ 0x3c
 8002802:	f7ff fcb3 	bl	800216c <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002806:	793b      	ldrb	r3, [r7, #4]
 8002808:	461a      	mov	r2, r3
 800280a:	2124      	movs	r1, #36	@ 0x24
 800280c:	203c      	movs	r0, #60	@ 0x3c
 800280e:	f7ff fcad 	bl	800216c <SENSOR_IO_Write>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b082      	sub	sp, #8
 800281e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002820:	2300      	movs	r3, #0
 8002822:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002824:	2122      	movs	r1, #34	@ 0x22
 8002826:	203c      	movs	r0, #60	@ 0x3c
 8002828:	f7ff fcba 	bl	80021a0 <SENSOR_IO_Read>
 800282c:	4603      	mov	r3, r0
 800282e:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f023 0303 	bic.w	r3, r3, #3
 8002836:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f043 0303 	orr.w	r3, r3, #3
 800283e:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	461a      	mov	r2, r3
 8002844:	2122      	movs	r1, #34	@ 0x22
 8002846:	203c      	movs	r0, #60	@ 0x3c
 8002848:	f7ff fc90 	bl	800216c <SENSOR_IO_Write>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002858:	f7ff fc7e 	bl	8002158 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800285c:	210f      	movs	r1, #15
 800285e:	203c      	movs	r0, #60	@ 0x3c
 8002860:	f7ff fc9e 	bl	80021a0 <SENSOR_IO_Read>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	bd80      	pop	{r7, pc}

0800286a <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800286a:	b580      	push	{r7, lr}
 800286c:	b084      	sub	sp, #16
 800286e:	af00      	add	r7, sp, #0
 8002870:	4603      	mov	r3, r0
 8002872:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002878:	2122      	movs	r1, #34	@ 0x22
 800287a:	203c      	movs	r0, #60	@ 0x3c
 800287c:	f7ff fc90 	bl	80021a0 <SENSOR_IO_Read>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	f023 0320 	bic.w	r3, r3, #32
 800288a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	f043 0320 	orr.w	r3, r3, #32
 8002898:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	461a      	mov	r2, r3
 800289e:	2122      	movs	r1, #34	@ 0x22
 80028a0:	203c      	movs	r0, #60	@ 0x3c
 80028a2:	f7ff fc63 	bl	800216c <SENSOR_IO_Write>
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80028bc:	2300      	movs	r3, #0
 80028be:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80028c6:	2121      	movs	r1, #33	@ 0x21
 80028c8:	203c      	movs	r0, #60	@ 0x3c
 80028ca:	f7ff fc69 	bl	80021a0 <SENSOR_IO_Read>
 80028ce:	4603      	mov	r3, r0
 80028d0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80028d2:	f107 0208 	add.w	r2, r7, #8
 80028d6:	2306      	movs	r3, #6
 80028d8:	21a8      	movs	r1, #168	@ 0xa8
 80028da:	203c      	movs	r0, #60	@ 0x3c
 80028dc:	f7ff fc7e 	bl	80021dc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80028e0:	2300      	movs	r3, #0
 80028e2:	77fb      	strb	r3, [r7, #31]
 80028e4:	e01a      	b.n	800291c <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80028e6:	7ffb      	ldrb	r3, [r7, #31]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	3301      	adds	r3, #1
 80028ec:	3320      	adds	r3, #32
 80028ee:	443b      	add	r3, r7
 80028f0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	7ffa      	ldrb	r2, [r7, #31]
 80028fa:	0052      	lsls	r2, r2, #1
 80028fc:	3220      	adds	r2, #32
 80028fe:	443a      	add	r2, r7
 8002900:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002904:	4413      	add	r3, r2
 8002906:	b29a      	uxth	r2, r3
 8002908:	7ffb      	ldrb	r3, [r7, #31]
 800290a:	b212      	sxth	r2, r2
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	3320      	adds	r3, #32
 8002910:	443b      	add	r3, r7
 8002912:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002916:	7ffb      	ldrb	r3, [r7, #31]
 8002918:	3301      	adds	r3, #1
 800291a:	77fb      	strb	r3, [r7, #31]
 800291c:	7ffb      	ldrb	r3, [r7, #31]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d9e1      	bls.n	80028e6 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002928:	2b60      	cmp	r3, #96	@ 0x60
 800292a:	d013      	beq.n	8002954 <LIS3MDL_MagReadXYZ+0xa4>
 800292c:	2b60      	cmp	r3, #96	@ 0x60
 800292e:	dc14      	bgt.n	800295a <LIS3MDL_MagReadXYZ+0xaa>
 8002930:	2b40      	cmp	r3, #64	@ 0x40
 8002932:	d00c      	beq.n	800294e <LIS3MDL_MagReadXYZ+0x9e>
 8002934:	2b40      	cmp	r3, #64	@ 0x40
 8002936:	dc10      	bgt.n	800295a <LIS3MDL_MagReadXYZ+0xaa>
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <LIS3MDL_MagReadXYZ+0x92>
 800293c:	2b20      	cmp	r3, #32
 800293e:	d003      	beq.n	8002948 <LIS3MDL_MagReadXYZ+0x98>
 8002940:	e00b      	b.n	800295a <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002942:	4b19      	ldr	r3, [pc, #100]	@ (80029a8 <LIS3MDL_MagReadXYZ+0xf8>)
 8002944:	61bb      	str	r3, [r7, #24]
    break;
 8002946:	e008      	b.n	800295a <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002948:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <LIS3MDL_MagReadXYZ+0xfc>)
 800294a:	61bb      	str	r3, [r7, #24]
    break;
 800294c:	e005      	b.n	800295a <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800294e:	4b18      	ldr	r3, [pc, #96]	@ (80029b0 <LIS3MDL_MagReadXYZ+0x100>)
 8002950:	61bb      	str	r3, [r7, #24]
    break;
 8002952:	e002      	b.n	800295a <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002954:	4b17      	ldr	r3, [pc, #92]	@ (80029b4 <LIS3MDL_MagReadXYZ+0x104>)
 8002956:	61bb      	str	r3, [r7, #24]
    break;    
 8002958:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800295a:	2300      	movs	r3, #0
 800295c:	77fb      	strb	r3, [r7, #31]
 800295e:	e01a      	b.n	8002996 <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002960:	7ffb      	ldrb	r3, [r7, #31]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	3320      	adds	r3, #32
 8002966:	443b      	add	r3, r7
 8002968:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002974:	edd7 7a06 	vldr	s15, [r7, #24]
 8002978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297c:	7ffb      	ldrb	r3, [r7, #31]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002988:	ee17 2a90 	vmov	r2, s15
 800298c:	b212      	sxth	r2, r2
 800298e:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002990:	7ffb      	ldrb	r3, [r7, #31]
 8002992:	3301      	adds	r3, #1
 8002994:	77fb      	strb	r3, [r7, #31]
 8002996:	7ffb      	ldrb	r3, [r7, #31]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d9e1      	bls.n	8002960 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3720      	adds	r7, #32
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	3e0f5c29 	.word	0x3e0f5c29
 80029ac:	3e947ae1 	.word	0x3e947ae1
 80029b0:	3edc28f6 	.word	0x3edc28f6
 80029b4:	3f147ae1 	.word	0x3f147ae1

080029b8 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f879 	bl	8002abc <LPS22HB_Init>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	4603      	mov	r3, r0
 80029da:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80029dc:	2300      	movs	r3, #0
 80029de:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80029e0:	f7ff fbba 	bl	8002158 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	210f      	movs	r1, #15
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fbd8 	bl	80021a0 <SENSOR_IO_Read>
 80029f0:	4603      	mov	r3, r0
 80029f2:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	74fb      	strb	r3, [r7, #19]
 8002a12:	e013      	b.n	8002a3c <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002a14:	88fb      	ldrh	r3, [r7, #6]
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	3328      	adds	r3, #40	@ 0x28
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	7cfc      	ldrb	r4, [r7, #19]
 8002a20:	4619      	mov	r1, r3
 8002a22:	4610      	mov	r0, r2
 8002a24:	f7ff fbbc 	bl	80021a0 <SENSOR_IO_Read>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	f104 0318 	add.w	r3, r4, #24
 8002a30:	443b      	add	r3, r7
 8002a32:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002a36:	7cfb      	ldrb	r3, [r7, #19]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	74fb      	strb	r3, [r7, #19]
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d9e8      	bls.n	8002a14 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	74fb      	strb	r3, [r7, #19]
 8002a46:	e00f      	b.n	8002a68 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	3318      	adds	r3, #24
 8002a4c:	443b      	add	r3, r7
 8002a4e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002a52:	461a      	mov	r2, r3
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	3301      	adds	r3, #1
 8002a66:	74fb      	strb	r3, [r7, #19]
 8002a68:	7cfb      	ldrb	r3, [r7, #19]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d9ec      	bls.n	8002a48 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a7e:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2264      	movs	r2, #100	@ 0x64
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	da01      	bge.n	8002a94 <LPS22HB_P_ReadPressure+0x94>
 8002a90:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002a94:	131b      	asrs	r3, r3, #12
 8002a96:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002ab8 <LPS22HB_P_ReadPressure+0xb8>
 8002aa6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002aaa:	eef0 7a66 	vmov.f32	s15, s13
}
 8002aae:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd90      	pop	{r4, r7, pc}
 8002ab8:	42c80000 	.word	0x42c80000

08002abc <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	211a      	movs	r1, #26
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fb67 	bl	80021a0 <SENSOR_IO_Read>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	f023 0301 	bic.w	r3, r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	7bfa      	ldrb	r2, [r7, #15]
 8002aec:	211a      	movs	r1, #26
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fb3c 	bl	800216c <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2110      	movs	r1, #16
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fb50 	bl	80021a0 <SENSOR_IO_Read>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002b12:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	f023 0302 	bic.w	r3, r3, #2
 8002b1a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	f043 0302 	orr.w	r3, r3, #2
 8002b22:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	2110      	movs	r1, #16
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff fb1d 	bl	800216c <SENSOR_IO_Write>
}  
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002b48:	2110      	movs	r1, #16
 8002b4a:	20d4      	movs	r0, #212	@ 0xd4
 8002b4c:	f7ff fb28 	bl	80021a0 <SENSOR_IO_Read>
 8002b50:	4603      	mov	r3, r0
 8002b52:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002b58:	7bbb      	ldrb	r3, [r7, #14]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002b60:	7bba      	ldrb	r2, [r7, #14]
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002b68:	7bbb      	ldrb	r3, [r7, #14]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	2110      	movs	r1, #16
 8002b6e:	20d4      	movs	r0, #212	@ 0xd4
 8002b70:	f7ff fafc 	bl	800216c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002b74:	2112      	movs	r1, #18
 8002b76:	20d4      	movs	r0, #212	@ 0xd4
 8002b78:	f7ff fb12 	bl	80021a0 <SENSOR_IO_Read>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002b88:	7bbb      	ldrb	r3, [r7, #14]
 8002b8a:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002b8e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002b90:	7bba      	ldrb	r2, [r7, #14]
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002b98:	7bbb      	ldrb	r3, [r7, #14]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2112      	movs	r1, #18
 8002b9e:	20d4      	movs	r0, #212	@ 0xd4
 8002ba0:	f7ff fae4 	bl	800216c <SENSOR_IO_Write>
}
 8002ba4:	bf00      	nop
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002bb6:	2110      	movs	r1, #16
 8002bb8:	20d4      	movs	r0, #212	@ 0xd4
 8002bba:	f7ff faf1 	bl	80021a0 <SENSOR_IO_Read>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	f003 030f 	and.w	r3, r3, #15
 8002bc8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2110      	movs	r1, #16
 8002bd0:	20d4      	movs	r0, #212	@ 0xd4
 8002bd2:	f7ff facb 	bl	800216c <SENSOR_IO_Write>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002bde:	b580      	push	{r7, lr}
 8002be0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002be2:	f7ff fab9 	bl	8002158 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002be6:	210f      	movs	r1, #15
 8002be8:	20d4      	movs	r0, #212	@ 0xd4
 8002bea:	f7ff fad9 	bl	80021a0 <SENSOR_IO_Read>
 8002bee:	4603      	mov	r3, r0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002c02:	2115      	movs	r1, #21
 8002c04:	20d4      	movs	r0, #212	@ 0xd4
 8002c06:	f7ff facb 	bl	80021a0 <SENSOR_IO_Read>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	f023 0310 	bic.w	r3, r3, #16
 8002c14:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	f043 0310 	orr.w	r3, r3, #16
 8002c22:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	461a      	mov	r2, r3
 8002c28:	2115      	movs	r1, #21
 8002c2a:	20d4      	movs	r0, #212	@ 0xd4
 8002c2c:	f7ff fa9e 	bl	800216c <SENSOR_IO_Write>
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002c4e:	2110      	movs	r1, #16
 8002c50:	20d4      	movs	r0, #212	@ 0xd4
 8002c52:	f7ff faa5 	bl	80021a0 <SENSOR_IO_Read>
 8002c56:	4603      	mov	r3, r0
 8002c58:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002c5a:	f107 0208 	add.w	r2, r7, #8
 8002c5e:	2306      	movs	r3, #6
 8002c60:	2128      	movs	r1, #40	@ 0x28
 8002c62:	20d4      	movs	r0, #212	@ 0xd4
 8002c64:	f7ff faba 	bl	80021dc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002c68:	2300      	movs	r3, #0
 8002c6a:	77fb      	strb	r3, [r7, #31]
 8002c6c:	e01a      	b.n	8002ca4 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002c6e:	7ffb      	ldrb	r3, [r7, #31]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	3301      	adds	r3, #1
 8002c74:	3320      	adds	r3, #32
 8002c76:	443b      	add	r3, r7
 8002c78:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002c7c:	021b      	lsls	r3, r3, #8
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	7ffa      	ldrb	r2, [r7, #31]
 8002c82:	0052      	lsls	r2, r2, #1
 8002c84:	3220      	adds	r2, #32
 8002c86:	443a      	add	r2, r7
 8002c88:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	7ffb      	ldrb	r3, [r7, #31]
 8002c92:	b212      	sxth	r2, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	3320      	adds	r3, #32
 8002c98:	443b      	add	r3, r7
 8002c9a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	7ffb      	ldrb	r3, [r7, #31]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d9e1      	bls.n	8002c6e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b0c      	cmp	r3, #12
 8002cb2:	d829      	bhi.n	8002d08 <LSM6DSL_AccReadXYZ+0xd0>
 8002cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cbc <LSM6DSL_AccReadXYZ+0x84>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002cf1 	.word	0x08002cf1
 8002cc0:	08002d09 	.word	0x08002d09
 8002cc4:	08002d09 	.word	0x08002d09
 8002cc8:	08002d09 	.word	0x08002d09
 8002ccc:	08002d03 	.word	0x08002d03
 8002cd0:	08002d09 	.word	0x08002d09
 8002cd4:	08002d09 	.word	0x08002d09
 8002cd8:	08002d09 	.word	0x08002d09
 8002cdc:	08002cf7 	.word	0x08002cf7
 8002ce0:	08002d09 	.word	0x08002d09
 8002ce4:	08002d09 	.word	0x08002d09
 8002ce8:	08002d09 	.word	0x08002d09
 8002cec:	08002cfd 	.word	0x08002cfd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002cf0:	4b18      	ldr	r3, [pc, #96]	@ (8002d54 <LSM6DSL_AccReadXYZ+0x11c>)
 8002cf2:	61bb      	str	r3, [r7, #24]
    break;
 8002cf4:	e008      	b.n	8002d08 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002cf6:	4b18      	ldr	r3, [pc, #96]	@ (8002d58 <LSM6DSL_AccReadXYZ+0x120>)
 8002cf8:	61bb      	str	r3, [r7, #24]
    break;
 8002cfa:	e005      	b.n	8002d08 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002cfc:	4b17      	ldr	r3, [pc, #92]	@ (8002d5c <LSM6DSL_AccReadXYZ+0x124>)
 8002cfe:	61bb      	str	r3, [r7, #24]
    break;
 8002d00:	e002      	b.n	8002d08 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002d02:	4b17      	ldr	r3, [pc, #92]	@ (8002d60 <LSM6DSL_AccReadXYZ+0x128>)
 8002d04:	61bb      	str	r3, [r7, #24]
    break;    
 8002d06:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e01a      	b.n	8002d44 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002d0e:	7ffb      	ldrb	r3, [r7, #31]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	3320      	adds	r3, #32
 8002d14:	443b      	add	r3, r7
 8002d16:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d22:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2a:	7ffb      	ldrb	r3, [r7, #31]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d36:	ee17 2a90 	vmov	r2, s15
 8002d3a:	b212      	sxth	r2, r2
 8002d3c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002d3e:	7ffb      	ldrb	r3, [r7, #31]
 8002d40:	3301      	adds	r3, #1
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	7ffb      	ldrb	r3, [r7, #31]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d9e1      	bls.n	8002d0e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	bf00      	nop
 8002d4e:	3720      	adds	r7, #32
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	3d79db23 	.word	0x3d79db23
 8002d58:	3df9db23 	.word	0x3df9db23
 8002d5c:	3e79db23 	.word	0x3e79db23
 8002d60:	3ef9db23 	.word	0x3ef9db23

08002d64 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002d72:	2111      	movs	r1, #17
 8002d74:	20d4      	movs	r0, #212	@ 0xd4
 8002d76:	f7ff fa13 	bl	80021a0 <SENSOR_IO_Read>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002d82:	7bbb      	ldrb	r3, [r7, #14]
 8002d84:	f003 0303 	and.w	r3, r3, #3
 8002d88:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002d8a:	7bba      	ldrb	r2, [r7, #14]
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002d92:	7bbb      	ldrb	r3, [r7, #14]
 8002d94:	461a      	mov	r2, r3
 8002d96:	2111      	movs	r1, #17
 8002d98:	20d4      	movs	r0, #212	@ 0xd4
 8002d9a:	f7ff f9e7 	bl	800216c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002d9e:	2112      	movs	r1, #18
 8002da0:	20d4      	movs	r0, #212	@ 0xd4
 8002da2:	f7ff f9fd 	bl	80021a0 <SENSOR_IO_Read>
 8002da6:	4603      	mov	r3, r0
 8002da8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002db2:	7bbb      	ldrb	r3, [r7, #14]
 8002db4:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002db8:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002dba:	7bba      	ldrb	r2, [r7, #14]
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002dc2:	7bbb      	ldrb	r3, [r7, #14]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2112      	movs	r1, #18
 8002dc8:	20d4      	movs	r0, #212	@ 0xd4
 8002dca:	f7ff f9cf 	bl	800216c <SENSOR_IO_Write>
}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002de0:	2111      	movs	r1, #17
 8002de2:	20d4      	movs	r0, #212	@ 0xd4
 8002de4:	f7ff f9dc 	bl	80021a0 <SENSOR_IO_Read>
 8002de8:	4603      	mov	r3, r0
 8002dea:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	461a      	mov	r2, r3
 8002df8:	2111      	movs	r1, #17
 8002dfa:	20d4      	movs	r0, #212	@ 0xd4
 8002dfc:	f7ff f9b6 	bl	800216c <SENSOR_IO_Write>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002e0c:	f7ff f9a4 	bl	8002158 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002e10:	210f      	movs	r1, #15
 8002e12:	20d4      	movs	r0, #212	@ 0xd4
 8002e14:	f7ff f9c4 	bl	80021a0 <SENSOR_IO_Read>
 8002e18:	4603      	mov	r3, r0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002e2c:	2116      	movs	r1, #22
 8002e2e:	20d4      	movs	r0, #212	@ 0xd4
 8002e30:	f7ff f9b6 	bl	80021a0 <SENSOR_IO_Read>
 8002e34:	4603      	mov	r3, r0
 8002e36:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e3e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002e40:	88fb      	ldrh	r3, [r7, #6]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002e4c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	461a      	mov	r2, r3
 8002e52:	2116      	movs	r1, #22
 8002e54:	20d4      	movs	r0, #212	@ 0xd4
 8002e56:	f7ff f989 	bl	800216c <SENSOR_IO_Write>
}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002e7a:	2111      	movs	r1, #17
 8002e7c:	20d4      	movs	r0, #212	@ 0xd4
 8002e7e:	f7ff f98f 	bl	80021a0 <SENSOR_IO_Read>
 8002e82:	4603      	mov	r3, r0
 8002e84:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8002e86:	f107 0208 	add.w	r2, r7, #8
 8002e8a:	2306      	movs	r3, #6
 8002e8c:	2122      	movs	r1, #34	@ 0x22
 8002e8e:	20d4      	movs	r0, #212	@ 0xd4
 8002e90:	f7ff f9a4 	bl	80021dc <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002e94:	2300      	movs	r3, #0
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e01a      	b.n	8002ed0 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	3320      	adds	r3, #32
 8002ea2:	443b      	add	r3, r7
 8002ea4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	7ffa      	ldrb	r2, [r7, #31]
 8002eae:	0052      	lsls	r2, r2, #1
 8002eb0:	3220      	adds	r2, #32
 8002eb2:	443a      	add	r2, r7
 8002eb4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002eb8:	4413      	add	r3, r2
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	7ffb      	ldrb	r3, [r7, #31]
 8002ebe:	b212      	sxth	r2, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	3320      	adds	r3, #32
 8002ec4:	443b      	add	r3, r7
 8002ec6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002eca:	7ffb      	ldrb	r3, [r7, #31]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	7ffb      	ldrb	r3, [r7, #31]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d9e1      	bls.n	8002e9a <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8002ed6:	7dfb      	ldrb	r3, [r7, #23]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b0c      	cmp	r3, #12
 8002ede:	d829      	bhi.n	8002f34 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 8002ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ee8 <LSM6DSL_GyroReadXYZAngRate+0x84>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f1d 	.word	0x08002f1d
 8002eec:	08002f35 	.word	0x08002f35
 8002ef0:	08002f35 	.word	0x08002f35
 8002ef4:	08002f35 	.word	0x08002f35
 8002ef8:	08002f23 	.word	0x08002f23
 8002efc:	08002f35 	.word	0x08002f35
 8002f00:	08002f35 	.word	0x08002f35
 8002f04:	08002f35 	.word	0x08002f35
 8002f08:	08002f29 	.word	0x08002f29
 8002f0c:	08002f35 	.word	0x08002f35
 8002f10:	08002f35 	.word	0x08002f35
 8002f14:	08002f35 	.word	0x08002f35
 8002f18:	08002f2f 	.word	0x08002f2f
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002f1c:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8002f1e:	61bb      	str	r3, [r7, #24]
    break;
 8002f20:	e008      	b.n	8002f34 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8002f22:	4b16      	ldr	r3, [pc, #88]	@ (8002f7c <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8002f24:	61bb      	str	r3, [r7, #24]
    break;
 8002f26:	e005      	b.n	8002f34 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 8002f28:	4b15      	ldr	r3, [pc, #84]	@ (8002f80 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 8002f2a:	61bb      	str	r3, [r7, #24]
    break;
 8002f2c:	e002      	b.n	8002f34 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8002f30:	61bb      	str	r3, [r7, #24]
    break;    
 8002f32:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e016      	b.n	8002f68 <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8002f3a:	7ffb      	ldrb	r3, [r7, #31]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	3320      	adds	r3, #32
 8002f40:	443b      	add	r3, r7
 8002f42:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002f46:	ee07 3a90 	vmov	s15, r3
 8002f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f4e:	7ffb      	ldrb	r3, [r7, #31]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002f62:	7ffb      	ldrb	r3, [r7, #31]
 8002f64:	3301      	adds	r3, #1
 8002f66:	77fb      	strb	r3, [r7, #31]
 8002f68:	7ffb      	ldrb	r3, [r7, #31]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d9e5      	bls.n	8002f3a <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 8002f6e:	bf00      	nop
 8002f70:	bf00      	nop
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	410c0000 	.word	0x410c0000
 8002f7c:	418c0000 	.word	0x418c0000
 8002f80:	420c0000 	.word	0x420c0000
 8002f84:	428c0000 	.word	0x428c0000

08002f88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f92:	2003      	movs	r0, #3
 8002f94:	f000 f960 	bl	8003258 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f000 f80d 	bl	8002fb8 <HAL_InitTick>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	71fb      	strb	r3, [r7, #7]
 8002fa8:	e001      	b.n	8002fae <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002faa:	f7fe fbcd 	bl	8001748 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fae:	79fb      	ldrb	r3, [r7, #7]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fc4:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <HAL_InitTick+0x6c>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d023      	beq.n	8003014 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fcc:	4b16      	ldr	r3, [pc, #88]	@ (8003028 <HAL_InitTick+0x70>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4b14      	ldr	r3, [pc, #80]	@ (8003024 <HAL_InitTick+0x6c>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f96d 	bl	80032c2 <HAL_SYSTICK_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10f      	bne.n	800300e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b0f      	cmp	r3, #15
 8002ff2:	d809      	bhi.n	8003008 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ffc:	f000 f937 	bl	800326e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003000:	4a0a      	ldr	r2, [pc, #40]	@ (800302c <HAL_InitTick+0x74>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e007      	b.n	8003018 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
 800300c:	e004      	b.n	8003018 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	73fb      	strb	r3, [r7, #15]
 8003012:	e001      	b.n	8003018 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200000cc 	.word	0x200000cc
 8003028:	20000000 	.word	0x20000000
 800302c:	200000c8 	.word	0x200000c8

08003030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003034:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_IncTick+0x20>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <HAL_IncTick+0x24>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4413      	add	r3, r2
 8003040:	4a04      	ldr	r2, [pc, #16]	@ (8003054 <HAL_IncTick+0x24>)
 8003042:	6013      	str	r3, [r2, #0]
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	200000cc 	.word	0x200000cc
 8003054:	20000a50 	.word	0x20000a50

08003058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return uwTick;
 800305c:	4b03      	ldr	r3, [pc, #12]	@ (800306c <HAL_GetTick+0x14>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000a50 	.word	0x20000a50

08003070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003078:	f7ff ffee 	bl	8003058 <HAL_GetTick>
 800307c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003088:	d005      	beq.n	8003096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800308a:	4b0a      	ldr	r3, [pc, #40]	@ (80030b4 <HAL_Delay+0x44>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4413      	add	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003096:	bf00      	nop
 8003098:	f7ff ffde 	bl	8003058 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d8f7      	bhi.n	8003098 <HAL_Delay+0x28>
  {
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	200000cc 	.word	0x200000cc

080030b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c8:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <__NVIC_SetPriorityGrouping+0x44>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030d4:	4013      	ands	r3, r2
 80030d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ea:	4a04      	ldr	r2, [pc, #16]	@ (80030fc <__NVIC_SetPriorityGrouping+0x44>)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	60d3      	str	r3, [r2, #12]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003104:	4b04      	ldr	r3, [pc, #16]	@ (8003118 <__NVIC_GetPriorityGrouping+0x18>)
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	f003 0307 	and.w	r3, r3, #7
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	2b00      	cmp	r3, #0
 800312c:	db0b      	blt.n	8003146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	f003 021f 	and.w	r2, r3, #31
 8003134:	4907      	ldr	r1, [pc, #28]	@ (8003154 <__NVIC_EnableIRQ+0x38>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	2001      	movs	r0, #1
 800313e:	fa00 f202 	lsl.w	r2, r0, r2
 8003142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000e100 	.word	0xe000e100

08003158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	6039      	str	r1, [r7, #0]
 8003162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	2b00      	cmp	r3, #0
 800316a:	db0a      	blt.n	8003182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	b2da      	uxtb	r2, r3
 8003170:	490c      	ldr	r1, [pc, #48]	@ (80031a4 <__NVIC_SetPriority+0x4c>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	0112      	lsls	r2, r2, #4
 8003178:	b2d2      	uxtb	r2, r2
 800317a:	440b      	add	r3, r1
 800317c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003180:	e00a      	b.n	8003198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4908      	ldr	r1, [pc, #32]	@ (80031a8 <__NVIC_SetPriority+0x50>)
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	3b04      	subs	r3, #4
 8003190:	0112      	lsls	r2, r2, #4
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	440b      	add	r3, r1
 8003196:	761a      	strb	r2, [r3, #24]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	e000e100 	.word	0xe000e100
 80031a8:	e000ed00 	.word	0xe000ed00

080031ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	@ 0x24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f1c3 0307 	rsb	r3, r3, #7
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	bf28      	it	cs
 80031ca:	2304      	movcs	r3, #4
 80031cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	3304      	adds	r3, #4
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d902      	bls.n	80031dc <NVIC_EncodePriority+0x30>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3b03      	subs	r3, #3
 80031da:	e000      	b.n	80031de <NVIC_EncodePriority+0x32>
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	401a      	ands	r2, r3
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	43d9      	mvns	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	4313      	orrs	r3, r2
         );
}
 8003206:	4618      	mov	r0, r3
 8003208:	3724      	adds	r7, #36	@ 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
	...

08003214 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3b01      	subs	r3, #1
 8003220:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003224:	d301      	bcc.n	800322a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003226:	2301      	movs	r3, #1
 8003228:	e00f      	b.n	800324a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322a:	4a0a      	ldr	r2, [pc, #40]	@ (8003254 <SysTick_Config+0x40>)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3b01      	subs	r3, #1
 8003230:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003232:	210f      	movs	r1, #15
 8003234:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003238:	f7ff ff8e 	bl	8003158 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	4b05      	ldr	r3, [pc, #20]	@ (8003254 <SysTick_Config+0x40>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003242:	4b04      	ldr	r3, [pc, #16]	@ (8003254 <SysTick_Config+0x40>)
 8003244:	2207      	movs	r2, #7
 8003246:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	e000e010 	.word	0xe000e010

08003258 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff ff29 	bl	80030b8 <__NVIC_SetPriorityGrouping>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	4603      	mov	r3, r0
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	607a      	str	r2, [r7, #4]
 800327a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003280:	f7ff ff3e 	bl	8003100 <__NVIC_GetPriorityGrouping>
 8003284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	6978      	ldr	r0, [r7, #20]
 800328c:	f7ff ff8e 	bl	80031ac <NVIC_EncodePriority>
 8003290:	4602      	mov	r2, r0
 8003292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff5d 	bl	8003158 <__NVIC_SetPriority>
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff31 	bl	800311c <__NVIC_EnableIRQ>
}
 80032ba:	bf00      	nop
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7ff ffa2 	bl	8003214 <SysTick_Config>
 80032d0:	4603      	mov	r3, r0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
	...

080032dc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e0ac      	b.n	8003448 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 f8b2 	bl	800345c <DFSDM_GetChannelFromInstance>
 80032f8:	4603      	mov	r3, r0
 80032fa:	4a55      	ldr	r2, [pc, #340]	@ (8003450 <HAL_DFSDM_ChannelInit+0x174>)
 80032fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e09f      	b.n	8003448 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fe fa41 	bl	8001790 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800330e:	4b51      	ldr	r3, [pc, #324]	@ (8003454 <HAL_DFSDM_ChannelInit+0x178>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3301      	adds	r3, #1
 8003314:	4a4f      	ldr	r2, [pc, #316]	@ (8003454 <HAL_DFSDM_ChannelInit+0x178>)
 8003316:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003318:	4b4e      	ldr	r3, [pc, #312]	@ (8003454 <HAL_DFSDM_ChannelInit+0x178>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d125      	bne.n	800336c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003320:	4b4d      	ldr	r3, [pc, #308]	@ (8003458 <HAL_DFSDM_ChannelInit+0x17c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a4c      	ldr	r2, [pc, #304]	@ (8003458 <HAL_DFSDM_ChannelInit+0x17c>)
 8003326:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800332a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800332c:	4b4a      	ldr	r3, [pc, #296]	@ (8003458 <HAL_DFSDM_ChannelInit+0x17c>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4948      	ldr	r1, [pc, #288]	@ (8003458 <HAL_DFSDM_ChannelInit+0x17c>)
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800333a:	4b47      	ldr	r3, [pc, #284]	@ (8003458 <HAL_DFSDM_ChannelInit+0x17c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a46      	ldr	r2, [pc, #280]	@ (8003458 <HAL_DFSDM_ChannelInit+0x17c>)
 8003340:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003344:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	791b      	ldrb	r3, [r3, #4]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d108      	bne.n	8003360 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800334e:	4b42      	ldr	r3, [pc, #264]	@ (8003458 <HAL_DFSDM_ChannelInit+0x17c>)
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	3b01      	subs	r3, #1
 8003358:	041b      	lsls	r3, r3, #16
 800335a:	493f      	ldr	r1, [pc, #252]	@ (8003458 <HAL_DFSDM_ChannelInit+0x17c>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003360:	4b3d      	ldr	r3, [pc, #244]	@ (8003458 <HAL_DFSDM_ChannelInit+0x17c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a3c      	ldr	r2, [pc, #240]	@ (8003458 <HAL_DFSDM_ChannelInit+0x17c>)
 8003366:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800336a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800337a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6819      	ldr	r1, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800338a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003390:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 020f 	bic.w	r2, r2, #15
 80033a8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6819      	ldr	r1, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80033d0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	3b01      	subs	r3, #1
 80033e2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f002 0207 	and.w	r2, r2, #7
 80033fc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003408:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003428:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f810 	bl	800345c <DFSDM_GetChannelFromInstance>
 800343c:	4602      	mov	r2, r0
 800343e:	4904      	ldr	r1, [pc, #16]	@ (8003450 <HAL_DFSDM_ChannelInit+0x174>)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000a58 	.word	0x20000a58
 8003454:	20000a54 	.word	0x20000a54
 8003458:	40016000 	.word	0x40016000

0800345c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a1c      	ldr	r2, [pc, #112]	@ (80034d8 <DFSDM_GetChannelFromInstance+0x7c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d102      	bne.n	8003472 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e02b      	b.n	80034ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a19      	ldr	r2, [pc, #100]	@ (80034dc <DFSDM_GetChannelFromInstance+0x80>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d102      	bne.n	8003480 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800347a:	2301      	movs	r3, #1
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	e024      	b.n	80034ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a17      	ldr	r2, [pc, #92]	@ (80034e0 <DFSDM_GetChannelFromInstance+0x84>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d102      	bne.n	800348e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003488:	2302      	movs	r3, #2
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e01d      	b.n	80034ca <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a14      	ldr	r2, [pc, #80]	@ (80034e4 <DFSDM_GetChannelFromInstance+0x88>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d102      	bne.n	800349c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003496:	2304      	movs	r3, #4
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e016      	b.n	80034ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a12      	ldr	r2, [pc, #72]	@ (80034e8 <DFSDM_GetChannelFromInstance+0x8c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d102      	bne.n	80034aa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80034a4:	2305      	movs	r3, #5
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	e00f      	b.n	80034ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a0f      	ldr	r2, [pc, #60]	@ (80034ec <DFSDM_GetChannelFromInstance+0x90>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d102      	bne.n	80034b8 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80034b2:	2306      	movs	r3, #6
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	e008      	b.n	80034ca <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a0d      	ldr	r2, [pc, #52]	@ (80034f0 <DFSDM_GetChannelFromInstance+0x94>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d102      	bne.n	80034c6 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80034c0:	2307      	movs	r3, #7
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	e001      	b.n	80034ca <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80034c6:	2303      	movs	r3, #3
 80034c8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80034ca:	68fb      	ldr	r3, [r7, #12]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	40016000 	.word	0x40016000
 80034dc:	40016020 	.word	0x40016020
 80034e0:	40016040 	.word	0x40016040
 80034e4:	40016080 	.word	0x40016080
 80034e8:	400160a0 	.word	0x400160a0
 80034ec:	400160c0 	.word	0x400160c0
 80034f0:	400160e0 	.word	0x400160e0

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003502:	e17f      	b.n	8003804 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2101      	movs	r1, #1
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	4013      	ands	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8171 	beq.w	80037fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0303 	and.w	r3, r3, #3
 8003524:	2b01      	cmp	r3, #1
 8003526:	d005      	beq.n	8003534 <HAL_GPIO_Init+0x40>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f003 0303 	and.w	r3, r3, #3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d130      	bne.n	8003596 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800356a:	2201      	movs	r2, #1
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f003 0201 	and.w	r2, r3, #1
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b03      	cmp	r3, #3
 80035a0:	d118      	bne.n	80035d4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035a8:	2201      	movs	r2, #1
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	08db      	lsrs	r3, r3, #3
 80035be:	f003 0201 	and.w	r2, r3, #1
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 0303 	and.w	r3, r3, #3
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d017      	beq.n	8003610 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d123      	bne.n	8003664 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	08da      	lsrs	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3208      	adds	r2, #8
 8003624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003628:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	220f      	movs	r2, #15
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4013      	ands	r3, r2
 800363e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	08da      	lsrs	r2, r3, #3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3208      	adds	r2, #8
 800365e:	6939      	ldr	r1, [r7, #16]
 8003660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	2203      	movs	r2, #3
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0203 	and.w	r2, r3, #3
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4313      	orrs	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80ac 	beq.w	80037fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036a6:	4b5f      	ldr	r3, [pc, #380]	@ (8003824 <HAL_GPIO_Init+0x330>)
 80036a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003824 <HAL_GPIO_Init+0x330>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80036b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003824 <HAL_GPIO_Init+0x330>)
 80036b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036be:	4a5a      	ldr	r2, [pc, #360]	@ (8003828 <HAL_GPIO_Init+0x334>)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	089b      	lsrs	r3, r3, #2
 80036c4:	3302      	adds	r3, #2
 80036c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	220f      	movs	r2, #15
 80036d6:	fa02 f303 	lsl.w	r3, r2, r3
 80036da:	43db      	mvns	r3, r3
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4013      	ands	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036e8:	d025      	beq.n	8003736 <HAL_GPIO_Init+0x242>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a4f      	ldr	r2, [pc, #316]	@ (800382c <HAL_GPIO_Init+0x338>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01f      	beq.n	8003732 <HAL_GPIO_Init+0x23e>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a4e      	ldr	r2, [pc, #312]	@ (8003830 <HAL_GPIO_Init+0x33c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d019      	beq.n	800372e <HAL_GPIO_Init+0x23a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003834 <HAL_GPIO_Init+0x340>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d013      	beq.n	800372a <HAL_GPIO_Init+0x236>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a4c      	ldr	r2, [pc, #304]	@ (8003838 <HAL_GPIO_Init+0x344>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d00d      	beq.n	8003726 <HAL_GPIO_Init+0x232>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4b      	ldr	r2, [pc, #300]	@ (800383c <HAL_GPIO_Init+0x348>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d007      	beq.n	8003722 <HAL_GPIO_Init+0x22e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4a      	ldr	r2, [pc, #296]	@ (8003840 <HAL_GPIO_Init+0x34c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_GPIO_Init+0x22a>
 800371a:	2306      	movs	r3, #6
 800371c:	e00c      	b.n	8003738 <HAL_GPIO_Init+0x244>
 800371e:	2307      	movs	r3, #7
 8003720:	e00a      	b.n	8003738 <HAL_GPIO_Init+0x244>
 8003722:	2305      	movs	r3, #5
 8003724:	e008      	b.n	8003738 <HAL_GPIO_Init+0x244>
 8003726:	2304      	movs	r3, #4
 8003728:	e006      	b.n	8003738 <HAL_GPIO_Init+0x244>
 800372a:	2303      	movs	r3, #3
 800372c:	e004      	b.n	8003738 <HAL_GPIO_Init+0x244>
 800372e:	2302      	movs	r3, #2
 8003730:	e002      	b.n	8003738 <HAL_GPIO_Init+0x244>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_GPIO_Init+0x244>
 8003736:	2300      	movs	r3, #0
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	f002 0203 	and.w	r2, r2, #3
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	4093      	lsls	r3, r2
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003748:	4937      	ldr	r1, [pc, #220]	@ (8003828 <HAL_GPIO_Init+0x334>)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	3302      	adds	r3, #2
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003756:	4b3b      	ldr	r3, [pc, #236]	@ (8003844 <HAL_GPIO_Init+0x350>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	43db      	mvns	r3, r3
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800377a:	4a32      	ldr	r2, [pc, #200]	@ (8003844 <HAL_GPIO_Init+0x350>)
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003780:	4b30      	ldr	r3, [pc, #192]	@ (8003844 <HAL_GPIO_Init+0x350>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	43db      	mvns	r3, r3
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4013      	ands	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037a4:	4a27      	ldr	r2, [pc, #156]	@ (8003844 <HAL_GPIO_Init+0x350>)
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037aa:	4b26      	ldr	r3, [pc, #152]	@ (8003844 <HAL_GPIO_Init+0x350>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4013      	ands	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003844 <HAL_GPIO_Init+0x350>)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003844 <HAL_GPIO_Init+0x350>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	43db      	mvns	r3, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037f8:	4a12      	ldr	r2, [pc, #72]	@ (8003844 <HAL_GPIO_Init+0x350>)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3301      	adds	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	fa22 f303 	lsr.w	r3, r2, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	f47f ae78 	bne.w	8003504 <HAL_GPIO_Init+0x10>
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	371c      	adds	r7, #28
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000
 8003828:	40010000 	.word	0x40010000
 800382c:	48000400 	.word	0x48000400
 8003830:	48000800 	.word	0x48000800
 8003834:	48000c00 	.word	0x48000c00
 8003838:	48001000 	.word	0x48001000
 800383c:	48001400 	.word	0x48001400
 8003840:	48001800 	.word	0x48001800
 8003844:	40010400 	.word	0x40010400

08003848 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003856:	e0cd      	b.n	80039f4 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003858:	2201      	movs	r2, #1
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80c0 	beq.w	80039ee <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800386e:	4a68      	ldr	r2, [pc, #416]	@ (8003a10 <HAL_GPIO_DeInit+0x1c8>)
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	3302      	adds	r3, #2
 8003876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	220f      	movs	r2, #15
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003896:	d025      	beq.n	80038e4 <HAL_GPIO_DeInit+0x9c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a5e      	ldr	r2, [pc, #376]	@ (8003a14 <HAL_GPIO_DeInit+0x1cc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d01f      	beq.n	80038e0 <HAL_GPIO_DeInit+0x98>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003a18 <HAL_GPIO_DeInit+0x1d0>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d019      	beq.n	80038dc <HAL_GPIO_DeInit+0x94>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a5c      	ldr	r2, [pc, #368]	@ (8003a1c <HAL_GPIO_DeInit+0x1d4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d013      	beq.n	80038d8 <HAL_GPIO_DeInit+0x90>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a20 <HAL_GPIO_DeInit+0x1d8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00d      	beq.n	80038d4 <HAL_GPIO_DeInit+0x8c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a5a      	ldr	r2, [pc, #360]	@ (8003a24 <HAL_GPIO_DeInit+0x1dc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d007      	beq.n	80038d0 <HAL_GPIO_DeInit+0x88>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a59      	ldr	r2, [pc, #356]	@ (8003a28 <HAL_GPIO_DeInit+0x1e0>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <HAL_GPIO_DeInit+0x84>
 80038c8:	2306      	movs	r3, #6
 80038ca:	e00c      	b.n	80038e6 <HAL_GPIO_DeInit+0x9e>
 80038cc:	2307      	movs	r3, #7
 80038ce:	e00a      	b.n	80038e6 <HAL_GPIO_DeInit+0x9e>
 80038d0:	2305      	movs	r3, #5
 80038d2:	e008      	b.n	80038e6 <HAL_GPIO_DeInit+0x9e>
 80038d4:	2304      	movs	r3, #4
 80038d6:	e006      	b.n	80038e6 <HAL_GPIO_DeInit+0x9e>
 80038d8:	2303      	movs	r3, #3
 80038da:	e004      	b.n	80038e6 <HAL_GPIO_DeInit+0x9e>
 80038dc:	2302      	movs	r3, #2
 80038de:	e002      	b.n	80038e6 <HAL_GPIO_DeInit+0x9e>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <HAL_GPIO_DeInit+0x9e>
 80038e4:	2300      	movs	r3, #0
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	f002 0203 	and.w	r2, r2, #3
 80038ec:	0092      	lsls	r2, r2, #2
 80038ee:	4093      	lsls	r3, r2
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d132      	bne.n	800395c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80038f6:	4b4d      	ldr	r3, [pc, #308]	@ (8003a2c <HAL_GPIO_DeInit+0x1e4>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	43db      	mvns	r3, r3
 80038fe:	494b      	ldr	r1, [pc, #300]	@ (8003a2c <HAL_GPIO_DeInit+0x1e4>)
 8003900:	4013      	ands	r3, r2
 8003902:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003904:	4b49      	ldr	r3, [pc, #292]	@ (8003a2c <HAL_GPIO_DeInit+0x1e4>)
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	43db      	mvns	r3, r3
 800390c:	4947      	ldr	r1, [pc, #284]	@ (8003a2c <HAL_GPIO_DeInit+0x1e4>)
 800390e:	4013      	ands	r3, r2
 8003910:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003912:	4b46      	ldr	r3, [pc, #280]	@ (8003a2c <HAL_GPIO_DeInit+0x1e4>)
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	43db      	mvns	r3, r3
 800391a:	4944      	ldr	r1, [pc, #272]	@ (8003a2c <HAL_GPIO_DeInit+0x1e4>)
 800391c:	4013      	ands	r3, r2
 800391e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003920:	4b42      	ldr	r3, [pc, #264]	@ (8003a2c <HAL_GPIO_DeInit+0x1e4>)
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	43db      	mvns	r3, r3
 8003928:	4940      	ldr	r1, [pc, #256]	@ (8003a2c <HAL_GPIO_DeInit+0x1e4>)
 800392a:	4013      	ands	r3, r2
 800392c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f003 0303 	and.w	r3, r3, #3
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	220f      	movs	r2, #15
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800393e:	4a34      	ldr	r2, [pc, #208]	@ (8003a10 <HAL_GPIO_DeInit+0x1c8>)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	3302      	adds	r3, #2
 8003946:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	43da      	mvns	r2, r3
 800394e:	4830      	ldr	r0, [pc, #192]	@ (8003a10 <HAL_GPIO_DeInit+0x1c8>)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	089b      	lsrs	r3, r3, #2
 8003954:	400a      	ands	r2, r1
 8003956:	3302      	adds	r3, #2
 8003958:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	2103      	movs	r1, #3
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	08da      	lsrs	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3208      	adds	r2, #8
 8003978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	220f      	movs	r2, #15
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	08d2      	lsrs	r2, r2, #3
 8003990:	4019      	ands	r1, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3208      	adds	r2, #8
 8003996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	2103      	movs	r1, #3
 80039a4:	fa01 f303 	lsl.w	r3, r1, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	401a      	ands	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	2101      	movs	r1, #1
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	401a      	ands	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	2103      	movs	r1, #3
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	401a      	ands	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039de:	2101      	movs	r1, #1
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	fa01 f303 	lsl.w	r3, r1, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	401a      	ands	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	3301      	adds	r3, #1
 80039f2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	fa22 f303 	lsr.w	r3, r2, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f47f af2b 	bne.w	8003858 <HAL_GPIO_DeInit+0x10>
  }
}
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	40010000 	.word	0x40010000
 8003a14:	48000400 	.word	0x48000400
 8003a18:	48000800 	.word	0x48000800
 8003a1c:	48000c00 	.word	0x48000c00
 8003a20:	48001000 	.word	0x48001000
 8003a24:	48001400 	.word	0x48001400
 8003a28:	48001800 	.word	0x48001800
 8003a2c:	40010400 	.word	0x40010400

08003a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a40:	787b      	ldrb	r3, [r7, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a4c:	e002      	b.n	8003a54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a4e:	887a      	ldrh	r2, [r7, #2]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4013      	ands	r3, r2
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	43d9      	mvns	r1, r3
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	400b      	ands	r3, r1
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a9e:	4b08      	ldr	r3, [pc, #32]	@ (8003ac0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d006      	beq.n	8003ab8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aaa:	4a05      	ldr	r2, [pc, #20]	@ (8003ac0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 f806 	bl	8003ac4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ab8:	bf00      	nop
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40010400 	.word	0x40010400

08003ac4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e08d      	b.n	8003c08 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d106      	bne.n	8003b06 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7fd fea9 	bl	8001858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2224      	movs	r2, #36	@ 0x24
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d107      	bne.n	8003b54 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b50:	609a      	str	r2, [r3, #8]
 8003b52:	e006      	b.n	8003b62 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003b60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d108      	bne.n	8003b7c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	e007      	b.n	8003b8c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b8a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b9e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003bae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	69d9      	ldr	r1, [r3, #28]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1a      	ldr	r2, [r3, #32]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0201 	orr.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e021      	b.n	8003c66 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2224      	movs	r2, #36	@ 0x24
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fe6a 	bl	8001914 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	4608      	mov	r0, r1
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	817b      	strh	r3, [r7, #10]
 8003c82:	460b      	mov	r3, r1
 8003c84:	813b      	strh	r3, [r7, #8]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	f040 80f9 	bne.w	8003e8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <HAL_I2C_Mem_Write+0x34>
 8003c9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003caa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0ed      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_I2C_Mem_Write+0x4e>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	e0e6      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cc6:	f7ff f9c7 	bl	8003058 <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2319      	movs	r3, #25
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fac3 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d001      	beq.n	8003ce8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0d1      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2221      	movs	r2, #33	@ 0x21
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2240      	movs	r2, #64	@ 0x40
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a3a      	ldr	r2, [r7, #32]
 8003d02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d10:	88f8      	ldrh	r0, [r7, #6]
 8003d12:	893a      	ldrh	r2, [r7, #8]
 8003d14:	8979      	ldrh	r1, [r7, #10]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	4603      	mov	r3, r0
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f9d3 	bl	80040cc <I2C_RequestMemoryWrite>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d005      	beq.n	8003d38 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0a9      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2bff      	cmp	r3, #255	@ 0xff
 8003d40:	d90e      	bls.n	8003d60 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	22ff      	movs	r2, #255	@ 0xff
 8003d46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	8979      	ldrh	r1, [r7, #10]
 8003d50:	2300      	movs	r3, #0
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fc47 	bl	80045ec <I2C_TransferConfig>
 8003d5e:	e00f      	b.n	8003d80 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	8979      	ldrh	r1, [r7, #10]
 8003d72:	2300      	movs	r3, #0
 8003d74:	9300      	str	r3, [sp, #0]
 8003d76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fc36 	bl	80045ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fac6 	bl	8004316 <I2C_WaitOnTXISFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e07b      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d98:	781a      	ldrb	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d034      	beq.n	8003e38 <HAL_I2C_Mem_Write+0x1c8>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d130      	bne.n	8003e38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2180      	movs	r1, #128	@ 0x80
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fa3f 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e04d      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2bff      	cmp	r3, #255	@ 0xff
 8003df8:	d90e      	bls.n	8003e18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	22ff      	movs	r2, #255	@ 0xff
 8003dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	8979      	ldrh	r1, [r7, #10]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fbeb 	bl	80045ec <I2C_TransferConfig>
 8003e16:	e00f      	b.n	8003e38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	8979      	ldrh	r1, [r7, #10]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 fbda 	bl	80045ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d19e      	bne.n	8003d80 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 faac 	bl	80043a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e01a      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6859      	ldr	r1, [r3, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b0a      	ldr	r3, [pc, #40]	@ (8003e94 <HAL_I2C_Mem_Write+0x224>)
 8003e6a:	400b      	ands	r3, r1
 8003e6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e000      	b.n	8003e8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e8a:	2302      	movs	r3, #2
  }
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	fe00e800 	.word	0xfe00e800

08003e98 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	817b      	strh	r3, [r7, #10]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	813b      	strh	r3, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	f040 80fd 	bne.w	80040ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec0:	6a3b      	ldr	r3, [r7, #32]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_I2C_Mem_Read+0x34>
 8003ec6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0f1      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2C_Mem_Read+0x4e>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e0ea      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003eee:	f7ff f8b3 	bl	8003058 <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	9300      	str	r3, [sp, #0]
 8003ef8:	2319      	movs	r3, #25
 8003efa:	2201      	movs	r2, #1
 8003efc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 f9af 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0d5      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2222      	movs	r2, #34	@ 0x22
 8003f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2240      	movs	r2, #64	@ 0x40
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a3a      	ldr	r2, [r7, #32]
 8003f2a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f38:	88f8      	ldrh	r0, [r7, #6]
 8003f3a:	893a      	ldrh	r2, [r7, #8]
 8003f3c:	8979      	ldrh	r1, [r7, #10]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	9301      	str	r3, [sp, #4]
 8003f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	4603      	mov	r3, r0
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f913 	bl	8004174 <I2C_RequestMemoryRead>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d005      	beq.n	8003f60 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0ad      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2bff      	cmp	r3, #255	@ 0xff
 8003f68:	d90e      	bls.n	8003f88 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	8979      	ldrh	r1, [r7, #10]
 8003f78:	4b52      	ldr	r3, [pc, #328]	@ (80040c4 <HAL_I2C_Mem_Read+0x22c>)
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 fb33 	bl	80045ec <I2C_TransferConfig>
 8003f86:	e00f      	b.n	8003fa8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	8979      	ldrh	r1, [r7, #10]
 8003f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80040c4 <HAL_I2C_Mem_Read+0x22c>)
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fb22 	bl	80045ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2104      	movs	r1, #4
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 f956 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e07c      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d034      	beq.n	8004068 <HAL_I2C_Mem_Read+0x1d0>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004002:	2b00      	cmp	r3, #0
 8004004:	d130      	bne.n	8004068 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400c:	2200      	movs	r2, #0
 800400e:	2180      	movs	r1, #128	@ 0x80
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f927 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e04d      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004024:	b29b      	uxth	r3, r3
 8004026:	2bff      	cmp	r3, #255	@ 0xff
 8004028:	d90e      	bls.n	8004048 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2201      	movs	r2, #1
 800402e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004034:	b2da      	uxtb	r2, r3
 8004036:	8979      	ldrh	r1, [r7, #10]
 8004038:	2300      	movs	r3, #0
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 fad3 	bl	80045ec <I2C_TransferConfig>
 8004046:	e00f      	b.n	8004068 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404c:	b29a      	uxth	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004056:	b2da      	uxtb	r2, r3
 8004058:	8979      	ldrh	r1, [r7, #10]
 800405a:	2300      	movs	r3, #0
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fac2 	bl	80045ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d19a      	bne.n	8003fa8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f994 	bl	80043a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e01a      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2220      	movs	r2, #32
 800408c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6859      	ldr	r1, [r3, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b0b      	ldr	r3, [pc, #44]	@ (80040c8 <HAL_I2C_Mem_Read+0x230>)
 800409a:	400b      	ands	r3, r1
 800409c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040b6:	2300      	movs	r3, #0
 80040b8:	e000      	b.n	80040bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80040ba:	2302      	movs	r3, #2
  }
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	80002400 	.word	0x80002400
 80040c8:	fe00e800 	.word	0xfe00e800

080040cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	4608      	mov	r0, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	461a      	mov	r2, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	817b      	strh	r3, [r7, #10]
 80040de:	460b      	mov	r3, r1
 80040e0:	813b      	strh	r3, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	b2da      	uxtb	r2, r3
 80040ea:	8979      	ldrh	r1, [r7, #10]
 80040ec:	4b20      	ldr	r3, [pc, #128]	@ (8004170 <I2C_RequestMemoryWrite+0xa4>)
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fa79 	bl	80045ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fa:	69fa      	ldr	r2, [r7, #28]
 80040fc:	69b9      	ldr	r1, [r7, #24]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f000 f909 	bl	8004316 <I2C_WaitOnTXISFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e02c      	b.n	8004168 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800410e:	88fb      	ldrh	r3, [r7, #6]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d105      	bne.n	8004120 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004114:	893b      	ldrh	r3, [r7, #8]
 8004116:	b2da      	uxtb	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	629a      	str	r2, [r3, #40]	@ 0x28
 800411e:	e015      	b.n	800414c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	b29b      	uxth	r3, r3
 8004126:	b2da      	uxtb	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	69b9      	ldr	r1, [r7, #24]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f8ef 	bl	8004316 <I2C_WaitOnTXISFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e012      	b.n	8004168 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004142:	893b      	ldrh	r3, [r7, #8]
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2200      	movs	r2, #0
 8004154:	2180      	movs	r1, #128	@ 0x80
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 f884 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	80002000 	.word	0x80002000

08004174 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	4608      	mov	r0, r1
 800417e:	4611      	mov	r1, r2
 8004180:	461a      	mov	r2, r3
 8004182:	4603      	mov	r3, r0
 8004184:	817b      	strh	r3, [r7, #10]
 8004186:	460b      	mov	r3, r1
 8004188:	813b      	strh	r3, [r7, #8]
 800418a:	4613      	mov	r3, r2
 800418c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800418e:	88fb      	ldrh	r3, [r7, #6]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	8979      	ldrh	r1, [r7, #10]
 8004194:	4b20      	ldr	r3, [pc, #128]	@ (8004218 <I2C_RequestMemoryRead+0xa4>)
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2300      	movs	r3, #0
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fa26 	bl	80045ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	69b9      	ldr	r1, [r7, #24]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f8b6 	bl	8004316 <I2C_WaitOnTXISFlagUntilTimeout>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e02c      	b.n	800420e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041b4:	88fb      	ldrh	r3, [r7, #6]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d105      	bne.n	80041c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ba:	893b      	ldrh	r3, [r7, #8]
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80041c4:	e015      	b.n	80041f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041c6:	893b      	ldrh	r3, [r7, #8]
 80041c8:	0a1b      	lsrs	r3, r3, #8
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f89c 	bl	8004316 <I2C_WaitOnTXISFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e012      	b.n	800420e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041e8:	893b      	ldrh	r3, [r7, #8]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2200      	movs	r2, #0
 80041fa:	2140      	movs	r1, #64	@ 0x40
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f831 	bl	8004264 <I2C_WaitOnFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	80002000 	.word	0x80002000

0800421c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b02      	cmp	r3, #2
 8004230:	d103      	bne.n	800423a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2200      	movs	r2, #0
 8004238:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d007      	beq.n	8004258 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699a      	ldr	r2, [r3, #24]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	619a      	str	r2, [r3, #24]
  }
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004274:	e03b      	b.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	6839      	ldr	r1, [r7, #0]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f8d6 	bl	800442c <I2C_IsErrorOccurred>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e041      	b.n	800430e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004290:	d02d      	beq.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004292:	f7fe fee1 	bl	8003058 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d302      	bcc.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d122      	bne.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4013      	ands	r3, r2
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d113      	bne.n	80042ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ca:	f043 0220 	orr.w	r2, r3, #32
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e00f      	b.n	800430e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	429a      	cmp	r2, r3
 800430a:	d0b4      	beq.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	60f8      	str	r0, [r7, #12]
 800431e:	60b9      	str	r1, [r7, #8]
 8004320:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004322:	e033      	b.n	800438c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f87f 	bl	800442c <I2C_IsErrorOccurred>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e031      	b.n	800439c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800433e:	d025      	beq.n	800438c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004340:	f7fe fe8a 	bl	8003058 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	68ba      	ldr	r2, [r7, #8]
 800434c:	429a      	cmp	r2, r3
 800434e:	d302      	bcc.n	8004356 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d11a      	bne.n	800438c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b02      	cmp	r3, #2
 8004362:	d013      	beq.n	800438c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004368:	f043 0220 	orr.w	r2, r3, #32
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2220      	movs	r2, #32
 8004374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e007      	b.n	800439c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b02      	cmp	r3, #2
 8004398:	d1c4      	bne.n	8004324 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043b0:	e02f      	b.n	8004412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f838 	bl	800442c <I2C_IsErrorOccurred>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e02d      	b.n	8004422 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c6:	f7fe fe47 	bl	8003058 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d302      	bcc.n	80043dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d11a      	bne.n	8004412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b20      	cmp	r3, #32
 80043e8:	d013      	beq.n	8004412 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e007      	b.n	8004422 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 0320 	and.w	r3, r3, #32
 800441c:	2b20      	cmp	r3, #32
 800441e:	d1c8      	bne.n	80043b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	@ 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	f003 0310 	and.w	r3, r3, #16
 8004454:	2b00      	cmp	r3, #0
 8004456:	d068      	beq.n	800452a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004460:	e049      	b.n	80044f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004468:	d045      	beq.n	80044f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800446a:	f7fe fdf5 	bl	8003058 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	d302      	bcc.n	8004480 <I2C_IsErrorOccurred+0x54>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d13a      	bne.n	80044f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800448a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004492:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800449e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a2:	d121      	bne.n	80044e8 <I2C_IsErrorOccurred+0xbc>
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044aa:	d01d      	beq.n	80044e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044ac:	7cfb      	ldrb	r3, [r7, #19]
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d01a      	beq.n	80044e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044c2:	f7fe fdc9 	bl	8003058 <HAL_GetTick>
 80044c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044c8:	e00e      	b.n	80044e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044ca:	f7fe fdc5 	bl	8003058 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b19      	cmp	r3, #25
 80044d6:	d907      	bls.n	80044e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	6a3b      	ldr	r3, [r7, #32]
 80044da:	f043 0320 	orr.w	r3, r3, #32
 80044de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044e6:	e006      	b.n	80044f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b20      	cmp	r3, #32
 80044f4:	d1e9      	bne.n	80044ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b20      	cmp	r3, #32
 8004502:	d003      	beq.n	800450c <I2C_IsErrorOccurred+0xe0>
 8004504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0aa      	beq.n	8004462 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800450c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004510:	2b00      	cmp	r3, #0
 8004512:	d103      	bne.n	800451c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2220      	movs	r2, #32
 800451a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	f043 0304 	orr.w	r3, r3, #4
 8004522:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800453c:	6a3b      	ldr	r3, [r7, #32]
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800454c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	f043 0308 	orr.w	r3, r3, #8
 8004564:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800456e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	f043 0302 	orr.w	r3, r3, #2
 8004586:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004590:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004598:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01c      	beq.n	80045da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fe3b 	bl	800421c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b0d      	ldr	r3, [pc, #52]	@ (80045e8 <I2C_IsErrorOccurred+0x1bc>)
 80045b2:	400b      	ands	r3, r1
 80045b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3728      	adds	r7, #40	@ 0x28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	fe00e800 	.word	0xfe00e800

080045ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	817b      	strh	r3, [r7, #10]
 80045fa:	4613      	mov	r3, r2
 80045fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045fe:	897b      	ldrh	r3, [r7, #10]
 8004600:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004604:	7a7b      	ldrb	r3, [r7, #9]
 8004606:	041b      	lsls	r3, r3, #16
 8004608:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800460c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	4313      	orrs	r3, r2
 8004616:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800461a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	0d5b      	lsrs	r3, r3, #21
 8004626:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800462a:	4b08      	ldr	r3, [pc, #32]	@ (800464c <I2C_TransferConfig+0x60>)
 800462c:	430b      	orrs	r3, r1
 800462e:	43db      	mvns	r3, r3
 8004630:	ea02 0103 	and.w	r1, r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	03ff63ff 	.word	0x03ff63ff

08004650 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b20      	cmp	r3, #32
 8004664:	d138      	bne.n	80046d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004670:	2302      	movs	r3, #2
 8004672:	e032      	b.n	80046da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	@ 0x24
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80046a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6819      	ldr	r1, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e000      	b.n	80046da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046d8:	2302      	movs	r3, #2
  }
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
 80046ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d139      	bne.n	8004770 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004706:	2302      	movs	r3, #2
 8004708:	e033      	b.n	8004772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2224      	movs	r2, #36	@ 0x24
 8004716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004738:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b086      	sub	sp, #24
 8004782:	af02      	add	r7, sp, #8
 8004784:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e101      	b.n	8004994 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d106      	bne.n	80047aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7fd fa05 	bl	8001bb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2203      	movs	r2, #3
 80047ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4618      	mov	r0, r3
 80047be:	f002 fb97 	bl	8006ef0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	7c1a      	ldrb	r2, [r3, #16]
 80047ca:	f88d 2000 	strb.w	r2, [sp]
 80047ce:	3304      	adds	r3, #4
 80047d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047d2:	f002 fb60 	bl	8006e96 <USB_CoreInit>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0d5      	b.n	8004994 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2100      	movs	r1, #0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f002 fb8f 	bl	8006f12 <USB_SetCurrentMode>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d005      	beq.n	8004806 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2202      	movs	r2, #2
 80047fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e0c6      	b.n	8004994 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004806:	2300      	movs	r3, #0
 8004808:	73fb      	strb	r3, [r7, #15]
 800480a:	e04a      	b.n	80048a2 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800480c:	7bfa      	ldrb	r2, [r7, #15]
 800480e:	6879      	ldr	r1, [r7, #4]
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	3315      	adds	r3, #21
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004820:	7bfa      	ldrb	r2, [r7, #15]
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	4613      	mov	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	4413      	add	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	440b      	add	r3, r1
 800482e:	3314      	adds	r3, #20
 8004830:	7bfa      	ldrb	r2, [r7, #15]
 8004832:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004834:	7bfa      	ldrb	r2, [r7, #15]
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	b298      	uxth	r0, r3
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	4613      	mov	r3, r2
 800483e:	00db      	lsls	r3, r3, #3
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	332e      	adds	r3, #46	@ 0x2e
 8004848:	4602      	mov	r2, r0
 800484a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800484c:	7bfa      	ldrb	r2, [r7, #15]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	3318      	adds	r3, #24
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004860:	7bfa      	ldrb	r2, [r7, #15]
 8004862:	6879      	ldr	r1, [r7, #4]
 8004864:	4613      	mov	r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	331c      	adds	r3, #28
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004874:	7bfa      	ldrb	r2, [r7, #15]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	440b      	add	r3, r1
 8004882:	3320      	adds	r3, #32
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004888:	7bfa      	ldrb	r2, [r7, #15]
 800488a:	6879      	ldr	r1, [r7, #4]
 800488c:	4613      	mov	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	3324      	adds	r3, #36	@ 0x24
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	3301      	adds	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	791b      	ldrb	r3, [r3, #4]
 80048a6:	7bfa      	ldrb	r2, [r7, #15]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d3af      	bcc.n	800480c <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048ac:	2300      	movs	r3, #0
 80048ae:	73fb      	strb	r3, [r7, #15]
 80048b0:	e044      	b.n	800493c <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80048b2:	7bfa      	ldrb	r2, [r7, #15]
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	4613      	mov	r3, r2
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	4413      	add	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	440b      	add	r3, r1
 80048c0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80048c4:	2200      	movs	r2, #0
 80048c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048c8:	7bfa      	ldrb	r2, [r7, #15]
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	4613      	mov	r3, r2
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	440b      	add	r3, r1
 80048d6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048de:	7bfa      	ldrb	r2, [r7, #15]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	00db      	lsls	r3, r3, #3
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80048f0:	2200      	movs	r2, #0
 80048f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048f4:	7bfa      	ldrb	r2, [r7, #15]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800490a:	7bfa      	ldrb	r2, [r7, #15]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004920:	7bfa      	ldrb	r2, [r7, #15]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	440b      	add	r3, r1
 800492e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	3301      	adds	r3, #1
 800493a:	73fb      	strb	r3, [r7, #15]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	791b      	ldrb	r3, [r3, #4]
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	429a      	cmp	r2, r3
 8004944:	d3b5      	bcc.n	80048b2 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6818      	ldr	r0, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	7c1a      	ldrb	r2, [r3, #16]
 800494e:	f88d 2000 	strb.w	r2, [sp]
 8004952:	3304      	adds	r3, #4
 8004954:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004956:	f002 fb29 	bl	8006fac <USB_DevInit>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e013      	b.n	8004994 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	7b1b      	ldrb	r3, [r3, #12]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d102      	bne.n	8004988 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f80a 	bl	800499c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f002 fcce 	bl	800732e <USB_DevDisconnect>

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3710      	adds	r7, #16
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049ce:	f043 0303 	orr.w	r3, r3, #3
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049e8:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a04      	ldr	r2, [pc, #16]	@ (8004a00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049f2:	6013      	str	r3, [r2, #0]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	40007000 	.word	0x40007000

08004a04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a08:	4b04      	ldr	r3, [pc, #16]	@ (8004a1c <HAL_PWREx_GetVoltageRange+0x18>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40007000 	.word	0x40007000

08004a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a2e:	d130      	bne.n	8004a92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a30:	4b23      	ldr	r3, [pc, #140]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a3c:	d038      	beq.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a3e:	4b20      	ldr	r3, [pc, #128]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a46:	4a1e      	ldr	r2, [pc, #120]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2232      	movs	r2, #50	@ 0x32
 8004a54:	fb02 f303 	mul.w	r3, r2, r3
 8004a58:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	0c9b      	lsrs	r3, r3, #18
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a64:	e002      	b.n	8004a6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a6c:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a78:	d102      	bne.n	8004a80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f2      	bne.n	8004a66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8c:	d110      	bne.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e00f      	b.n	8004ab2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a92:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a9e:	d007      	beq.n	8004ab0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004aa0:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004aa8:	4a05      	ldr	r2, [pc, #20]	@ (8004ac0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004aae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40007000 	.word	0x40007000
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	431bde83 	.word	0x431bde83

08004acc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004acc:	b480      	push	{r7}
 8004ace:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ad0:	4b05      	ldr	r3, [pc, #20]	@ (8004ae8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a04      	ldr	r2, [pc, #16]	@ (8004ae8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ada:	6053      	str	r3, [r2, #4]
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	40007000 	.word	0x40007000

08004aec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004af4:	f7fe fab0 	bl	8003058 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e063      	b.n	8004bcc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10b      	bne.n	8004b28 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f7fc ff1f 	bl	800195c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004b1e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f858 	bl	8004bd8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	021a      	lsls	r2, r3, #8
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2120      	movs	r1, #32
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f850 	bl	8004bf4 <QSPI_WaitFlagStateUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004b58:	7afb      	ldrb	r3, [r7, #11]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d131      	bne.n	8004bc2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b68:	f023 0310 	bic.w	r3, r3, #16
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6852      	ldr	r2, [r2, #4]
 8004b70:	0611      	lsls	r1, r2, #24
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	68d2      	ldr	r2, [r2, #12]
 8004b76:	4311      	orrs	r1, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	4b13      	ldr	r3, [pc, #76]	@ (8004bd4 <HAL_QSPI_Init+0xe8>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6912      	ldr	r2, [r2, #16]
 8004b8e:	0411      	lsls	r1, r2, #16
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6952      	ldr	r2, [r2, #20]
 8004b94:	4311      	orrs	r1, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6992      	ldr	r2, [r2, #24]
 8004b9a:	4311      	orrs	r1, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004bca:	7afb      	ldrb	r3, [r7, #11]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	ffe0f8fe 	.word	0xffe0f8fe

08004bd8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004c04:	e01a      	b.n	8004c3c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c0c:	d016      	beq.n	8004c3c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fe fa23 	bl	8003058 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2204      	movs	r2, #4
 8004c28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c30:	f043 0201 	orr.w	r2, r3, #1
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e00e      	b.n	8004c5a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689a      	ldr	r2, [r3, #8]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bf14      	ite	ne
 8004c4a:	2301      	movne	r3, #1
 8004c4c:	2300      	moveq	r3, #0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	461a      	mov	r2, r3
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d1d6      	bne.n	8004c06 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e3ca      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c76:	4b97      	ldr	r3, [pc, #604]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c80:	4b94      	ldr	r3, [pc, #592]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80e4 	beq.w	8004e60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <HAL_RCC_OscConfig+0x4a>
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	f040 808b 	bne.w	8004dbc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	f040 8087 	bne.w	8004dbc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cae:	4b89      	ldr	r3, [pc, #548]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x62>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e3a2      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1a      	ldr	r2, [r3, #32]
 8004cca:	4b82      	ldr	r3, [pc, #520]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0308 	and.w	r3, r3, #8
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d004      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x7c>
 8004cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cde:	e005      	b.n	8004cec <HAL_RCC_OscConfig+0x88>
 8004ce0:	4b7c      	ldr	r3, [pc, #496]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d223      	bcs.n	8004d38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fd55 	bl	80057a4 <RCC_SetFlashLatencyFromMSIRange>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e383      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d04:	4b73      	ldr	r3, [pc, #460]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a72      	ldr	r2, [pc, #456]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d0a:	f043 0308 	orr.w	r3, r3, #8
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	4b70      	ldr	r3, [pc, #448]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a1b      	ldr	r3, [r3, #32]
 8004d1c:	496d      	ldr	r1, [pc, #436]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d22:	4b6c      	ldr	r3, [pc, #432]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	021b      	lsls	r3, r3, #8
 8004d30:	4968      	ldr	r1, [pc, #416]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
 8004d36:	e025      	b.n	8004d84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d38:	4b66      	ldr	r3, [pc, #408]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a65      	ldr	r2, [pc, #404]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d3e:	f043 0308 	orr.w	r3, r3, #8
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4b63      	ldr	r3, [pc, #396]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	4960      	ldr	r1, [pc, #384]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d56:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	495b      	ldr	r1, [pc, #364]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d109      	bne.n	8004d84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fd15 	bl	80057a4 <RCC_SetFlashLatencyFromMSIRange>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e343      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d84:	f000 fc4a 	bl	800561c <HAL_RCC_GetSysClockFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b52      	ldr	r3, [pc, #328]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	4950      	ldr	r1, [pc, #320]	@ (8004ed8 <HAL_RCC_OscConfig+0x274>)
 8004d96:	5ccb      	ldrb	r3, [r1, r3]
 8004d98:	f003 031f 	and.w	r3, r3, #31
 8004d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004da0:	4a4e      	ldr	r2, [pc, #312]	@ (8004edc <HAL_RCC_OscConfig+0x278>)
 8004da2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004da4:	4b4e      	ldr	r3, [pc, #312]	@ (8004ee0 <HAL_RCC_OscConfig+0x27c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fe f905 	bl	8002fb8 <HAL_InitTick>
 8004dae:	4603      	mov	r3, r0
 8004db0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d052      	beq.n	8004e5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	e327      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d032      	beq.n	8004e2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004dc4:	4b43      	ldr	r3, [pc, #268]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a42      	ldr	r2, [pc, #264]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dd0:	f7fe f942 	bl	8003058 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dd8:	f7fe f93e 	bl	8003058 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e310      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dea:	4b3a      	ldr	r3, [pc, #232]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004df6:	4b37      	ldr	r3, [pc, #220]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a36      	ldr	r2, [pc, #216]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004dfc:	f043 0308 	orr.w	r3, r3, #8
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	4b34      	ldr	r3, [pc, #208]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	4931      	ldr	r1, [pc, #196]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e14:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	021b      	lsls	r3, r3, #8
 8004e22:	492c      	ldr	r1, [pc, #176]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
 8004e28:	e01a      	b.n	8004e60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a29      	ldr	r2, [pc, #164]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e36:	f7fe f90f 	bl	8003058 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e3e:	f7fe f90b 	bl	8003058 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e2dd      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e50:	4b20      	ldr	r3, [pc, #128]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f0      	bne.n	8004e3e <HAL_RCC_OscConfig+0x1da>
 8004e5c:	e000      	b.n	8004e60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d074      	beq.n	8004f56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d005      	beq.n	8004e7e <HAL_RCC_OscConfig+0x21a>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b0c      	cmp	r3, #12
 8004e76:	d10e      	bne.n	8004e96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d10b      	bne.n	8004e96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d064      	beq.n	8004f54 <HAL_RCC_OscConfig+0x2f0>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d160      	bne.n	8004f54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e2ba      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e9e:	d106      	bne.n	8004eae <HAL_RCC_OscConfig+0x24a>
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004ea6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eaa:	6013      	str	r3, [r2, #0]
 8004eac:	e026      	b.n	8004efc <HAL_RCC_OscConfig+0x298>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eb6:	d115      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x280>
 8004eb8:	4b06      	ldr	r3, [pc, #24]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a05      	ldr	r2, [pc, #20]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004ebe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	4b03      	ldr	r3, [pc, #12]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a02      	ldr	r2, [pc, #8]	@ (8004ed4 <HAL_RCC_OscConfig+0x270>)
 8004eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e014      	b.n	8004efc <HAL_RCC_OscConfig+0x298>
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000
 8004ed8:	08009d7c 	.word	0x08009d7c
 8004edc:	20000000 	.word	0x20000000
 8004ee0:	200000c8 	.word	0x200000c8
 8004ee4:	4ba0      	ldr	r3, [pc, #640]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a9f      	ldr	r2, [pc, #636]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	4b9d      	ldr	r3, [pc, #628]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a9c      	ldr	r2, [pc, #624]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d013      	beq.n	8004f2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f04:	f7fe f8a8 	bl	8003058 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f0c:	f7fe f8a4 	bl	8003058 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b64      	cmp	r3, #100	@ 0x64
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e276      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f1e:	4b92      	ldr	r3, [pc, #584]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCC_OscConfig+0x2a8>
 8004f2a:	e014      	b.n	8004f56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fe f894 	bl	8003058 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f34:	f7fe f890 	bl	8003058 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b64      	cmp	r3, #100	@ 0x64
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e262      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f46:	4b88      	ldr	r3, [pc, #544]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x2d0>
 8004f52:	e000      	b.n	8004f56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d060      	beq.n	8005024 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_OscConfig+0x310>
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b0c      	cmp	r3, #12
 8004f6c:	d119      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d116      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f74:	4b7c      	ldr	r3, [pc, #496]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <HAL_RCC_OscConfig+0x328>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d101      	bne.n	8004f8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e23f      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8c:	4b76      	ldr	r3, [pc, #472]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	061b      	lsls	r3, r3, #24
 8004f9a:	4973      	ldr	r1, [pc, #460]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fa0:	e040      	b.n	8005024 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d023      	beq.n	8004ff2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004faa:	4b6f      	ldr	r3, [pc, #444]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6e      	ldr	r2, [pc, #440]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb6:	f7fe f84f 	bl	8003058 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fbe:	f7fe f84b 	bl	8003058 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e21d      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fd0:	4b65      	ldr	r3, [pc, #404]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fdc:	4b62      	ldr	r3, [pc, #392]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	061b      	lsls	r3, r3, #24
 8004fea:	495f      	ldr	r1, [pc, #380]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]
 8004ff0:	e018      	b.n	8005024 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a5c      	ldr	r2, [pc, #368]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8004ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffe:	f7fe f82b 	bl	8003058 <HAL_GetTick>
 8005002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005006:	f7fe f827 	bl	8003058 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e1f9      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005018:	4b53      	ldr	r3, [pc, #332]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d03c      	beq.n	80050aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01c      	beq.n	8005072 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005038:	4b4b      	ldr	r3, [pc, #300]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 800503a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800503e:	4a4a      	ldr	r2, [pc, #296]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005048:	f7fe f806 	bl	8003058 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005050:	f7fe f802 	bl	8003058 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e1d4      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005062:	4b41      	ldr	r3, [pc, #260]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8005064:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0ef      	beq.n	8005050 <HAL_RCC_OscConfig+0x3ec>
 8005070:	e01b      	b.n	80050aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005072:	4b3d      	ldr	r3, [pc, #244]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8005074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005078:	4a3b      	ldr	r2, [pc, #236]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005082:	f7fd ffe9 	bl	8003058 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800508a:	f7fd ffe5 	bl	8003058 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e1b7      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800509c:	4b32      	ldr	r3, [pc, #200]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 800509e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1ef      	bne.n	800508a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0304 	and.w	r3, r3, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 80a6 	beq.w	8005204 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050b8:	2300      	movs	r3, #0
 80050ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80050bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 80050be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10d      	bne.n	80050e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c8:	4b27      	ldr	r3, [pc, #156]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 80050ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050cc:	4a26      	ldr	r2, [pc, #152]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 80050ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80050d4:	4b24      	ldr	r3, [pc, #144]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 80050d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050e0:	2301      	movs	r3, #1
 80050e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050e4:	4b21      	ldr	r3, [pc, #132]	@ (800516c <HAL_RCC_OscConfig+0x508>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d118      	bne.n	8005122 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050f0:	4b1e      	ldr	r3, [pc, #120]	@ (800516c <HAL_RCC_OscConfig+0x508>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a1d      	ldr	r2, [pc, #116]	@ (800516c <HAL_RCC_OscConfig+0x508>)
 80050f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050fc:	f7fd ffac 	bl	8003058 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005102:	e008      	b.n	8005116 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005104:	f7fd ffa8 	bl	8003058 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d901      	bls.n	8005116 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e17a      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005116:	4b15      	ldr	r3, [pc, #84]	@ (800516c <HAL_RCC_OscConfig+0x508>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0f0      	beq.n	8005104 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d108      	bne.n	800513c <HAL_RCC_OscConfig+0x4d8>
 800512a:	4b0f      	ldr	r3, [pc, #60]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005130:	4a0d      	ldr	r2, [pc, #52]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800513a:	e029      	b.n	8005190 <HAL_RCC_OscConfig+0x52c>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b05      	cmp	r3, #5
 8005142:	d115      	bne.n	8005170 <HAL_RCC_OscConfig+0x50c>
 8005144:	4b08      	ldr	r3, [pc, #32]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8005146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800514a:	4a07      	ldr	r2, [pc, #28]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 800514c:	f043 0304 	orr.w	r3, r3, #4
 8005150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005154:	4b04      	ldr	r3, [pc, #16]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515a:	4a03      	ldr	r2, [pc, #12]	@ (8005168 <HAL_RCC_OscConfig+0x504>)
 800515c:	f043 0301 	orr.w	r3, r3, #1
 8005160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005164:	e014      	b.n	8005190 <HAL_RCC_OscConfig+0x52c>
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000
 800516c:	40007000 	.word	0x40007000
 8005170:	4b9c      	ldr	r3, [pc, #624]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005176:	4a9b      	ldr	r2, [pc, #620]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 8005178:	f023 0301 	bic.w	r3, r3, #1
 800517c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005180:	4b98      	ldr	r3, [pc, #608]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 8005182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005186:	4a97      	ldr	r2, [pc, #604]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 8005188:	f023 0304 	bic.w	r3, r3, #4
 800518c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d016      	beq.n	80051c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005198:	f7fd ff5e 	bl	8003058 <HAL_GetTick>
 800519c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800519e:	e00a      	b.n	80051b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a0:	f7fd ff5a 	bl	8003058 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e12a      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b6:	4b8b      	ldr	r3, [pc, #556]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80051b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ed      	beq.n	80051a0 <HAL_RCC_OscConfig+0x53c>
 80051c4:	e015      	b.n	80051f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c6:	f7fd ff47 	bl	8003058 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051cc:	e00a      	b.n	80051e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ce:	f7fd ff43 	bl	8003058 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051dc:	4293      	cmp	r3, r2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e113      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051e4:	4b7f      	ldr	r3, [pc, #508]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1ed      	bne.n	80051ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d105      	bne.n	8005204 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f8:	4b7a      	ldr	r3, [pc, #488]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80051fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fc:	4a79      	ldr	r2, [pc, #484]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80051fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005202:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80fe 	beq.w	800540a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005212:	2b02      	cmp	r3, #2
 8005214:	f040 80d0 	bne.w	80053b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005218:	4b72      	ldr	r3, [pc, #456]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f003 0203 	and.w	r2, r3, #3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	429a      	cmp	r2, r3
 800522a:	d130      	bne.n	800528e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005236:	3b01      	subs	r3, #1
 8005238:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d127      	bne.n	800528e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005248:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800524a:	429a      	cmp	r2, r3
 800524c:	d11f      	bne.n	800528e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005258:	2a07      	cmp	r2, #7
 800525a:	bf14      	ite	ne
 800525c:	2201      	movne	r2, #1
 800525e:	2200      	moveq	r2, #0
 8005260:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005262:	4293      	cmp	r3, r2
 8005264:	d113      	bne.n	800528e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005270:	085b      	lsrs	r3, r3, #1
 8005272:	3b01      	subs	r3, #1
 8005274:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005276:	429a      	cmp	r2, r3
 8005278:	d109      	bne.n	800528e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	3b01      	subs	r3, #1
 8005288:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800528a:	429a      	cmp	r2, r3
 800528c:	d06e      	beq.n	800536c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b0c      	cmp	r3, #12
 8005292:	d069      	beq.n	8005368 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005294:	4b53      	ldr	r3, [pc, #332]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80052a0:	4b50      	ldr	r3, [pc, #320]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0ad      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052b0:	4b4c      	ldr	r3, [pc, #304]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a4b      	ldr	r2, [pc, #300]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80052b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052bc:	f7fd fecc 	bl	8003058 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fd fec8 	bl	8003058 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e09a      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d6:	4b43      	ldr	r3, [pc, #268]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052e2:	4b40      	ldr	r3, [pc, #256]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	4b40      	ldr	r3, [pc, #256]	@ (80053e8 <HAL_RCC_OscConfig+0x784>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80052f2:	3a01      	subs	r2, #1
 80052f4:	0112      	lsls	r2, r2, #4
 80052f6:	4311      	orrs	r1, r2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80052fc:	0212      	lsls	r2, r2, #8
 80052fe:	4311      	orrs	r1, r2
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005304:	0852      	lsrs	r2, r2, #1
 8005306:	3a01      	subs	r2, #1
 8005308:	0552      	lsls	r2, r2, #21
 800530a:	4311      	orrs	r1, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005310:	0852      	lsrs	r2, r2, #1
 8005312:	3a01      	subs	r2, #1
 8005314:	0652      	lsls	r2, r2, #25
 8005316:	4311      	orrs	r1, r2
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800531c:	0912      	lsrs	r2, r2, #4
 800531e:	0452      	lsls	r2, r2, #17
 8005320:	430a      	orrs	r2, r1
 8005322:	4930      	ldr	r1, [pc, #192]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 8005324:	4313      	orrs	r3, r2
 8005326:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005328:	4b2e      	ldr	r3, [pc, #184]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a2d      	ldr	r2, [pc, #180]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 800532e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005332:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005334:	4b2b      	ldr	r3, [pc, #172]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4a2a      	ldr	r2, [pc, #168]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 800533a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800533e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005340:	f7fd fe8a 	bl	8003058 <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005348:	f7fd fe86 	bl	8003058 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e058      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800535a:	4b22      	ldr	r3, [pc, #136]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f0      	beq.n	8005348 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005366:	e050      	b.n	800540a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e04f      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536c:	4b1d      	ldr	r3, [pc, #116]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d148      	bne.n	800540a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005378:	4b1a      	ldr	r3, [pc, #104]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a19      	ldr	r2, [pc, #100]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 800537e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005382:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005384:	4b17      	ldr	r3, [pc, #92]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	4a16      	ldr	r2, [pc, #88]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 800538a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800538e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005390:	f7fd fe62 	bl	8003058 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005398:	f7fd fe5e 	bl	8003058 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e030      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053aa:	4b0e      	ldr	r3, [pc, #56]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0f0      	beq.n	8005398 <HAL_RCC_OscConfig+0x734>
 80053b6:	e028      	b.n	800540a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b0c      	cmp	r3, #12
 80053bc:	d023      	beq.n	8005406 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053be:	4b09      	ldr	r3, [pc, #36]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a08      	ldr	r2, [pc, #32]	@ (80053e4 <HAL_RCC_OscConfig+0x780>)
 80053c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ca:	f7fd fe45 	bl	8003058 <HAL_GetTick>
 80053ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d0:	e00c      	b.n	80053ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d2:	f7fd fe41 	bl	8003058 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d905      	bls.n	80053ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e013      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
 80053e4:	40021000 	.word	0x40021000
 80053e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ec:	4b09      	ldr	r3, [pc, #36]	@ (8005414 <HAL_RCC_OscConfig+0x7b0>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1ec      	bne.n	80053d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80053f8:	4b06      	ldr	r3, [pc, #24]	@ (8005414 <HAL_RCC_OscConfig+0x7b0>)
 80053fa:	68da      	ldr	r2, [r3, #12]
 80053fc:	4905      	ldr	r1, [pc, #20]	@ (8005414 <HAL_RCC_OscConfig+0x7b0>)
 80053fe:	4b06      	ldr	r3, [pc, #24]	@ (8005418 <HAL_RCC_OscConfig+0x7b4>)
 8005400:	4013      	ands	r3, r2
 8005402:	60cb      	str	r3, [r1, #12]
 8005404:	e001      	b.n	800540a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e000      	b.n	800540c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3720      	adds	r7, #32
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40021000 	.word	0x40021000
 8005418:	feeefffc 	.word	0xfeeefffc

0800541c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0e7      	b.n	8005600 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005430:	4b75      	ldr	r3, [pc, #468]	@ (8005608 <HAL_RCC_ClockConfig+0x1ec>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d910      	bls.n	8005460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543e:	4b72      	ldr	r3, [pc, #456]	@ (8005608 <HAL_RCC_ClockConfig+0x1ec>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f023 0207 	bic.w	r2, r3, #7
 8005446:	4970      	ldr	r1, [pc, #448]	@ (8005608 <HAL_RCC_ClockConfig+0x1ec>)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	4313      	orrs	r3, r2
 800544c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	4b6e      	ldr	r3, [pc, #440]	@ (8005608 <HAL_RCC_ClockConfig+0x1ec>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0cf      	b.n	8005600 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d010      	beq.n	800548e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	4b66      	ldr	r3, [pc, #408]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005478:	429a      	cmp	r2, r3
 800547a:	d908      	bls.n	800548e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800547c:	4b63      	ldr	r3, [pc, #396]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4960      	ldr	r1, [pc, #384]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 800548a:	4313      	orrs	r3, r2
 800548c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04c      	beq.n	8005534 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	2b03      	cmp	r3, #3
 80054a0:	d107      	bne.n	80054b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a2:	4b5a      	ldr	r3, [pc, #360]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d121      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e0a6      	b.n	8005600 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d107      	bne.n	80054ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054ba:	4b54      	ldr	r3, [pc, #336]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d115      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e09a      	b.n	8005600 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d107      	bne.n	80054e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054d2:	4b4e      	ldr	r3, [pc, #312]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e08e      	b.n	8005600 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054e2:	4b4a      	ldr	r3, [pc, #296]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e086      	b.n	8005600 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054f2:	4b46      	ldr	r3, [pc, #280]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f023 0203 	bic.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	4943      	ldr	r1, [pc, #268]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 8005500:	4313      	orrs	r3, r2
 8005502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005504:	f7fd fda8 	bl	8003058 <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800550a:	e00a      	b.n	8005522 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800550c:	f7fd fda4 	bl	8003058 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e06e      	b.n	8005600 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005522:	4b3a      	ldr	r3, [pc, #232]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 020c 	and.w	r2, r3, #12
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	009b      	lsls	r3, r3, #2
 8005530:	429a      	cmp	r2, r3
 8005532:	d1eb      	bne.n	800550c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d010      	beq.n	8005562 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	4b31      	ldr	r3, [pc, #196]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800554c:	429a      	cmp	r2, r3
 800554e:	d208      	bcs.n	8005562 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005550:	4b2e      	ldr	r3, [pc, #184]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	492b      	ldr	r1, [pc, #172]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 800555e:	4313      	orrs	r3, r2
 8005560:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005562:	4b29      	ldr	r3, [pc, #164]	@ (8005608 <HAL_RCC_ClockConfig+0x1ec>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	429a      	cmp	r2, r3
 800556e:	d210      	bcs.n	8005592 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005570:	4b25      	ldr	r3, [pc, #148]	@ (8005608 <HAL_RCC_ClockConfig+0x1ec>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f023 0207 	bic.w	r2, r3, #7
 8005578:	4923      	ldr	r1, [pc, #140]	@ (8005608 <HAL_RCC_ClockConfig+0x1ec>)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	4313      	orrs	r3, r2
 800557e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005580:	4b21      	ldr	r3, [pc, #132]	@ (8005608 <HAL_RCC_ClockConfig+0x1ec>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d001      	beq.n	8005592 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e036      	b.n	8005600 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b00      	cmp	r3, #0
 800559c:	d008      	beq.n	80055b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800559e:	4b1b      	ldr	r3, [pc, #108]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	4918      	ldr	r1, [pc, #96]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d009      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055bc:	4b13      	ldr	r3, [pc, #76]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	4910      	ldr	r1, [pc, #64]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055d0:	f000 f824 	bl	800561c <HAL_RCC_GetSysClockFreq>
 80055d4:	4602      	mov	r2, r0
 80055d6:	4b0d      	ldr	r3, [pc, #52]	@ (800560c <HAL_RCC_ClockConfig+0x1f0>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	091b      	lsrs	r3, r3, #4
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	490b      	ldr	r1, [pc, #44]	@ (8005610 <HAL_RCC_ClockConfig+0x1f4>)
 80055e2:	5ccb      	ldrb	r3, [r1, r3]
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	fa22 f303 	lsr.w	r3, r2, r3
 80055ec:	4a09      	ldr	r2, [pc, #36]	@ (8005614 <HAL_RCC_ClockConfig+0x1f8>)
 80055ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055f0:	4b09      	ldr	r3, [pc, #36]	@ (8005618 <HAL_RCC_ClockConfig+0x1fc>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fd fcdf 	bl	8002fb8 <HAL_InitTick>
 80055fa:	4603      	mov	r3, r0
 80055fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80055fe:	7afb      	ldrb	r3, [r7, #11]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40022000 	.word	0x40022000
 800560c:	40021000 	.word	0x40021000
 8005610:	08009d7c 	.word	0x08009d7c
 8005614:	20000000 	.word	0x20000000
 8005618:	200000c8 	.word	0x200000c8

0800561c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800561c:	b480      	push	{r7}
 800561e:	b089      	sub	sp, #36	@ 0x24
 8005620:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	2300      	movs	r3, #0
 8005628:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800562a:	4b3e      	ldr	r3, [pc, #248]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 030c 	and.w	r3, r3, #12
 8005632:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005634:	4b3b      	ldr	r3, [pc, #236]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_RCC_GetSysClockFreq+0x34>
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2b0c      	cmp	r3, #12
 8005648:	d121      	bne.n	800568e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d11e      	bne.n	800568e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005650:	4b34      	ldr	r3, [pc, #208]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d107      	bne.n	800566c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800565c:	4b31      	ldr	r3, [pc, #196]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 800565e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	61fb      	str	r3, [r7, #28]
 800566a:	e005      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800566c:	4b2d      	ldr	r3, [pc, #180]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	091b      	lsrs	r3, r3, #4
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005678:	4a2b      	ldr	r2, [pc, #172]	@ (8005728 <HAL_RCC_GetSysClockFreq+0x10c>)
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005680:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10d      	bne.n	80056a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800568c:	e00a      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	2b04      	cmp	r3, #4
 8005692:	d102      	bne.n	800569a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005694:	4b25      	ldr	r3, [pc, #148]	@ (800572c <HAL_RCC_GetSysClockFreq+0x110>)
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	e004      	b.n	80056a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	2b08      	cmp	r3, #8
 800569e:	d101      	bne.n	80056a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056a0:	4b23      	ldr	r3, [pc, #140]	@ (8005730 <HAL_RCC_GetSysClockFreq+0x114>)
 80056a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b0c      	cmp	r3, #12
 80056a8:	d134      	bne.n	8005714 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f003 0303 	and.w	r3, r3, #3
 80056b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d003      	beq.n	80056c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d003      	beq.n	80056c8 <HAL_RCC_GetSysClockFreq+0xac>
 80056c0:	e005      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80056c2:	4b1a      	ldr	r3, [pc, #104]	@ (800572c <HAL_RCC_GetSysClockFreq+0x110>)
 80056c4:	617b      	str	r3, [r7, #20]
      break;
 80056c6:	e005      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80056c8:	4b19      	ldr	r3, [pc, #100]	@ (8005730 <HAL_RCC_GetSysClockFreq+0x114>)
 80056ca:	617b      	str	r3, [r7, #20]
      break;
 80056cc:	e002      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	617b      	str	r3, [r7, #20]
      break;
 80056d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056d4:	4b13      	ldr	r3, [pc, #76]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	091b      	lsrs	r3, r3, #4
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	3301      	adds	r3, #1
 80056e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056e2:	4b10      	ldr	r3, [pc, #64]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	0a1b      	lsrs	r3, r3, #8
 80056e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	fb03 f202 	mul.w	r2, r3, r2
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005724 <HAL_RCC_GetSysClockFreq+0x108>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	0e5b      	lsrs	r3, r3, #25
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	3301      	adds	r3, #1
 8005706:	005b      	lsls	r3, r3, #1
 8005708:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005712:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005714:	69bb      	ldr	r3, [r7, #24]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3724      	adds	r7, #36	@ 0x24
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40021000 	.word	0x40021000
 8005728:	08009d94 	.word	0x08009d94
 800572c:	00f42400 	.word	0x00f42400
 8005730:	007a1200 	.word	0x007a1200

08005734 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005738:	4b03      	ldr	r3, [pc, #12]	@ (8005748 <HAL_RCC_GetHCLKFreq+0x14>)
 800573a:	681b      	ldr	r3, [r3, #0]
}
 800573c:	4618      	mov	r0, r3
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000000 	.word	0x20000000

0800574c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005750:	f7ff fff0 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005754:	4602      	mov	r2, r0
 8005756:	4b06      	ldr	r3, [pc, #24]	@ (8005770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	0a1b      	lsrs	r3, r3, #8
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	4904      	ldr	r1, [pc, #16]	@ (8005774 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005762:	5ccb      	ldrb	r3, [r1, r3]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800576c:	4618      	mov	r0, r3
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40021000 	.word	0x40021000
 8005774:	08009d8c 	.word	0x08009d8c

08005778 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800577c:	f7ff ffda 	bl	8005734 <HAL_RCC_GetHCLKFreq>
 8005780:	4602      	mov	r2, r0
 8005782:	4b06      	ldr	r3, [pc, #24]	@ (800579c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	0adb      	lsrs	r3, r3, #11
 8005788:	f003 0307 	and.w	r3, r3, #7
 800578c:	4904      	ldr	r1, [pc, #16]	@ (80057a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800578e:	5ccb      	ldrb	r3, [r1, r3]
 8005790:	f003 031f 	and.w	r3, r3, #31
 8005794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005798:	4618      	mov	r0, r3
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40021000 	.word	0x40021000
 80057a0:	08009d8c 	.word	0x08009d8c

080057a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80057b0:	4b2a      	ldr	r3, [pc, #168]	@ (800585c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80057bc:	f7ff f922 	bl	8004a04 <HAL_PWREx_GetVoltageRange>
 80057c0:	6178      	str	r0, [r7, #20]
 80057c2:	e014      	b.n	80057ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80057c4:	4b25      	ldr	r3, [pc, #148]	@ (800585c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c8:	4a24      	ldr	r2, [pc, #144]	@ (800585c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80057d0:	4b22      	ldr	r3, [pc, #136]	@ (800585c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80057dc:	f7ff f912 	bl	8004a04 <HAL_PWREx_GetVoltageRange>
 80057e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80057e2:	4b1e      	ldr	r3, [pc, #120]	@ (800585c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e6:	4a1d      	ldr	r2, [pc, #116]	@ (800585c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057ec:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057f4:	d10b      	bne.n	800580e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b80      	cmp	r3, #128	@ 0x80
 80057fa:	d919      	bls.n	8005830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2ba0      	cmp	r3, #160	@ 0xa0
 8005800:	d902      	bls.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005802:	2302      	movs	r3, #2
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	e013      	b.n	8005830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005808:	2301      	movs	r3, #1
 800580a:	613b      	str	r3, [r7, #16]
 800580c:	e010      	b.n	8005830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b80      	cmp	r3, #128	@ 0x80
 8005812:	d902      	bls.n	800581a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005814:	2303      	movs	r3, #3
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	e00a      	b.n	8005830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b80      	cmp	r3, #128	@ 0x80
 800581e:	d102      	bne.n	8005826 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005820:	2302      	movs	r3, #2
 8005822:	613b      	str	r3, [r7, #16]
 8005824:	e004      	b.n	8005830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b70      	cmp	r3, #112	@ 0x70
 800582a:	d101      	bne.n	8005830 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800582c:	2301      	movs	r3, #1
 800582e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005830:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f023 0207 	bic.w	r2, r3, #7
 8005838:	4909      	ldr	r1, [pc, #36]	@ (8005860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005840:	4b07      	ldr	r3, [pc, #28]	@ (8005860 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	429a      	cmp	r2, r3
 800584c:	d001      	beq.n	8005852 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e000      	b.n	8005854 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40021000 	.word	0x40021000
 8005860:	40022000 	.word	0x40022000

08005864 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800586c:	2300      	movs	r3, #0
 800586e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005870:	2300      	movs	r3, #0
 8005872:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800587c:	2b00      	cmp	r3, #0
 800587e:	d041      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005884:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005888:	d02a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800588a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800588e:	d824      	bhi.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005890:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005894:	d008      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005896:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800589a:	d81e      	bhi.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80058a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058a4:	d010      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058a6:	e018      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80058a8:	4b86      	ldr	r3, [pc, #536]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	4a85      	ldr	r2, [pc, #532]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058b4:	e015      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3304      	adds	r3, #4
 80058ba:	2100      	movs	r1, #0
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 facb 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058c6:	e00c      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3320      	adds	r3, #32
 80058cc:	2100      	movs	r1, #0
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fbb6 	bl	8006040 <RCCEx_PLLSAI2_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058d8:	e003      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	74fb      	strb	r3, [r7, #19]
      break;
 80058de:	e000      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80058e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058e2:	7cfb      	ldrb	r3, [r7, #19]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058e8:	4b76      	ldr	r3, [pc, #472]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f6:	4973      	ldr	r1, [pc, #460]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80058fe:	e001      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005900:	7cfb      	ldrb	r3, [r7, #19]
 8005902:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d041      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005914:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005918:	d02a      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800591a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800591e:	d824      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005924:	d008      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005926:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800592a:	d81e      	bhi.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005930:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005934:	d010      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005936:	e018      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005938:	4b62      	ldr	r3, [pc, #392]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4a61      	ldr	r2, [pc, #388]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800593e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005942:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005944:	e015      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3304      	adds	r3, #4
 800594a:	2100      	movs	r1, #0
 800594c:	4618      	mov	r0, r3
 800594e:	f000 fa83 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 8005952:	4603      	mov	r3, r0
 8005954:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005956:	e00c      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3320      	adds	r3, #32
 800595c:	2100      	movs	r1, #0
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fb6e 	bl	8006040 <RCCEx_PLLSAI2_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005968:	e003      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	74fb      	strb	r3, [r7, #19]
      break;
 800596e:	e000      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005972:	7cfb      	ldrb	r3, [r7, #19]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10b      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005978:	4b52      	ldr	r3, [pc, #328]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005986:	494f      	ldr	r1, [pc, #316]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800598e:	e001      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005990:	7cfb      	ldrb	r3, [r7, #19]
 8005992:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80a0 	beq.w	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059a2:	2300      	movs	r3, #0
 80059a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80059a6:	4b47      	ldr	r3, [pc, #284]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80059b6:	2300      	movs	r3, #0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00d      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059bc:	4b41      	ldr	r3, [pc, #260]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c0:	4a40      	ldr	r2, [pc, #256]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80059c8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d4:	2301      	movs	r3, #1
 80059d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059d8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a3a      	ldr	r2, [pc, #232]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059e4:	f7fd fb38 	bl	8003058 <HAL_GetTick>
 80059e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059ea:	e009      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ec:	f7fd fb34 	bl	8003058 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d902      	bls.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	74fb      	strb	r3, [r7, #19]
        break;
 80059fe:	e005      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005a00:	4b31      	ldr	r3, [pc, #196]	@ (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0ef      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005a0c:	7cfb      	ldrb	r3, [r7, #19]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d15c      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005a12:	4b2c      	ldr	r3, [pc, #176]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01f      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d019      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a30:	4b24      	ldr	r3, [pc, #144]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a3c:	4b21      	ldr	r3, [pc, #132]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a42:	4a20      	ldr	r2, [pc, #128]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a52:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a5c:	4a19      	ldr	r2, [pc, #100]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d016      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a6e:	f7fd faf3 	bl	8003058 <HAL_GetTick>
 8005a72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a74:	e00b      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a76:	f7fd faef 	bl	8003058 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d902      	bls.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	74fb      	strb	r3, [r7, #19]
            break;
 8005a8c:	e006      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a94:	f003 0302 	and.w	r3, r3, #2
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0ec      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005a9c:	7cfb      	ldrb	r3, [r7, #19]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10c      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aa2:	4b08      	ldr	r3, [pc, #32]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ab2:	4904      	ldr	r1, [pc, #16]	@ (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005aba:	e009      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005abc:	7cfb      	ldrb	r3, [r7, #19]
 8005abe:	74bb      	strb	r3, [r7, #18]
 8005ac0:	e006      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005ac2:	bf00      	nop
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005acc:	7cfb      	ldrb	r3, [r7, #19]
 8005ace:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ad0:	7c7b      	ldrb	r3, [r7, #17]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d105      	bne.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ada:	4a9d      	ldr	r2, [pc, #628]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ae0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aee:	4b98      	ldr	r3, [pc, #608]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af4:	f023 0203 	bic.w	r2, r3, #3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005afc:	4994      	ldr	r1, [pc, #592]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00a      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b10:	4b8f      	ldr	r3, [pc, #572]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b16:	f023 020c 	bic.w	r2, r3, #12
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b1e:	498c      	ldr	r1, [pc, #560]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b32:	4b87      	ldr	r3, [pc, #540]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b40:	4983      	ldr	r1, [pc, #524]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0308 	and.w	r3, r3, #8
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00a      	beq.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b54:	4b7e      	ldr	r3, [pc, #504]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b62:	497b      	ldr	r1, [pc, #492]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b76:	4b76      	ldr	r3, [pc, #472]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b84:	4972      	ldr	r1, [pc, #456]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0320 	and.w	r3, r3, #32
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b98:	4b6d      	ldr	r3, [pc, #436]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ba6:	496a      	ldr	r1, [pc, #424]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bba:	4b65      	ldr	r3, [pc, #404]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bc0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc8:	4961      	ldr	r1, [pc, #388]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00a      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bdc:	4b5c      	ldr	r3, [pc, #368]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005be2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bea:	4959      	ldr	r1, [pc, #356]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bfe:	4b54      	ldr	r3, [pc, #336]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c0c:	4950      	ldr	r1, [pc, #320]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00a      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c20:	4b4b      	ldr	r3, [pc, #300]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2e:	4948      	ldr	r1, [pc, #288]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c30:	4313      	orrs	r3, r2
 8005c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c42:	4b43      	ldr	r3, [pc, #268]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c50:	493f      	ldr	r1, [pc, #252]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d028      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c64:	4b3a      	ldr	r3, [pc, #232]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c72:	4937      	ldr	r1, [pc, #220]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c82:	d106      	bne.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c84:	4b32      	ldr	r3, [pc, #200]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	4a31      	ldr	r2, [pc, #196]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c8e:	60d3      	str	r3, [r2, #12]
 8005c90:	e011      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c9a:	d10c      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	2101      	movs	r1, #1
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 f8d8 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005cac:	7cfb      	ldrb	r3, [r7, #19]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005cb2:	7cfb      	ldrb	r3, [r7, #19]
 8005cb4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d028      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005cc2:	4b23      	ldr	r3, [pc, #140]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd0:	491f      	ldr	r1, [pc, #124]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ce0:	d106      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	4a1a      	ldr	r2, [pc, #104]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ce8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cec:	60d3      	str	r3, [r2, #12]
 8005cee:	e011      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005cf8:	d10c      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	2101      	movs	r1, #1
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 f8a9 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 8005d06:	4603      	mov	r3, r0
 8005d08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d0a:	7cfb      	ldrb	r3, [r7, #19]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005d10:	7cfb      	ldrb	r3, [r7, #19]
 8005d12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d02b      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d20:	4b0b      	ldr	r3, [pc, #44]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d2e:	4908      	ldr	r1, [pc, #32]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d3e:	d109      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d40:	4b03      	ldr	r3, [pc, #12]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4a02      	ldr	r2, [pc, #8]	@ (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d4a:	60d3      	str	r3, [r2, #12]
 8005d4c:	e014      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d5c:	d10c      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3304      	adds	r3, #4
 8005d62:	2101      	movs	r1, #1
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 f877 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d6e:	7cfb      	ldrb	r3, [r7, #19]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005d74:	7cfb      	ldrb	r3, [r7, #19]
 8005d76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d02f      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d84:	4b2b      	ldr	r3, [pc, #172]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d92:	4928      	ldr	r1, [pc, #160]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005da2:	d10d      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3304      	adds	r3, #4
 8005da8:	2102      	movs	r1, #2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 f854 	bl	8005e58 <RCCEx_PLLSAI1_Config>
 8005db0:	4603      	mov	r3, r0
 8005db2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005db4:	7cfb      	ldrb	r3, [r7, #19]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d014      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005dba:	7cfb      	ldrb	r3, [r7, #19]
 8005dbc:	74bb      	strb	r3, [r7, #18]
 8005dbe:	e011      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005dc8:	d10c      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3320      	adds	r3, #32
 8005dce:	2102      	movs	r1, #2
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 f935 	bl	8006040 <RCCEx_PLLSAI2_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dda:	7cfb      	ldrb	r3, [r7, #19]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005de0:	7cfb      	ldrb	r3, [r7, #19]
 8005de2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005df0:	4b10      	ldr	r3, [pc, #64]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005df6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dfe:	490d      	ldr	r1, [pc, #52]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00b      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e12:	4b08      	ldr	r3, [pc, #32]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e22:	4904      	ldr	r1, [pc, #16]	@ (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3718      	adds	r7, #24
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	40021000 	.word	0x40021000

08005e38 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005e3c:	4b05      	ldr	r3, [pc, #20]	@ (8005e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a04      	ldr	r2, [pc, #16]	@ (8005e54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005e42:	f043 0304 	orr.w	r3, r3, #4
 8005e46:	6013      	str	r3, [r2, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	40021000 	.word	0x40021000

08005e58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e66:	4b75      	ldr	r3, [pc, #468]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d018      	beq.n	8005ea4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e72:	4b72      	ldr	r3, [pc, #456]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0203 	and.w	r2, r3, #3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d10d      	bne.n	8005e9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
       ||
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e8a:	4b6c      	ldr	r3, [pc, #432]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	091b      	lsrs	r3, r3, #4
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
       ||
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d047      	beq.n	8005f2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	73fb      	strb	r3, [r7, #15]
 8005ea2:	e044      	b.n	8005f2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d018      	beq.n	8005ede <RCCEx_PLLSAI1_Config+0x86>
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d825      	bhi.n	8005efc <RCCEx_PLLSAI1_Config+0xa4>
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d002      	beq.n	8005eba <RCCEx_PLLSAI1_Config+0x62>
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d009      	beq.n	8005ecc <RCCEx_PLLSAI1_Config+0x74>
 8005eb8:	e020      	b.n	8005efc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eba:	4b60      	ldr	r3, [pc, #384]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d11d      	bne.n	8005f02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005eca:	e01a      	b.n	8005f02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ecc:	4b5b      	ldr	r3, [pc, #364]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d116      	bne.n	8005f06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005edc:	e013      	b.n	8005f06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005ede:	4b57      	ldr	r3, [pc, #348]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10f      	bne.n	8005f0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005eea:	4b54      	ldr	r3, [pc, #336]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005efa:	e006      	b.n	8005f0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	73fb      	strb	r3, [r7, #15]
      break;
 8005f00:	e004      	b.n	8005f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f02:	bf00      	nop
 8005f04:	e002      	b.n	8005f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f06:	bf00      	nop
 8005f08:	e000      	b.n	8005f0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10d      	bne.n	8005f2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005f12:	4b4a      	ldr	r3, [pc, #296]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6819      	ldr	r1, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	430b      	orrs	r3, r1
 8005f28:	4944      	ldr	r1, [pc, #272]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d17d      	bne.n	8006030 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f34:	4b41      	ldr	r3, [pc, #260]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a40      	ldr	r2, [pc, #256]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f40:	f7fd f88a 	bl	8003058 <HAL_GetTick>
 8005f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f46:	e009      	b.n	8005f5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f48:	f7fd f886 	bl	8003058 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d902      	bls.n	8005f5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	73fb      	strb	r3, [r7, #15]
        break;
 8005f5a:	e005      	b.n	8005f68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f5c:	4b37      	ldr	r3, [pc, #220]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1ef      	bne.n	8005f48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d160      	bne.n	8006030 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d111      	bne.n	8005f98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f74:	4b31      	ldr	r3, [pc, #196]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6892      	ldr	r2, [r2, #8]
 8005f84:	0211      	lsls	r1, r2, #8
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	68d2      	ldr	r2, [r2, #12]
 8005f8a:	0912      	lsrs	r2, r2, #4
 8005f8c:	0452      	lsls	r2, r2, #17
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	492a      	ldr	r1, [pc, #168]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	610b      	str	r3, [r1, #16]
 8005f96:	e027      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d112      	bne.n	8005fc4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f9e:	4b27      	ldr	r3, [pc, #156]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005fa6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	6892      	ldr	r2, [r2, #8]
 8005fae:	0211      	lsls	r1, r2, #8
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6912      	ldr	r2, [r2, #16]
 8005fb4:	0852      	lsrs	r2, r2, #1
 8005fb6:	3a01      	subs	r2, #1
 8005fb8:	0552      	lsls	r2, r2, #21
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	491f      	ldr	r1, [pc, #124]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	610b      	str	r3, [r1, #16]
 8005fc2:	e011      	b.n	8005fe8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005fcc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6892      	ldr	r2, [r2, #8]
 8005fd4:	0211      	lsls	r1, r2, #8
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6952      	ldr	r2, [r2, #20]
 8005fda:	0852      	lsrs	r2, r2, #1
 8005fdc:	3a01      	subs	r2, #1
 8005fde:	0652      	lsls	r2, r2, #25
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	4916      	ldr	r1, [pc, #88]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fe8:	4b14      	ldr	r3, [pc, #80]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a13      	ldr	r2, [pc, #76]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005ff2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff4:	f7fd f830 	bl	8003058 <HAL_GetTick>
 8005ff8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ffa:	e009      	b.n	8006010 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ffc:	f7fd f82c 	bl	8003058 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d902      	bls.n	8006010 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	73fb      	strb	r3, [r7, #15]
          break;
 800600e:	e005      	b.n	800601c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006010:	4b0a      	ldr	r3, [pc, #40]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0ef      	beq.n	8005ffc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800601c:	7bfb      	ldrb	r3, [r7, #15]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006022:	4b06      	ldr	r3, [pc, #24]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	4904      	ldr	r1, [pc, #16]	@ (800603c <RCCEx_PLLSAI1_Config+0x1e4>)
 800602c:	4313      	orrs	r3, r2
 800602e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40021000 	.word	0x40021000

08006040 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800604a:	2300      	movs	r3, #0
 800604c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800604e:	4b6a      	ldr	r3, [pc, #424]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f003 0303 	and.w	r3, r3, #3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d018      	beq.n	800608c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800605a:	4b67      	ldr	r3, [pc, #412]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f003 0203 	and.w	r2, r3, #3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d10d      	bne.n	8006086 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
       ||
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006072:	4b61      	ldr	r3, [pc, #388]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	091b      	lsrs	r3, r3, #4
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
       ||
 8006082:	429a      	cmp	r2, r3
 8006084:	d047      	beq.n	8006116 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]
 800608a:	e044      	b.n	8006116 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2b03      	cmp	r3, #3
 8006092:	d018      	beq.n	80060c6 <RCCEx_PLLSAI2_Config+0x86>
 8006094:	2b03      	cmp	r3, #3
 8006096:	d825      	bhi.n	80060e4 <RCCEx_PLLSAI2_Config+0xa4>
 8006098:	2b01      	cmp	r3, #1
 800609a:	d002      	beq.n	80060a2 <RCCEx_PLLSAI2_Config+0x62>
 800609c:	2b02      	cmp	r3, #2
 800609e:	d009      	beq.n	80060b4 <RCCEx_PLLSAI2_Config+0x74>
 80060a0:	e020      	b.n	80060e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060a2:	4b55      	ldr	r3, [pc, #340]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d11d      	bne.n	80060ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b2:	e01a      	b.n	80060ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060b4:	4b50      	ldr	r3, [pc, #320]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d116      	bne.n	80060ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060c4:	e013      	b.n	80060ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060c6:	4b4c      	ldr	r3, [pc, #304]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10f      	bne.n	80060f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060d2:	4b49      	ldr	r3, [pc, #292]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060e2:	e006      	b.n	80060f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	73fb      	strb	r3, [r7, #15]
      break;
 80060e8:	e004      	b.n	80060f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060ea:	bf00      	nop
 80060ec:	e002      	b.n	80060f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060ee:	bf00      	nop
 80060f0:	e000      	b.n	80060f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10d      	bne.n	8006116 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060fa:	4b3f      	ldr	r3, [pc, #252]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6819      	ldr	r1, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	3b01      	subs	r3, #1
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	430b      	orrs	r3, r1
 8006110:	4939      	ldr	r1, [pc, #228]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006112:	4313      	orrs	r3, r2
 8006114:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d167      	bne.n	80061ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800611c:	4b36      	ldr	r3, [pc, #216]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a35      	ldr	r2, [pc, #212]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006122:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006126:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006128:	f7fc ff96 	bl	8003058 <HAL_GetTick>
 800612c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800612e:	e009      	b.n	8006144 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006130:	f7fc ff92 	bl	8003058 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d902      	bls.n	8006144 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	73fb      	strb	r3, [r7, #15]
        break;
 8006142:	e005      	b.n	8006150 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006144:	4b2c      	ldr	r3, [pc, #176]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1ef      	bne.n	8006130 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d14a      	bne.n	80061ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d111      	bne.n	8006180 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800615c:	4b26      	ldr	r3, [pc, #152]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800615e:	695b      	ldr	r3, [r3, #20]
 8006160:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006164:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6892      	ldr	r2, [r2, #8]
 800616c:	0211      	lsls	r1, r2, #8
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	68d2      	ldr	r2, [r2, #12]
 8006172:	0912      	lsrs	r2, r2, #4
 8006174:	0452      	lsls	r2, r2, #17
 8006176:	430a      	orrs	r2, r1
 8006178:	491f      	ldr	r1, [pc, #124]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800617a:	4313      	orrs	r3, r2
 800617c:	614b      	str	r3, [r1, #20]
 800617e:	e011      	b.n	80061a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006180:	4b1d      	ldr	r3, [pc, #116]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006188:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	6892      	ldr	r2, [r2, #8]
 8006190:	0211      	lsls	r1, r2, #8
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6912      	ldr	r2, [r2, #16]
 8006196:	0852      	lsrs	r2, r2, #1
 8006198:	3a01      	subs	r2, #1
 800619a:	0652      	lsls	r2, r2, #25
 800619c:	430a      	orrs	r2, r1
 800619e:	4916      	ldr	r1, [pc, #88]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80061a4:	4b14      	ldr	r3, [pc, #80]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a13      	ldr	r2, [pc, #76]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b0:	f7fc ff52 	bl	8003058 <HAL_GetTick>
 80061b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061b6:	e009      	b.n	80061cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061b8:	f7fc ff4e 	bl	8003058 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d902      	bls.n	80061cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	73fb      	strb	r3, [r7, #15]
          break;
 80061ca:	e005      	b.n	80061d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061cc:	4b0a      	ldr	r3, [pc, #40]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0ef      	beq.n	80061b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d106      	bne.n	80061ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80061de:	4b06      	ldr	r3, [pc, #24]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061e0:	695a      	ldr	r2, [r3, #20]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	4904      	ldr	r1, [pc, #16]	@ (80061f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40021000 	.word	0x40021000

080061fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e095      	b.n	800633a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006212:	2b00      	cmp	r3, #0
 8006214:	d108      	bne.n	8006228 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800621e:	d009      	beq.n	8006234 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	61da      	str	r2, [r3, #28]
 8006226:	e005      	b.n	8006234 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fb fbc8 	bl	80019e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800626a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006274:	d902      	bls.n	800627c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	e002      	b.n	8006282 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800627c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006280:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800628a:	d007      	beq.n	800629c <HAL_SPI_Init+0xa0>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006294:	d002      	beq.n	800629c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062ca:	431a      	orrs	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062de:	ea42 0103 	orr.w	r1, r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	0c1b      	lsrs	r3, r3, #16
 80062f8:	f003 0204 	and.w	r2, r3, #4
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	431a      	orrs	r2, r3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006318:	ea42 0103 	orr.w	r1, r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	e040      	b.n	80063d6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006358:	2b00      	cmp	r3, #0
 800635a:	d106      	bne.n	800636a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7fb fb81 	bl	8001a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2224      	movs	r2, #36	@ 0x24
 800636e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0201 	bic.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fb69 	bl	8006a60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f8ae 	bl	80064f0 <UART_SetConfig>
 8006394:	4603      	mov	r3, r0
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e01b      	b.n	80063d6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80063bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f042 0201 	orr.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fbe8 	bl	8006ba4 <UART_CheckIdleState>
 80063d4:	4603      	mov	r3, r0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b08a      	sub	sp, #40	@ 0x28
 80063e2:	af02      	add	r7, sp, #8
 80063e4:	60f8      	str	r0, [r7, #12]
 80063e6:	60b9      	str	r1, [r7, #8]
 80063e8:	603b      	str	r3, [r7, #0]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d177      	bne.n	80064e6 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <HAL_UART_Transmit+0x24>
 80063fc:	88fb      	ldrh	r3, [r7, #6]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e070      	b.n	80064e8 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2221      	movs	r2, #33	@ 0x21
 8006412:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006414:	f7fc fe20 	bl	8003058 <HAL_GetTick>
 8006418:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	88fa      	ldrh	r2, [r7, #6]
 800641e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	88fa      	ldrh	r2, [r7, #6]
 8006426:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006432:	d108      	bne.n	8006446 <HAL_UART_Transmit+0x68>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800643c:	2300      	movs	r3, #0
 800643e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	e003      	b.n	800644e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800644e:	e02f      	b.n	80064b0 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2200      	movs	r2, #0
 8006458:	2180      	movs	r1, #128	@ 0x80
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 fc4a 	bl	8006cf4 <UART_WaitOnFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d004      	beq.n	8006470 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2220      	movs	r2, #32
 800646a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e03b      	b.n	80064e8 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10b      	bne.n	800648e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	881a      	ldrh	r2, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006482:	b292      	uxth	r2, r2
 8006484:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	3302      	adds	r3, #2
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	e007      	b.n	800649e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	3301      	adds	r3, #1
 800649c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d1c9      	bne.n	8006450 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2200      	movs	r2, #0
 80064c4:	2140      	movs	r1, #64	@ 0x40
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f000 fc14 	bl	8006cf4 <UART_WaitOnFlagUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d004      	beq.n	80064dc <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80064d8:	2303      	movs	r3, #3
 80064da:	e005      	b.n	80064e8 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2220      	movs	r2, #32
 80064e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	e000      	b.n	80064e8 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
  }
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3720      	adds	r7, #32
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f4:	b08a      	sub	sp, #40	@ 0x28
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	431a      	orrs	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	431a      	orrs	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	4313      	orrs	r3, r2
 8006516:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4ba4      	ldr	r3, [pc, #656]	@ (80067b0 <UART_SetConfig+0x2c0>)
 8006520:	4013      	ands	r3, r2
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006528:	430b      	orrs	r3, r1
 800652a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a99      	ldr	r2, [pc, #612]	@ (80067b4 <UART_SetConfig+0x2c4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d004      	beq.n	800655c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006558:	4313      	orrs	r3, r2
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800656c:	430a      	orrs	r2, r1
 800656e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a90      	ldr	r2, [pc, #576]	@ (80067b8 <UART_SetConfig+0x2c8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d126      	bne.n	80065c8 <UART_SetConfig+0xd8>
 800657a:	4b90      	ldr	r3, [pc, #576]	@ (80067bc <UART_SetConfig+0x2cc>)
 800657c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006580:	f003 0303 	and.w	r3, r3, #3
 8006584:	2b03      	cmp	r3, #3
 8006586:	d81b      	bhi.n	80065c0 <UART_SetConfig+0xd0>
 8006588:	a201      	add	r2, pc, #4	@ (adr r2, 8006590 <UART_SetConfig+0xa0>)
 800658a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658e:	bf00      	nop
 8006590:	080065a1 	.word	0x080065a1
 8006594:	080065b1 	.word	0x080065b1
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065b9 	.word	0x080065b9
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a6:	e116      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80065a8:	2302      	movs	r3, #2
 80065aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ae:	e112      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80065b0:	2304      	movs	r3, #4
 80065b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b6:	e10e      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80065b8:	2308      	movs	r3, #8
 80065ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065be:	e10a      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80065c0:	2310      	movs	r3, #16
 80065c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065c6:	e106      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a7c      	ldr	r2, [pc, #496]	@ (80067c0 <UART_SetConfig+0x2d0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d138      	bne.n	8006644 <UART_SetConfig+0x154>
 80065d2:	4b7a      	ldr	r3, [pc, #488]	@ (80067bc <UART_SetConfig+0x2cc>)
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065d8:	f003 030c 	and.w	r3, r3, #12
 80065dc:	2b0c      	cmp	r3, #12
 80065de:	d82d      	bhi.n	800663c <UART_SetConfig+0x14c>
 80065e0:	a201      	add	r2, pc, #4	@ (adr r2, 80065e8 <UART_SetConfig+0xf8>)
 80065e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e6:	bf00      	nop
 80065e8:	0800661d 	.word	0x0800661d
 80065ec:	0800663d 	.word	0x0800663d
 80065f0:	0800663d 	.word	0x0800663d
 80065f4:	0800663d 	.word	0x0800663d
 80065f8:	0800662d 	.word	0x0800662d
 80065fc:	0800663d 	.word	0x0800663d
 8006600:	0800663d 	.word	0x0800663d
 8006604:	0800663d 	.word	0x0800663d
 8006608:	08006625 	.word	0x08006625
 800660c:	0800663d 	.word	0x0800663d
 8006610:	0800663d 	.word	0x0800663d
 8006614:	0800663d 	.word	0x0800663d
 8006618:	08006635 	.word	0x08006635
 800661c:	2300      	movs	r3, #0
 800661e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006622:	e0d8      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006624:	2302      	movs	r3, #2
 8006626:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800662a:	e0d4      	b.n	80067d6 <UART_SetConfig+0x2e6>
 800662c:	2304      	movs	r3, #4
 800662e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006632:	e0d0      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006634:	2308      	movs	r3, #8
 8006636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800663a:	e0cc      	b.n	80067d6 <UART_SetConfig+0x2e6>
 800663c:	2310      	movs	r3, #16
 800663e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006642:	e0c8      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a5e      	ldr	r2, [pc, #376]	@ (80067c4 <UART_SetConfig+0x2d4>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d125      	bne.n	800669a <UART_SetConfig+0x1aa>
 800664e:	4b5b      	ldr	r3, [pc, #364]	@ (80067bc <UART_SetConfig+0x2cc>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006654:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006658:	2b30      	cmp	r3, #48	@ 0x30
 800665a:	d016      	beq.n	800668a <UART_SetConfig+0x19a>
 800665c:	2b30      	cmp	r3, #48	@ 0x30
 800665e:	d818      	bhi.n	8006692 <UART_SetConfig+0x1a2>
 8006660:	2b20      	cmp	r3, #32
 8006662:	d00a      	beq.n	800667a <UART_SetConfig+0x18a>
 8006664:	2b20      	cmp	r3, #32
 8006666:	d814      	bhi.n	8006692 <UART_SetConfig+0x1a2>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <UART_SetConfig+0x182>
 800666c:	2b10      	cmp	r3, #16
 800666e:	d008      	beq.n	8006682 <UART_SetConfig+0x192>
 8006670:	e00f      	b.n	8006692 <UART_SetConfig+0x1a2>
 8006672:	2300      	movs	r3, #0
 8006674:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006678:	e0ad      	b.n	80067d6 <UART_SetConfig+0x2e6>
 800667a:	2302      	movs	r3, #2
 800667c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006680:	e0a9      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006682:	2304      	movs	r3, #4
 8006684:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006688:	e0a5      	b.n	80067d6 <UART_SetConfig+0x2e6>
 800668a:	2308      	movs	r3, #8
 800668c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006690:	e0a1      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006692:	2310      	movs	r3, #16
 8006694:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006698:	e09d      	b.n	80067d6 <UART_SetConfig+0x2e6>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a4a      	ldr	r2, [pc, #296]	@ (80067c8 <UART_SetConfig+0x2d8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d125      	bne.n	80066f0 <UART_SetConfig+0x200>
 80066a4:	4b45      	ldr	r3, [pc, #276]	@ (80067bc <UART_SetConfig+0x2cc>)
 80066a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80066b0:	d016      	beq.n	80066e0 <UART_SetConfig+0x1f0>
 80066b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80066b4:	d818      	bhi.n	80066e8 <UART_SetConfig+0x1f8>
 80066b6:	2b80      	cmp	r3, #128	@ 0x80
 80066b8:	d00a      	beq.n	80066d0 <UART_SetConfig+0x1e0>
 80066ba:	2b80      	cmp	r3, #128	@ 0x80
 80066bc:	d814      	bhi.n	80066e8 <UART_SetConfig+0x1f8>
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <UART_SetConfig+0x1d8>
 80066c2:	2b40      	cmp	r3, #64	@ 0x40
 80066c4:	d008      	beq.n	80066d8 <UART_SetConfig+0x1e8>
 80066c6:	e00f      	b.n	80066e8 <UART_SetConfig+0x1f8>
 80066c8:	2300      	movs	r3, #0
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ce:	e082      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80066d0:	2302      	movs	r3, #2
 80066d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066d6:	e07e      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80066d8:	2304      	movs	r3, #4
 80066da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066de:	e07a      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80066e0:	2308      	movs	r3, #8
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e6:	e076      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80066e8:	2310      	movs	r3, #16
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066ee:	e072      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a35      	ldr	r2, [pc, #212]	@ (80067cc <UART_SetConfig+0x2dc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d12a      	bne.n	8006750 <UART_SetConfig+0x260>
 80066fa:	4b30      	ldr	r3, [pc, #192]	@ (80067bc <UART_SetConfig+0x2cc>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006700:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006704:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006708:	d01a      	beq.n	8006740 <UART_SetConfig+0x250>
 800670a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800670e:	d81b      	bhi.n	8006748 <UART_SetConfig+0x258>
 8006710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006714:	d00c      	beq.n	8006730 <UART_SetConfig+0x240>
 8006716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800671a:	d815      	bhi.n	8006748 <UART_SetConfig+0x258>
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <UART_SetConfig+0x238>
 8006720:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006724:	d008      	beq.n	8006738 <UART_SetConfig+0x248>
 8006726:	e00f      	b.n	8006748 <UART_SetConfig+0x258>
 8006728:	2300      	movs	r3, #0
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800672e:	e052      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006730:	2302      	movs	r3, #2
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006736:	e04e      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800673e:	e04a      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006746:	e046      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800674e:	e042      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a17      	ldr	r2, [pc, #92]	@ (80067b4 <UART_SetConfig+0x2c4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d13a      	bne.n	80067d0 <UART_SetConfig+0x2e0>
 800675a:	4b18      	ldr	r3, [pc, #96]	@ (80067bc <UART_SetConfig+0x2cc>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006760:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006764:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006768:	d01a      	beq.n	80067a0 <UART_SetConfig+0x2b0>
 800676a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800676e:	d81b      	bhi.n	80067a8 <UART_SetConfig+0x2b8>
 8006770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006774:	d00c      	beq.n	8006790 <UART_SetConfig+0x2a0>
 8006776:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800677a:	d815      	bhi.n	80067a8 <UART_SetConfig+0x2b8>
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <UART_SetConfig+0x298>
 8006780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006784:	d008      	beq.n	8006798 <UART_SetConfig+0x2a8>
 8006786:	e00f      	b.n	80067a8 <UART_SetConfig+0x2b8>
 8006788:	2300      	movs	r3, #0
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678e:	e022      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006790:	2302      	movs	r3, #2
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006796:	e01e      	b.n	80067d6 <UART_SetConfig+0x2e6>
 8006798:	2304      	movs	r3, #4
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800679e:	e01a      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80067a0:	2308      	movs	r3, #8
 80067a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067a6:	e016      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80067a8:	2310      	movs	r3, #16
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ae:	e012      	b.n	80067d6 <UART_SetConfig+0x2e6>
 80067b0:	efff69f3 	.word	0xefff69f3
 80067b4:	40008000 	.word	0x40008000
 80067b8:	40013800 	.word	0x40013800
 80067bc:	40021000 	.word	0x40021000
 80067c0:	40004400 	.word	0x40004400
 80067c4:	40004800 	.word	0x40004800
 80067c8:	40004c00 	.word	0x40004c00
 80067cc:	40005000 	.word	0x40005000
 80067d0:	2310      	movs	r3, #16
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a9f      	ldr	r2, [pc, #636]	@ (8006a58 <UART_SetConfig+0x568>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d17a      	bne.n	80068d6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d824      	bhi.n	8006832 <UART_SetConfig+0x342>
 80067e8:	a201      	add	r2, pc, #4	@ (adr r2, 80067f0 <UART_SetConfig+0x300>)
 80067ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ee:	bf00      	nop
 80067f0:	08006815 	.word	0x08006815
 80067f4:	08006833 	.word	0x08006833
 80067f8:	0800681d 	.word	0x0800681d
 80067fc:	08006833 	.word	0x08006833
 8006800:	08006823 	.word	0x08006823
 8006804:	08006833 	.word	0x08006833
 8006808:	08006833 	.word	0x08006833
 800680c:	08006833 	.word	0x08006833
 8006810:	0800682b 	.word	0x0800682b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006814:	f7fe ff9a 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8006818:	61f8      	str	r0, [r7, #28]
        break;
 800681a:	e010      	b.n	800683e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800681c:	4b8f      	ldr	r3, [pc, #572]	@ (8006a5c <UART_SetConfig+0x56c>)
 800681e:	61fb      	str	r3, [r7, #28]
        break;
 8006820:	e00d      	b.n	800683e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006822:	f7fe fefb 	bl	800561c <HAL_RCC_GetSysClockFreq>
 8006826:	61f8      	str	r0, [r7, #28]
        break;
 8006828:	e009      	b.n	800683e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800682a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800682e:	61fb      	str	r3, [r7, #28]
        break;
 8006830:	e005      	b.n	800683e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800683c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f000 80fb 	beq.w	8006a3c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	4413      	add	r3, r2
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	429a      	cmp	r2, r3
 8006854:	d305      	bcc.n	8006862 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	429a      	cmp	r2, r3
 8006860:	d903      	bls.n	800686a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006868:	e0e8      	b.n	8006a3c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	2200      	movs	r2, #0
 800686e:	461c      	mov	r4, r3
 8006870:	4615      	mov	r5, r2
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	022b      	lsls	r3, r5, #8
 800687c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006880:	0222      	lsls	r2, r4, #8
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	6849      	ldr	r1, [r1, #4]
 8006886:	0849      	lsrs	r1, r1, #1
 8006888:	2000      	movs	r0, #0
 800688a:	4688      	mov	r8, r1
 800688c:	4681      	mov	r9, r0
 800688e:	eb12 0a08 	adds.w	sl, r2, r8
 8006892:	eb43 0b09 	adc.w	fp, r3, r9
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	603b      	str	r3, [r7, #0]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068a4:	4650      	mov	r0, sl
 80068a6:	4659      	mov	r1, fp
 80068a8:	f7fa f97e 	bl	8000ba8 <__aeabi_uldivmod>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4613      	mov	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068ba:	d308      	bcc.n	80068ce <UART_SetConfig+0x3de>
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068c2:	d204      	bcs.n	80068ce <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	60da      	str	r2, [r3, #12]
 80068cc:	e0b6      	b.n	8006a3c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068d4:	e0b2      	b.n	8006a3c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068de:	d15e      	bne.n	800699e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80068e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d828      	bhi.n	800693a <UART_SetConfig+0x44a>
 80068e8:	a201      	add	r2, pc, #4	@ (adr r2, 80068f0 <UART_SetConfig+0x400>)
 80068ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ee:	bf00      	nop
 80068f0:	08006915 	.word	0x08006915
 80068f4:	0800691d 	.word	0x0800691d
 80068f8:	08006925 	.word	0x08006925
 80068fc:	0800693b 	.word	0x0800693b
 8006900:	0800692b 	.word	0x0800692b
 8006904:	0800693b 	.word	0x0800693b
 8006908:	0800693b 	.word	0x0800693b
 800690c:	0800693b 	.word	0x0800693b
 8006910:	08006933 	.word	0x08006933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006914:	f7fe ff1a 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 8006918:	61f8      	str	r0, [r7, #28]
        break;
 800691a:	e014      	b.n	8006946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800691c:	f7fe ff2c 	bl	8005778 <HAL_RCC_GetPCLK2Freq>
 8006920:	61f8      	str	r0, [r7, #28]
        break;
 8006922:	e010      	b.n	8006946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006924:	4b4d      	ldr	r3, [pc, #308]	@ (8006a5c <UART_SetConfig+0x56c>)
 8006926:	61fb      	str	r3, [r7, #28]
        break;
 8006928:	e00d      	b.n	8006946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800692a:	f7fe fe77 	bl	800561c <HAL_RCC_GetSysClockFreq>
 800692e:	61f8      	str	r0, [r7, #28]
        break;
 8006930:	e009      	b.n	8006946 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006936:	61fb      	str	r3, [r7, #28]
        break;
 8006938:	e005      	b.n	8006946 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800693a:	2300      	movs	r3, #0
 800693c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006944:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d077      	beq.n	8006a3c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	005a      	lsls	r2, r3, #1
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	085b      	lsrs	r3, r3, #1
 8006956:	441a      	add	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b0f      	cmp	r3, #15
 8006966:	d916      	bls.n	8006996 <UART_SetConfig+0x4a6>
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800696e:	d212      	bcs.n	8006996 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f023 030f 	bic.w	r3, r3, #15
 8006978:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	085b      	lsrs	r3, r3, #1
 800697e:	b29b      	uxth	r3, r3
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	b29a      	uxth	r2, r3
 8006986:	8afb      	ldrh	r3, [r7, #22]
 8006988:	4313      	orrs	r3, r2
 800698a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	8afa      	ldrh	r2, [r7, #22]
 8006992:	60da      	str	r2, [r3, #12]
 8006994:	e052      	b.n	8006a3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800699c:	e04e      	b.n	8006a3c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800699e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d827      	bhi.n	80069f6 <UART_SetConfig+0x506>
 80069a6:	a201      	add	r2, pc, #4	@ (adr r2, 80069ac <UART_SetConfig+0x4bc>)
 80069a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ac:	080069d1 	.word	0x080069d1
 80069b0:	080069d9 	.word	0x080069d9
 80069b4:	080069e1 	.word	0x080069e1
 80069b8:	080069f7 	.word	0x080069f7
 80069bc:	080069e7 	.word	0x080069e7
 80069c0:	080069f7 	.word	0x080069f7
 80069c4:	080069f7 	.word	0x080069f7
 80069c8:	080069f7 	.word	0x080069f7
 80069cc:	080069ef 	.word	0x080069ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069d0:	f7fe febc 	bl	800574c <HAL_RCC_GetPCLK1Freq>
 80069d4:	61f8      	str	r0, [r7, #28]
        break;
 80069d6:	e014      	b.n	8006a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069d8:	f7fe fece 	bl	8005778 <HAL_RCC_GetPCLK2Freq>
 80069dc:	61f8      	str	r0, [r7, #28]
        break;
 80069de:	e010      	b.n	8006a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069e0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a5c <UART_SetConfig+0x56c>)
 80069e2:	61fb      	str	r3, [r7, #28]
        break;
 80069e4:	e00d      	b.n	8006a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069e6:	f7fe fe19 	bl	800561c <HAL_RCC_GetSysClockFreq>
 80069ea:	61f8      	str	r0, [r7, #28]
        break;
 80069ec:	e009      	b.n	8006a02 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069f2:	61fb      	str	r3, [r7, #28]
        break;
 80069f4:	e005      	b.n	8006a02 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a00:	bf00      	nop
    }

    if (pclk != 0U)
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d019      	beq.n	8006a3c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	085a      	lsrs	r2, r3, #1
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	441a      	add	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	2b0f      	cmp	r3, #15
 8006a20:	d909      	bls.n	8006a36 <UART_SetConfig+0x546>
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a28:	d205      	bcs.n	8006a36 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60da      	str	r2, [r3, #12]
 8006a34:	e002      	b.n	8006a3c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006a48:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3728      	adds	r7, #40	@ 0x28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a56:	bf00      	nop
 8006a58:	40008000 	.word	0x40008000
 8006a5c:	00f42400 	.word	0x00f42400

08006a60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6c:	f003 0308 	and.w	r3, r3, #8
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00a      	beq.n	8006a8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	430a      	orrs	r2, r1
 8006a88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00a      	beq.n	8006af0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	f003 0310 	and.w	r3, r3, #16
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d01a      	beq.n	8006b76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b5e:	d10a      	bne.n	8006b76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	430a      	orrs	r2, r1
 8006b74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	430a      	orrs	r2, r1
 8006b96:	605a      	str	r2, [r3, #4]
  }
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b098      	sub	sp, #96	@ 0x60
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bb4:	f7fc fa50 	bl	8003058 <HAL_GetTick>
 8006bb8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b08      	cmp	r3, #8
 8006bc6:	d12e      	bne.n	8006c26 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f88c 	bl	8006cf4 <UART_WaitOnFlagUntilTimeout>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d021      	beq.n	8006c26 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bea:	e853 3f00 	ldrex	r3, [r3]
 8006bee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bf2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c00:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c02:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e6      	bne.n	8006be2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2220      	movs	r2, #32
 8006c18:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e062      	b.n	8006cec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d149      	bne.n	8006cc8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f856 	bl	8006cf4 <UART_WaitOnFlagUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d03c      	beq.n	8006cc8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	623b      	str	r3, [r7, #32]
   return(result);
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e6      	bne.n	8006c4e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3308      	adds	r3, #8
 8006c86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 0301 	bic.w	r3, r3, #1
 8006c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3308      	adds	r3, #8
 8006c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ca0:	61fa      	str	r2, [r7, #28]
 8006ca2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	69b9      	ldr	r1, [r7, #24]
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	e841 2300 	strex	r3, r2, [r1]
 8006cac:	617b      	str	r3, [r7, #20]
   return(result);
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d1e5      	bne.n	8006c80 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	e011      	b.n	8006cec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3758      	adds	r7, #88	@ 0x58
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	603b      	str	r3, [r7, #0]
 8006d00:	4613      	mov	r3, r2
 8006d02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d04:	e04f      	b.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d0c:	d04b      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d0e:	f7fc f9a3 	bl	8003058 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d302      	bcc.n	8006d24 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d101      	bne.n	8006d28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e04e      	b.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0304 	and.w	r3, r3, #4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d037      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2b80      	cmp	r3, #128	@ 0x80
 8006d3a:	d034      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b40      	cmp	r3, #64	@ 0x40
 8006d40:	d031      	beq.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	f003 0308 	and.w	r3, r3, #8
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	d110      	bne.n	8006d72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2208      	movs	r2, #8
 8006d56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f000 f838 	bl	8006dce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2208      	movs	r2, #8
 8006d62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e029      	b.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d80:	d111      	bne.n	8006da6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f000 f81e 	bl	8006dce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e00f      	b.n	8006dc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4013      	ands	r3, r2
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	bf0c      	ite	eq
 8006db6:	2301      	moveq	r3, #1
 8006db8:	2300      	movne	r3, #0
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d0a0      	beq.n	8006d06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b095      	sub	sp, #84	@ 0x54
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006df4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006df6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006dfa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e6      	bne.n	8006dd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3308      	adds	r3, #8
 8006e26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e5      	bne.n	8006e08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d118      	bne.n	8006e76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f023 0310 	bic.w	r3, r3, #16
 8006e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6979      	ldr	r1, [r7, #20]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e6      	bne.n	8006e44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006e8a:	bf00      	nop
 8006e8c:	3754      	adds	r7, #84	@ 0x54
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e96:	b084      	sub	sp, #16
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	f107 001c 	add.w	r0, r7, #28
 8006ea4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa69 	bl	800738c <USB_CoreReset>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006ebe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d106      	bne.n	8006ed4 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ed2:	e005      	b.n	8006ee0 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3710      	adds	r7, #16
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eec:	b004      	add	sp, #16
 8006eee:	4770      	bx	lr

08006ef0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	f023 0201 	bic.w	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b084      	sub	sp, #16
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f2e:	78fb      	ldrb	r3, [r7, #3]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d115      	bne.n	8006f60 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f40:	200a      	movs	r0, #10
 8006f42:	f7fc f895 	bl	8003070 <HAL_Delay>
      ms += 10U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	330a      	adds	r3, #10
 8006f4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fa0f 	bl	8007370 <USB_GetMode>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d01e      	beq.n	8006f96 <USB_SetCurrentMode+0x84>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f5c:	d9f0      	bls.n	8006f40 <USB_SetCurrentMode+0x2e>
 8006f5e:	e01a      	b.n	8006f96 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d115      	bne.n	8006f92 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f72:	200a      	movs	r0, #10
 8006f74:	f7fc f87c 	bl	8003070 <HAL_Delay>
      ms += 10U;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	330a      	adds	r3, #10
 8006f7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f9f6 	bl	8007370 <USB_GetMode>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <USB_SetCurrentMode+0x84>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f8e:	d9f0      	bls.n	8006f72 <USB_SetCurrentMode+0x60>
 8006f90:	e001      	b.n	8006f96 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e005      	b.n	8006fa2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f9a:	d101      	bne.n	8006fa0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fac:	b084      	sub	sp, #16
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	613b      	str	r3, [r7, #16]
 8006fca:	e009      	b.n	8006fe0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	3340      	adds	r3, #64	@ 0x40
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2b0e      	cmp	r3, #14
 8006fe4:	d9f2      	bls.n	8006fcc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006fe6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d11c      	bne.n	8007028 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ffc:	f043 0302 	orr.w	r3, r3, #2
 8007000:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007006:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	e005      	b.n	8007034 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800703a:	461a      	mov	r2, r3
 800703c:	2300      	movs	r3, #0
 800703e:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007040:	2103      	movs	r1, #3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f95a 	bl	80072fc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007048:	2110      	movs	r1, #16
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f8f6 	bl	800723c <USB_FlushTxFifo>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f920 	bl	80072a0 <USB_FlushRxFifo>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007070:	461a      	mov	r2, r3
 8007072:	2300      	movs	r3, #0
 8007074:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800707c:	461a      	mov	r2, r3
 800707e:	2300      	movs	r3, #0
 8007080:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007088:	461a      	mov	r2, r3
 800708a:	2300      	movs	r3, #0
 800708c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800708e:	2300      	movs	r3, #0
 8007090:	613b      	str	r3, [r7, #16]
 8007092:	e043      	b.n	800711c <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070aa:	d118      	bne.n	80070de <USB_DevInit+0x132>
    {
      if (i == 0U)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10a      	bne.n	80070c8 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070be:	461a      	mov	r2, r3
 80070c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	e013      	b.n	80070f0 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070d4:	461a      	mov	r2, r3
 80070d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	e008      	b.n	80070f0 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070ea:	461a      	mov	r2, r3
 80070ec:	2300      	movs	r3, #0
 80070ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070fc:	461a      	mov	r2, r3
 80070fe:	2300      	movs	r3, #0
 8007100:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	015a      	lsls	r2, r3, #5
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4413      	add	r3, r2
 800710a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710e:	461a      	mov	r2, r3
 8007110:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007114:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	3301      	adds	r3, #1
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007120:	461a      	mov	r2, r3
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	4293      	cmp	r3, r2
 8007126:	d3b5      	bcc.n	8007094 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007128:	2300      	movs	r3, #0
 800712a:	613b      	str	r3, [r7, #16]
 800712c:	e043      	b.n	80071b6 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	015a      	lsls	r2, r3, #5
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4413      	add	r3, r2
 8007136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007140:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007144:	d118      	bne.n	8007178 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007158:	461a      	mov	r2, r3
 800715a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e013      	b.n	800718a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800716e:	461a      	mov	r2, r3
 8007170:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	e008      	b.n	800718a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007184:	461a      	mov	r2, r3
 8007186:	2300      	movs	r3, #0
 8007188:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007196:	461a      	mov	r2, r3
 8007198:	2300      	movs	r3, #0
 800719a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a8:	461a      	mov	r2, r3
 80071aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	3301      	adds	r3, #1
 80071b4:	613b      	str	r3, [r7, #16]
 80071b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071ba:	461a      	mov	r2, r3
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	4293      	cmp	r3, r2
 80071c0:	d3b5      	bcc.n	800712e <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80071e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	f043 0210 	orr.w	r2, r3, #16
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	699a      	ldr	r2, [r3, #24]
 80071f4:	4b10      	ldr	r3, [pc, #64]	@ (8007238 <USB_DevInit+0x28c>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	f043 0208 	orr.w	r2, r3, #8
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007210:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007214:	2b01      	cmp	r3, #1
 8007216:	d107      	bne.n	8007228 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	699b      	ldr	r3, [r3, #24]
 800721c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007220:	f043 0304 	orr.w	r3, r3, #4
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007228:	7dfb      	ldrb	r3, [r7, #23]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007234:	b004      	add	sp, #16
 8007236:	4770      	bx	lr
 8007238:	803c3800 	.word	0x803c3800

0800723c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	3301      	adds	r3, #1
 800724e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007256:	d901      	bls.n	800725c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e01b      	b.n	8007294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	2b00      	cmp	r3, #0
 8007262:	daf2      	bge.n	800724a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	019b      	lsls	r3, r3, #6
 800726c:	f043 0220 	orr.w	r2, r3, #32
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3301      	adds	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007280:	d901      	bls.n	8007286 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e006      	b.n	8007294 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b20      	cmp	r3, #32
 8007290:	d0f0      	beq.n	8007274 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3301      	adds	r3, #1
 80072b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072b8:	d901      	bls.n	80072be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e018      	b.n	80072f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	daf2      	bge.n	80072ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2210      	movs	r2, #16
 80072ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	3301      	adds	r3, #1
 80072d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072dc:	d901      	bls.n	80072e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80072de:	2303      	movs	r3, #3
 80072e0:	e006      	b.n	80072f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0310 	and.w	r3, r3, #16
 80072ea:	2b10      	cmp	r3, #16
 80072ec:	d0f0      	beq.n	80072d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	68f9      	ldr	r1, [r7, #12]
 8007318:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800731c:	4313      	orrs	r3, r2
 800731e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007348:	f023 0303 	bic.w	r3, r3, #3
 800734c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800735c:	f043 0302 	orr.w	r3, r3, #2
 8007360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	f003 0301 	and.w	r3, r3, #1
}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3301      	adds	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073a4:	d901      	bls.n	80073aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e01b      	b.n	80073e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	daf2      	bge.n	8007398 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f043 0201 	orr.w	r2, r3, #1
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3301      	adds	r3, #1
 80073c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073ce:	d901      	bls.n	80073d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e006      	b.n	80073e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d0f0      	beq.n	80073c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <__cvt>:
 80073ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f2:	ec57 6b10 	vmov	r6, r7, d0
 80073f6:	2f00      	cmp	r7, #0
 80073f8:	460c      	mov	r4, r1
 80073fa:	4619      	mov	r1, r3
 80073fc:	463b      	mov	r3, r7
 80073fe:	bfbb      	ittet	lt
 8007400:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007404:	461f      	movlt	r7, r3
 8007406:	2300      	movge	r3, #0
 8007408:	232d      	movlt	r3, #45	@ 0x2d
 800740a:	700b      	strb	r3, [r1, #0]
 800740c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800740e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007412:	4691      	mov	r9, r2
 8007414:	f023 0820 	bic.w	r8, r3, #32
 8007418:	bfbc      	itt	lt
 800741a:	4632      	movlt	r2, r6
 800741c:	4616      	movlt	r6, r2
 800741e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007422:	d005      	beq.n	8007430 <__cvt+0x42>
 8007424:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007428:	d100      	bne.n	800742c <__cvt+0x3e>
 800742a:	3401      	adds	r4, #1
 800742c:	2102      	movs	r1, #2
 800742e:	e000      	b.n	8007432 <__cvt+0x44>
 8007430:	2103      	movs	r1, #3
 8007432:	ab03      	add	r3, sp, #12
 8007434:	9301      	str	r3, [sp, #4]
 8007436:	ab02      	add	r3, sp, #8
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	ec47 6b10 	vmov	d0, r6, r7
 800743e:	4653      	mov	r3, sl
 8007440:	4622      	mov	r2, r4
 8007442:	f000 fded 	bl	8008020 <_dtoa_r>
 8007446:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800744a:	4605      	mov	r5, r0
 800744c:	d119      	bne.n	8007482 <__cvt+0x94>
 800744e:	f019 0f01 	tst.w	r9, #1
 8007452:	d00e      	beq.n	8007472 <__cvt+0x84>
 8007454:	eb00 0904 	add.w	r9, r0, r4
 8007458:	2200      	movs	r2, #0
 800745a:	2300      	movs	r3, #0
 800745c:	4630      	mov	r0, r6
 800745e:	4639      	mov	r1, r7
 8007460:	f7f9 fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 8007464:	b108      	cbz	r0, 800746a <__cvt+0x7c>
 8007466:	f8cd 900c 	str.w	r9, [sp, #12]
 800746a:	2230      	movs	r2, #48	@ 0x30
 800746c:	9b03      	ldr	r3, [sp, #12]
 800746e:	454b      	cmp	r3, r9
 8007470:	d31e      	bcc.n	80074b0 <__cvt+0xc2>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007476:	1b5b      	subs	r3, r3, r5
 8007478:	4628      	mov	r0, r5
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	b004      	add	sp, #16
 800747e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007482:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007486:	eb00 0904 	add.w	r9, r0, r4
 800748a:	d1e5      	bne.n	8007458 <__cvt+0x6a>
 800748c:	7803      	ldrb	r3, [r0, #0]
 800748e:	2b30      	cmp	r3, #48	@ 0x30
 8007490:	d10a      	bne.n	80074a8 <__cvt+0xba>
 8007492:	2200      	movs	r2, #0
 8007494:	2300      	movs	r3, #0
 8007496:	4630      	mov	r0, r6
 8007498:	4639      	mov	r1, r7
 800749a:	f7f9 fb15 	bl	8000ac8 <__aeabi_dcmpeq>
 800749e:	b918      	cbnz	r0, 80074a8 <__cvt+0xba>
 80074a0:	f1c4 0401 	rsb	r4, r4, #1
 80074a4:	f8ca 4000 	str.w	r4, [sl]
 80074a8:	f8da 3000 	ldr.w	r3, [sl]
 80074ac:	4499      	add	r9, r3
 80074ae:	e7d3      	b.n	8007458 <__cvt+0x6a>
 80074b0:	1c59      	adds	r1, r3, #1
 80074b2:	9103      	str	r1, [sp, #12]
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	e7d9      	b.n	800746c <__cvt+0x7e>

080074b8 <__exponent>:
 80074b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ba:	2900      	cmp	r1, #0
 80074bc:	bfba      	itte	lt
 80074be:	4249      	neglt	r1, r1
 80074c0:	232d      	movlt	r3, #45	@ 0x2d
 80074c2:	232b      	movge	r3, #43	@ 0x2b
 80074c4:	2909      	cmp	r1, #9
 80074c6:	7002      	strb	r2, [r0, #0]
 80074c8:	7043      	strb	r3, [r0, #1]
 80074ca:	dd29      	ble.n	8007520 <__exponent+0x68>
 80074cc:	f10d 0307 	add.w	r3, sp, #7
 80074d0:	461d      	mov	r5, r3
 80074d2:	270a      	movs	r7, #10
 80074d4:	461a      	mov	r2, r3
 80074d6:	fbb1 f6f7 	udiv	r6, r1, r7
 80074da:	fb07 1416 	mls	r4, r7, r6, r1
 80074de:	3430      	adds	r4, #48	@ 0x30
 80074e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80074e4:	460c      	mov	r4, r1
 80074e6:	2c63      	cmp	r4, #99	@ 0x63
 80074e8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80074ec:	4631      	mov	r1, r6
 80074ee:	dcf1      	bgt.n	80074d4 <__exponent+0x1c>
 80074f0:	3130      	adds	r1, #48	@ 0x30
 80074f2:	1e94      	subs	r4, r2, #2
 80074f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074f8:	1c41      	adds	r1, r0, #1
 80074fa:	4623      	mov	r3, r4
 80074fc:	42ab      	cmp	r3, r5
 80074fe:	d30a      	bcc.n	8007516 <__exponent+0x5e>
 8007500:	f10d 0309 	add.w	r3, sp, #9
 8007504:	1a9b      	subs	r3, r3, r2
 8007506:	42ac      	cmp	r4, r5
 8007508:	bf88      	it	hi
 800750a:	2300      	movhi	r3, #0
 800750c:	3302      	adds	r3, #2
 800750e:	4403      	add	r3, r0
 8007510:	1a18      	subs	r0, r3, r0
 8007512:	b003      	add	sp, #12
 8007514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007516:	f813 6b01 	ldrb.w	r6, [r3], #1
 800751a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800751e:	e7ed      	b.n	80074fc <__exponent+0x44>
 8007520:	2330      	movs	r3, #48	@ 0x30
 8007522:	3130      	adds	r1, #48	@ 0x30
 8007524:	7083      	strb	r3, [r0, #2]
 8007526:	70c1      	strb	r1, [r0, #3]
 8007528:	1d03      	adds	r3, r0, #4
 800752a:	e7f1      	b.n	8007510 <__exponent+0x58>

0800752c <_printf_float>:
 800752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	b08d      	sub	sp, #52	@ 0x34
 8007532:	460c      	mov	r4, r1
 8007534:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007538:	4616      	mov	r6, r2
 800753a:	461f      	mov	r7, r3
 800753c:	4605      	mov	r5, r0
 800753e:	f000 fcb5 	bl	8007eac <_localeconv_r>
 8007542:	6803      	ldr	r3, [r0, #0]
 8007544:	9304      	str	r3, [sp, #16]
 8007546:	4618      	mov	r0, r3
 8007548:	f7f8 fe92 	bl	8000270 <strlen>
 800754c:	2300      	movs	r3, #0
 800754e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007550:	f8d8 3000 	ldr.w	r3, [r8]
 8007554:	9005      	str	r0, [sp, #20]
 8007556:	3307      	adds	r3, #7
 8007558:	f023 0307 	bic.w	r3, r3, #7
 800755c:	f103 0208 	add.w	r2, r3, #8
 8007560:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007564:	f8d4 b000 	ldr.w	fp, [r4]
 8007568:	f8c8 2000 	str.w	r2, [r8]
 800756c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007570:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007574:	9307      	str	r3, [sp, #28]
 8007576:	f8cd 8018 	str.w	r8, [sp, #24]
 800757a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800757e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007582:	4b9c      	ldr	r3, [pc, #624]	@ (80077f4 <_printf_float+0x2c8>)
 8007584:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007588:	f7f9 fad0 	bl	8000b2c <__aeabi_dcmpun>
 800758c:	bb70      	cbnz	r0, 80075ec <_printf_float+0xc0>
 800758e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007592:	4b98      	ldr	r3, [pc, #608]	@ (80077f4 <_printf_float+0x2c8>)
 8007594:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007598:	f7f9 faaa 	bl	8000af0 <__aeabi_dcmple>
 800759c:	bb30      	cbnz	r0, 80075ec <_printf_float+0xc0>
 800759e:	2200      	movs	r2, #0
 80075a0:	2300      	movs	r3, #0
 80075a2:	4640      	mov	r0, r8
 80075a4:	4649      	mov	r1, r9
 80075a6:	f7f9 fa99 	bl	8000adc <__aeabi_dcmplt>
 80075aa:	b110      	cbz	r0, 80075b2 <_printf_float+0x86>
 80075ac:	232d      	movs	r3, #45	@ 0x2d
 80075ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075b2:	4a91      	ldr	r2, [pc, #580]	@ (80077f8 <_printf_float+0x2cc>)
 80075b4:	4b91      	ldr	r3, [pc, #580]	@ (80077fc <_printf_float+0x2d0>)
 80075b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80075ba:	bf8c      	ite	hi
 80075bc:	4690      	movhi	r8, r2
 80075be:	4698      	movls	r8, r3
 80075c0:	2303      	movs	r3, #3
 80075c2:	6123      	str	r3, [r4, #16]
 80075c4:	f02b 0304 	bic.w	r3, fp, #4
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	f04f 0900 	mov.w	r9, #0
 80075ce:	9700      	str	r7, [sp, #0]
 80075d0:	4633      	mov	r3, r6
 80075d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80075d4:	4621      	mov	r1, r4
 80075d6:	4628      	mov	r0, r5
 80075d8:	f000 f9d2 	bl	8007980 <_printf_common>
 80075dc:	3001      	adds	r0, #1
 80075de:	f040 808d 	bne.w	80076fc <_printf_float+0x1d0>
 80075e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075e6:	b00d      	add	sp, #52	@ 0x34
 80075e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ec:	4642      	mov	r2, r8
 80075ee:	464b      	mov	r3, r9
 80075f0:	4640      	mov	r0, r8
 80075f2:	4649      	mov	r1, r9
 80075f4:	f7f9 fa9a 	bl	8000b2c <__aeabi_dcmpun>
 80075f8:	b140      	cbz	r0, 800760c <_printf_float+0xe0>
 80075fa:	464b      	mov	r3, r9
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	bfbc      	itt	lt
 8007600:	232d      	movlt	r3, #45	@ 0x2d
 8007602:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007606:	4a7e      	ldr	r2, [pc, #504]	@ (8007800 <_printf_float+0x2d4>)
 8007608:	4b7e      	ldr	r3, [pc, #504]	@ (8007804 <_printf_float+0x2d8>)
 800760a:	e7d4      	b.n	80075b6 <_printf_float+0x8a>
 800760c:	6863      	ldr	r3, [r4, #4]
 800760e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007612:	9206      	str	r2, [sp, #24]
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	d13b      	bne.n	8007690 <_printf_float+0x164>
 8007618:	2306      	movs	r3, #6
 800761a:	6063      	str	r3, [r4, #4]
 800761c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007620:	2300      	movs	r3, #0
 8007622:	6022      	str	r2, [r4, #0]
 8007624:	9303      	str	r3, [sp, #12]
 8007626:	ab0a      	add	r3, sp, #40	@ 0x28
 8007628:	e9cd a301 	strd	sl, r3, [sp, #4]
 800762c:	ab09      	add	r3, sp, #36	@ 0x24
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	6861      	ldr	r1, [r4, #4]
 8007632:	ec49 8b10 	vmov	d0, r8, r9
 8007636:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800763a:	4628      	mov	r0, r5
 800763c:	f7ff fed7 	bl	80073ee <__cvt>
 8007640:	9b06      	ldr	r3, [sp, #24]
 8007642:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007644:	2b47      	cmp	r3, #71	@ 0x47
 8007646:	4680      	mov	r8, r0
 8007648:	d129      	bne.n	800769e <_printf_float+0x172>
 800764a:	1cc8      	adds	r0, r1, #3
 800764c:	db02      	blt.n	8007654 <_printf_float+0x128>
 800764e:	6863      	ldr	r3, [r4, #4]
 8007650:	4299      	cmp	r1, r3
 8007652:	dd41      	ble.n	80076d8 <_printf_float+0x1ac>
 8007654:	f1aa 0a02 	sub.w	sl, sl, #2
 8007658:	fa5f fa8a 	uxtb.w	sl, sl
 800765c:	3901      	subs	r1, #1
 800765e:	4652      	mov	r2, sl
 8007660:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007664:	9109      	str	r1, [sp, #36]	@ 0x24
 8007666:	f7ff ff27 	bl	80074b8 <__exponent>
 800766a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800766c:	1813      	adds	r3, r2, r0
 800766e:	2a01      	cmp	r2, #1
 8007670:	4681      	mov	r9, r0
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	dc02      	bgt.n	800767c <_printf_float+0x150>
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	07d2      	lsls	r2, r2, #31
 800767a:	d501      	bpl.n	8007680 <_printf_float+0x154>
 800767c:	3301      	adds	r3, #1
 800767e:	6123      	str	r3, [r4, #16]
 8007680:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0a2      	beq.n	80075ce <_printf_float+0xa2>
 8007688:	232d      	movs	r3, #45	@ 0x2d
 800768a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800768e:	e79e      	b.n	80075ce <_printf_float+0xa2>
 8007690:	9a06      	ldr	r2, [sp, #24]
 8007692:	2a47      	cmp	r2, #71	@ 0x47
 8007694:	d1c2      	bne.n	800761c <_printf_float+0xf0>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1c0      	bne.n	800761c <_printf_float+0xf0>
 800769a:	2301      	movs	r3, #1
 800769c:	e7bd      	b.n	800761a <_printf_float+0xee>
 800769e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076a2:	d9db      	bls.n	800765c <_printf_float+0x130>
 80076a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80076a8:	d118      	bne.n	80076dc <_printf_float+0x1b0>
 80076aa:	2900      	cmp	r1, #0
 80076ac:	6863      	ldr	r3, [r4, #4]
 80076ae:	dd0b      	ble.n	80076c8 <_printf_float+0x19c>
 80076b0:	6121      	str	r1, [r4, #16]
 80076b2:	b913      	cbnz	r3, 80076ba <_printf_float+0x18e>
 80076b4:	6822      	ldr	r2, [r4, #0]
 80076b6:	07d0      	lsls	r0, r2, #31
 80076b8:	d502      	bpl.n	80076c0 <_printf_float+0x194>
 80076ba:	3301      	adds	r3, #1
 80076bc:	440b      	add	r3, r1
 80076be:	6123      	str	r3, [r4, #16]
 80076c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80076c2:	f04f 0900 	mov.w	r9, #0
 80076c6:	e7db      	b.n	8007680 <_printf_float+0x154>
 80076c8:	b913      	cbnz	r3, 80076d0 <_printf_float+0x1a4>
 80076ca:	6822      	ldr	r2, [r4, #0]
 80076cc:	07d2      	lsls	r2, r2, #31
 80076ce:	d501      	bpl.n	80076d4 <_printf_float+0x1a8>
 80076d0:	3302      	adds	r3, #2
 80076d2:	e7f4      	b.n	80076be <_printf_float+0x192>
 80076d4:	2301      	movs	r3, #1
 80076d6:	e7f2      	b.n	80076be <_printf_float+0x192>
 80076d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80076dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076de:	4299      	cmp	r1, r3
 80076e0:	db05      	blt.n	80076ee <_printf_float+0x1c2>
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	6121      	str	r1, [r4, #16]
 80076e6:	07d8      	lsls	r0, r3, #31
 80076e8:	d5ea      	bpl.n	80076c0 <_printf_float+0x194>
 80076ea:	1c4b      	adds	r3, r1, #1
 80076ec:	e7e7      	b.n	80076be <_printf_float+0x192>
 80076ee:	2900      	cmp	r1, #0
 80076f0:	bfd4      	ite	le
 80076f2:	f1c1 0202 	rsble	r2, r1, #2
 80076f6:	2201      	movgt	r2, #1
 80076f8:	4413      	add	r3, r2
 80076fa:	e7e0      	b.n	80076be <_printf_float+0x192>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	055a      	lsls	r2, r3, #21
 8007700:	d407      	bmi.n	8007712 <_printf_float+0x1e6>
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	4642      	mov	r2, r8
 8007706:	4631      	mov	r1, r6
 8007708:	4628      	mov	r0, r5
 800770a:	47b8      	blx	r7
 800770c:	3001      	adds	r0, #1
 800770e:	d12b      	bne.n	8007768 <_printf_float+0x23c>
 8007710:	e767      	b.n	80075e2 <_printf_float+0xb6>
 8007712:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007716:	f240 80dd 	bls.w	80078d4 <_printf_float+0x3a8>
 800771a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800771e:	2200      	movs	r2, #0
 8007720:	2300      	movs	r3, #0
 8007722:	f7f9 f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007726:	2800      	cmp	r0, #0
 8007728:	d033      	beq.n	8007792 <_printf_float+0x266>
 800772a:	4a37      	ldr	r2, [pc, #220]	@ (8007808 <_printf_float+0x2dc>)
 800772c:	2301      	movs	r3, #1
 800772e:	4631      	mov	r1, r6
 8007730:	4628      	mov	r0, r5
 8007732:	47b8      	blx	r7
 8007734:	3001      	adds	r0, #1
 8007736:	f43f af54 	beq.w	80075e2 <_printf_float+0xb6>
 800773a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800773e:	4543      	cmp	r3, r8
 8007740:	db02      	blt.n	8007748 <_printf_float+0x21c>
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	07d8      	lsls	r0, r3, #31
 8007746:	d50f      	bpl.n	8007768 <_printf_float+0x23c>
 8007748:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800774c:	4631      	mov	r1, r6
 800774e:	4628      	mov	r0, r5
 8007750:	47b8      	blx	r7
 8007752:	3001      	adds	r0, #1
 8007754:	f43f af45 	beq.w	80075e2 <_printf_float+0xb6>
 8007758:	f04f 0900 	mov.w	r9, #0
 800775c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007760:	f104 0a1a 	add.w	sl, r4, #26
 8007764:	45c8      	cmp	r8, r9
 8007766:	dc09      	bgt.n	800777c <_printf_float+0x250>
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	079b      	lsls	r3, r3, #30
 800776c:	f100 8103 	bmi.w	8007976 <_printf_float+0x44a>
 8007770:	68e0      	ldr	r0, [r4, #12]
 8007772:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007774:	4298      	cmp	r0, r3
 8007776:	bfb8      	it	lt
 8007778:	4618      	movlt	r0, r3
 800777a:	e734      	b.n	80075e6 <_printf_float+0xba>
 800777c:	2301      	movs	r3, #1
 800777e:	4652      	mov	r2, sl
 8007780:	4631      	mov	r1, r6
 8007782:	4628      	mov	r0, r5
 8007784:	47b8      	blx	r7
 8007786:	3001      	adds	r0, #1
 8007788:	f43f af2b 	beq.w	80075e2 <_printf_float+0xb6>
 800778c:	f109 0901 	add.w	r9, r9, #1
 8007790:	e7e8      	b.n	8007764 <_printf_float+0x238>
 8007792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007794:	2b00      	cmp	r3, #0
 8007796:	dc39      	bgt.n	800780c <_printf_float+0x2e0>
 8007798:	4a1b      	ldr	r2, [pc, #108]	@ (8007808 <_printf_float+0x2dc>)
 800779a:	2301      	movs	r3, #1
 800779c:	4631      	mov	r1, r6
 800779e:	4628      	mov	r0, r5
 80077a0:	47b8      	blx	r7
 80077a2:	3001      	adds	r0, #1
 80077a4:	f43f af1d 	beq.w	80075e2 <_printf_float+0xb6>
 80077a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80077ac:	ea59 0303 	orrs.w	r3, r9, r3
 80077b0:	d102      	bne.n	80077b8 <_printf_float+0x28c>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	07d9      	lsls	r1, r3, #31
 80077b6:	d5d7      	bpl.n	8007768 <_printf_float+0x23c>
 80077b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077bc:	4631      	mov	r1, r6
 80077be:	4628      	mov	r0, r5
 80077c0:	47b8      	blx	r7
 80077c2:	3001      	adds	r0, #1
 80077c4:	f43f af0d 	beq.w	80075e2 <_printf_float+0xb6>
 80077c8:	f04f 0a00 	mov.w	sl, #0
 80077cc:	f104 0b1a 	add.w	fp, r4, #26
 80077d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d2:	425b      	negs	r3, r3
 80077d4:	4553      	cmp	r3, sl
 80077d6:	dc01      	bgt.n	80077dc <_printf_float+0x2b0>
 80077d8:	464b      	mov	r3, r9
 80077da:	e793      	b.n	8007704 <_printf_float+0x1d8>
 80077dc:	2301      	movs	r3, #1
 80077de:	465a      	mov	r2, fp
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	f43f aefb 	beq.w	80075e2 <_printf_float+0xb6>
 80077ec:	f10a 0a01 	add.w	sl, sl, #1
 80077f0:	e7ee      	b.n	80077d0 <_printf_float+0x2a4>
 80077f2:	bf00      	nop
 80077f4:	7fefffff 	.word	0x7fefffff
 80077f8:	08009dc8 	.word	0x08009dc8
 80077fc:	08009dc4 	.word	0x08009dc4
 8007800:	08009dd0 	.word	0x08009dd0
 8007804:	08009dcc 	.word	0x08009dcc
 8007808:	08009dd4 	.word	0x08009dd4
 800780c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800780e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007812:	4553      	cmp	r3, sl
 8007814:	bfa8      	it	ge
 8007816:	4653      	movge	r3, sl
 8007818:	2b00      	cmp	r3, #0
 800781a:	4699      	mov	r9, r3
 800781c:	dc36      	bgt.n	800788c <_printf_float+0x360>
 800781e:	f04f 0b00 	mov.w	fp, #0
 8007822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007826:	f104 021a 	add.w	r2, r4, #26
 800782a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800782c:	9306      	str	r3, [sp, #24]
 800782e:	eba3 0309 	sub.w	r3, r3, r9
 8007832:	455b      	cmp	r3, fp
 8007834:	dc31      	bgt.n	800789a <_printf_float+0x36e>
 8007836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007838:	459a      	cmp	sl, r3
 800783a:	dc3a      	bgt.n	80078b2 <_printf_float+0x386>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	07da      	lsls	r2, r3, #31
 8007840:	d437      	bmi.n	80078b2 <_printf_float+0x386>
 8007842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007844:	ebaa 0903 	sub.w	r9, sl, r3
 8007848:	9b06      	ldr	r3, [sp, #24]
 800784a:	ebaa 0303 	sub.w	r3, sl, r3
 800784e:	4599      	cmp	r9, r3
 8007850:	bfa8      	it	ge
 8007852:	4699      	movge	r9, r3
 8007854:	f1b9 0f00 	cmp.w	r9, #0
 8007858:	dc33      	bgt.n	80078c2 <_printf_float+0x396>
 800785a:	f04f 0800 	mov.w	r8, #0
 800785e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007862:	f104 0b1a 	add.w	fp, r4, #26
 8007866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007868:	ebaa 0303 	sub.w	r3, sl, r3
 800786c:	eba3 0309 	sub.w	r3, r3, r9
 8007870:	4543      	cmp	r3, r8
 8007872:	f77f af79 	ble.w	8007768 <_printf_float+0x23c>
 8007876:	2301      	movs	r3, #1
 8007878:	465a      	mov	r2, fp
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	f43f aeae 	beq.w	80075e2 <_printf_float+0xb6>
 8007886:	f108 0801 	add.w	r8, r8, #1
 800788a:	e7ec      	b.n	8007866 <_printf_float+0x33a>
 800788c:	4642      	mov	r2, r8
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	47b8      	blx	r7
 8007894:	3001      	adds	r0, #1
 8007896:	d1c2      	bne.n	800781e <_printf_float+0x2f2>
 8007898:	e6a3      	b.n	80075e2 <_printf_float+0xb6>
 800789a:	2301      	movs	r3, #1
 800789c:	4631      	mov	r1, r6
 800789e:	4628      	mov	r0, r5
 80078a0:	9206      	str	r2, [sp, #24]
 80078a2:	47b8      	blx	r7
 80078a4:	3001      	adds	r0, #1
 80078a6:	f43f ae9c 	beq.w	80075e2 <_printf_float+0xb6>
 80078aa:	9a06      	ldr	r2, [sp, #24]
 80078ac:	f10b 0b01 	add.w	fp, fp, #1
 80078b0:	e7bb      	b.n	800782a <_printf_float+0x2fe>
 80078b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	d1c0      	bne.n	8007842 <_printf_float+0x316>
 80078c0:	e68f      	b.n	80075e2 <_printf_float+0xb6>
 80078c2:	9a06      	ldr	r2, [sp, #24]
 80078c4:	464b      	mov	r3, r9
 80078c6:	4442      	add	r2, r8
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b8      	blx	r7
 80078ce:	3001      	adds	r0, #1
 80078d0:	d1c3      	bne.n	800785a <_printf_float+0x32e>
 80078d2:	e686      	b.n	80075e2 <_printf_float+0xb6>
 80078d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078d8:	f1ba 0f01 	cmp.w	sl, #1
 80078dc:	dc01      	bgt.n	80078e2 <_printf_float+0x3b6>
 80078de:	07db      	lsls	r3, r3, #31
 80078e0:	d536      	bpl.n	8007950 <_printf_float+0x424>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4642      	mov	r2, r8
 80078e6:	4631      	mov	r1, r6
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b8      	blx	r7
 80078ec:	3001      	adds	r0, #1
 80078ee:	f43f ae78 	beq.w	80075e2 <_printf_float+0xb6>
 80078f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078f6:	4631      	mov	r1, r6
 80078f8:	4628      	mov	r0, r5
 80078fa:	47b8      	blx	r7
 80078fc:	3001      	adds	r0, #1
 80078fe:	f43f ae70 	beq.w	80075e2 <_printf_float+0xb6>
 8007902:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007906:	2200      	movs	r2, #0
 8007908:	2300      	movs	r3, #0
 800790a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800790e:	f7f9 f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 8007912:	b9c0      	cbnz	r0, 8007946 <_printf_float+0x41a>
 8007914:	4653      	mov	r3, sl
 8007916:	f108 0201 	add.w	r2, r8, #1
 800791a:	4631      	mov	r1, r6
 800791c:	4628      	mov	r0, r5
 800791e:	47b8      	blx	r7
 8007920:	3001      	adds	r0, #1
 8007922:	d10c      	bne.n	800793e <_printf_float+0x412>
 8007924:	e65d      	b.n	80075e2 <_printf_float+0xb6>
 8007926:	2301      	movs	r3, #1
 8007928:	465a      	mov	r2, fp
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	47b8      	blx	r7
 8007930:	3001      	adds	r0, #1
 8007932:	f43f ae56 	beq.w	80075e2 <_printf_float+0xb6>
 8007936:	f108 0801 	add.w	r8, r8, #1
 800793a:	45d0      	cmp	r8, sl
 800793c:	dbf3      	blt.n	8007926 <_printf_float+0x3fa>
 800793e:	464b      	mov	r3, r9
 8007940:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007944:	e6df      	b.n	8007706 <_printf_float+0x1da>
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	f104 0b1a 	add.w	fp, r4, #26
 800794e:	e7f4      	b.n	800793a <_printf_float+0x40e>
 8007950:	2301      	movs	r3, #1
 8007952:	4642      	mov	r2, r8
 8007954:	e7e1      	b.n	800791a <_printf_float+0x3ee>
 8007956:	2301      	movs	r3, #1
 8007958:	464a      	mov	r2, r9
 800795a:	4631      	mov	r1, r6
 800795c:	4628      	mov	r0, r5
 800795e:	47b8      	blx	r7
 8007960:	3001      	adds	r0, #1
 8007962:	f43f ae3e 	beq.w	80075e2 <_printf_float+0xb6>
 8007966:	f108 0801 	add.w	r8, r8, #1
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800796e:	1a5b      	subs	r3, r3, r1
 8007970:	4543      	cmp	r3, r8
 8007972:	dcf0      	bgt.n	8007956 <_printf_float+0x42a>
 8007974:	e6fc      	b.n	8007770 <_printf_float+0x244>
 8007976:	f04f 0800 	mov.w	r8, #0
 800797a:	f104 0919 	add.w	r9, r4, #25
 800797e:	e7f4      	b.n	800796a <_printf_float+0x43e>

08007980 <_printf_common>:
 8007980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007984:	4616      	mov	r6, r2
 8007986:	4698      	mov	r8, r3
 8007988:	688a      	ldr	r2, [r1, #8]
 800798a:	690b      	ldr	r3, [r1, #16]
 800798c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007990:	4293      	cmp	r3, r2
 8007992:	bfb8      	it	lt
 8007994:	4613      	movlt	r3, r2
 8007996:	6033      	str	r3, [r6, #0]
 8007998:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800799c:	4607      	mov	r7, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	b10a      	cbz	r2, 80079a6 <_printf_common+0x26>
 80079a2:	3301      	adds	r3, #1
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	0699      	lsls	r1, r3, #26
 80079aa:	bf42      	ittt	mi
 80079ac:	6833      	ldrmi	r3, [r6, #0]
 80079ae:	3302      	addmi	r3, #2
 80079b0:	6033      	strmi	r3, [r6, #0]
 80079b2:	6825      	ldr	r5, [r4, #0]
 80079b4:	f015 0506 	ands.w	r5, r5, #6
 80079b8:	d106      	bne.n	80079c8 <_printf_common+0x48>
 80079ba:	f104 0a19 	add.w	sl, r4, #25
 80079be:	68e3      	ldr	r3, [r4, #12]
 80079c0:	6832      	ldr	r2, [r6, #0]
 80079c2:	1a9b      	subs	r3, r3, r2
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	dc26      	bgt.n	8007a16 <_printf_common+0x96>
 80079c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80079cc:	6822      	ldr	r2, [r4, #0]
 80079ce:	3b00      	subs	r3, #0
 80079d0:	bf18      	it	ne
 80079d2:	2301      	movne	r3, #1
 80079d4:	0692      	lsls	r2, r2, #26
 80079d6:	d42b      	bmi.n	8007a30 <_printf_common+0xb0>
 80079d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079dc:	4641      	mov	r1, r8
 80079de:	4638      	mov	r0, r7
 80079e0:	47c8      	blx	r9
 80079e2:	3001      	adds	r0, #1
 80079e4:	d01e      	beq.n	8007a24 <_printf_common+0xa4>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	6922      	ldr	r2, [r4, #16]
 80079ea:	f003 0306 	and.w	r3, r3, #6
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	bf02      	ittt	eq
 80079f2:	68e5      	ldreq	r5, [r4, #12]
 80079f4:	6833      	ldreq	r3, [r6, #0]
 80079f6:	1aed      	subeq	r5, r5, r3
 80079f8:	68a3      	ldr	r3, [r4, #8]
 80079fa:	bf0c      	ite	eq
 80079fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a00:	2500      	movne	r5, #0
 8007a02:	4293      	cmp	r3, r2
 8007a04:	bfc4      	itt	gt
 8007a06:	1a9b      	subgt	r3, r3, r2
 8007a08:	18ed      	addgt	r5, r5, r3
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	341a      	adds	r4, #26
 8007a0e:	42b5      	cmp	r5, r6
 8007a10:	d11a      	bne.n	8007a48 <_printf_common+0xc8>
 8007a12:	2000      	movs	r0, #0
 8007a14:	e008      	b.n	8007a28 <_printf_common+0xa8>
 8007a16:	2301      	movs	r3, #1
 8007a18:	4652      	mov	r2, sl
 8007a1a:	4641      	mov	r1, r8
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	47c8      	blx	r9
 8007a20:	3001      	adds	r0, #1
 8007a22:	d103      	bne.n	8007a2c <_printf_common+0xac>
 8007a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	e7c6      	b.n	80079be <_printf_common+0x3e>
 8007a30:	18e1      	adds	r1, r4, r3
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	2030      	movs	r0, #48	@ 0x30
 8007a36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a3a:	4422      	add	r2, r4
 8007a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a44:	3302      	adds	r3, #2
 8007a46:	e7c7      	b.n	80079d8 <_printf_common+0x58>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	4622      	mov	r2, r4
 8007a4c:	4641      	mov	r1, r8
 8007a4e:	4638      	mov	r0, r7
 8007a50:	47c8      	blx	r9
 8007a52:	3001      	adds	r0, #1
 8007a54:	d0e6      	beq.n	8007a24 <_printf_common+0xa4>
 8007a56:	3601      	adds	r6, #1
 8007a58:	e7d9      	b.n	8007a0e <_printf_common+0x8e>
	...

08007a5c <_printf_i>:
 8007a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a60:	7e0f      	ldrb	r7, [r1, #24]
 8007a62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a64:	2f78      	cmp	r7, #120	@ 0x78
 8007a66:	4691      	mov	r9, r2
 8007a68:	4680      	mov	r8, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	469a      	mov	sl, r3
 8007a6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a72:	d807      	bhi.n	8007a84 <_printf_i+0x28>
 8007a74:	2f62      	cmp	r7, #98	@ 0x62
 8007a76:	d80a      	bhi.n	8007a8e <_printf_i+0x32>
 8007a78:	2f00      	cmp	r7, #0
 8007a7a:	f000 80d1 	beq.w	8007c20 <_printf_i+0x1c4>
 8007a7e:	2f58      	cmp	r7, #88	@ 0x58
 8007a80:	f000 80b8 	beq.w	8007bf4 <_printf_i+0x198>
 8007a84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a8c:	e03a      	b.n	8007b04 <_printf_i+0xa8>
 8007a8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a92:	2b15      	cmp	r3, #21
 8007a94:	d8f6      	bhi.n	8007a84 <_printf_i+0x28>
 8007a96:	a101      	add	r1, pc, #4	@ (adr r1, 8007a9c <_printf_i+0x40>)
 8007a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a9c:	08007af5 	.word	0x08007af5
 8007aa0:	08007b09 	.word	0x08007b09
 8007aa4:	08007a85 	.word	0x08007a85
 8007aa8:	08007a85 	.word	0x08007a85
 8007aac:	08007a85 	.word	0x08007a85
 8007ab0:	08007a85 	.word	0x08007a85
 8007ab4:	08007b09 	.word	0x08007b09
 8007ab8:	08007a85 	.word	0x08007a85
 8007abc:	08007a85 	.word	0x08007a85
 8007ac0:	08007a85 	.word	0x08007a85
 8007ac4:	08007a85 	.word	0x08007a85
 8007ac8:	08007c07 	.word	0x08007c07
 8007acc:	08007b33 	.word	0x08007b33
 8007ad0:	08007bc1 	.word	0x08007bc1
 8007ad4:	08007a85 	.word	0x08007a85
 8007ad8:	08007a85 	.word	0x08007a85
 8007adc:	08007c29 	.word	0x08007c29
 8007ae0:	08007a85 	.word	0x08007a85
 8007ae4:	08007b33 	.word	0x08007b33
 8007ae8:	08007a85 	.word	0x08007a85
 8007aec:	08007a85 	.word	0x08007a85
 8007af0:	08007bc9 	.word	0x08007bc9
 8007af4:	6833      	ldr	r3, [r6, #0]
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6032      	str	r2, [r6, #0]
 8007afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007b04:	2301      	movs	r3, #1
 8007b06:	e09c      	b.n	8007c42 <_printf_i+0x1e6>
 8007b08:	6833      	ldr	r3, [r6, #0]
 8007b0a:	6820      	ldr	r0, [r4, #0]
 8007b0c:	1d19      	adds	r1, r3, #4
 8007b0e:	6031      	str	r1, [r6, #0]
 8007b10:	0606      	lsls	r6, r0, #24
 8007b12:	d501      	bpl.n	8007b18 <_printf_i+0xbc>
 8007b14:	681d      	ldr	r5, [r3, #0]
 8007b16:	e003      	b.n	8007b20 <_printf_i+0xc4>
 8007b18:	0645      	lsls	r5, r0, #25
 8007b1a:	d5fb      	bpl.n	8007b14 <_printf_i+0xb8>
 8007b1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007b20:	2d00      	cmp	r5, #0
 8007b22:	da03      	bge.n	8007b2c <_printf_i+0xd0>
 8007b24:	232d      	movs	r3, #45	@ 0x2d
 8007b26:	426d      	negs	r5, r5
 8007b28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b2c:	4858      	ldr	r0, [pc, #352]	@ (8007c90 <_printf_i+0x234>)
 8007b2e:	230a      	movs	r3, #10
 8007b30:	e011      	b.n	8007b56 <_printf_i+0xfa>
 8007b32:	6821      	ldr	r1, [r4, #0]
 8007b34:	6833      	ldr	r3, [r6, #0]
 8007b36:	0608      	lsls	r0, r1, #24
 8007b38:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b3c:	d402      	bmi.n	8007b44 <_printf_i+0xe8>
 8007b3e:	0649      	lsls	r1, r1, #25
 8007b40:	bf48      	it	mi
 8007b42:	b2ad      	uxthmi	r5, r5
 8007b44:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b46:	4852      	ldr	r0, [pc, #328]	@ (8007c90 <_printf_i+0x234>)
 8007b48:	6033      	str	r3, [r6, #0]
 8007b4a:	bf14      	ite	ne
 8007b4c:	230a      	movne	r3, #10
 8007b4e:	2308      	moveq	r3, #8
 8007b50:	2100      	movs	r1, #0
 8007b52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b56:	6866      	ldr	r6, [r4, #4]
 8007b58:	60a6      	str	r6, [r4, #8]
 8007b5a:	2e00      	cmp	r6, #0
 8007b5c:	db05      	blt.n	8007b6a <_printf_i+0x10e>
 8007b5e:	6821      	ldr	r1, [r4, #0]
 8007b60:	432e      	orrs	r6, r5
 8007b62:	f021 0104 	bic.w	r1, r1, #4
 8007b66:	6021      	str	r1, [r4, #0]
 8007b68:	d04b      	beq.n	8007c02 <_printf_i+0x1a6>
 8007b6a:	4616      	mov	r6, r2
 8007b6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b70:	fb03 5711 	mls	r7, r3, r1, r5
 8007b74:	5dc7      	ldrb	r7, [r0, r7]
 8007b76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b7a:	462f      	mov	r7, r5
 8007b7c:	42bb      	cmp	r3, r7
 8007b7e:	460d      	mov	r5, r1
 8007b80:	d9f4      	bls.n	8007b6c <_printf_i+0x110>
 8007b82:	2b08      	cmp	r3, #8
 8007b84:	d10b      	bne.n	8007b9e <_printf_i+0x142>
 8007b86:	6823      	ldr	r3, [r4, #0]
 8007b88:	07df      	lsls	r7, r3, #31
 8007b8a:	d508      	bpl.n	8007b9e <_printf_i+0x142>
 8007b8c:	6923      	ldr	r3, [r4, #16]
 8007b8e:	6861      	ldr	r1, [r4, #4]
 8007b90:	4299      	cmp	r1, r3
 8007b92:	bfde      	ittt	le
 8007b94:	2330      	movle	r3, #48	@ 0x30
 8007b96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b9a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007b9e:	1b92      	subs	r2, r2, r6
 8007ba0:	6122      	str	r2, [r4, #16]
 8007ba2:	f8cd a000 	str.w	sl, [sp]
 8007ba6:	464b      	mov	r3, r9
 8007ba8:	aa03      	add	r2, sp, #12
 8007baa:	4621      	mov	r1, r4
 8007bac:	4640      	mov	r0, r8
 8007bae:	f7ff fee7 	bl	8007980 <_printf_common>
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	d14a      	bne.n	8007c4c <_printf_i+0x1f0>
 8007bb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bba:	b004      	add	sp, #16
 8007bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	f043 0320 	orr.w	r3, r3, #32
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	4832      	ldr	r0, [pc, #200]	@ (8007c94 <_printf_i+0x238>)
 8007bca:	2778      	movs	r7, #120	@ 0x78
 8007bcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007bd0:	6823      	ldr	r3, [r4, #0]
 8007bd2:	6831      	ldr	r1, [r6, #0]
 8007bd4:	061f      	lsls	r7, r3, #24
 8007bd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8007bda:	d402      	bmi.n	8007be2 <_printf_i+0x186>
 8007bdc:	065f      	lsls	r7, r3, #25
 8007bde:	bf48      	it	mi
 8007be0:	b2ad      	uxthmi	r5, r5
 8007be2:	6031      	str	r1, [r6, #0]
 8007be4:	07d9      	lsls	r1, r3, #31
 8007be6:	bf44      	itt	mi
 8007be8:	f043 0320 	orrmi.w	r3, r3, #32
 8007bec:	6023      	strmi	r3, [r4, #0]
 8007bee:	b11d      	cbz	r5, 8007bf8 <_printf_i+0x19c>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	e7ad      	b.n	8007b50 <_printf_i+0xf4>
 8007bf4:	4826      	ldr	r0, [pc, #152]	@ (8007c90 <_printf_i+0x234>)
 8007bf6:	e7e9      	b.n	8007bcc <_printf_i+0x170>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	f023 0320 	bic.w	r3, r3, #32
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	e7f6      	b.n	8007bf0 <_printf_i+0x194>
 8007c02:	4616      	mov	r6, r2
 8007c04:	e7bd      	b.n	8007b82 <_printf_i+0x126>
 8007c06:	6833      	ldr	r3, [r6, #0]
 8007c08:	6825      	ldr	r5, [r4, #0]
 8007c0a:	6961      	ldr	r1, [r4, #20]
 8007c0c:	1d18      	adds	r0, r3, #4
 8007c0e:	6030      	str	r0, [r6, #0]
 8007c10:	062e      	lsls	r6, r5, #24
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	d501      	bpl.n	8007c1a <_printf_i+0x1be>
 8007c16:	6019      	str	r1, [r3, #0]
 8007c18:	e002      	b.n	8007c20 <_printf_i+0x1c4>
 8007c1a:	0668      	lsls	r0, r5, #25
 8007c1c:	d5fb      	bpl.n	8007c16 <_printf_i+0x1ba>
 8007c1e:	8019      	strh	r1, [r3, #0]
 8007c20:	2300      	movs	r3, #0
 8007c22:	6123      	str	r3, [r4, #16]
 8007c24:	4616      	mov	r6, r2
 8007c26:	e7bc      	b.n	8007ba2 <_printf_i+0x146>
 8007c28:	6833      	ldr	r3, [r6, #0]
 8007c2a:	1d1a      	adds	r2, r3, #4
 8007c2c:	6032      	str	r2, [r6, #0]
 8007c2e:	681e      	ldr	r6, [r3, #0]
 8007c30:	6862      	ldr	r2, [r4, #4]
 8007c32:	2100      	movs	r1, #0
 8007c34:	4630      	mov	r0, r6
 8007c36:	f7f8 facb 	bl	80001d0 <memchr>
 8007c3a:	b108      	cbz	r0, 8007c40 <_printf_i+0x1e4>
 8007c3c:	1b80      	subs	r0, r0, r6
 8007c3e:	6060      	str	r0, [r4, #4]
 8007c40:	6863      	ldr	r3, [r4, #4]
 8007c42:	6123      	str	r3, [r4, #16]
 8007c44:	2300      	movs	r3, #0
 8007c46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c4a:	e7aa      	b.n	8007ba2 <_printf_i+0x146>
 8007c4c:	6923      	ldr	r3, [r4, #16]
 8007c4e:	4632      	mov	r2, r6
 8007c50:	4649      	mov	r1, r9
 8007c52:	4640      	mov	r0, r8
 8007c54:	47d0      	blx	sl
 8007c56:	3001      	adds	r0, #1
 8007c58:	d0ad      	beq.n	8007bb6 <_printf_i+0x15a>
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	079b      	lsls	r3, r3, #30
 8007c5e:	d413      	bmi.n	8007c88 <_printf_i+0x22c>
 8007c60:	68e0      	ldr	r0, [r4, #12]
 8007c62:	9b03      	ldr	r3, [sp, #12]
 8007c64:	4298      	cmp	r0, r3
 8007c66:	bfb8      	it	lt
 8007c68:	4618      	movlt	r0, r3
 8007c6a:	e7a6      	b.n	8007bba <_printf_i+0x15e>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	4632      	mov	r2, r6
 8007c70:	4649      	mov	r1, r9
 8007c72:	4640      	mov	r0, r8
 8007c74:	47d0      	blx	sl
 8007c76:	3001      	adds	r0, #1
 8007c78:	d09d      	beq.n	8007bb6 <_printf_i+0x15a>
 8007c7a:	3501      	adds	r5, #1
 8007c7c:	68e3      	ldr	r3, [r4, #12]
 8007c7e:	9903      	ldr	r1, [sp, #12]
 8007c80:	1a5b      	subs	r3, r3, r1
 8007c82:	42ab      	cmp	r3, r5
 8007c84:	dcf2      	bgt.n	8007c6c <_printf_i+0x210>
 8007c86:	e7eb      	b.n	8007c60 <_printf_i+0x204>
 8007c88:	2500      	movs	r5, #0
 8007c8a:	f104 0619 	add.w	r6, r4, #25
 8007c8e:	e7f5      	b.n	8007c7c <_printf_i+0x220>
 8007c90:	08009dd6 	.word	0x08009dd6
 8007c94:	08009de7 	.word	0x08009de7

08007c98 <std>:
 8007c98:	2300      	movs	r3, #0
 8007c9a:	b510      	push	{r4, lr}
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ca6:	6083      	str	r3, [r0, #8]
 8007ca8:	8181      	strh	r1, [r0, #12]
 8007caa:	6643      	str	r3, [r0, #100]	@ 0x64
 8007cac:	81c2      	strh	r2, [r0, #14]
 8007cae:	6183      	str	r3, [r0, #24]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	2208      	movs	r2, #8
 8007cb4:	305c      	adds	r0, #92	@ 0x5c
 8007cb6:	f000 f8c3 	bl	8007e40 <memset>
 8007cba:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf0 <std+0x58>)
 8007cbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf4 <std+0x5c>)
 8007cc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <std+0x60>)
 8007cc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cfc <std+0x64>)
 8007cc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8007cca:	4b0d      	ldr	r3, [pc, #52]	@ (8007d00 <std+0x68>)
 8007ccc:	6224      	str	r4, [r4, #32]
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	d006      	beq.n	8007ce0 <std+0x48>
 8007cd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007cd6:	4294      	cmp	r4, r2
 8007cd8:	d002      	beq.n	8007ce0 <std+0x48>
 8007cda:	33d0      	adds	r3, #208	@ 0xd0
 8007cdc:	429c      	cmp	r4, r3
 8007cde:	d105      	bne.n	8007cec <std+0x54>
 8007ce0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce8:	f000 b8dc 	b.w	8007ea4 <__retarget_lock_init_recursive>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	bf00      	nop
 8007cf0:	080097fd 	.word	0x080097fd
 8007cf4:	0800981f 	.word	0x0800981f
 8007cf8:	08009857 	.word	0x08009857
 8007cfc:	0800987b 	.word	0x0800987b
 8007d00:	20000a78 	.word	0x20000a78

08007d04 <stdio_exit_handler>:
 8007d04:	4a02      	ldr	r2, [pc, #8]	@ (8007d10 <stdio_exit_handler+0xc>)
 8007d06:	4903      	ldr	r1, [pc, #12]	@ (8007d14 <stdio_exit_handler+0x10>)
 8007d08:	4803      	ldr	r0, [pc, #12]	@ (8007d18 <stdio_exit_handler+0x14>)
 8007d0a:	f000 b869 	b.w	8007de0 <_fwalk_sglue>
 8007d0e:	bf00      	nop
 8007d10:	200000d0 	.word	0x200000d0
 8007d14:	080090a1 	.word	0x080090a1
 8007d18:	200000e0 	.word	0x200000e0

08007d1c <cleanup_stdio>:
 8007d1c:	6841      	ldr	r1, [r0, #4]
 8007d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8007d50 <cleanup_stdio+0x34>)
 8007d20:	4299      	cmp	r1, r3
 8007d22:	b510      	push	{r4, lr}
 8007d24:	4604      	mov	r4, r0
 8007d26:	d001      	beq.n	8007d2c <cleanup_stdio+0x10>
 8007d28:	f001 f9ba 	bl	80090a0 <_fflush_r>
 8007d2c:	68a1      	ldr	r1, [r4, #8]
 8007d2e:	4b09      	ldr	r3, [pc, #36]	@ (8007d54 <cleanup_stdio+0x38>)
 8007d30:	4299      	cmp	r1, r3
 8007d32:	d002      	beq.n	8007d3a <cleanup_stdio+0x1e>
 8007d34:	4620      	mov	r0, r4
 8007d36:	f001 f9b3 	bl	80090a0 <_fflush_r>
 8007d3a:	68e1      	ldr	r1, [r4, #12]
 8007d3c:	4b06      	ldr	r3, [pc, #24]	@ (8007d58 <cleanup_stdio+0x3c>)
 8007d3e:	4299      	cmp	r1, r3
 8007d40:	d004      	beq.n	8007d4c <cleanup_stdio+0x30>
 8007d42:	4620      	mov	r0, r4
 8007d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d48:	f001 b9aa 	b.w	80090a0 <_fflush_r>
 8007d4c:	bd10      	pop	{r4, pc}
 8007d4e:	bf00      	nop
 8007d50:	20000a78 	.word	0x20000a78
 8007d54:	20000ae0 	.word	0x20000ae0
 8007d58:	20000b48 	.word	0x20000b48

08007d5c <global_stdio_init.part.0>:
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d8c <global_stdio_init.part.0+0x30>)
 8007d60:	4c0b      	ldr	r4, [pc, #44]	@ (8007d90 <global_stdio_init.part.0+0x34>)
 8007d62:	4a0c      	ldr	r2, [pc, #48]	@ (8007d94 <global_stdio_init.part.0+0x38>)
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	4620      	mov	r0, r4
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2104      	movs	r1, #4
 8007d6c:	f7ff ff94 	bl	8007c98 <std>
 8007d70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007d74:	2201      	movs	r2, #1
 8007d76:	2109      	movs	r1, #9
 8007d78:	f7ff ff8e 	bl	8007c98 <std>
 8007d7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007d80:	2202      	movs	r2, #2
 8007d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d86:	2112      	movs	r1, #18
 8007d88:	f7ff bf86 	b.w	8007c98 <std>
 8007d8c:	20000bb0 	.word	0x20000bb0
 8007d90:	20000a78 	.word	0x20000a78
 8007d94:	08007d05 	.word	0x08007d05

08007d98 <__sfp_lock_acquire>:
 8007d98:	4801      	ldr	r0, [pc, #4]	@ (8007da0 <__sfp_lock_acquire+0x8>)
 8007d9a:	f000 b884 	b.w	8007ea6 <__retarget_lock_acquire_recursive>
 8007d9e:	bf00      	nop
 8007da0:	20000bb5 	.word	0x20000bb5

08007da4 <__sfp_lock_release>:
 8007da4:	4801      	ldr	r0, [pc, #4]	@ (8007dac <__sfp_lock_release+0x8>)
 8007da6:	f000 b87f 	b.w	8007ea8 <__retarget_lock_release_recursive>
 8007daa:	bf00      	nop
 8007dac:	20000bb5 	.word	0x20000bb5

08007db0 <__sinit>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	4604      	mov	r4, r0
 8007db4:	f7ff fff0 	bl	8007d98 <__sfp_lock_acquire>
 8007db8:	6a23      	ldr	r3, [r4, #32]
 8007dba:	b11b      	cbz	r3, 8007dc4 <__sinit+0x14>
 8007dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc0:	f7ff bff0 	b.w	8007da4 <__sfp_lock_release>
 8007dc4:	4b04      	ldr	r3, [pc, #16]	@ (8007dd8 <__sinit+0x28>)
 8007dc6:	6223      	str	r3, [r4, #32]
 8007dc8:	4b04      	ldr	r3, [pc, #16]	@ (8007ddc <__sinit+0x2c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1f5      	bne.n	8007dbc <__sinit+0xc>
 8007dd0:	f7ff ffc4 	bl	8007d5c <global_stdio_init.part.0>
 8007dd4:	e7f2      	b.n	8007dbc <__sinit+0xc>
 8007dd6:	bf00      	nop
 8007dd8:	08007d1d 	.word	0x08007d1d
 8007ddc:	20000bb0 	.word	0x20000bb0

08007de0 <_fwalk_sglue>:
 8007de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de4:	4607      	mov	r7, r0
 8007de6:	4688      	mov	r8, r1
 8007de8:	4614      	mov	r4, r2
 8007dea:	2600      	movs	r6, #0
 8007dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007df0:	f1b9 0901 	subs.w	r9, r9, #1
 8007df4:	d505      	bpl.n	8007e02 <_fwalk_sglue+0x22>
 8007df6:	6824      	ldr	r4, [r4, #0]
 8007df8:	2c00      	cmp	r4, #0
 8007dfa:	d1f7      	bne.n	8007dec <_fwalk_sglue+0xc>
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d907      	bls.n	8007e18 <_fwalk_sglue+0x38>
 8007e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	d003      	beq.n	8007e18 <_fwalk_sglue+0x38>
 8007e10:	4629      	mov	r1, r5
 8007e12:	4638      	mov	r0, r7
 8007e14:	47c0      	blx	r8
 8007e16:	4306      	orrs	r6, r0
 8007e18:	3568      	adds	r5, #104	@ 0x68
 8007e1a:	e7e9      	b.n	8007df0 <_fwalk_sglue+0x10>

08007e1c <iprintf>:
 8007e1c:	b40f      	push	{r0, r1, r2, r3}
 8007e1e:	b507      	push	{r0, r1, r2, lr}
 8007e20:	4906      	ldr	r1, [pc, #24]	@ (8007e3c <iprintf+0x20>)
 8007e22:	ab04      	add	r3, sp, #16
 8007e24:	6808      	ldr	r0, [r1, #0]
 8007e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2a:	6881      	ldr	r1, [r0, #8]
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	f000 fef1 	bl	8008c14 <_vfiprintf_r>
 8007e32:	b003      	add	sp, #12
 8007e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e38:	b004      	add	sp, #16
 8007e3a:	4770      	bx	lr
 8007e3c:	200000dc 	.word	0x200000dc

08007e40 <memset>:
 8007e40:	4402      	add	r2, r0
 8007e42:	4603      	mov	r3, r0
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d100      	bne.n	8007e4a <memset+0xa>
 8007e48:	4770      	bx	lr
 8007e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e4e:	e7f9      	b.n	8007e44 <memset+0x4>

08007e50 <__errno>:
 8007e50:	4b01      	ldr	r3, [pc, #4]	@ (8007e58 <__errno+0x8>)
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	4770      	bx	lr
 8007e56:	bf00      	nop
 8007e58:	200000dc 	.word	0x200000dc

08007e5c <__libc_init_array>:
 8007e5c:	b570      	push	{r4, r5, r6, lr}
 8007e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8007e94 <__libc_init_array+0x38>)
 8007e60:	4c0d      	ldr	r4, [pc, #52]	@ (8007e98 <__libc_init_array+0x3c>)
 8007e62:	1b64      	subs	r4, r4, r5
 8007e64:	10a4      	asrs	r4, r4, #2
 8007e66:	2600      	movs	r6, #0
 8007e68:	42a6      	cmp	r6, r4
 8007e6a:	d109      	bne.n	8007e80 <__libc_init_array+0x24>
 8007e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8007e9c <__libc_init_array+0x40>)
 8007e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8007ea0 <__libc_init_array+0x44>)
 8007e70:	f001 ff52 	bl	8009d18 <_init>
 8007e74:	1b64      	subs	r4, r4, r5
 8007e76:	10a4      	asrs	r4, r4, #2
 8007e78:	2600      	movs	r6, #0
 8007e7a:	42a6      	cmp	r6, r4
 8007e7c:	d105      	bne.n	8007e8a <__libc_init_array+0x2e>
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e84:	4798      	blx	r3
 8007e86:	3601      	adds	r6, #1
 8007e88:	e7ee      	b.n	8007e68 <__libc_init_array+0xc>
 8007e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e8e:	4798      	blx	r3
 8007e90:	3601      	adds	r6, #1
 8007e92:	e7f2      	b.n	8007e7a <__libc_init_array+0x1e>
 8007e94:	0800a144 	.word	0x0800a144
 8007e98:	0800a144 	.word	0x0800a144
 8007e9c:	0800a144 	.word	0x0800a144
 8007ea0:	0800a148 	.word	0x0800a148

08007ea4 <__retarget_lock_init_recursive>:
 8007ea4:	4770      	bx	lr

08007ea6 <__retarget_lock_acquire_recursive>:
 8007ea6:	4770      	bx	lr

08007ea8 <__retarget_lock_release_recursive>:
 8007ea8:	4770      	bx	lr
	...

08007eac <_localeconv_r>:
 8007eac:	4800      	ldr	r0, [pc, #0]	@ (8007eb0 <_localeconv_r+0x4>)
 8007eae:	4770      	bx	lr
 8007eb0:	2000021c 	.word	0x2000021c

08007eb4 <memcpy>:
 8007eb4:	440a      	add	r2, r1
 8007eb6:	4291      	cmp	r1, r2
 8007eb8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007ebc:	d100      	bne.n	8007ec0 <memcpy+0xc>
 8007ebe:	4770      	bx	lr
 8007ec0:	b510      	push	{r4, lr}
 8007ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eca:	4291      	cmp	r1, r2
 8007ecc:	d1f9      	bne.n	8007ec2 <memcpy+0xe>
 8007ece:	bd10      	pop	{r4, pc}

08007ed0 <__assert_func>:
 8007ed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ed2:	4614      	mov	r4, r2
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4b09      	ldr	r3, [pc, #36]	@ (8007efc <__assert_func+0x2c>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4605      	mov	r5, r0
 8007edc:	68d8      	ldr	r0, [r3, #12]
 8007ede:	b14c      	cbz	r4, 8007ef4 <__assert_func+0x24>
 8007ee0:	4b07      	ldr	r3, [pc, #28]	@ (8007f00 <__assert_func+0x30>)
 8007ee2:	9100      	str	r1, [sp, #0]
 8007ee4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ee8:	4906      	ldr	r1, [pc, #24]	@ (8007f04 <__assert_func+0x34>)
 8007eea:	462b      	mov	r3, r5
 8007eec:	f001 fcca 	bl	8009884 <fiprintf>
 8007ef0:	f001 fe48 	bl	8009b84 <abort>
 8007ef4:	4b04      	ldr	r3, [pc, #16]	@ (8007f08 <__assert_func+0x38>)
 8007ef6:	461c      	mov	r4, r3
 8007ef8:	e7f3      	b.n	8007ee2 <__assert_func+0x12>
 8007efa:	bf00      	nop
 8007efc:	200000dc 	.word	0x200000dc
 8007f00:	08009df8 	.word	0x08009df8
 8007f04:	08009e05 	.word	0x08009e05
 8007f08:	08009e33 	.word	0x08009e33

08007f0c <quorem>:
 8007f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	6903      	ldr	r3, [r0, #16]
 8007f12:	690c      	ldr	r4, [r1, #16]
 8007f14:	42a3      	cmp	r3, r4
 8007f16:	4607      	mov	r7, r0
 8007f18:	db7e      	blt.n	8008018 <quorem+0x10c>
 8007f1a:	3c01      	subs	r4, #1
 8007f1c:	f101 0814 	add.w	r8, r1, #20
 8007f20:	00a3      	lsls	r3, r4, #2
 8007f22:	f100 0514 	add.w	r5, r0, #20
 8007f26:	9300      	str	r3, [sp, #0]
 8007f28:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f2c:	9301      	str	r3, [sp, #4]
 8007f2e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f36:	3301      	adds	r3, #1
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f3e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f42:	d32e      	bcc.n	8007fa2 <quorem+0x96>
 8007f44:	f04f 0a00 	mov.w	sl, #0
 8007f48:	46c4      	mov	ip, r8
 8007f4a:	46ae      	mov	lr, r5
 8007f4c:	46d3      	mov	fp, sl
 8007f4e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f52:	b298      	uxth	r0, r3
 8007f54:	fb06 a000 	mla	r0, r6, r0, sl
 8007f58:	0c02      	lsrs	r2, r0, #16
 8007f5a:	0c1b      	lsrs	r3, r3, #16
 8007f5c:	fb06 2303 	mla	r3, r6, r3, r2
 8007f60:	f8de 2000 	ldr.w	r2, [lr]
 8007f64:	b280      	uxth	r0, r0
 8007f66:	b292      	uxth	r2, r2
 8007f68:	1a12      	subs	r2, r2, r0
 8007f6a:	445a      	add	r2, fp
 8007f6c:	f8de 0000 	ldr.w	r0, [lr]
 8007f70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007f7a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007f7e:	b292      	uxth	r2, r2
 8007f80:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007f84:	45e1      	cmp	r9, ip
 8007f86:	f84e 2b04 	str.w	r2, [lr], #4
 8007f8a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007f8e:	d2de      	bcs.n	8007f4e <quorem+0x42>
 8007f90:	9b00      	ldr	r3, [sp, #0]
 8007f92:	58eb      	ldr	r3, [r5, r3]
 8007f94:	b92b      	cbnz	r3, 8007fa2 <quorem+0x96>
 8007f96:	9b01      	ldr	r3, [sp, #4]
 8007f98:	3b04      	subs	r3, #4
 8007f9a:	429d      	cmp	r5, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	d32f      	bcc.n	8008000 <quorem+0xf4>
 8007fa0:	613c      	str	r4, [r7, #16]
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	f001 fb22 	bl	80095ec <__mcmp>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	db25      	blt.n	8007ff8 <quorem+0xec>
 8007fac:	4629      	mov	r1, r5
 8007fae:	2000      	movs	r0, #0
 8007fb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fb4:	f8d1 c000 	ldr.w	ip, [r1]
 8007fb8:	fa1f fe82 	uxth.w	lr, r2
 8007fbc:	fa1f f38c 	uxth.w	r3, ip
 8007fc0:	eba3 030e 	sub.w	r3, r3, lr
 8007fc4:	4403      	add	r3, r0
 8007fc6:	0c12      	lsrs	r2, r2, #16
 8007fc8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007fcc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007fd6:	45c1      	cmp	r9, r8
 8007fd8:	f841 3b04 	str.w	r3, [r1], #4
 8007fdc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007fe0:	d2e6      	bcs.n	8007fb0 <quorem+0xa4>
 8007fe2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fe6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fea:	b922      	cbnz	r2, 8007ff6 <quorem+0xea>
 8007fec:	3b04      	subs	r3, #4
 8007fee:	429d      	cmp	r5, r3
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	d30b      	bcc.n	800800c <quorem+0x100>
 8007ff4:	613c      	str	r4, [r7, #16]
 8007ff6:	3601      	adds	r6, #1
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	b003      	add	sp, #12
 8007ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008000:	6812      	ldr	r2, [r2, #0]
 8008002:	3b04      	subs	r3, #4
 8008004:	2a00      	cmp	r2, #0
 8008006:	d1cb      	bne.n	8007fa0 <quorem+0x94>
 8008008:	3c01      	subs	r4, #1
 800800a:	e7c6      	b.n	8007f9a <quorem+0x8e>
 800800c:	6812      	ldr	r2, [r2, #0]
 800800e:	3b04      	subs	r3, #4
 8008010:	2a00      	cmp	r2, #0
 8008012:	d1ef      	bne.n	8007ff4 <quorem+0xe8>
 8008014:	3c01      	subs	r4, #1
 8008016:	e7ea      	b.n	8007fee <quorem+0xe2>
 8008018:	2000      	movs	r0, #0
 800801a:	e7ee      	b.n	8007ffa <quorem+0xee>
 800801c:	0000      	movs	r0, r0
	...

08008020 <_dtoa_r>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	69c7      	ldr	r7, [r0, #28]
 8008026:	b097      	sub	sp, #92	@ 0x5c
 8008028:	ed8d 0b04 	vstr	d0, [sp, #16]
 800802c:	ec55 4b10 	vmov	r4, r5, d0
 8008030:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008032:	9107      	str	r1, [sp, #28]
 8008034:	4681      	mov	r9, r0
 8008036:	920c      	str	r2, [sp, #48]	@ 0x30
 8008038:	9311      	str	r3, [sp, #68]	@ 0x44
 800803a:	b97f      	cbnz	r7, 800805c <_dtoa_r+0x3c>
 800803c:	2010      	movs	r0, #16
 800803e:	f000 ff01 	bl	8008e44 <malloc>
 8008042:	4602      	mov	r2, r0
 8008044:	f8c9 001c 	str.w	r0, [r9, #28]
 8008048:	b920      	cbnz	r0, 8008054 <_dtoa_r+0x34>
 800804a:	4ba9      	ldr	r3, [pc, #676]	@ (80082f0 <_dtoa_r+0x2d0>)
 800804c:	21ef      	movs	r1, #239	@ 0xef
 800804e:	48a9      	ldr	r0, [pc, #676]	@ (80082f4 <_dtoa_r+0x2d4>)
 8008050:	f7ff ff3e 	bl	8007ed0 <__assert_func>
 8008054:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008058:	6007      	str	r7, [r0, #0]
 800805a:	60c7      	str	r7, [r0, #12]
 800805c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008060:	6819      	ldr	r1, [r3, #0]
 8008062:	b159      	cbz	r1, 800807c <_dtoa_r+0x5c>
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	604a      	str	r2, [r1, #4]
 8008068:	2301      	movs	r3, #1
 800806a:	4093      	lsls	r3, r2
 800806c:	608b      	str	r3, [r1, #8]
 800806e:	4648      	mov	r0, r9
 8008070:	f001 f88a 	bl	8009188 <_Bfree>
 8008074:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	1e2b      	subs	r3, r5, #0
 800807e:	bfb9      	ittee	lt
 8008080:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008084:	9305      	strlt	r3, [sp, #20]
 8008086:	2300      	movge	r3, #0
 8008088:	6033      	strge	r3, [r6, #0]
 800808a:	9f05      	ldr	r7, [sp, #20]
 800808c:	4b9a      	ldr	r3, [pc, #616]	@ (80082f8 <_dtoa_r+0x2d8>)
 800808e:	bfbc      	itt	lt
 8008090:	2201      	movlt	r2, #1
 8008092:	6032      	strlt	r2, [r6, #0]
 8008094:	43bb      	bics	r3, r7
 8008096:	d112      	bne.n	80080be <_dtoa_r+0x9e>
 8008098:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800809a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800809e:	6013      	str	r3, [r2, #0]
 80080a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080a4:	4323      	orrs	r3, r4
 80080a6:	f000 855a 	beq.w	8008b5e <_dtoa_r+0xb3e>
 80080aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800830c <_dtoa_r+0x2ec>
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f000 855c 	beq.w	8008b6e <_dtoa_r+0xb4e>
 80080b6:	f10a 0303 	add.w	r3, sl, #3
 80080ba:	f000 bd56 	b.w	8008b6a <_dtoa_r+0xb4a>
 80080be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80080c2:	2200      	movs	r2, #0
 80080c4:	ec51 0b17 	vmov	r0, r1, d7
 80080c8:	2300      	movs	r3, #0
 80080ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80080ce:	f7f8 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 80080d2:	4680      	mov	r8, r0
 80080d4:	b158      	cbz	r0, 80080ee <_dtoa_r+0xce>
 80080d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80080d8:	2301      	movs	r3, #1
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080de:	b113      	cbz	r3, 80080e6 <_dtoa_r+0xc6>
 80080e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80080e2:	4b86      	ldr	r3, [pc, #536]	@ (80082fc <_dtoa_r+0x2dc>)
 80080e4:	6013      	str	r3, [r2, #0]
 80080e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008310 <_dtoa_r+0x2f0>
 80080ea:	f000 bd40 	b.w	8008b6e <_dtoa_r+0xb4e>
 80080ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80080f2:	aa14      	add	r2, sp, #80	@ 0x50
 80080f4:	a915      	add	r1, sp, #84	@ 0x54
 80080f6:	4648      	mov	r0, r9
 80080f8:	f001 fb28 	bl	800974c <__d2b>
 80080fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008100:	9002      	str	r0, [sp, #8]
 8008102:	2e00      	cmp	r6, #0
 8008104:	d078      	beq.n	80081f8 <_dtoa_r+0x1d8>
 8008106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008108:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800810c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008110:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008114:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008118:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800811c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008120:	4619      	mov	r1, r3
 8008122:	2200      	movs	r2, #0
 8008124:	4b76      	ldr	r3, [pc, #472]	@ (8008300 <_dtoa_r+0x2e0>)
 8008126:	f7f8 f8af 	bl	8000288 <__aeabi_dsub>
 800812a:	a36b      	add	r3, pc, #428	@ (adr r3, 80082d8 <_dtoa_r+0x2b8>)
 800812c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008130:	f7f8 fa62 	bl	80005f8 <__aeabi_dmul>
 8008134:	a36a      	add	r3, pc, #424	@ (adr r3, 80082e0 <_dtoa_r+0x2c0>)
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	f7f8 f8a7 	bl	800028c <__adddf3>
 800813e:	4604      	mov	r4, r0
 8008140:	4630      	mov	r0, r6
 8008142:	460d      	mov	r5, r1
 8008144:	f7f8 f9ee 	bl	8000524 <__aeabi_i2d>
 8008148:	a367      	add	r3, pc, #412	@ (adr r3, 80082e8 <_dtoa_r+0x2c8>)
 800814a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814e:	f7f8 fa53 	bl	80005f8 <__aeabi_dmul>
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	4620      	mov	r0, r4
 8008158:	4629      	mov	r1, r5
 800815a:	f7f8 f897 	bl	800028c <__adddf3>
 800815e:	4604      	mov	r4, r0
 8008160:	460d      	mov	r5, r1
 8008162:	f7f8 fcf9 	bl	8000b58 <__aeabi_d2iz>
 8008166:	2200      	movs	r2, #0
 8008168:	4607      	mov	r7, r0
 800816a:	2300      	movs	r3, #0
 800816c:	4620      	mov	r0, r4
 800816e:	4629      	mov	r1, r5
 8008170:	f7f8 fcb4 	bl	8000adc <__aeabi_dcmplt>
 8008174:	b140      	cbz	r0, 8008188 <_dtoa_r+0x168>
 8008176:	4638      	mov	r0, r7
 8008178:	f7f8 f9d4 	bl	8000524 <__aeabi_i2d>
 800817c:	4622      	mov	r2, r4
 800817e:	462b      	mov	r3, r5
 8008180:	f7f8 fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008184:	b900      	cbnz	r0, 8008188 <_dtoa_r+0x168>
 8008186:	3f01      	subs	r7, #1
 8008188:	2f16      	cmp	r7, #22
 800818a:	d852      	bhi.n	8008232 <_dtoa_r+0x212>
 800818c:	4b5d      	ldr	r3, [pc, #372]	@ (8008304 <_dtoa_r+0x2e4>)
 800818e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800819a:	f7f8 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800819e:	2800      	cmp	r0, #0
 80081a0:	d049      	beq.n	8008236 <_dtoa_r+0x216>
 80081a2:	3f01      	subs	r7, #1
 80081a4:	2300      	movs	r3, #0
 80081a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80081a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80081aa:	1b9b      	subs	r3, r3, r6
 80081ac:	1e5a      	subs	r2, r3, #1
 80081ae:	bf45      	ittet	mi
 80081b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80081b4:	9300      	strmi	r3, [sp, #0]
 80081b6:	2300      	movpl	r3, #0
 80081b8:	2300      	movmi	r3, #0
 80081ba:	9206      	str	r2, [sp, #24]
 80081bc:	bf54      	ite	pl
 80081be:	9300      	strpl	r3, [sp, #0]
 80081c0:	9306      	strmi	r3, [sp, #24]
 80081c2:	2f00      	cmp	r7, #0
 80081c4:	db39      	blt.n	800823a <_dtoa_r+0x21a>
 80081c6:	9b06      	ldr	r3, [sp, #24]
 80081c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80081ca:	443b      	add	r3, r7
 80081cc:	9306      	str	r3, [sp, #24]
 80081ce:	2300      	movs	r3, #0
 80081d0:	9308      	str	r3, [sp, #32]
 80081d2:	9b07      	ldr	r3, [sp, #28]
 80081d4:	2b09      	cmp	r3, #9
 80081d6:	d863      	bhi.n	80082a0 <_dtoa_r+0x280>
 80081d8:	2b05      	cmp	r3, #5
 80081da:	bfc4      	itt	gt
 80081dc:	3b04      	subgt	r3, #4
 80081de:	9307      	strgt	r3, [sp, #28]
 80081e0:	9b07      	ldr	r3, [sp, #28]
 80081e2:	f1a3 0302 	sub.w	r3, r3, #2
 80081e6:	bfcc      	ite	gt
 80081e8:	2400      	movgt	r4, #0
 80081ea:	2401      	movle	r4, #1
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d863      	bhi.n	80082b8 <_dtoa_r+0x298>
 80081f0:	e8df f003 	tbb	[pc, r3]
 80081f4:	2b375452 	.word	0x2b375452
 80081f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80081fc:	441e      	add	r6, r3
 80081fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008202:	2b20      	cmp	r3, #32
 8008204:	bfc1      	itttt	gt
 8008206:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800820a:	409f      	lslgt	r7, r3
 800820c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008210:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008214:	bfd6      	itet	le
 8008216:	f1c3 0320 	rsble	r3, r3, #32
 800821a:	ea47 0003 	orrgt.w	r0, r7, r3
 800821e:	fa04 f003 	lslle.w	r0, r4, r3
 8008222:	f7f8 f96f 	bl	8000504 <__aeabi_ui2d>
 8008226:	2201      	movs	r2, #1
 8008228:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800822c:	3e01      	subs	r6, #1
 800822e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008230:	e776      	b.n	8008120 <_dtoa_r+0x100>
 8008232:	2301      	movs	r3, #1
 8008234:	e7b7      	b.n	80081a6 <_dtoa_r+0x186>
 8008236:	9010      	str	r0, [sp, #64]	@ 0x40
 8008238:	e7b6      	b.n	80081a8 <_dtoa_r+0x188>
 800823a:	9b00      	ldr	r3, [sp, #0]
 800823c:	1bdb      	subs	r3, r3, r7
 800823e:	9300      	str	r3, [sp, #0]
 8008240:	427b      	negs	r3, r7
 8008242:	9308      	str	r3, [sp, #32]
 8008244:	2300      	movs	r3, #0
 8008246:	930d      	str	r3, [sp, #52]	@ 0x34
 8008248:	e7c3      	b.n	80081d2 <_dtoa_r+0x1b2>
 800824a:	2301      	movs	r3, #1
 800824c:	9309      	str	r3, [sp, #36]	@ 0x24
 800824e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008250:	eb07 0b03 	add.w	fp, r7, r3
 8008254:	f10b 0301 	add.w	r3, fp, #1
 8008258:	2b01      	cmp	r3, #1
 800825a:	9303      	str	r3, [sp, #12]
 800825c:	bfb8      	it	lt
 800825e:	2301      	movlt	r3, #1
 8008260:	e006      	b.n	8008270 <_dtoa_r+0x250>
 8008262:	2301      	movs	r3, #1
 8008264:	9309      	str	r3, [sp, #36]	@ 0x24
 8008266:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008268:	2b00      	cmp	r3, #0
 800826a:	dd28      	ble.n	80082be <_dtoa_r+0x29e>
 800826c:	469b      	mov	fp, r3
 800826e:	9303      	str	r3, [sp, #12]
 8008270:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008274:	2100      	movs	r1, #0
 8008276:	2204      	movs	r2, #4
 8008278:	f102 0514 	add.w	r5, r2, #20
 800827c:	429d      	cmp	r5, r3
 800827e:	d926      	bls.n	80082ce <_dtoa_r+0x2ae>
 8008280:	6041      	str	r1, [r0, #4]
 8008282:	4648      	mov	r0, r9
 8008284:	f000 ff40 	bl	8009108 <_Balloc>
 8008288:	4682      	mov	sl, r0
 800828a:	2800      	cmp	r0, #0
 800828c:	d142      	bne.n	8008314 <_dtoa_r+0x2f4>
 800828e:	4b1e      	ldr	r3, [pc, #120]	@ (8008308 <_dtoa_r+0x2e8>)
 8008290:	4602      	mov	r2, r0
 8008292:	f240 11af 	movw	r1, #431	@ 0x1af
 8008296:	e6da      	b.n	800804e <_dtoa_r+0x2e>
 8008298:	2300      	movs	r3, #0
 800829a:	e7e3      	b.n	8008264 <_dtoa_r+0x244>
 800829c:	2300      	movs	r3, #0
 800829e:	e7d5      	b.n	800824c <_dtoa_r+0x22c>
 80082a0:	2401      	movs	r4, #1
 80082a2:	2300      	movs	r3, #0
 80082a4:	9307      	str	r3, [sp, #28]
 80082a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80082a8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80082ac:	2200      	movs	r2, #0
 80082ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80082b2:	2312      	movs	r3, #18
 80082b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80082b6:	e7db      	b.n	8008270 <_dtoa_r+0x250>
 80082b8:	2301      	movs	r3, #1
 80082ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80082bc:	e7f4      	b.n	80082a8 <_dtoa_r+0x288>
 80082be:	f04f 0b01 	mov.w	fp, #1
 80082c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80082c6:	465b      	mov	r3, fp
 80082c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80082cc:	e7d0      	b.n	8008270 <_dtoa_r+0x250>
 80082ce:	3101      	adds	r1, #1
 80082d0:	0052      	lsls	r2, r2, #1
 80082d2:	e7d1      	b.n	8008278 <_dtoa_r+0x258>
 80082d4:	f3af 8000 	nop.w
 80082d8:	636f4361 	.word	0x636f4361
 80082dc:	3fd287a7 	.word	0x3fd287a7
 80082e0:	8b60c8b3 	.word	0x8b60c8b3
 80082e4:	3fc68a28 	.word	0x3fc68a28
 80082e8:	509f79fb 	.word	0x509f79fb
 80082ec:	3fd34413 	.word	0x3fd34413
 80082f0:	08009e41 	.word	0x08009e41
 80082f4:	08009e58 	.word	0x08009e58
 80082f8:	7ff00000 	.word	0x7ff00000
 80082fc:	08009dd5 	.word	0x08009dd5
 8008300:	3ff80000 	.word	0x3ff80000
 8008304:	08009f70 	.word	0x08009f70
 8008308:	08009eb0 	.word	0x08009eb0
 800830c:	08009e3d 	.word	0x08009e3d
 8008310:	08009dd4 	.word	0x08009dd4
 8008314:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008318:	6018      	str	r0, [r3, #0]
 800831a:	9b03      	ldr	r3, [sp, #12]
 800831c:	2b0e      	cmp	r3, #14
 800831e:	f200 80a1 	bhi.w	8008464 <_dtoa_r+0x444>
 8008322:	2c00      	cmp	r4, #0
 8008324:	f000 809e 	beq.w	8008464 <_dtoa_r+0x444>
 8008328:	2f00      	cmp	r7, #0
 800832a:	dd33      	ble.n	8008394 <_dtoa_r+0x374>
 800832c:	4b9c      	ldr	r3, [pc, #624]	@ (80085a0 <_dtoa_r+0x580>)
 800832e:	f007 020f 	and.w	r2, r7, #15
 8008332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008336:	ed93 7b00 	vldr	d7, [r3]
 800833a:	05f8      	lsls	r0, r7, #23
 800833c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008340:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008344:	d516      	bpl.n	8008374 <_dtoa_r+0x354>
 8008346:	4b97      	ldr	r3, [pc, #604]	@ (80085a4 <_dtoa_r+0x584>)
 8008348:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800834c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008350:	f7f8 fa7c 	bl	800084c <__aeabi_ddiv>
 8008354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008358:	f004 040f 	and.w	r4, r4, #15
 800835c:	2603      	movs	r6, #3
 800835e:	4d91      	ldr	r5, [pc, #580]	@ (80085a4 <_dtoa_r+0x584>)
 8008360:	b954      	cbnz	r4, 8008378 <_dtoa_r+0x358>
 8008362:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008366:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800836a:	f7f8 fa6f 	bl	800084c <__aeabi_ddiv>
 800836e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008372:	e028      	b.n	80083c6 <_dtoa_r+0x3a6>
 8008374:	2602      	movs	r6, #2
 8008376:	e7f2      	b.n	800835e <_dtoa_r+0x33e>
 8008378:	07e1      	lsls	r1, r4, #31
 800837a:	d508      	bpl.n	800838e <_dtoa_r+0x36e>
 800837c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008380:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008384:	f7f8 f938 	bl	80005f8 <__aeabi_dmul>
 8008388:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800838c:	3601      	adds	r6, #1
 800838e:	1064      	asrs	r4, r4, #1
 8008390:	3508      	adds	r5, #8
 8008392:	e7e5      	b.n	8008360 <_dtoa_r+0x340>
 8008394:	f000 80af 	beq.w	80084f6 <_dtoa_r+0x4d6>
 8008398:	427c      	negs	r4, r7
 800839a:	4b81      	ldr	r3, [pc, #516]	@ (80085a0 <_dtoa_r+0x580>)
 800839c:	4d81      	ldr	r5, [pc, #516]	@ (80085a4 <_dtoa_r+0x584>)
 800839e:	f004 020f 	and.w	r2, r4, #15
 80083a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083ae:	f7f8 f923 	bl	80005f8 <__aeabi_dmul>
 80083b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083b6:	1124      	asrs	r4, r4, #4
 80083b8:	2300      	movs	r3, #0
 80083ba:	2602      	movs	r6, #2
 80083bc:	2c00      	cmp	r4, #0
 80083be:	f040 808f 	bne.w	80084e0 <_dtoa_r+0x4c0>
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1d3      	bne.n	800836e <_dtoa_r+0x34e>
 80083c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80083c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 8094 	beq.w	80084fa <_dtoa_r+0x4da>
 80083d2:	4b75      	ldr	r3, [pc, #468]	@ (80085a8 <_dtoa_r+0x588>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	4620      	mov	r0, r4
 80083d8:	4629      	mov	r1, r5
 80083da:	f7f8 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80083de:	2800      	cmp	r0, #0
 80083e0:	f000 808b 	beq.w	80084fa <_dtoa_r+0x4da>
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 8087 	beq.w	80084fa <_dtoa_r+0x4da>
 80083ec:	f1bb 0f00 	cmp.w	fp, #0
 80083f0:	dd34      	ble.n	800845c <_dtoa_r+0x43c>
 80083f2:	4620      	mov	r0, r4
 80083f4:	4b6d      	ldr	r3, [pc, #436]	@ (80085ac <_dtoa_r+0x58c>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	4629      	mov	r1, r5
 80083fa:	f7f8 f8fd 	bl	80005f8 <__aeabi_dmul>
 80083fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008402:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008406:	3601      	adds	r6, #1
 8008408:	465c      	mov	r4, fp
 800840a:	4630      	mov	r0, r6
 800840c:	f7f8 f88a 	bl	8000524 <__aeabi_i2d>
 8008410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008414:	f7f8 f8f0 	bl	80005f8 <__aeabi_dmul>
 8008418:	4b65      	ldr	r3, [pc, #404]	@ (80085b0 <_dtoa_r+0x590>)
 800841a:	2200      	movs	r2, #0
 800841c:	f7f7 ff36 	bl	800028c <__adddf3>
 8008420:	4605      	mov	r5, r0
 8008422:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008426:	2c00      	cmp	r4, #0
 8008428:	d16a      	bne.n	8008500 <_dtoa_r+0x4e0>
 800842a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800842e:	4b61      	ldr	r3, [pc, #388]	@ (80085b4 <_dtoa_r+0x594>)
 8008430:	2200      	movs	r2, #0
 8008432:	f7f7 ff29 	bl	8000288 <__aeabi_dsub>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800843e:	462a      	mov	r2, r5
 8008440:	4633      	mov	r3, r6
 8008442:	f7f8 fb69 	bl	8000b18 <__aeabi_dcmpgt>
 8008446:	2800      	cmp	r0, #0
 8008448:	f040 8298 	bne.w	800897c <_dtoa_r+0x95c>
 800844c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008450:	462a      	mov	r2, r5
 8008452:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008456:	f7f8 fb41 	bl	8000adc <__aeabi_dcmplt>
 800845a:	bb38      	cbnz	r0, 80084ac <_dtoa_r+0x48c>
 800845c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008460:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008464:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008466:	2b00      	cmp	r3, #0
 8008468:	f2c0 8157 	blt.w	800871a <_dtoa_r+0x6fa>
 800846c:	2f0e      	cmp	r7, #14
 800846e:	f300 8154 	bgt.w	800871a <_dtoa_r+0x6fa>
 8008472:	4b4b      	ldr	r3, [pc, #300]	@ (80085a0 <_dtoa_r+0x580>)
 8008474:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008478:	ed93 7b00 	vldr	d7, [r3]
 800847c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800847e:	2b00      	cmp	r3, #0
 8008480:	ed8d 7b00 	vstr	d7, [sp]
 8008484:	f280 80e5 	bge.w	8008652 <_dtoa_r+0x632>
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	f300 80e1 	bgt.w	8008652 <_dtoa_r+0x632>
 8008490:	d10c      	bne.n	80084ac <_dtoa_r+0x48c>
 8008492:	4b48      	ldr	r3, [pc, #288]	@ (80085b4 <_dtoa_r+0x594>)
 8008494:	2200      	movs	r2, #0
 8008496:	ec51 0b17 	vmov	r0, r1, d7
 800849a:	f7f8 f8ad 	bl	80005f8 <__aeabi_dmul>
 800849e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084a2:	f7f8 fb2f 	bl	8000b04 <__aeabi_dcmpge>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f000 8266 	beq.w	8008978 <_dtoa_r+0x958>
 80084ac:	2400      	movs	r4, #0
 80084ae:	4625      	mov	r5, r4
 80084b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084b2:	4656      	mov	r6, sl
 80084b4:	ea6f 0803 	mvn.w	r8, r3
 80084b8:	2700      	movs	r7, #0
 80084ba:	4621      	mov	r1, r4
 80084bc:	4648      	mov	r0, r9
 80084be:	f000 fe63 	bl	8009188 <_Bfree>
 80084c2:	2d00      	cmp	r5, #0
 80084c4:	f000 80bd 	beq.w	8008642 <_dtoa_r+0x622>
 80084c8:	b12f      	cbz	r7, 80084d6 <_dtoa_r+0x4b6>
 80084ca:	42af      	cmp	r7, r5
 80084cc:	d003      	beq.n	80084d6 <_dtoa_r+0x4b6>
 80084ce:	4639      	mov	r1, r7
 80084d0:	4648      	mov	r0, r9
 80084d2:	f000 fe59 	bl	8009188 <_Bfree>
 80084d6:	4629      	mov	r1, r5
 80084d8:	4648      	mov	r0, r9
 80084da:	f000 fe55 	bl	8009188 <_Bfree>
 80084de:	e0b0      	b.n	8008642 <_dtoa_r+0x622>
 80084e0:	07e2      	lsls	r2, r4, #31
 80084e2:	d505      	bpl.n	80084f0 <_dtoa_r+0x4d0>
 80084e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80084e8:	f7f8 f886 	bl	80005f8 <__aeabi_dmul>
 80084ec:	3601      	adds	r6, #1
 80084ee:	2301      	movs	r3, #1
 80084f0:	1064      	asrs	r4, r4, #1
 80084f2:	3508      	adds	r5, #8
 80084f4:	e762      	b.n	80083bc <_dtoa_r+0x39c>
 80084f6:	2602      	movs	r6, #2
 80084f8:	e765      	b.n	80083c6 <_dtoa_r+0x3a6>
 80084fa:	9c03      	ldr	r4, [sp, #12]
 80084fc:	46b8      	mov	r8, r7
 80084fe:	e784      	b.n	800840a <_dtoa_r+0x3ea>
 8008500:	4b27      	ldr	r3, [pc, #156]	@ (80085a0 <_dtoa_r+0x580>)
 8008502:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008508:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800850c:	4454      	add	r4, sl
 800850e:	2900      	cmp	r1, #0
 8008510:	d054      	beq.n	80085bc <_dtoa_r+0x59c>
 8008512:	4929      	ldr	r1, [pc, #164]	@ (80085b8 <_dtoa_r+0x598>)
 8008514:	2000      	movs	r0, #0
 8008516:	f7f8 f999 	bl	800084c <__aeabi_ddiv>
 800851a:	4633      	mov	r3, r6
 800851c:	462a      	mov	r2, r5
 800851e:	f7f7 feb3 	bl	8000288 <__aeabi_dsub>
 8008522:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008526:	4656      	mov	r6, sl
 8008528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800852c:	f7f8 fb14 	bl	8000b58 <__aeabi_d2iz>
 8008530:	4605      	mov	r5, r0
 8008532:	f7f7 fff7 	bl	8000524 <__aeabi_i2d>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800853e:	f7f7 fea3 	bl	8000288 <__aeabi_dsub>
 8008542:	3530      	adds	r5, #48	@ 0x30
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800854c:	f806 5b01 	strb.w	r5, [r6], #1
 8008550:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008554:	f7f8 fac2 	bl	8000adc <__aeabi_dcmplt>
 8008558:	2800      	cmp	r0, #0
 800855a:	d172      	bne.n	8008642 <_dtoa_r+0x622>
 800855c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008560:	4911      	ldr	r1, [pc, #68]	@ (80085a8 <_dtoa_r+0x588>)
 8008562:	2000      	movs	r0, #0
 8008564:	f7f7 fe90 	bl	8000288 <__aeabi_dsub>
 8008568:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800856c:	f7f8 fab6 	bl	8000adc <__aeabi_dcmplt>
 8008570:	2800      	cmp	r0, #0
 8008572:	f040 80b4 	bne.w	80086de <_dtoa_r+0x6be>
 8008576:	42a6      	cmp	r6, r4
 8008578:	f43f af70 	beq.w	800845c <_dtoa_r+0x43c>
 800857c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008580:	4b0a      	ldr	r3, [pc, #40]	@ (80085ac <_dtoa_r+0x58c>)
 8008582:	2200      	movs	r2, #0
 8008584:	f7f8 f838 	bl	80005f8 <__aeabi_dmul>
 8008588:	4b08      	ldr	r3, [pc, #32]	@ (80085ac <_dtoa_r+0x58c>)
 800858a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800858e:	2200      	movs	r2, #0
 8008590:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008594:	f7f8 f830 	bl	80005f8 <__aeabi_dmul>
 8008598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800859c:	e7c4      	b.n	8008528 <_dtoa_r+0x508>
 800859e:	bf00      	nop
 80085a0:	08009f70 	.word	0x08009f70
 80085a4:	08009f48 	.word	0x08009f48
 80085a8:	3ff00000 	.word	0x3ff00000
 80085ac:	40240000 	.word	0x40240000
 80085b0:	401c0000 	.word	0x401c0000
 80085b4:	40140000 	.word	0x40140000
 80085b8:	3fe00000 	.word	0x3fe00000
 80085bc:	4631      	mov	r1, r6
 80085be:	4628      	mov	r0, r5
 80085c0:	f7f8 f81a 	bl	80005f8 <__aeabi_dmul>
 80085c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80085c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80085ca:	4656      	mov	r6, sl
 80085cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085d0:	f7f8 fac2 	bl	8000b58 <__aeabi_d2iz>
 80085d4:	4605      	mov	r5, r0
 80085d6:	f7f7 ffa5 	bl	8000524 <__aeabi_i2d>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085e2:	f7f7 fe51 	bl	8000288 <__aeabi_dsub>
 80085e6:	3530      	adds	r5, #48	@ 0x30
 80085e8:	f806 5b01 	strb.w	r5, [r6], #1
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	42a6      	cmp	r6, r4
 80085f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	d124      	bne.n	8008646 <_dtoa_r+0x626>
 80085fc:	4baf      	ldr	r3, [pc, #700]	@ (80088bc <_dtoa_r+0x89c>)
 80085fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008602:	f7f7 fe43 	bl	800028c <__adddf3>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800860e:	f7f8 fa83 	bl	8000b18 <__aeabi_dcmpgt>
 8008612:	2800      	cmp	r0, #0
 8008614:	d163      	bne.n	80086de <_dtoa_r+0x6be>
 8008616:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800861a:	49a8      	ldr	r1, [pc, #672]	@ (80088bc <_dtoa_r+0x89c>)
 800861c:	2000      	movs	r0, #0
 800861e:	f7f7 fe33 	bl	8000288 <__aeabi_dsub>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800862a:	f7f8 fa57 	bl	8000adc <__aeabi_dcmplt>
 800862e:	2800      	cmp	r0, #0
 8008630:	f43f af14 	beq.w	800845c <_dtoa_r+0x43c>
 8008634:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008636:	1e73      	subs	r3, r6, #1
 8008638:	9313      	str	r3, [sp, #76]	@ 0x4c
 800863a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800863e:	2b30      	cmp	r3, #48	@ 0x30
 8008640:	d0f8      	beq.n	8008634 <_dtoa_r+0x614>
 8008642:	4647      	mov	r7, r8
 8008644:	e03b      	b.n	80086be <_dtoa_r+0x69e>
 8008646:	4b9e      	ldr	r3, [pc, #632]	@ (80088c0 <_dtoa_r+0x8a0>)
 8008648:	f7f7 ffd6 	bl	80005f8 <__aeabi_dmul>
 800864c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008650:	e7bc      	b.n	80085cc <_dtoa_r+0x5ac>
 8008652:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008656:	4656      	mov	r6, sl
 8008658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800865c:	4620      	mov	r0, r4
 800865e:	4629      	mov	r1, r5
 8008660:	f7f8 f8f4 	bl	800084c <__aeabi_ddiv>
 8008664:	f7f8 fa78 	bl	8000b58 <__aeabi_d2iz>
 8008668:	4680      	mov	r8, r0
 800866a:	f7f7 ff5b 	bl	8000524 <__aeabi_i2d>
 800866e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008672:	f7f7 ffc1 	bl	80005f8 <__aeabi_dmul>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	4620      	mov	r0, r4
 800867c:	4629      	mov	r1, r5
 800867e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008682:	f7f7 fe01 	bl	8000288 <__aeabi_dsub>
 8008686:	f806 4b01 	strb.w	r4, [r6], #1
 800868a:	9d03      	ldr	r5, [sp, #12]
 800868c:	eba6 040a 	sub.w	r4, r6, sl
 8008690:	42a5      	cmp	r5, r4
 8008692:	4602      	mov	r2, r0
 8008694:	460b      	mov	r3, r1
 8008696:	d133      	bne.n	8008700 <_dtoa_r+0x6e0>
 8008698:	f7f7 fdf8 	bl	800028c <__adddf3>
 800869c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086a0:	4604      	mov	r4, r0
 80086a2:	460d      	mov	r5, r1
 80086a4:	f7f8 fa38 	bl	8000b18 <__aeabi_dcmpgt>
 80086a8:	b9c0      	cbnz	r0, 80086dc <_dtoa_r+0x6bc>
 80086aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086ae:	4620      	mov	r0, r4
 80086b0:	4629      	mov	r1, r5
 80086b2:	f7f8 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 80086b6:	b110      	cbz	r0, 80086be <_dtoa_r+0x69e>
 80086b8:	f018 0f01 	tst.w	r8, #1
 80086bc:	d10e      	bne.n	80086dc <_dtoa_r+0x6bc>
 80086be:	9902      	ldr	r1, [sp, #8]
 80086c0:	4648      	mov	r0, r9
 80086c2:	f000 fd61 	bl	8009188 <_Bfree>
 80086c6:	2300      	movs	r3, #0
 80086c8:	7033      	strb	r3, [r6, #0]
 80086ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80086cc:	3701      	adds	r7, #1
 80086ce:	601f      	str	r7, [r3, #0]
 80086d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 824b 	beq.w	8008b6e <_dtoa_r+0xb4e>
 80086d8:	601e      	str	r6, [r3, #0]
 80086da:	e248      	b.n	8008b6e <_dtoa_r+0xb4e>
 80086dc:	46b8      	mov	r8, r7
 80086de:	4633      	mov	r3, r6
 80086e0:	461e      	mov	r6, r3
 80086e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086e6:	2a39      	cmp	r2, #57	@ 0x39
 80086e8:	d106      	bne.n	80086f8 <_dtoa_r+0x6d8>
 80086ea:	459a      	cmp	sl, r3
 80086ec:	d1f8      	bne.n	80086e0 <_dtoa_r+0x6c0>
 80086ee:	2230      	movs	r2, #48	@ 0x30
 80086f0:	f108 0801 	add.w	r8, r8, #1
 80086f4:	f88a 2000 	strb.w	r2, [sl]
 80086f8:	781a      	ldrb	r2, [r3, #0]
 80086fa:	3201      	adds	r2, #1
 80086fc:	701a      	strb	r2, [r3, #0]
 80086fe:	e7a0      	b.n	8008642 <_dtoa_r+0x622>
 8008700:	4b6f      	ldr	r3, [pc, #444]	@ (80088c0 <_dtoa_r+0x8a0>)
 8008702:	2200      	movs	r2, #0
 8008704:	f7f7 ff78 	bl	80005f8 <__aeabi_dmul>
 8008708:	2200      	movs	r2, #0
 800870a:	2300      	movs	r3, #0
 800870c:	4604      	mov	r4, r0
 800870e:	460d      	mov	r5, r1
 8008710:	f7f8 f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 8008714:	2800      	cmp	r0, #0
 8008716:	d09f      	beq.n	8008658 <_dtoa_r+0x638>
 8008718:	e7d1      	b.n	80086be <_dtoa_r+0x69e>
 800871a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800871c:	2a00      	cmp	r2, #0
 800871e:	f000 80ea 	beq.w	80088f6 <_dtoa_r+0x8d6>
 8008722:	9a07      	ldr	r2, [sp, #28]
 8008724:	2a01      	cmp	r2, #1
 8008726:	f300 80cd 	bgt.w	80088c4 <_dtoa_r+0x8a4>
 800872a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800872c:	2a00      	cmp	r2, #0
 800872e:	f000 80c1 	beq.w	80088b4 <_dtoa_r+0x894>
 8008732:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008736:	9c08      	ldr	r4, [sp, #32]
 8008738:	9e00      	ldr	r6, [sp, #0]
 800873a:	9a00      	ldr	r2, [sp, #0]
 800873c:	441a      	add	r2, r3
 800873e:	9200      	str	r2, [sp, #0]
 8008740:	9a06      	ldr	r2, [sp, #24]
 8008742:	2101      	movs	r1, #1
 8008744:	441a      	add	r2, r3
 8008746:	4648      	mov	r0, r9
 8008748:	9206      	str	r2, [sp, #24]
 800874a:	f000 fdd1 	bl	80092f0 <__i2b>
 800874e:	4605      	mov	r5, r0
 8008750:	b166      	cbz	r6, 800876c <_dtoa_r+0x74c>
 8008752:	9b06      	ldr	r3, [sp, #24]
 8008754:	2b00      	cmp	r3, #0
 8008756:	dd09      	ble.n	800876c <_dtoa_r+0x74c>
 8008758:	42b3      	cmp	r3, r6
 800875a:	9a00      	ldr	r2, [sp, #0]
 800875c:	bfa8      	it	ge
 800875e:	4633      	movge	r3, r6
 8008760:	1ad2      	subs	r2, r2, r3
 8008762:	9200      	str	r2, [sp, #0]
 8008764:	9a06      	ldr	r2, [sp, #24]
 8008766:	1af6      	subs	r6, r6, r3
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	9306      	str	r3, [sp, #24]
 800876c:	9b08      	ldr	r3, [sp, #32]
 800876e:	b30b      	cbz	r3, 80087b4 <_dtoa_r+0x794>
 8008770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008772:	2b00      	cmp	r3, #0
 8008774:	f000 80c6 	beq.w	8008904 <_dtoa_r+0x8e4>
 8008778:	2c00      	cmp	r4, #0
 800877a:	f000 80c0 	beq.w	80088fe <_dtoa_r+0x8de>
 800877e:	4629      	mov	r1, r5
 8008780:	4622      	mov	r2, r4
 8008782:	4648      	mov	r0, r9
 8008784:	f000 fe6c 	bl	8009460 <__pow5mult>
 8008788:	9a02      	ldr	r2, [sp, #8]
 800878a:	4601      	mov	r1, r0
 800878c:	4605      	mov	r5, r0
 800878e:	4648      	mov	r0, r9
 8008790:	f000 fdc4 	bl	800931c <__multiply>
 8008794:	9902      	ldr	r1, [sp, #8]
 8008796:	4680      	mov	r8, r0
 8008798:	4648      	mov	r0, r9
 800879a:	f000 fcf5 	bl	8009188 <_Bfree>
 800879e:	9b08      	ldr	r3, [sp, #32]
 80087a0:	1b1b      	subs	r3, r3, r4
 80087a2:	9308      	str	r3, [sp, #32]
 80087a4:	f000 80b1 	beq.w	800890a <_dtoa_r+0x8ea>
 80087a8:	9a08      	ldr	r2, [sp, #32]
 80087aa:	4641      	mov	r1, r8
 80087ac:	4648      	mov	r0, r9
 80087ae:	f000 fe57 	bl	8009460 <__pow5mult>
 80087b2:	9002      	str	r0, [sp, #8]
 80087b4:	2101      	movs	r1, #1
 80087b6:	4648      	mov	r0, r9
 80087b8:	f000 fd9a 	bl	80092f0 <__i2b>
 80087bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087be:	4604      	mov	r4, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 81d8 	beq.w	8008b76 <_dtoa_r+0xb56>
 80087c6:	461a      	mov	r2, r3
 80087c8:	4601      	mov	r1, r0
 80087ca:	4648      	mov	r0, r9
 80087cc:	f000 fe48 	bl	8009460 <__pow5mult>
 80087d0:	9b07      	ldr	r3, [sp, #28]
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	4604      	mov	r4, r0
 80087d6:	f300 809f 	bgt.w	8008918 <_dtoa_r+0x8f8>
 80087da:	9b04      	ldr	r3, [sp, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f040 8097 	bne.w	8008910 <_dtoa_r+0x8f0>
 80087e2:	9b05      	ldr	r3, [sp, #20]
 80087e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f040 8093 	bne.w	8008914 <_dtoa_r+0x8f4>
 80087ee:	9b05      	ldr	r3, [sp, #20]
 80087f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087f4:	0d1b      	lsrs	r3, r3, #20
 80087f6:	051b      	lsls	r3, r3, #20
 80087f8:	b133      	cbz	r3, 8008808 <_dtoa_r+0x7e8>
 80087fa:	9b00      	ldr	r3, [sp, #0]
 80087fc:	3301      	adds	r3, #1
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	9b06      	ldr	r3, [sp, #24]
 8008802:	3301      	adds	r3, #1
 8008804:	9306      	str	r3, [sp, #24]
 8008806:	2301      	movs	r3, #1
 8008808:	9308      	str	r3, [sp, #32]
 800880a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 81b8 	beq.w	8008b82 <_dtoa_r+0xb62>
 8008812:	6923      	ldr	r3, [r4, #16]
 8008814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008818:	6918      	ldr	r0, [r3, #16]
 800881a:	f000 fd1d 	bl	8009258 <__hi0bits>
 800881e:	f1c0 0020 	rsb	r0, r0, #32
 8008822:	9b06      	ldr	r3, [sp, #24]
 8008824:	4418      	add	r0, r3
 8008826:	f010 001f 	ands.w	r0, r0, #31
 800882a:	f000 8082 	beq.w	8008932 <_dtoa_r+0x912>
 800882e:	f1c0 0320 	rsb	r3, r0, #32
 8008832:	2b04      	cmp	r3, #4
 8008834:	dd73      	ble.n	800891e <_dtoa_r+0x8fe>
 8008836:	9b00      	ldr	r3, [sp, #0]
 8008838:	f1c0 001c 	rsb	r0, r0, #28
 800883c:	4403      	add	r3, r0
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	9b06      	ldr	r3, [sp, #24]
 8008842:	4403      	add	r3, r0
 8008844:	4406      	add	r6, r0
 8008846:	9306      	str	r3, [sp, #24]
 8008848:	9b00      	ldr	r3, [sp, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	dd05      	ble.n	800885a <_dtoa_r+0x83a>
 800884e:	9902      	ldr	r1, [sp, #8]
 8008850:	461a      	mov	r2, r3
 8008852:	4648      	mov	r0, r9
 8008854:	f000 fe5e 	bl	8009514 <__lshift>
 8008858:	9002      	str	r0, [sp, #8]
 800885a:	9b06      	ldr	r3, [sp, #24]
 800885c:	2b00      	cmp	r3, #0
 800885e:	dd05      	ble.n	800886c <_dtoa_r+0x84c>
 8008860:	4621      	mov	r1, r4
 8008862:	461a      	mov	r2, r3
 8008864:	4648      	mov	r0, r9
 8008866:	f000 fe55 	bl	8009514 <__lshift>
 800886a:	4604      	mov	r4, r0
 800886c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800886e:	2b00      	cmp	r3, #0
 8008870:	d061      	beq.n	8008936 <_dtoa_r+0x916>
 8008872:	9802      	ldr	r0, [sp, #8]
 8008874:	4621      	mov	r1, r4
 8008876:	f000 feb9 	bl	80095ec <__mcmp>
 800887a:	2800      	cmp	r0, #0
 800887c:	da5b      	bge.n	8008936 <_dtoa_r+0x916>
 800887e:	2300      	movs	r3, #0
 8008880:	9902      	ldr	r1, [sp, #8]
 8008882:	220a      	movs	r2, #10
 8008884:	4648      	mov	r0, r9
 8008886:	f000 fca1 	bl	80091cc <__multadd>
 800888a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888c:	9002      	str	r0, [sp, #8]
 800888e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 8177 	beq.w	8008b86 <_dtoa_r+0xb66>
 8008898:	4629      	mov	r1, r5
 800889a:	2300      	movs	r3, #0
 800889c:	220a      	movs	r2, #10
 800889e:	4648      	mov	r0, r9
 80088a0:	f000 fc94 	bl	80091cc <__multadd>
 80088a4:	f1bb 0f00 	cmp.w	fp, #0
 80088a8:	4605      	mov	r5, r0
 80088aa:	dc6f      	bgt.n	800898c <_dtoa_r+0x96c>
 80088ac:	9b07      	ldr	r3, [sp, #28]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	dc49      	bgt.n	8008946 <_dtoa_r+0x926>
 80088b2:	e06b      	b.n	800898c <_dtoa_r+0x96c>
 80088b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80088b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80088ba:	e73c      	b.n	8008736 <_dtoa_r+0x716>
 80088bc:	3fe00000 	.word	0x3fe00000
 80088c0:	40240000 	.word	0x40240000
 80088c4:	9b03      	ldr	r3, [sp, #12]
 80088c6:	1e5c      	subs	r4, r3, #1
 80088c8:	9b08      	ldr	r3, [sp, #32]
 80088ca:	42a3      	cmp	r3, r4
 80088cc:	db09      	blt.n	80088e2 <_dtoa_r+0x8c2>
 80088ce:	1b1c      	subs	r4, r3, r4
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f6bf af30 	bge.w	8008738 <_dtoa_r+0x718>
 80088d8:	9b00      	ldr	r3, [sp, #0]
 80088da:	9a03      	ldr	r2, [sp, #12]
 80088dc:	1a9e      	subs	r6, r3, r2
 80088de:	2300      	movs	r3, #0
 80088e0:	e72b      	b.n	800873a <_dtoa_r+0x71a>
 80088e2:	9b08      	ldr	r3, [sp, #32]
 80088e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80088e6:	9408      	str	r4, [sp, #32]
 80088e8:	1ae3      	subs	r3, r4, r3
 80088ea:	441a      	add	r2, r3
 80088ec:	9e00      	ldr	r6, [sp, #0]
 80088ee:	9b03      	ldr	r3, [sp, #12]
 80088f0:	920d      	str	r2, [sp, #52]	@ 0x34
 80088f2:	2400      	movs	r4, #0
 80088f4:	e721      	b.n	800873a <_dtoa_r+0x71a>
 80088f6:	9c08      	ldr	r4, [sp, #32]
 80088f8:	9e00      	ldr	r6, [sp, #0]
 80088fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80088fc:	e728      	b.n	8008750 <_dtoa_r+0x730>
 80088fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008902:	e751      	b.n	80087a8 <_dtoa_r+0x788>
 8008904:	9a08      	ldr	r2, [sp, #32]
 8008906:	9902      	ldr	r1, [sp, #8]
 8008908:	e750      	b.n	80087ac <_dtoa_r+0x78c>
 800890a:	f8cd 8008 	str.w	r8, [sp, #8]
 800890e:	e751      	b.n	80087b4 <_dtoa_r+0x794>
 8008910:	2300      	movs	r3, #0
 8008912:	e779      	b.n	8008808 <_dtoa_r+0x7e8>
 8008914:	9b04      	ldr	r3, [sp, #16]
 8008916:	e777      	b.n	8008808 <_dtoa_r+0x7e8>
 8008918:	2300      	movs	r3, #0
 800891a:	9308      	str	r3, [sp, #32]
 800891c:	e779      	b.n	8008812 <_dtoa_r+0x7f2>
 800891e:	d093      	beq.n	8008848 <_dtoa_r+0x828>
 8008920:	9a00      	ldr	r2, [sp, #0]
 8008922:	331c      	adds	r3, #28
 8008924:	441a      	add	r2, r3
 8008926:	9200      	str	r2, [sp, #0]
 8008928:	9a06      	ldr	r2, [sp, #24]
 800892a:	441a      	add	r2, r3
 800892c:	441e      	add	r6, r3
 800892e:	9206      	str	r2, [sp, #24]
 8008930:	e78a      	b.n	8008848 <_dtoa_r+0x828>
 8008932:	4603      	mov	r3, r0
 8008934:	e7f4      	b.n	8008920 <_dtoa_r+0x900>
 8008936:	9b03      	ldr	r3, [sp, #12]
 8008938:	2b00      	cmp	r3, #0
 800893a:	46b8      	mov	r8, r7
 800893c:	dc20      	bgt.n	8008980 <_dtoa_r+0x960>
 800893e:	469b      	mov	fp, r3
 8008940:	9b07      	ldr	r3, [sp, #28]
 8008942:	2b02      	cmp	r3, #2
 8008944:	dd1e      	ble.n	8008984 <_dtoa_r+0x964>
 8008946:	f1bb 0f00 	cmp.w	fp, #0
 800894a:	f47f adb1 	bne.w	80084b0 <_dtoa_r+0x490>
 800894e:	4621      	mov	r1, r4
 8008950:	465b      	mov	r3, fp
 8008952:	2205      	movs	r2, #5
 8008954:	4648      	mov	r0, r9
 8008956:	f000 fc39 	bl	80091cc <__multadd>
 800895a:	4601      	mov	r1, r0
 800895c:	4604      	mov	r4, r0
 800895e:	9802      	ldr	r0, [sp, #8]
 8008960:	f000 fe44 	bl	80095ec <__mcmp>
 8008964:	2800      	cmp	r0, #0
 8008966:	f77f ada3 	ble.w	80084b0 <_dtoa_r+0x490>
 800896a:	4656      	mov	r6, sl
 800896c:	2331      	movs	r3, #49	@ 0x31
 800896e:	f806 3b01 	strb.w	r3, [r6], #1
 8008972:	f108 0801 	add.w	r8, r8, #1
 8008976:	e59f      	b.n	80084b8 <_dtoa_r+0x498>
 8008978:	9c03      	ldr	r4, [sp, #12]
 800897a:	46b8      	mov	r8, r7
 800897c:	4625      	mov	r5, r4
 800897e:	e7f4      	b.n	800896a <_dtoa_r+0x94a>
 8008980:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 8101 	beq.w	8008b8e <_dtoa_r+0xb6e>
 800898c:	2e00      	cmp	r6, #0
 800898e:	dd05      	ble.n	800899c <_dtoa_r+0x97c>
 8008990:	4629      	mov	r1, r5
 8008992:	4632      	mov	r2, r6
 8008994:	4648      	mov	r0, r9
 8008996:	f000 fdbd 	bl	8009514 <__lshift>
 800899a:	4605      	mov	r5, r0
 800899c:	9b08      	ldr	r3, [sp, #32]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d05c      	beq.n	8008a5c <_dtoa_r+0xa3c>
 80089a2:	6869      	ldr	r1, [r5, #4]
 80089a4:	4648      	mov	r0, r9
 80089a6:	f000 fbaf 	bl	8009108 <_Balloc>
 80089aa:	4606      	mov	r6, r0
 80089ac:	b928      	cbnz	r0, 80089ba <_dtoa_r+0x99a>
 80089ae:	4b82      	ldr	r3, [pc, #520]	@ (8008bb8 <_dtoa_r+0xb98>)
 80089b0:	4602      	mov	r2, r0
 80089b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089b6:	f7ff bb4a 	b.w	800804e <_dtoa_r+0x2e>
 80089ba:	692a      	ldr	r2, [r5, #16]
 80089bc:	3202      	adds	r2, #2
 80089be:	0092      	lsls	r2, r2, #2
 80089c0:	f105 010c 	add.w	r1, r5, #12
 80089c4:	300c      	adds	r0, #12
 80089c6:	f7ff fa75 	bl	8007eb4 <memcpy>
 80089ca:	2201      	movs	r2, #1
 80089cc:	4631      	mov	r1, r6
 80089ce:	4648      	mov	r0, r9
 80089d0:	f000 fda0 	bl	8009514 <__lshift>
 80089d4:	f10a 0301 	add.w	r3, sl, #1
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	eb0a 030b 	add.w	r3, sl, fp
 80089de:	9308      	str	r3, [sp, #32]
 80089e0:	9b04      	ldr	r3, [sp, #16]
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	462f      	mov	r7, r5
 80089e8:	9306      	str	r3, [sp, #24]
 80089ea:	4605      	mov	r5, r0
 80089ec:	9b00      	ldr	r3, [sp, #0]
 80089ee:	9802      	ldr	r0, [sp, #8]
 80089f0:	4621      	mov	r1, r4
 80089f2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80089f6:	f7ff fa89 	bl	8007f0c <quorem>
 80089fa:	4603      	mov	r3, r0
 80089fc:	3330      	adds	r3, #48	@ 0x30
 80089fe:	9003      	str	r0, [sp, #12]
 8008a00:	4639      	mov	r1, r7
 8008a02:	9802      	ldr	r0, [sp, #8]
 8008a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a06:	f000 fdf1 	bl	80095ec <__mcmp>
 8008a0a:	462a      	mov	r2, r5
 8008a0c:	9004      	str	r0, [sp, #16]
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4648      	mov	r0, r9
 8008a12:	f000 fe07 	bl	8009624 <__mdiff>
 8008a16:	68c2      	ldr	r2, [r0, #12]
 8008a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	bb02      	cbnz	r2, 8008a60 <_dtoa_r+0xa40>
 8008a1e:	4601      	mov	r1, r0
 8008a20:	9802      	ldr	r0, [sp, #8]
 8008a22:	f000 fde3 	bl	80095ec <__mcmp>
 8008a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a28:	4602      	mov	r2, r0
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4648      	mov	r0, r9
 8008a2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a32:	f000 fba9 	bl	8009188 <_Bfree>
 8008a36:	9b07      	ldr	r3, [sp, #28]
 8008a38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008a3a:	9e00      	ldr	r6, [sp, #0]
 8008a3c:	ea42 0103 	orr.w	r1, r2, r3
 8008a40:	9b06      	ldr	r3, [sp, #24]
 8008a42:	4319      	orrs	r1, r3
 8008a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a46:	d10d      	bne.n	8008a64 <_dtoa_r+0xa44>
 8008a48:	2b39      	cmp	r3, #57	@ 0x39
 8008a4a:	d027      	beq.n	8008a9c <_dtoa_r+0xa7c>
 8008a4c:	9a04      	ldr	r2, [sp, #16]
 8008a4e:	2a00      	cmp	r2, #0
 8008a50:	dd01      	ble.n	8008a56 <_dtoa_r+0xa36>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	3331      	adds	r3, #49	@ 0x31
 8008a56:	f88b 3000 	strb.w	r3, [fp]
 8008a5a:	e52e      	b.n	80084ba <_dtoa_r+0x49a>
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	e7b9      	b.n	80089d4 <_dtoa_r+0x9b4>
 8008a60:	2201      	movs	r2, #1
 8008a62:	e7e2      	b.n	8008a2a <_dtoa_r+0xa0a>
 8008a64:	9904      	ldr	r1, [sp, #16]
 8008a66:	2900      	cmp	r1, #0
 8008a68:	db04      	blt.n	8008a74 <_dtoa_r+0xa54>
 8008a6a:	9807      	ldr	r0, [sp, #28]
 8008a6c:	4301      	orrs	r1, r0
 8008a6e:	9806      	ldr	r0, [sp, #24]
 8008a70:	4301      	orrs	r1, r0
 8008a72:	d120      	bne.n	8008ab6 <_dtoa_r+0xa96>
 8008a74:	2a00      	cmp	r2, #0
 8008a76:	ddee      	ble.n	8008a56 <_dtoa_r+0xa36>
 8008a78:	9902      	ldr	r1, [sp, #8]
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	4648      	mov	r0, r9
 8008a80:	f000 fd48 	bl	8009514 <__lshift>
 8008a84:	4621      	mov	r1, r4
 8008a86:	9002      	str	r0, [sp, #8]
 8008a88:	f000 fdb0 	bl	80095ec <__mcmp>
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	9b00      	ldr	r3, [sp, #0]
 8008a90:	dc02      	bgt.n	8008a98 <_dtoa_r+0xa78>
 8008a92:	d1e0      	bne.n	8008a56 <_dtoa_r+0xa36>
 8008a94:	07da      	lsls	r2, r3, #31
 8008a96:	d5de      	bpl.n	8008a56 <_dtoa_r+0xa36>
 8008a98:	2b39      	cmp	r3, #57	@ 0x39
 8008a9a:	d1da      	bne.n	8008a52 <_dtoa_r+0xa32>
 8008a9c:	2339      	movs	r3, #57	@ 0x39
 8008a9e:	f88b 3000 	strb.w	r3, [fp]
 8008aa2:	4633      	mov	r3, r6
 8008aa4:	461e      	mov	r6, r3
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008aac:	2a39      	cmp	r2, #57	@ 0x39
 8008aae:	d04e      	beq.n	8008b4e <_dtoa_r+0xb2e>
 8008ab0:	3201      	adds	r2, #1
 8008ab2:	701a      	strb	r2, [r3, #0]
 8008ab4:	e501      	b.n	80084ba <_dtoa_r+0x49a>
 8008ab6:	2a00      	cmp	r2, #0
 8008ab8:	dd03      	ble.n	8008ac2 <_dtoa_r+0xaa2>
 8008aba:	2b39      	cmp	r3, #57	@ 0x39
 8008abc:	d0ee      	beq.n	8008a9c <_dtoa_r+0xa7c>
 8008abe:	3301      	adds	r3, #1
 8008ac0:	e7c9      	b.n	8008a56 <_dtoa_r+0xa36>
 8008ac2:	9a00      	ldr	r2, [sp, #0]
 8008ac4:	9908      	ldr	r1, [sp, #32]
 8008ac6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008aca:	428a      	cmp	r2, r1
 8008acc:	d028      	beq.n	8008b20 <_dtoa_r+0xb00>
 8008ace:	9902      	ldr	r1, [sp, #8]
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	220a      	movs	r2, #10
 8008ad4:	4648      	mov	r0, r9
 8008ad6:	f000 fb79 	bl	80091cc <__multadd>
 8008ada:	42af      	cmp	r7, r5
 8008adc:	9002      	str	r0, [sp, #8]
 8008ade:	f04f 0300 	mov.w	r3, #0
 8008ae2:	f04f 020a 	mov.w	r2, #10
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	4648      	mov	r0, r9
 8008aea:	d107      	bne.n	8008afc <_dtoa_r+0xadc>
 8008aec:	f000 fb6e 	bl	80091cc <__multadd>
 8008af0:	4607      	mov	r7, r0
 8008af2:	4605      	mov	r5, r0
 8008af4:	9b00      	ldr	r3, [sp, #0]
 8008af6:	3301      	adds	r3, #1
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	e777      	b.n	80089ec <_dtoa_r+0x9cc>
 8008afc:	f000 fb66 	bl	80091cc <__multadd>
 8008b00:	4629      	mov	r1, r5
 8008b02:	4607      	mov	r7, r0
 8008b04:	2300      	movs	r3, #0
 8008b06:	220a      	movs	r2, #10
 8008b08:	4648      	mov	r0, r9
 8008b0a:	f000 fb5f 	bl	80091cc <__multadd>
 8008b0e:	4605      	mov	r5, r0
 8008b10:	e7f0      	b.n	8008af4 <_dtoa_r+0xad4>
 8008b12:	f1bb 0f00 	cmp.w	fp, #0
 8008b16:	bfcc      	ite	gt
 8008b18:	465e      	movgt	r6, fp
 8008b1a:	2601      	movle	r6, #1
 8008b1c:	4456      	add	r6, sl
 8008b1e:	2700      	movs	r7, #0
 8008b20:	9902      	ldr	r1, [sp, #8]
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	2201      	movs	r2, #1
 8008b26:	4648      	mov	r0, r9
 8008b28:	f000 fcf4 	bl	8009514 <__lshift>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	9002      	str	r0, [sp, #8]
 8008b30:	f000 fd5c 	bl	80095ec <__mcmp>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	dcb4      	bgt.n	8008aa2 <_dtoa_r+0xa82>
 8008b38:	d102      	bne.n	8008b40 <_dtoa_r+0xb20>
 8008b3a:	9b00      	ldr	r3, [sp, #0]
 8008b3c:	07db      	lsls	r3, r3, #31
 8008b3e:	d4b0      	bmi.n	8008aa2 <_dtoa_r+0xa82>
 8008b40:	4633      	mov	r3, r6
 8008b42:	461e      	mov	r6, r3
 8008b44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b48:	2a30      	cmp	r2, #48	@ 0x30
 8008b4a:	d0fa      	beq.n	8008b42 <_dtoa_r+0xb22>
 8008b4c:	e4b5      	b.n	80084ba <_dtoa_r+0x49a>
 8008b4e:	459a      	cmp	sl, r3
 8008b50:	d1a8      	bne.n	8008aa4 <_dtoa_r+0xa84>
 8008b52:	2331      	movs	r3, #49	@ 0x31
 8008b54:	f108 0801 	add.w	r8, r8, #1
 8008b58:	f88a 3000 	strb.w	r3, [sl]
 8008b5c:	e4ad      	b.n	80084ba <_dtoa_r+0x49a>
 8008b5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008bbc <_dtoa_r+0xb9c>
 8008b64:	b11b      	cbz	r3, 8008b6e <_dtoa_r+0xb4e>
 8008b66:	f10a 0308 	add.w	r3, sl, #8
 8008b6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	4650      	mov	r0, sl
 8008b70:	b017      	add	sp, #92	@ 0x5c
 8008b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b76:	9b07      	ldr	r3, [sp, #28]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	f77f ae2e 	ble.w	80087da <_dtoa_r+0x7ba>
 8008b7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008b80:	9308      	str	r3, [sp, #32]
 8008b82:	2001      	movs	r0, #1
 8008b84:	e64d      	b.n	8008822 <_dtoa_r+0x802>
 8008b86:	f1bb 0f00 	cmp.w	fp, #0
 8008b8a:	f77f aed9 	ble.w	8008940 <_dtoa_r+0x920>
 8008b8e:	4656      	mov	r6, sl
 8008b90:	9802      	ldr	r0, [sp, #8]
 8008b92:	4621      	mov	r1, r4
 8008b94:	f7ff f9ba 	bl	8007f0c <quorem>
 8008b98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008b9c:	f806 3b01 	strb.w	r3, [r6], #1
 8008ba0:	eba6 020a 	sub.w	r2, r6, sl
 8008ba4:	4593      	cmp	fp, r2
 8008ba6:	ddb4      	ble.n	8008b12 <_dtoa_r+0xaf2>
 8008ba8:	9902      	ldr	r1, [sp, #8]
 8008baa:	2300      	movs	r3, #0
 8008bac:	220a      	movs	r2, #10
 8008bae:	4648      	mov	r0, r9
 8008bb0:	f000 fb0c 	bl	80091cc <__multadd>
 8008bb4:	9002      	str	r0, [sp, #8]
 8008bb6:	e7eb      	b.n	8008b90 <_dtoa_r+0xb70>
 8008bb8:	08009eb0 	.word	0x08009eb0
 8008bbc:	08009e34 	.word	0x08009e34

08008bc0 <__sfputc_r>:
 8008bc0:	6893      	ldr	r3, [r2, #8]
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	b410      	push	{r4}
 8008bc8:	6093      	str	r3, [r2, #8]
 8008bca:	da08      	bge.n	8008bde <__sfputc_r+0x1e>
 8008bcc:	6994      	ldr	r4, [r2, #24]
 8008bce:	42a3      	cmp	r3, r4
 8008bd0:	db01      	blt.n	8008bd6 <__sfputc_r+0x16>
 8008bd2:	290a      	cmp	r1, #10
 8008bd4:	d103      	bne.n	8008bde <__sfputc_r+0x1e>
 8008bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bda:	f000 be65 	b.w	80098a8 <__swbuf_r>
 8008bde:	6813      	ldr	r3, [r2, #0]
 8008be0:	1c58      	adds	r0, r3, #1
 8008be2:	6010      	str	r0, [r2, #0]
 8008be4:	7019      	strb	r1, [r3, #0]
 8008be6:	4608      	mov	r0, r1
 8008be8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <__sfputs_r>:
 8008bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf0:	4606      	mov	r6, r0
 8008bf2:	460f      	mov	r7, r1
 8008bf4:	4614      	mov	r4, r2
 8008bf6:	18d5      	adds	r5, r2, r3
 8008bf8:	42ac      	cmp	r4, r5
 8008bfa:	d101      	bne.n	8008c00 <__sfputs_r+0x12>
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	e007      	b.n	8008c10 <__sfputs_r+0x22>
 8008c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c04:	463a      	mov	r2, r7
 8008c06:	4630      	mov	r0, r6
 8008c08:	f7ff ffda 	bl	8008bc0 <__sfputc_r>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d1f3      	bne.n	8008bf8 <__sfputs_r+0xa>
 8008c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c14 <_vfiprintf_r>:
 8008c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c18:	460d      	mov	r5, r1
 8008c1a:	b09d      	sub	sp, #116	@ 0x74
 8008c1c:	4614      	mov	r4, r2
 8008c1e:	4698      	mov	r8, r3
 8008c20:	4606      	mov	r6, r0
 8008c22:	b118      	cbz	r0, 8008c2c <_vfiprintf_r+0x18>
 8008c24:	6a03      	ldr	r3, [r0, #32]
 8008c26:	b90b      	cbnz	r3, 8008c2c <_vfiprintf_r+0x18>
 8008c28:	f7ff f8c2 	bl	8007db0 <__sinit>
 8008c2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c2e:	07d9      	lsls	r1, r3, #31
 8008c30:	d405      	bmi.n	8008c3e <_vfiprintf_r+0x2a>
 8008c32:	89ab      	ldrh	r3, [r5, #12]
 8008c34:	059a      	lsls	r2, r3, #22
 8008c36:	d402      	bmi.n	8008c3e <_vfiprintf_r+0x2a>
 8008c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c3a:	f7ff f934 	bl	8007ea6 <__retarget_lock_acquire_recursive>
 8008c3e:	89ab      	ldrh	r3, [r5, #12]
 8008c40:	071b      	lsls	r3, r3, #28
 8008c42:	d501      	bpl.n	8008c48 <_vfiprintf_r+0x34>
 8008c44:	692b      	ldr	r3, [r5, #16]
 8008c46:	b99b      	cbnz	r3, 8008c70 <_vfiprintf_r+0x5c>
 8008c48:	4629      	mov	r1, r5
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f000 fe6a 	bl	8009924 <__swsetup_r>
 8008c50:	b170      	cbz	r0, 8008c70 <_vfiprintf_r+0x5c>
 8008c52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c54:	07dc      	lsls	r4, r3, #31
 8008c56:	d504      	bpl.n	8008c62 <_vfiprintf_r+0x4e>
 8008c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c5c:	b01d      	add	sp, #116	@ 0x74
 8008c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c62:	89ab      	ldrh	r3, [r5, #12]
 8008c64:	0598      	lsls	r0, r3, #22
 8008c66:	d4f7      	bmi.n	8008c58 <_vfiprintf_r+0x44>
 8008c68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c6a:	f7ff f91d 	bl	8007ea8 <__retarget_lock_release_recursive>
 8008c6e:	e7f3      	b.n	8008c58 <_vfiprintf_r+0x44>
 8008c70:	2300      	movs	r3, #0
 8008c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c74:	2320      	movs	r3, #32
 8008c76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c7e:	2330      	movs	r3, #48	@ 0x30
 8008c80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e30 <_vfiprintf_r+0x21c>
 8008c84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c88:	f04f 0901 	mov.w	r9, #1
 8008c8c:	4623      	mov	r3, r4
 8008c8e:	469a      	mov	sl, r3
 8008c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c94:	b10a      	cbz	r2, 8008c9a <_vfiprintf_r+0x86>
 8008c96:	2a25      	cmp	r2, #37	@ 0x25
 8008c98:	d1f9      	bne.n	8008c8e <_vfiprintf_r+0x7a>
 8008c9a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c9e:	d00b      	beq.n	8008cb8 <_vfiprintf_r+0xa4>
 8008ca0:	465b      	mov	r3, fp
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f7ff ffa1 	bl	8008bee <__sfputs_r>
 8008cac:	3001      	adds	r0, #1
 8008cae:	f000 80a7 	beq.w	8008e00 <_vfiprintf_r+0x1ec>
 8008cb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cb4:	445a      	add	r2, fp
 8008cb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 809f 	beq.w	8008e00 <_vfiprintf_r+0x1ec>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ccc:	f10a 0a01 	add.w	sl, sl, #1
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	9307      	str	r3, [sp, #28]
 8008cd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cda:	4654      	mov	r4, sl
 8008cdc:	2205      	movs	r2, #5
 8008cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce2:	4853      	ldr	r0, [pc, #332]	@ (8008e30 <_vfiprintf_r+0x21c>)
 8008ce4:	f7f7 fa74 	bl	80001d0 <memchr>
 8008ce8:	9a04      	ldr	r2, [sp, #16]
 8008cea:	b9d8      	cbnz	r0, 8008d24 <_vfiprintf_r+0x110>
 8008cec:	06d1      	lsls	r1, r2, #27
 8008cee:	bf44      	itt	mi
 8008cf0:	2320      	movmi	r3, #32
 8008cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cf6:	0713      	lsls	r3, r2, #28
 8008cf8:	bf44      	itt	mi
 8008cfa:	232b      	movmi	r3, #43	@ 0x2b
 8008cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d00:	f89a 3000 	ldrb.w	r3, [sl]
 8008d04:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d06:	d015      	beq.n	8008d34 <_vfiprintf_r+0x120>
 8008d08:	9a07      	ldr	r2, [sp, #28]
 8008d0a:	4654      	mov	r4, sl
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	f04f 0c0a 	mov.w	ip, #10
 8008d12:	4621      	mov	r1, r4
 8008d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d18:	3b30      	subs	r3, #48	@ 0x30
 8008d1a:	2b09      	cmp	r3, #9
 8008d1c:	d94b      	bls.n	8008db6 <_vfiprintf_r+0x1a2>
 8008d1e:	b1b0      	cbz	r0, 8008d4e <_vfiprintf_r+0x13a>
 8008d20:	9207      	str	r2, [sp, #28]
 8008d22:	e014      	b.n	8008d4e <_vfiprintf_r+0x13a>
 8008d24:	eba0 0308 	sub.w	r3, r0, r8
 8008d28:	fa09 f303 	lsl.w	r3, r9, r3
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	9304      	str	r3, [sp, #16]
 8008d30:	46a2      	mov	sl, r4
 8008d32:	e7d2      	b.n	8008cda <_vfiprintf_r+0xc6>
 8008d34:	9b03      	ldr	r3, [sp, #12]
 8008d36:	1d19      	adds	r1, r3, #4
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	9103      	str	r1, [sp, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	bfbb      	ittet	lt
 8008d40:	425b      	neglt	r3, r3
 8008d42:	f042 0202 	orrlt.w	r2, r2, #2
 8008d46:	9307      	strge	r3, [sp, #28]
 8008d48:	9307      	strlt	r3, [sp, #28]
 8008d4a:	bfb8      	it	lt
 8008d4c:	9204      	strlt	r2, [sp, #16]
 8008d4e:	7823      	ldrb	r3, [r4, #0]
 8008d50:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d52:	d10a      	bne.n	8008d6a <_vfiprintf_r+0x156>
 8008d54:	7863      	ldrb	r3, [r4, #1]
 8008d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d58:	d132      	bne.n	8008dc0 <_vfiprintf_r+0x1ac>
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	1d1a      	adds	r2, r3, #4
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	9203      	str	r2, [sp, #12]
 8008d62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d66:	3402      	adds	r4, #2
 8008d68:	9305      	str	r3, [sp, #20]
 8008d6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e40 <_vfiprintf_r+0x22c>
 8008d6e:	7821      	ldrb	r1, [r4, #0]
 8008d70:	2203      	movs	r2, #3
 8008d72:	4650      	mov	r0, sl
 8008d74:	f7f7 fa2c 	bl	80001d0 <memchr>
 8008d78:	b138      	cbz	r0, 8008d8a <_vfiprintf_r+0x176>
 8008d7a:	9b04      	ldr	r3, [sp, #16]
 8008d7c:	eba0 000a 	sub.w	r0, r0, sl
 8008d80:	2240      	movs	r2, #64	@ 0x40
 8008d82:	4082      	lsls	r2, r0
 8008d84:	4313      	orrs	r3, r2
 8008d86:	3401      	adds	r4, #1
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8e:	4829      	ldr	r0, [pc, #164]	@ (8008e34 <_vfiprintf_r+0x220>)
 8008d90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d94:	2206      	movs	r2, #6
 8008d96:	f7f7 fa1b 	bl	80001d0 <memchr>
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	d03f      	beq.n	8008e1e <_vfiprintf_r+0x20a>
 8008d9e:	4b26      	ldr	r3, [pc, #152]	@ (8008e38 <_vfiprintf_r+0x224>)
 8008da0:	bb1b      	cbnz	r3, 8008dea <_vfiprintf_r+0x1d6>
 8008da2:	9b03      	ldr	r3, [sp, #12]
 8008da4:	3307      	adds	r3, #7
 8008da6:	f023 0307 	bic.w	r3, r3, #7
 8008daa:	3308      	adds	r3, #8
 8008dac:	9303      	str	r3, [sp, #12]
 8008dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db0:	443b      	add	r3, r7
 8008db2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db4:	e76a      	b.n	8008c8c <_vfiprintf_r+0x78>
 8008db6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dba:	460c      	mov	r4, r1
 8008dbc:	2001      	movs	r0, #1
 8008dbe:	e7a8      	b.n	8008d12 <_vfiprintf_r+0xfe>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	3401      	adds	r4, #1
 8008dc4:	9305      	str	r3, [sp, #20]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	f04f 0c0a 	mov.w	ip, #10
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dd2:	3a30      	subs	r2, #48	@ 0x30
 8008dd4:	2a09      	cmp	r2, #9
 8008dd6:	d903      	bls.n	8008de0 <_vfiprintf_r+0x1cc>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d0c6      	beq.n	8008d6a <_vfiprintf_r+0x156>
 8008ddc:	9105      	str	r1, [sp, #20]
 8008dde:	e7c4      	b.n	8008d6a <_vfiprintf_r+0x156>
 8008de0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008de4:	4604      	mov	r4, r0
 8008de6:	2301      	movs	r3, #1
 8008de8:	e7f0      	b.n	8008dcc <_vfiprintf_r+0x1b8>
 8008dea:	ab03      	add	r3, sp, #12
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	462a      	mov	r2, r5
 8008df0:	4b12      	ldr	r3, [pc, #72]	@ (8008e3c <_vfiprintf_r+0x228>)
 8008df2:	a904      	add	r1, sp, #16
 8008df4:	4630      	mov	r0, r6
 8008df6:	f7fe fb99 	bl	800752c <_printf_float>
 8008dfa:	4607      	mov	r7, r0
 8008dfc:	1c78      	adds	r0, r7, #1
 8008dfe:	d1d6      	bne.n	8008dae <_vfiprintf_r+0x19a>
 8008e00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e02:	07d9      	lsls	r1, r3, #31
 8008e04:	d405      	bmi.n	8008e12 <_vfiprintf_r+0x1fe>
 8008e06:	89ab      	ldrh	r3, [r5, #12]
 8008e08:	059a      	lsls	r2, r3, #22
 8008e0a:	d402      	bmi.n	8008e12 <_vfiprintf_r+0x1fe>
 8008e0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e0e:	f7ff f84b 	bl	8007ea8 <__retarget_lock_release_recursive>
 8008e12:	89ab      	ldrh	r3, [r5, #12]
 8008e14:	065b      	lsls	r3, r3, #25
 8008e16:	f53f af1f 	bmi.w	8008c58 <_vfiprintf_r+0x44>
 8008e1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e1c:	e71e      	b.n	8008c5c <_vfiprintf_r+0x48>
 8008e1e:	ab03      	add	r3, sp, #12
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	462a      	mov	r2, r5
 8008e24:	4b05      	ldr	r3, [pc, #20]	@ (8008e3c <_vfiprintf_r+0x228>)
 8008e26:	a904      	add	r1, sp, #16
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f7fe fe17 	bl	8007a5c <_printf_i>
 8008e2e:	e7e4      	b.n	8008dfa <_vfiprintf_r+0x1e6>
 8008e30:	08009ec1 	.word	0x08009ec1
 8008e34:	08009ecb 	.word	0x08009ecb
 8008e38:	0800752d 	.word	0x0800752d
 8008e3c:	08008bef 	.word	0x08008bef
 8008e40:	08009ec7 	.word	0x08009ec7

08008e44 <malloc>:
 8008e44:	4b02      	ldr	r3, [pc, #8]	@ (8008e50 <malloc+0xc>)
 8008e46:	4601      	mov	r1, r0
 8008e48:	6818      	ldr	r0, [r3, #0]
 8008e4a:	f000 b825 	b.w	8008e98 <_malloc_r>
 8008e4e:	bf00      	nop
 8008e50:	200000dc 	.word	0x200000dc

08008e54 <sbrk_aligned>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	4e0f      	ldr	r6, [pc, #60]	@ (8008e94 <sbrk_aligned+0x40>)
 8008e58:	460c      	mov	r4, r1
 8008e5a:	6831      	ldr	r1, [r6, #0]
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	b911      	cbnz	r1, 8008e66 <sbrk_aligned+0x12>
 8008e60:	f000 fe4c 	bl	8009afc <_sbrk_r>
 8008e64:	6030      	str	r0, [r6, #0]
 8008e66:	4621      	mov	r1, r4
 8008e68:	4628      	mov	r0, r5
 8008e6a:	f000 fe47 	bl	8009afc <_sbrk_r>
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	d103      	bne.n	8008e7a <sbrk_aligned+0x26>
 8008e72:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008e76:	4620      	mov	r0, r4
 8008e78:	bd70      	pop	{r4, r5, r6, pc}
 8008e7a:	1cc4      	adds	r4, r0, #3
 8008e7c:	f024 0403 	bic.w	r4, r4, #3
 8008e80:	42a0      	cmp	r0, r4
 8008e82:	d0f8      	beq.n	8008e76 <sbrk_aligned+0x22>
 8008e84:	1a21      	subs	r1, r4, r0
 8008e86:	4628      	mov	r0, r5
 8008e88:	f000 fe38 	bl	8009afc <_sbrk_r>
 8008e8c:	3001      	adds	r0, #1
 8008e8e:	d1f2      	bne.n	8008e76 <sbrk_aligned+0x22>
 8008e90:	e7ef      	b.n	8008e72 <sbrk_aligned+0x1e>
 8008e92:	bf00      	nop
 8008e94:	20000bb8 	.word	0x20000bb8

08008e98 <_malloc_r>:
 8008e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e9c:	1ccd      	adds	r5, r1, #3
 8008e9e:	f025 0503 	bic.w	r5, r5, #3
 8008ea2:	3508      	adds	r5, #8
 8008ea4:	2d0c      	cmp	r5, #12
 8008ea6:	bf38      	it	cc
 8008ea8:	250c      	movcc	r5, #12
 8008eaa:	2d00      	cmp	r5, #0
 8008eac:	4606      	mov	r6, r0
 8008eae:	db01      	blt.n	8008eb4 <_malloc_r+0x1c>
 8008eb0:	42a9      	cmp	r1, r5
 8008eb2:	d904      	bls.n	8008ebe <_malloc_r+0x26>
 8008eb4:	230c      	movs	r3, #12
 8008eb6:	6033      	str	r3, [r6, #0]
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ebe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f94 <_malloc_r+0xfc>
 8008ec2:	f000 f915 	bl	80090f0 <__malloc_lock>
 8008ec6:	f8d8 3000 	ldr.w	r3, [r8]
 8008eca:	461c      	mov	r4, r3
 8008ecc:	bb44      	cbnz	r4, 8008f20 <_malloc_r+0x88>
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f7ff ffbf 	bl	8008e54 <sbrk_aligned>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	4604      	mov	r4, r0
 8008eda:	d158      	bne.n	8008f8e <_malloc_r+0xf6>
 8008edc:	f8d8 4000 	ldr.w	r4, [r8]
 8008ee0:	4627      	mov	r7, r4
 8008ee2:	2f00      	cmp	r7, #0
 8008ee4:	d143      	bne.n	8008f6e <_malloc_r+0xd6>
 8008ee6:	2c00      	cmp	r4, #0
 8008ee8:	d04b      	beq.n	8008f82 <_malloc_r+0xea>
 8008eea:	6823      	ldr	r3, [r4, #0]
 8008eec:	4639      	mov	r1, r7
 8008eee:	4630      	mov	r0, r6
 8008ef0:	eb04 0903 	add.w	r9, r4, r3
 8008ef4:	f000 fe02 	bl	8009afc <_sbrk_r>
 8008ef8:	4581      	cmp	r9, r0
 8008efa:	d142      	bne.n	8008f82 <_malloc_r+0xea>
 8008efc:	6821      	ldr	r1, [r4, #0]
 8008efe:	1a6d      	subs	r5, r5, r1
 8008f00:	4629      	mov	r1, r5
 8008f02:	4630      	mov	r0, r6
 8008f04:	f7ff ffa6 	bl	8008e54 <sbrk_aligned>
 8008f08:	3001      	adds	r0, #1
 8008f0a:	d03a      	beq.n	8008f82 <_malloc_r+0xea>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	442b      	add	r3, r5
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	f8d8 3000 	ldr.w	r3, [r8]
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	bb62      	cbnz	r2, 8008f74 <_malloc_r+0xdc>
 8008f1a:	f8c8 7000 	str.w	r7, [r8]
 8008f1e:	e00f      	b.n	8008f40 <_malloc_r+0xa8>
 8008f20:	6822      	ldr	r2, [r4, #0]
 8008f22:	1b52      	subs	r2, r2, r5
 8008f24:	d420      	bmi.n	8008f68 <_malloc_r+0xd0>
 8008f26:	2a0b      	cmp	r2, #11
 8008f28:	d917      	bls.n	8008f5a <_malloc_r+0xc2>
 8008f2a:	1961      	adds	r1, r4, r5
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	6025      	str	r5, [r4, #0]
 8008f30:	bf18      	it	ne
 8008f32:	6059      	strne	r1, [r3, #4]
 8008f34:	6863      	ldr	r3, [r4, #4]
 8008f36:	bf08      	it	eq
 8008f38:	f8c8 1000 	streq.w	r1, [r8]
 8008f3c:	5162      	str	r2, [r4, r5]
 8008f3e:	604b      	str	r3, [r1, #4]
 8008f40:	4630      	mov	r0, r6
 8008f42:	f000 f8db 	bl	80090fc <__malloc_unlock>
 8008f46:	f104 000b 	add.w	r0, r4, #11
 8008f4a:	1d23      	adds	r3, r4, #4
 8008f4c:	f020 0007 	bic.w	r0, r0, #7
 8008f50:	1ac2      	subs	r2, r0, r3
 8008f52:	bf1c      	itt	ne
 8008f54:	1a1b      	subne	r3, r3, r0
 8008f56:	50a3      	strne	r3, [r4, r2]
 8008f58:	e7af      	b.n	8008eba <_malloc_r+0x22>
 8008f5a:	6862      	ldr	r2, [r4, #4]
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	bf0c      	ite	eq
 8008f60:	f8c8 2000 	streq.w	r2, [r8]
 8008f64:	605a      	strne	r2, [r3, #4]
 8008f66:	e7eb      	b.n	8008f40 <_malloc_r+0xa8>
 8008f68:	4623      	mov	r3, r4
 8008f6a:	6864      	ldr	r4, [r4, #4]
 8008f6c:	e7ae      	b.n	8008ecc <_malloc_r+0x34>
 8008f6e:	463c      	mov	r4, r7
 8008f70:	687f      	ldr	r7, [r7, #4]
 8008f72:	e7b6      	b.n	8008ee2 <_malloc_r+0x4a>
 8008f74:	461a      	mov	r2, r3
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	42a3      	cmp	r3, r4
 8008f7a:	d1fb      	bne.n	8008f74 <_malloc_r+0xdc>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	6053      	str	r3, [r2, #4]
 8008f80:	e7de      	b.n	8008f40 <_malloc_r+0xa8>
 8008f82:	230c      	movs	r3, #12
 8008f84:	6033      	str	r3, [r6, #0]
 8008f86:	4630      	mov	r0, r6
 8008f88:	f000 f8b8 	bl	80090fc <__malloc_unlock>
 8008f8c:	e794      	b.n	8008eb8 <_malloc_r+0x20>
 8008f8e:	6005      	str	r5, [r0, #0]
 8008f90:	e7d6      	b.n	8008f40 <_malloc_r+0xa8>
 8008f92:	bf00      	nop
 8008f94:	20000bbc 	.word	0x20000bbc

08008f98 <__sflush_r>:
 8008f98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa0:	0716      	lsls	r6, r2, #28
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	d454      	bmi.n	8009052 <__sflush_r+0xba>
 8008fa8:	684b      	ldr	r3, [r1, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	dc02      	bgt.n	8008fb4 <__sflush_r+0x1c>
 8008fae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	dd48      	ble.n	8009046 <__sflush_r+0xae>
 8008fb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fb6:	2e00      	cmp	r6, #0
 8008fb8:	d045      	beq.n	8009046 <__sflush_r+0xae>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008fc0:	682f      	ldr	r7, [r5, #0]
 8008fc2:	6a21      	ldr	r1, [r4, #32]
 8008fc4:	602b      	str	r3, [r5, #0]
 8008fc6:	d030      	beq.n	800902a <__sflush_r+0x92>
 8008fc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	0759      	lsls	r1, r3, #29
 8008fce:	d505      	bpl.n	8008fdc <__sflush_r+0x44>
 8008fd0:	6863      	ldr	r3, [r4, #4]
 8008fd2:	1ad2      	subs	r2, r2, r3
 8008fd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008fd6:	b10b      	cbz	r3, 8008fdc <__sflush_r+0x44>
 8008fd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008fda:	1ad2      	subs	r2, r2, r3
 8008fdc:	2300      	movs	r3, #0
 8008fde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008fe0:	6a21      	ldr	r1, [r4, #32]
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	47b0      	blx	r6
 8008fe6:	1c43      	adds	r3, r0, #1
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	d106      	bne.n	8008ffa <__sflush_r+0x62>
 8008fec:	6829      	ldr	r1, [r5, #0]
 8008fee:	291d      	cmp	r1, #29
 8008ff0:	d82b      	bhi.n	800904a <__sflush_r+0xb2>
 8008ff2:	4a2a      	ldr	r2, [pc, #168]	@ (800909c <__sflush_r+0x104>)
 8008ff4:	40ca      	lsrs	r2, r1
 8008ff6:	07d6      	lsls	r6, r2, #31
 8008ff8:	d527      	bpl.n	800904a <__sflush_r+0xb2>
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	6062      	str	r2, [r4, #4]
 8008ffe:	04d9      	lsls	r1, r3, #19
 8009000:	6922      	ldr	r2, [r4, #16]
 8009002:	6022      	str	r2, [r4, #0]
 8009004:	d504      	bpl.n	8009010 <__sflush_r+0x78>
 8009006:	1c42      	adds	r2, r0, #1
 8009008:	d101      	bne.n	800900e <__sflush_r+0x76>
 800900a:	682b      	ldr	r3, [r5, #0]
 800900c:	b903      	cbnz	r3, 8009010 <__sflush_r+0x78>
 800900e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009010:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009012:	602f      	str	r7, [r5, #0]
 8009014:	b1b9      	cbz	r1, 8009046 <__sflush_r+0xae>
 8009016:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800901a:	4299      	cmp	r1, r3
 800901c:	d002      	beq.n	8009024 <__sflush_r+0x8c>
 800901e:	4628      	mov	r0, r5
 8009020:	f000 fdcc 	bl	8009bbc <_free_r>
 8009024:	2300      	movs	r3, #0
 8009026:	6363      	str	r3, [r4, #52]	@ 0x34
 8009028:	e00d      	b.n	8009046 <__sflush_r+0xae>
 800902a:	2301      	movs	r3, #1
 800902c:	4628      	mov	r0, r5
 800902e:	47b0      	blx	r6
 8009030:	4602      	mov	r2, r0
 8009032:	1c50      	adds	r0, r2, #1
 8009034:	d1c9      	bne.n	8008fca <__sflush_r+0x32>
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d0c6      	beq.n	8008fca <__sflush_r+0x32>
 800903c:	2b1d      	cmp	r3, #29
 800903e:	d001      	beq.n	8009044 <__sflush_r+0xac>
 8009040:	2b16      	cmp	r3, #22
 8009042:	d11e      	bne.n	8009082 <__sflush_r+0xea>
 8009044:	602f      	str	r7, [r5, #0]
 8009046:	2000      	movs	r0, #0
 8009048:	e022      	b.n	8009090 <__sflush_r+0xf8>
 800904a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800904e:	b21b      	sxth	r3, r3
 8009050:	e01b      	b.n	800908a <__sflush_r+0xf2>
 8009052:	690f      	ldr	r7, [r1, #16]
 8009054:	2f00      	cmp	r7, #0
 8009056:	d0f6      	beq.n	8009046 <__sflush_r+0xae>
 8009058:	0793      	lsls	r3, r2, #30
 800905a:	680e      	ldr	r6, [r1, #0]
 800905c:	bf08      	it	eq
 800905e:	694b      	ldreq	r3, [r1, #20]
 8009060:	600f      	str	r7, [r1, #0]
 8009062:	bf18      	it	ne
 8009064:	2300      	movne	r3, #0
 8009066:	eba6 0807 	sub.w	r8, r6, r7
 800906a:	608b      	str	r3, [r1, #8]
 800906c:	f1b8 0f00 	cmp.w	r8, #0
 8009070:	dde9      	ble.n	8009046 <__sflush_r+0xae>
 8009072:	6a21      	ldr	r1, [r4, #32]
 8009074:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009076:	4643      	mov	r3, r8
 8009078:	463a      	mov	r2, r7
 800907a:	4628      	mov	r0, r5
 800907c:	47b0      	blx	r6
 800907e:	2800      	cmp	r0, #0
 8009080:	dc08      	bgt.n	8009094 <__sflush_r+0xfc>
 8009082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800908a:	81a3      	strh	r3, [r4, #12]
 800908c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009094:	4407      	add	r7, r0
 8009096:	eba8 0800 	sub.w	r8, r8, r0
 800909a:	e7e7      	b.n	800906c <__sflush_r+0xd4>
 800909c:	20400001 	.word	0x20400001

080090a0 <_fflush_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	690b      	ldr	r3, [r1, #16]
 80090a4:	4605      	mov	r5, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	b913      	cbnz	r3, 80090b0 <_fflush_r+0x10>
 80090aa:	2500      	movs	r5, #0
 80090ac:	4628      	mov	r0, r5
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	b118      	cbz	r0, 80090ba <_fflush_r+0x1a>
 80090b2:	6a03      	ldr	r3, [r0, #32]
 80090b4:	b90b      	cbnz	r3, 80090ba <_fflush_r+0x1a>
 80090b6:	f7fe fe7b 	bl	8007db0 <__sinit>
 80090ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d0f3      	beq.n	80090aa <_fflush_r+0xa>
 80090c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80090c4:	07d0      	lsls	r0, r2, #31
 80090c6:	d404      	bmi.n	80090d2 <_fflush_r+0x32>
 80090c8:	0599      	lsls	r1, r3, #22
 80090ca:	d402      	bmi.n	80090d2 <_fflush_r+0x32>
 80090cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090ce:	f7fe feea 	bl	8007ea6 <__retarget_lock_acquire_recursive>
 80090d2:	4628      	mov	r0, r5
 80090d4:	4621      	mov	r1, r4
 80090d6:	f7ff ff5f 	bl	8008f98 <__sflush_r>
 80090da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80090dc:	07da      	lsls	r2, r3, #31
 80090de:	4605      	mov	r5, r0
 80090e0:	d4e4      	bmi.n	80090ac <_fflush_r+0xc>
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	059b      	lsls	r3, r3, #22
 80090e6:	d4e1      	bmi.n	80090ac <_fflush_r+0xc>
 80090e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090ea:	f7fe fedd 	bl	8007ea8 <__retarget_lock_release_recursive>
 80090ee:	e7dd      	b.n	80090ac <_fflush_r+0xc>

080090f0 <__malloc_lock>:
 80090f0:	4801      	ldr	r0, [pc, #4]	@ (80090f8 <__malloc_lock+0x8>)
 80090f2:	f7fe bed8 	b.w	8007ea6 <__retarget_lock_acquire_recursive>
 80090f6:	bf00      	nop
 80090f8:	20000bb4 	.word	0x20000bb4

080090fc <__malloc_unlock>:
 80090fc:	4801      	ldr	r0, [pc, #4]	@ (8009104 <__malloc_unlock+0x8>)
 80090fe:	f7fe bed3 	b.w	8007ea8 <__retarget_lock_release_recursive>
 8009102:	bf00      	nop
 8009104:	20000bb4 	.word	0x20000bb4

08009108 <_Balloc>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	69c6      	ldr	r6, [r0, #28]
 800910c:	4604      	mov	r4, r0
 800910e:	460d      	mov	r5, r1
 8009110:	b976      	cbnz	r6, 8009130 <_Balloc+0x28>
 8009112:	2010      	movs	r0, #16
 8009114:	f7ff fe96 	bl	8008e44 <malloc>
 8009118:	4602      	mov	r2, r0
 800911a:	61e0      	str	r0, [r4, #28]
 800911c:	b920      	cbnz	r0, 8009128 <_Balloc+0x20>
 800911e:	4b18      	ldr	r3, [pc, #96]	@ (8009180 <_Balloc+0x78>)
 8009120:	4818      	ldr	r0, [pc, #96]	@ (8009184 <_Balloc+0x7c>)
 8009122:	216b      	movs	r1, #107	@ 0x6b
 8009124:	f7fe fed4 	bl	8007ed0 <__assert_func>
 8009128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800912c:	6006      	str	r6, [r0, #0]
 800912e:	60c6      	str	r6, [r0, #12]
 8009130:	69e6      	ldr	r6, [r4, #28]
 8009132:	68f3      	ldr	r3, [r6, #12]
 8009134:	b183      	cbz	r3, 8009158 <_Balloc+0x50>
 8009136:	69e3      	ldr	r3, [r4, #28]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800913e:	b9b8      	cbnz	r0, 8009170 <_Balloc+0x68>
 8009140:	2101      	movs	r1, #1
 8009142:	fa01 f605 	lsl.w	r6, r1, r5
 8009146:	1d72      	adds	r2, r6, #5
 8009148:	0092      	lsls	r2, r2, #2
 800914a:	4620      	mov	r0, r4
 800914c:	f000 fd21 	bl	8009b92 <_calloc_r>
 8009150:	b160      	cbz	r0, 800916c <_Balloc+0x64>
 8009152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009156:	e00e      	b.n	8009176 <_Balloc+0x6e>
 8009158:	2221      	movs	r2, #33	@ 0x21
 800915a:	2104      	movs	r1, #4
 800915c:	4620      	mov	r0, r4
 800915e:	f000 fd18 	bl	8009b92 <_calloc_r>
 8009162:	69e3      	ldr	r3, [r4, #28]
 8009164:	60f0      	str	r0, [r6, #12]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d1e4      	bne.n	8009136 <_Balloc+0x2e>
 800916c:	2000      	movs	r0, #0
 800916e:	bd70      	pop	{r4, r5, r6, pc}
 8009170:	6802      	ldr	r2, [r0, #0]
 8009172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009176:	2300      	movs	r3, #0
 8009178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800917c:	e7f7      	b.n	800916e <_Balloc+0x66>
 800917e:	bf00      	nop
 8009180:	08009e41 	.word	0x08009e41
 8009184:	08009ed2 	.word	0x08009ed2

08009188 <_Bfree>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	69c6      	ldr	r6, [r0, #28]
 800918c:	4605      	mov	r5, r0
 800918e:	460c      	mov	r4, r1
 8009190:	b976      	cbnz	r6, 80091b0 <_Bfree+0x28>
 8009192:	2010      	movs	r0, #16
 8009194:	f7ff fe56 	bl	8008e44 <malloc>
 8009198:	4602      	mov	r2, r0
 800919a:	61e8      	str	r0, [r5, #28]
 800919c:	b920      	cbnz	r0, 80091a8 <_Bfree+0x20>
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <_Bfree+0x3c>)
 80091a0:	4809      	ldr	r0, [pc, #36]	@ (80091c8 <_Bfree+0x40>)
 80091a2:	218f      	movs	r1, #143	@ 0x8f
 80091a4:	f7fe fe94 	bl	8007ed0 <__assert_func>
 80091a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091ac:	6006      	str	r6, [r0, #0]
 80091ae:	60c6      	str	r6, [r0, #12]
 80091b0:	b13c      	cbz	r4, 80091c2 <_Bfree+0x3a>
 80091b2:	69eb      	ldr	r3, [r5, #28]
 80091b4:	6862      	ldr	r2, [r4, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091bc:	6021      	str	r1, [r4, #0]
 80091be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	08009e41 	.word	0x08009e41
 80091c8:	08009ed2 	.word	0x08009ed2

080091cc <__multadd>:
 80091cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d0:	690d      	ldr	r5, [r1, #16]
 80091d2:	4607      	mov	r7, r0
 80091d4:	460c      	mov	r4, r1
 80091d6:	461e      	mov	r6, r3
 80091d8:	f101 0c14 	add.w	ip, r1, #20
 80091dc:	2000      	movs	r0, #0
 80091de:	f8dc 3000 	ldr.w	r3, [ip]
 80091e2:	b299      	uxth	r1, r3
 80091e4:	fb02 6101 	mla	r1, r2, r1, r6
 80091e8:	0c1e      	lsrs	r6, r3, #16
 80091ea:	0c0b      	lsrs	r3, r1, #16
 80091ec:	fb02 3306 	mla	r3, r2, r6, r3
 80091f0:	b289      	uxth	r1, r1
 80091f2:	3001      	adds	r0, #1
 80091f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091f8:	4285      	cmp	r5, r0
 80091fa:	f84c 1b04 	str.w	r1, [ip], #4
 80091fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009202:	dcec      	bgt.n	80091de <__multadd+0x12>
 8009204:	b30e      	cbz	r6, 800924a <__multadd+0x7e>
 8009206:	68a3      	ldr	r3, [r4, #8]
 8009208:	42ab      	cmp	r3, r5
 800920a:	dc19      	bgt.n	8009240 <__multadd+0x74>
 800920c:	6861      	ldr	r1, [r4, #4]
 800920e:	4638      	mov	r0, r7
 8009210:	3101      	adds	r1, #1
 8009212:	f7ff ff79 	bl	8009108 <_Balloc>
 8009216:	4680      	mov	r8, r0
 8009218:	b928      	cbnz	r0, 8009226 <__multadd+0x5a>
 800921a:	4602      	mov	r2, r0
 800921c:	4b0c      	ldr	r3, [pc, #48]	@ (8009250 <__multadd+0x84>)
 800921e:	480d      	ldr	r0, [pc, #52]	@ (8009254 <__multadd+0x88>)
 8009220:	21ba      	movs	r1, #186	@ 0xba
 8009222:	f7fe fe55 	bl	8007ed0 <__assert_func>
 8009226:	6922      	ldr	r2, [r4, #16]
 8009228:	3202      	adds	r2, #2
 800922a:	f104 010c 	add.w	r1, r4, #12
 800922e:	0092      	lsls	r2, r2, #2
 8009230:	300c      	adds	r0, #12
 8009232:	f7fe fe3f 	bl	8007eb4 <memcpy>
 8009236:	4621      	mov	r1, r4
 8009238:	4638      	mov	r0, r7
 800923a:	f7ff ffa5 	bl	8009188 <_Bfree>
 800923e:	4644      	mov	r4, r8
 8009240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009244:	3501      	adds	r5, #1
 8009246:	615e      	str	r6, [r3, #20]
 8009248:	6125      	str	r5, [r4, #16]
 800924a:	4620      	mov	r0, r4
 800924c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009250:	08009eb0 	.word	0x08009eb0
 8009254:	08009ed2 	.word	0x08009ed2

08009258 <__hi0bits>:
 8009258:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800925c:	4603      	mov	r3, r0
 800925e:	bf36      	itet	cc
 8009260:	0403      	lslcc	r3, r0, #16
 8009262:	2000      	movcs	r0, #0
 8009264:	2010      	movcc	r0, #16
 8009266:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800926a:	bf3c      	itt	cc
 800926c:	021b      	lslcc	r3, r3, #8
 800926e:	3008      	addcc	r0, #8
 8009270:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009274:	bf3c      	itt	cc
 8009276:	011b      	lslcc	r3, r3, #4
 8009278:	3004      	addcc	r0, #4
 800927a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800927e:	bf3c      	itt	cc
 8009280:	009b      	lslcc	r3, r3, #2
 8009282:	3002      	addcc	r0, #2
 8009284:	2b00      	cmp	r3, #0
 8009286:	db05      	blt.n	8009294 <__hi0bits+0x3c>
 8009288:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800928c:	f100 0001 	add.w	r0, r0, #1
 8009290:	bf08      	it	eq
 8009292:	2020      	moveq	r0, #32
 8009294:	4770      	bx	lr

08009296 <__lo0bits>:
 8009296:	6803      	ldr	r3, [r0, #0]
 8009298:	4602      	mov	r2, r0
 800929a:	f013 0007 	ands.w	r0, r3, #7
 800929e:	d00b      	beq.n	80092b8 <__lo0bits+0x22>
 80092a0:	07d9      	lsls	r1, r3, #31
 80092a2:	d421      	bmi.n	80092e8 <__lo0bits+0x52>
 80092a4:	0798      	lsls	r0, r3, #30
 80092a6:	bf49      	itett	mi
 80092a8:	085b      	lsrmi	r3, r3, #1
 80092aa:	089b      	lsrpl	r3, r3, #2
 80092ac:	2001      	movmi	r0, #1
 80092ae:	6013      	strmi	r3, [r2, #0]
 80092b0:	bf5c      	itt	pl
 80092b2:	6013      	strpl	r3, [r2, #0]
 80092b4:	2002      	movpl	r0, #2
 80092b6:	4770      	bx	lr
 80092b8:	b299      	uxth	r1, r3
 80092ba:	b909      	cbnz	r1, 80092c0 <__lo0bits+0x2a>
 80092bc:	0c1b      	lsrs	r3, r3, #16
 80092be:	2010      	movs	r0, #16
 80092c0:	b2d9      	uxtb	r1, r3
 80092c2:	b909      	cbnz	r1, 80092c8 <__lo0bits+0x32>
 80092c4:	3008      	adds	r0, #8
 80092c6:	0a1b      	lsrs	r3, r3, #8
 80092c8:	0719      	lsls	r1, r3, #28
 80092ca:	bf04      	itt	eq
 80092cc:	091b      	lsreq	r3, r3, #4
 80092ce:	3004      	addeq	r0, #4
 80092d0:	0799      	lsls	r1, r3, #30
 80092d2:	bf04      	itt	eq
 80092d4:	089b      	lsreq	r3, r3, #2
 80092d6:	3002      	addeq	r0, #2
 80092d8:	07d9      	lsls	r1, r3, #31
 80092da:	d403      	bmi.n	80092e4 <__lo0bits+0x4e>
 80092dc:	085b      	lsrs	r3, r3, #1
 80092de:	f100 0001 	add.w	r0, r0, #1
 80092e2:	d003      	beq.n	80092ec <__lo0bits+0x56>
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	4770      	bx	lr
 80092e8:	2000      	movs	r0, #0
 80092ea:	4770      	bx	lr
 80092ec:	2020      	movs	r0, #32
 80092ee:	4770      	bx	lr

080092f0 <__i2b>:
 80092f0:	b510      	push	{r4, lr}
 80092f2:	460c      	mov	r4, r1
 80092f4:	2101      	movs	r1, #1
 80092f6:	f7ff ff07 	bl	8009108 <_Balloc>
 80092fa:	4602      	mov	r2, r0
 80092fc:	b928      	cbnz	r0, 800930a <__i2b+0x1a>
 80092fe:	4b05      	ldr	r3, [pc, #20]	@ (8009314 <__i2b+0x24>)
 8009300:	4805      	ldr	r0, [pc, #20]	@ (8009318 <__i2b+0x28>)
 8009302:	f240 1145 	movw	r1, #325	@ 0x145
 8009306:	f7fe fde3 	bl	8007ed0 <__assert_func>
 800930a:	2301      	movs	r3, #1
 800930c:	6144      	str	r4, [r0, #20]
 800930e:	6103      	str	r3, [r0, #16]
 8009310:	bd10      	pop	{r4, pc}
 8009312:	bf00      	nop
 8009314:	08009eb0 	.word	0x08009eb0
 8009318:	08009ed2 	.word	0x08009ed2

0800931c <__multiply>:
 800931c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	4617      	mov	r7, r2
 8009322:	690a      	ldr	r2, [r1, #16]
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	429a      	cmp	r2, r3
 8009328:	bfa8      	it	ge
 800932a:	463b      	movge	r3, r7
 800932c:	4689      	mov	r9, r1
 800932e:	bfa4      	itt	ge
 8009330:	460f      	movge	r7, r1
 8009332:	4699      	movge	r9, r3
 8009334:	693d      	ldr	r5, [r7, #16]
 8009336:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	eb05 060a 	add.w	r6, r5, sl
 8009342:	42b3      	cmp	r3, r6
 8009344:	b085      	sub	sp, #20
 8009346:	bfb8      	it	lt
 8009348:	3101      	addlt	r1, #1
 800934a:	f7ff fedd 	bl	8009108 <_Balloc>
 800934e:	b930      	cbnz	r0, 800935e <__multiply+0x42>
 8009350:	4602      	mov	r2, r0
 8009352:	4b41      	ldr	r3, [pc, #260]	@ (8009458 <__multiply+0x13c>)
 8009354:	4841      	ldr	r0, [pc, #260]	@ (800945c <__multiply+0x140>)
 8009356:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800935a:	f7fe fdb9 	bl	8007ed0 <__assert_func>
 800935e:	f100 0414 	add.w	r4, r0, #20
 8009362:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009366:	4623      	mov	r3, r4
 8009368:	2200      	movs	r2, #0
 800936a:	4573      	cmp	r3, lr
 800936c:	d320      	bcc.n	80093b0 <__multiply+0x94>
 800936e:	f107 0814 	add.w	r8, r7, #20
 8009372:	f109 0114 	add.w	r1, r9, #20
 8009376:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800937a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800937e:	9302      	str	r3, [sp, #8]
 8009380:	1beb      	subs	r3, r5, r7
 8009382:	3b15      	subs	r3, #21
 8009384:	f023 0303 	bic.w	r3, r3, #3
 8009388:	3304      	adds	r3, #4
 800938a:	3715      	adds	r7, #21
 800938c:	42bd      	cmp	r5, r7
 800938e:	bf38      	it	cc
 8009390:	2304      	movcc	r3, #4
 8009392:	9301      	str	r3, [sp, #4]
 8009394:	9b02      	ldr	r3, [sp, #8]
 8009396:	9103      	str	r1, [sp, #12]
 8009398:	428b      	cmp	r3, r1
 800939a:	d80c      	bhi.n	80093b6 <__multiply+0x9a>
 800939c:	2e00      	cmp	r6, #0
 800939e:	dd03      	ble.n	80093a8 <__multiply+0x8c>
 80093a0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d055      	beq.n	8009454 <__multiply+0x138>
 80093a8:	6106      	str	r6, [r0, #16]
 80093aa:	b005      	add	sp, #20
 80093ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b0:	f843 2b04 	str.w	r2, [r3], #4
 80093b4:	e7d9      	b.n	800936a <__multiply+0x4e>
 80093b6:	f8b1 a000 	ldrh.w	sl, [r1]
 80093ba:	f1ba 0f00 	cmp.w	sl, #0
 80093be:	d01f      	beq.n	8009400 <__multiply+0xe4>
 80093c0:	46c4      	mov	ip, r8
 80093c2:	46a1      	mov	r9, r4
 80093c4:	2700      	movs	r7, #0
 80093c6:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093ca:	f8d9 3000 	ldr.w	r3, [r9]
 80093ce:	fa1f fb82 	uxth.w	fp, r2
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	fb0a 330b 	mla	r3, sl, fp, r3
 80093d8:	443b      	add	r3, r7
 80093da:	f8d9 7000 	ldr.w	r7, [r9]
 80093de:	0c12      	lsrs	r2, r2, #16
 80093e0:	0c3f      	lsrs	r7, r7, #16
 80093e2:	fb0a 7202 	mla	r2, sl, r2, r7
 80093e6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093f0:	4565      	cmp	r5, ip
 80093f2:	f849 3b04 	str.w	r3, [r9], #4
 80093f6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80093fa:	d8e4      	bhi.n	80093c6 <__multiply+0xaa>
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	50e7      	str	r7, [r4, r3]
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009406:	3104      	adds	r1, #4
 8009408:	f1b9 0f00 	cmp.w	r9, #0
 800940c:	d020      	beq.n	8009450 <__multiply+0x134>
 800940e:	6823      	ldr	r3, [r4, #0]
 8009410:	4647      	mov	r7, r8
 8009412:	46a4      	mov	ip, r4
 8009414:	f04f 0a00 	mov.w	sl, #0
 8009418:	f8b7 b000 	ldrh.w	fp, [r7]
 800941c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009420:	fb09 220b 	mla	r2, r9, fp, r2
 8009424:	4452      	add	r2, sl
 8009426:	b29b      	uxth	r3, r3
 8009428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800942c:	f84c 3b04 	str.w	r3, [ip], #4
 8009430:	f857 3b04 	ldr.w	r3, [r7], #4
 8009434:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009438:	f8bc 3000 	ldrh.w	r3, [ip]
 800943c:	fb09 330a 	mla	r3, r9, sl, r3
 8009440:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009444:	42bd      	cmp	r5, r7
 8009446:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800944a:	d8e5      	bhi.n	8009418 <__multiply+0xfc>
 800944c:	9a01      	ldr	r2, [sp, #4]
 800944e:	50a3      	str	r3, [r4, r2]
 8009450:	3404      	adds	r4, #4
 8009452:	e79f      	b.n	8009394 <__multiply+0x78>
 8009454:	3e01      	subs	r6, #1
 8009456:	e7a1      	b.n	800939c <__multiply+0x80>
 8009458:	08009eb0 	.word	0x08009eb0
 800945c:	08009ed2 	.word	0x08009ed2

08009460 <__pow5mult>:
 8009460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009464:	4615      	mov	r5, r2
 8009466:	f012 0203 	ands.w	r2, r2, #3
 800946a:	4607      	mov	r7, r0
 800946c:	460e      	mov	r6, r1
 800946e:	d007      	beq.n	8009480 <__pow5mult+0x20>
 8009470:	4c25      	ldr	r4, [pc, #148]	@ (8009508 <__pow5mult+0xa8>)
 8009472:	3a01      	subs	r2, #1
 8009474:	2300      	movs	r3, #0
 8009476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800947a:	f7ff fea7 	bl	80091cc <__multadd>
 800947e:	4606      	mov	r6, r0
 8009480:	10ad      	asrs	r5, r5, #2
 8009482:	d03d      	beq.n	8009500 <__pow5mult+0xa0>
 8009484:	69fc      	ldr	r4, [r7, #28]
 8009486:	b97c      	cbnz	r4, 80094a8 <__pow5mult+0x48>
 8009488:	2010      	movs	r0, #16
 800948a:	f7ff fcdb 	bl	8008e44 <malloc>
 800948e:	4602      	mov	r2, r0
 8009490:	61f8      	str	r0, [r7, #28]
 8009492:	b928      	cbnz	r0, 80094a0 <__pow5mult+0x40>
 8009494:	4b1d      	ldr	r3, [pc, #116]	@ (800950c <__pow5mult+0xac>)
 8009496:	481e      	ldr	r0, [pc, #120]	@ (8009510 <__pow5mult+0xb0>)
 8009498:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800949c:	f7fe fd18 	bl	8007ed0 <__assert_func>
 80094a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094a4:	6004      	str	r4, [r0, #0]
 80094a6:	60c4      	str	r4, [r0, #12]
 80094a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80094ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094b0:	b94c      	cbnz	r4, 80094c6 <__pow5mult+0x66>
 80094b2:	f240 2171 	movw	r1, #625	@ 0x271
 80094b6:	4638      	mov	r0, r7
 80094b8:	f7ff ff1a 	bl	80092f0 <__i2b>
 80094bc:	2300      	movs	r3, #0
 80094be:	f8c8 0008 	str.w	r0, [r8, #8]
 80094c2:	4604      	mov	r4, r0
 80094c4:	6003      	str	r3, [r0, #0]
 80094c6:	f04f 0900 	mov.w	r9, #0
 80094ca:	07eb      	lsls	r3, r5, #31
 80094cc:	d50a      	bpl.n	80094e4 <__pow5mult+0x84>
 80094ce:	4631      	mov	r1, r6
 80094d0:	4622      	mov	r2, r4
 80094d2:	4638      	mov	r0, r7
 80094d4:	f7ff ff22 	bl	800931c <__multiply>
 80094d8:	4631      	mov	r1, r6
 80094da:	4680      	mov	r8, r0
 80094dc:	4638      	mov	r0, r7
 80094de:	f7ff fe53 	bl	8009188 <_Bfree>
 80094e2:	4646      	mov	r6, r8
 80094e4:	106d      	asrs	r5, r5, #1
 80094e6:	d00b      	beq.n	8009500 <__pow5mult+0xa0>
 80094e8:	6820      	ldr	r0, [r4, #0]
 80094ea:	b938      	cbnz	r0, 80094fc <__pow5mult+0x9c>
 80094ec:	4622      	mov	r2, r4
 80094ee:	4621      	mov	r1, r4
 80094f0:	4638      	mov	r0, r7
 80094f2:	f7ff ff13 	bl	800931c <__multiply>
 80094f6:	6020      	str	r0, [r4, #0]
 80094f8:	f8c0 9000 	str.w	r9, [r0]
 80094fc:	4604      	mov	r4, r0
 80094fe:	e7e4      	b.n	80094ca <__pow5mult+0x6a>
 8009500:	4630      	mov	r0, r6
 8009502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009506:	bf00      	nop
 8009508:	08009f38 	.word	0x08009f38
 800950c:	08009e41 	.word	0x08009e41
 8009510:	08009ed2 	.word	0x08009ed2

08009514 <__lshift>:
 8009514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009518:	460c      	mov	r4, r1
 800951a:	6849      	ldr	r1, [r1, #4]
 800951c:	6923      	ldr	r3, [r4, #16]
 800951e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009522:	68a3      	ldr	r3, [r4, #8]
 8009524:	4607      	mov	r7, r0
 8009526:	4691      	mov	r9, r2
 8009528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800952c:	f108 0601 	add.w	r6, r8, #1
 8009530:	42b3      	cmp	r3, r6
 8009532:	db0b      	blt.n	800954c <__lshift+0x38>
 8009534:	4638      	mov	r0, r7
 8009536:	f7ff fde7 	bl	8009108 <_Balloc>
 800953a:	4605      	mov	r5, r0
 800953c:	b948      	cbnz	r0, 8009552 <__lshift+0x3e>
 800953e:	4602      	mov	r2, r0
 8009540:	4b28      	ldr	r3, [pc, #160]	@ (80095e4 <__lshift+0xd0>)
 8009542:	4829      	ldr	r0, [pc, #164]	@ (80095e8 <__lshift+0xd4>)
 8009544:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009548:	f7fe fcc2 	bl	8007ed0 <__assert_func>
 800954c:	3101      	adds	r1, #1
 800954e:	005b      	lsls	r3, r3, #1
 8009550:	e7ee      	b.n	8009530 <__lshift+0x1c>
 8009552:	2300      	movs	r3, #0
 8009554:	f100 0114 	add.w	r1, r0, #20
 8009558:	f100 0210 	add.w	r2, r0, #16
 800955c:	4618      	mov	r0, r3
 800955e:	4553      	cmp	r3, sl
 8009560:	db33      	blt.n	80095ca <__lshift+0xb6>
 8009562:	6920      	ldr	r0, [r4, #16]
 8009564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009568:	f104 0314 	add.w	r3, r4, #20
 800956c:	f019 091f 	ands.w	r9, r9, #31
 8009570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009574:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009578:	d02b      	beq.n	80095d2 <__lshift+0xbe>
 800957a:	f1c9 0e20 	rsb	lr, r9, #32
 800957e:	468a      	mov	sl, r1
 8009580:	2200      	movs	r2, #0
 8009582:	6818      	ldr	r0, [r3, #0]
 8009584:	fa00 f009 	lsl.w	r0, r0, r9
 8009588:	4310      	orrs	r0, r2
 800958a:	f84a 0b04 	str.w	r0, [sl], #4
 800958e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009592:	459c      	cmp	ip, r3
 8009594:	fa22 f20e 	lsr.w	r2, r2, lr
 8009598:	d8f3      	bhi.n	8009582 <__lshift+0x6e>
 800959a:	ebac 0304 	sub.w	r3, ip, r4
 800959e:	3b15      	subs	r3, #21
 80095a0:	f023 0303 	bic.w	r3, r3, #3
 80095a4:	3304      	adds	r3, #4
 80095a6:	f104 0015 	add.w	r0, r4, #21
 80095aa:	4560      	cmp	r0, ip
 80095ac:	bf88      	it	hi
 80095ae:	2304      	movhi	r3, #4
 80095b0:	50ca      	str	r2, [r1, r3]
 80095b2:	b10a      	cbz	r2, 80095b8 <__lshift+0xa4>
 80095b4:	f108 0602 	add.w	r6, r8, #2
 80095b8:	3e01      	subs	r6, #1
 80095ba:	4638      	mov	r0, r7
 80095bc:	612e      	str	r6, [r5, #16]
 80095be:	4621      	mov	r1, r4
 80095c0:	f7ff fde2 	bl	8009188 <_Bfree>
 80095c4:	4628      	mov	r0, r5
 80095c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80095ce:	3301      	adds	r3, #1
 80095d0:	e7c5      	b.n	800955e <__lshift+0x4a>
 80095d2:	3904      	subs	r1, #4
 80095d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80095dc:	459c      	cmp	ip, r3
 80095de:	d8f9      	bhi.n	80095d4 <__lshift+0xc0>
 80095e0:	e7ea      	b.n	80095b8 <__lshift+0xa4>
 80095e2:	bf00      	nop
 80095e4:	08009eb0 	.word	0x08009eb0
 80095e8:	08009ed2 	.word	0x08009ed2

080095ec <__mcmp>:
 80095ec:	690a      	ldr	r2, [r1, #16]
 80095ee:	4603      	mov	r3, r0
 80095f0:	6900      	ldr	r0, [r0, #16]
 80095f2:	1a80      	subs	r0, r0, r2
 80095f4:	b530      	push	{r4, r5, lr}
 80095f6:	d10e      	bne.n	8009616 <__mcmp+0x2a>
 80095f8:	3314      	adds	r3, #20
 80095fa:	3114      	adds	r1, #20
 80095fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009600:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009604:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009608:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800960c:	4295      	cmp	r5, r2
 800960e:	d003      	beq.n	8009618 <__mcmp+0x2c>
 8009610:	d205      	bcs.n	800961e <__mcmp+0x32>
 8009612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009616:	bd30      	pop	{r4, r5, pc}
 8009618:	42a3      	cmp	r3, r4
 800961a:	d3f3      	bcc.n	8009604 <__mcmp+0x18>
 800961c:	e7fb      	b.n	8009616 <__mcmp+0x2a>
 800961e:	2001      	movs	r0, #1
 8009620:	e7f9      	b.n	8009616 <__mcmp+0x2a>
	...

08009624 <__mdiff>:
 8009624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009628:	4689      	mov	r9, r1
 800962a:	4606      	mov	r6, r0
 800962c:	4611      	mov	r1, r2
 800962e:	4648      	mov	r0, r9
 8009630:	4614      	mov	r4, r2
 8009632:	f7ff ffdb 	bl	80095ec <__mcmp>
 8009636:	1e05      	subs	r5, r0, #0
 8009638:	d112      	bne.n	8009660 <__mdiff+0x3c>
 800963a:	4629      	mov	r1, r5
 800963c:	4630      	mov	r0, r6
 800963e:	f7ff fd63 	bl	8009108 <_Balloc>
 8009642:	4602      	mov	r2, r0
 8009644:	b928      	cbnz	r0, 8009652 <__mdiff+0x2e>
 8009646:	4b3f      	ldr	r3, [pc, #252]	@ (8009744 <__mdiff+0x120>)
 8009648:	f240 2137 	movw	r1, #567	@ 0x237
 800964c:	483e      	ldr	r0, [pc, #248]	@ (8009748 <__mdiff+0x124>)
 800964e:	f7fe fc3f 	bl	8007ed0 <__assert_func>
 8009652:	2301      	movs	r3, #1
 8009654:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009658:	4610      	mov	r0, r2
 800965a:	b003      	add	sp, #12
 800965c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009660:	bfbc      	itt	lt
 8009662:	464b      	movlt	r3, r9
 8009664:	46a1      	movlt	r9, r4
 8009666:	4630      	mov	r0, r6
 8009668:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800966c:	bfba      	itte	lt
 800966e:	461c      	movlt	r4, r3
 8009670:	2501      	movlt	r5, #1
 8009672:	2500      	movge	r5, #0
 8009674:	f7ff fd48 	bl	8009108 <_Balloc>
 8009678:	4602      	mov	r2, r0
 800967a:	b918      	cbnz	r0, 8009684 <__mdiff+0x60>
 800967c:	4b31      	ldr	r3, [pc, #196]	@ (8009744 <__mdiff+0x120>)
 800967e:	f240 2145 	movw	r1, #581	@ 0x245
 8009682:	e7e3      	b.n	800964c <__mdiff+0x28>
 8009684:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009688:	6926      	ldr	r6, [r4, #16]
 800968a:	60c5      	str	r5, [r0, #12]
 800968c:	f109 0310 	add.w	r3, r9, #16
 8009690:	f109 0514 	add.w	r5, r9, #20
 8009694:	f104 0e14 	add.w	lr, r4, #20
 8009698:	f100 0b14 	add.w	fp, r0, #20
 800969c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80096a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80096a4:	9301      	str	r3, [sp, #4]
 80096a6:	46d9      	mov	r9, fp
 80096a8:	f04f 0c00 	mov.w	ip, #0
 80096ac:	9b01      	ldr	r3, [sp, #4]
 80096ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80096b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096b6:	9301      	str	r3, [sp, #4]
 80096b8:	fa1f f38a 	uxth.w	r3, sl
 80096bc:	4619      	mov	r1, r3
 80096be:	b283      	uxth	r3, r0
 80096c0:	1acb      	subs	r3, r1, r3
 80096c2:	0c00      	lsrs	r0, r0, #16
 80096c4:	4463      	add	r3, ip
 80096c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096d4:	4576      	cmp	r6, lr
 80096d6:	f849 3b04 	str.w	r3, [r9], #4
 80096da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096de:	d8e5      	bhi.n	80096ac <__mdiff+0x88>
 80096e0:	1b33      	subs	r3, r6, r4
 80096e2:	3b15      	subs	r3, #21
 80096e4:	f023 0303 	bic.w	r3, r3, #3
 80096e8:	3415      	adds	r4, #21
 80096ea:	3304      	adds	r3, #4
 80096ec:	42a6      	cmp	r6, r4
 80096ee:	bf38      	it	cc
 80096f0:	2304      	movcc	r3, #4
 80096f2:	441d      	add	r5, r3
 80096f4:	445b      	add	r3, fp
 80096f6:	461e      	mov	r6, r3
 80096f8:	462c      	mov	r4, r5
 80096fa:	4544      	cmp	r4, r8
 80096fc:	d30e      	bcc.n	800971c <__mdiff+0xf8>
 80096fe:	f108 0103 	add.w	r1, r8, #3
 8009702:	1b49      	subs	r1, r1, r5
 8009704:	f021 0103 	bic.w	r1, r1, #3
 8009708:	3d03      	subs	r5, #3
 800970a:	45a8      	cmp	r8, r5
 800970c:	bf38      	it	cc
 800970e:	2100      	movcc	r1, #0
 8009710:	440b      	add	r3, r1
 8009712:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009716:	b191      	cbz	r1, 800973e <__mdiff+0x11a>
 8009718:	6117      	str	r7, [r2, #16]
 800971a:	e79d      	b.n	8009658 <__mdiff+0x34>
 800971c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009720:	46e6      	mov	lr, ip
 8009722:	0c08      	lsrs	r0, r1, #16
 8009724:	fa1c fc81 	uxtah	ip, ip, r1
 8009728:	4471      	add	r1, lr
 800972a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800972e:	b289      	uxth	r1, r1
 8009730:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009734:	f846 1b04 	str.w	r1, [r6], #4
 8009738:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800973c:	e7dd      	b.n	80096fa <__mdiff+0xd6>
 800973e:	3f01      	subs	r7, #1
 8009740:	e7e7      	b.n	8009712 <__mdiff+0xee>
 8009742:	bf00      	nop
 8009744:	08009eb0 	.word	0x08009eb0
 8009748:	08009ed2 	.word	0x08009ed2

0800974c <__d2b>:
 800974c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009750:	460f      	mov	r7, r1
 8009752:	2101      	movs	r1, #1
 8009754:	ec59 8b10 	vmov	r8, r9, d0
 8009758:	4616      	mov	r6, r2
 800975a:	f7ff fcd5 	bl	8009108 <_Balloc>
 800975e:	4604      	mov	r4, r0
 8009760:	b930      	cbnz	r0, 8009770 <__d2b+0x24>
 8009762:	4602      	mov	r2, r0
 8009764:	4b23      	ldr	r3, [pc, #140]	@ (80097f4 <__d2b+0xa8>)
 8009766:	4824      	ldr	r0, [pc, #144]	@ (80097f8 <__d2b+0xac>)
 8009768:	f240 310f 	movw	r1, #783	@ 0x30f
 800976c:	f7fe fbb0 	bl	8007ed0 <__assert_func>
 8009770:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009774:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009778:	b10d      	cbz	r5, 800977e <__d2b+0x32>
 800977a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	f1b8 0300 	subs.w	r3, r8, #0
 8009784:	d023      	beq.n	80097ce <__d2b+0x82>
 8009786:	4668      	mov	r0, sp
 8009788:	9300      	str	r3, [sp, #0]
 800978a:	f7ff fd84 	bl	8009296 <__lo0bits>
 800978e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009792:	b1d0      	cbz	r0, 80097ca <__d2b+0x7e>
 8009794:	f1c0 0320 	rsb	r3, r0, #32
 8009798:	fa02 f303 	lsl.w	r3, r2, r3
 800979c:	430b      	orrs	r3, r1
 800979e:	40c2      	lsrs	r2, r0
 80097a0:	6163      	str	r3, [r4, #20]
 80097a2:	9201      	str	r2, [sp, #4]
 80097a4:	9b01      	ldr	r3, [sp, #4]
 80097a6:	61a3      	str	r3, [r4, #24]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	bf0c      	ite	eq
 80097ac:	2201      	moveq	r2, #1
 80097ae:	2202      	movne	r2, #2
 80097b0:	6122      	str	r2, [r4, #16]
 80097b2:	b1a5      	cbz	r5, 80097de <__d2b+0x92>
 80097b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097b8:	4405      	add	r5, r0
 80097ba:	603d      	str	r5, [r7, #0]
 80097bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097c0:	6030      	str	r0, [r6, #0]
 80097c2:	4620      	mov	r0, r4
 80097c4:	b003      	add	sp, #12
 80097c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ca:	6161      	str	r1, [r4, #20]
 80097cc:	e7ea      	b.n	80097a4 <__d2b+0x58>
 80097ce:	a801      	add	r0, sp, #4
 80097d0:	f7ff fd61 	bl	8009296 <__lo0bits>
 80097d4:	9b01      	ldr	r3, [sp, #4]
 80097d6:	6163      	str	r3, [r4, #20]
 80097d8:	3020      	adds	r0, #32
 80097da:	2201      	movs	r2, #1
 80097dc:	e7e8      	b.n	80097b0 <__d2b+0x64>
 80097de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097e6:	6038      	str	r0, [r7, #0]
 80097e8:	6918      	ldr	r0, [r3, #16]
 80097ea:	f7ff fd35 	bl	8009258 <__hi0bits>
 80097ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097f2:	e7e5      	b.n	80097c0 <__d2b+0x74>
 80097f4:	08009eb0 	.word	0x08009eb0
 80097f8:	08009ed2 	.word	0x08009ed2

080097fc <__sread>:
 80097fc:	b510      	push	{r4, lr}
 80097fe:	460c      	mov	r4, r1
 8009800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009804:	f000 f968 	bl	8009ad8 <_read_r>
 8009808:	2800      	cmp	r0, #0
 800980a:	bfab      	itete	ge
 800980c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800980e:	89a3      	ldrhlt	r3, [r4, #12]
 8009810:	181b      	addge	r3, r3, r0
 8009812:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009816:	bfac      	ite	ge
 8009818:	6563      	strge	r3, [r4, #84]	@ 0x54
 800981a:	81a3      	strhlt	r3, [r4, #12]
 800981c:	bd10      	pop	{r4, pc}

0800981e <__swrite>:
 800981e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009822:	461f      	mov	r7, r3
 8009824:	898b      	ldrh	r3, [r1, #12]
 8009826:	05db      	lsls	r3, r3, #23
 8009828:	4605      	mov	r5, r0
 800982a:	460c      	mov	r4, r1
 800982c:	4616      	mov	r6, r2
 800982e:	d505      	bpl.n	800983c <__swrite+0x1e>
 8009830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009834:	2302      	movs	r3, #2
 8009836:	2200      	movs	r2, #0
 8009838:	f000 f93c 	bl	8009ab4 <_lseek_r>
 800983c:	89a3      	ldrh	r3, [r4, #12]
 800983e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009842:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009846:	81a3      	strh	r3, [r4, #12]
 8009848:	4632      	mov	r2, r6
 800984a:	463b      	mov	r3, r7
 800984c:	4628      	mov	r0, r5
 800984e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009852:	f000 b963 	b.w	8009b1c <_write_r>

08009856 <__sseek>:
 8009856:	b510      	push	{r4, lr}
 8009858:	460c      	mov	r4, r1
 800985a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985e:	f000 f929 	bl	8009ab4 <_lseek_r>
 8009862:	1c43      	adds	r3, r0, #1
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	bf15      	itete	ne
 8009868:	6560      	strne	r0, [r4, #84]	@ 0x54
 800986a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800986e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009872:	81a3      	strheq	r3, [r4, #12]
 8009874:	bf18      	it	ne
 8009876:	81a3      	strhne	r3, [r4, #12]
 8009878:	bd10      	pop	{r4, pc}

0800987a <__sclose>:
 800987a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800987e:	f000 b95f 	b.w	8009b40 <_close_r>
	...

08009884 <fiprintf>:
 8009884:	b40e      	push	{r1, r2, r3}
 8009886:	b503      	push	{r0, r1, lr}
 8009888:	4601      	mov	r1, r0
 800988a:	ab03      	add	r3, sp, #12
 800988c:	4805      	ldr	r0, [pc, #20]	@ (80098a4 <fiprintf+0x20>)
 800988e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009892:	6800      	ldr	r0, [r0, #0]
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	f7ff f9bd 	bl	8008c14 <_vfiprintf_r>
 800989a:	b002      	add	sp, #8
 800989c:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a0:	b003      	add	sp, #12
 80098a2:	4770      	bx	lr
 80098a4:	200000dc 	.word	0x200000dc

080098a8 <__swbuf_r>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	460e      	mov	r6, r1
 80098ac:	4614      	mov	r4, r2
 80098ae:	4605      	mov	r5, r0
 80098b0:	b118      	cbz	r0, 80098ba <__swbuf_r+0x12>
 80098b2:	6a03      	ldr	r3, [r0, #32]
 80098b4:	b90b      	cbnz	r3, 80098ba <__swbuf_r+0x12>
 80098b6:	f7fe fa7b 	bl	8007db0 <__sinit>
 80098ba:	69a3      	ldr	r3, [r4, #24]
 80098bc:	60a3      	str	r3, [r4, #8]
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	071a      	lsls	r2, r3, #28
 80098c2:	d501      	bpl.n	80098c8 <__swbuf_r+0x20>
 80098c4:	6923      	ldr	r3, [r4, #16]
 80098c6:	b943      	cbnz	r3, 80098da <__swbuf_r+0x32>
 80098c8:	4621      	mov	r1, r4
 80098ca:	4628      	mov	r0, r5
 80098cc:	f000 f82a 	bl	8009924 <__swsetup_r>
 80098d0:	b118      	cbz	r0, 80098da <__swbuf_r+0x32>
 80098d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80098d6:	4638      	mov	r0, r7
 80098d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098da:	6823      	ldr	r3, [r4, #0]
 80098dc:	6922      	ldr	r2, [r4, #16]
 80098de:	1a98      	subs	r0, r3, r2
 80098e0:	6963      	ldr	r3, [r4, #20]
 80098e2:	b2f6      	uxtb	r6, r6
 80098e4:	4283      	cmp	r3, r0
 80098e6:	4637      	mov	r7, r6
 80098e8:	dc05      	bgt.n	80098f6 <__swbuf_r+0x4e>
 80098ea:	4621      	mov	r1, r4
 80098ec:	4628      	mov	r0, r5
 80098ee:	f7ff fbd7 	bl	80090a0 <_fflush_r>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d1ed      	bne.n	80098d2 <__swbuf_r+0x2a>
 80098f6:	68a3      	ldr	r3, [r4, #8]
 80098f8:	3b01      	subs	r3, #1
 80098fa:	60a3      	str	r3, [r4, #8]
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	1c5a      	adds	r2, r3, #1
 8009900:	6022      	str	r2, [r4, #0]
 8009902:	701e      	strb	r6, [r3, #0]
 8009904:	6962      	ldr	r2, [r4, #20]
 8009906:	1c43      	adds	r3, r0, #1
 8009908:	429a      	cmp	r2, r3
 800990a:	d004      	beq.n	8009916 <__swbuf_r+0x6e>
 800990c:	89a3      	ldrh	r3, [r4, #12]
 800990e:	07db      	lsls	r3, r3, #31
 8009910:	d5e1      	bpl.n	80098d6 <__swbuf_r+0x2e>
 8009912:	2e0a      	cmp	r6, #10
 8009914:	d1df      	bne.n	80098d6 <__swbuf_r+0x2e>
 8009916:	4621      	mov	r1, r4
 8009918:	4628      	mov	r0, r5
 800991a:	f7ff fbc1 	bl	80090a0 <_fflush_r>
 800991e:	2800      	cmp	r0, #0
 8009920:	d0d9      	beq.n	80098d6 <__swbuf_r+0x2e>
 8009922:	e7d6      	b.n	80098d2 <__swbuf_r+0x2a>

08009924 <__swsetup_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4b29      	ldr	r3, [pc, #164]	@ (80099cc <__swsetup_r+0xa8>)
 8009928:	4605      	mov	r5, r0
 800992a:	6818      	ldr	r0, [r3, #0]
 800992c:	460c      	mov	r4, r1
 800992e:	b118      	cbz	r0, 8009938 <__swsetup_r+0x14>
 8009930:	6a03      	ldr	r3, [r0, #32]
 8009932:	b90b      	cbnz	r3, 8009938 <__swsetup_r+0x14>
 8009934:	f7fe fa3c 	bl	8007db0 <__sinit>
 8009938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800993c:	0719      	lsls	r1, r3, #28
 800993e:	d422      	bmi.n	8009986 <__swsetup_r+0x62>
 8009940:	06da      	lsls	r2, r3, #27
 8009942:	d407      	bmi.n	8009954 <__swsetup_r+0x30>
 8009944:	2209      	movs	r2, #9
 8009946:	602a      	str	r2, [r5, #0]
 8009948:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800994c:	81a3      	strh	r3, [r4, #12]
 800994e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009952:	e033      	b.n	80099bc <__swsetup_r+0x98>
 8009954:	0758      	lsls	r0, r3, #29
 8009956:	d512      	bpl.n	800997e <__swsetup_r+0x5a>
 8009958:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800995a:	b141      	cbz	r1, 800996e <__swsetup_r+0x4a>
 800995c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009960:	4299      	cmp	r1, r3
 8009962:	d002      	beq.n	800996a <__swsetup_r+0x46>
 8009964:	4628      	mov	r0, r5
 8009966:	f000 f929 	bl	8009bbc <_free_r>
 800996a:	2300      	movs	r3, #0
 800996c:	6363      	str	r3, [r4, #52]	@ 0x34
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009974:	81a3      	strh	r3, [r4, #12]
 8009976:	2300      	movs	r3, #0
 8009978:	6063      	str	r3, [r4, #4]
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	89a3      	ldrh	r3, [r4, #12]
 8009980:	f043 0308 	orr.w	r3, r3, #8
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	6923      	ldr	r3, [r4, #16]
 8009988:	b94b      	cbnz	r3, 800999e <__swsetup_r+0x7a>
 800998a:	89a3      	ldrh	r3, [r4, #12]
 800998c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009994:	d003      	beq.n	800999e <__swsetup_r+0x7a>
 8009996:	4621      	mov	r1, r4
 8009998:	4628      	mov	r0, r5
 800999a:	f000 f83f 	bl	8009a1c <__smakebuf_r>
 800999e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099a2:	f013 0201 	ands.w	r2, r3, #1
 80099a6:	d00a      	beq.n	80099be <__swsetup_r+0x9a>
 80099a8:	2200      	movs	r2, #0
 80099aa:	60a2      	str	r2, [r4, #8]
 80099ac:	6962      	ldr	r2, [r4, #20]
 80099ae:	4252      	negs	r2, r2
 80099b0:	61a2      	str	r2, [r4, #24]
 80099b2:	6922      	ldr	r2, [r4, #16]
 80099b4:	b942      	cbnz	r2, 80099c8 <__swsetup_r+0xa4>
 80099b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80099ba:	d1c5      	bne.n	8009948 <__swsetup_r+0x24>
 80099bc:	bd38      	pop	{r3, r4, r5, pc}
 80099be:	0799      	lsls	r1, r3, #30
 80099c0:	bf58      	it	pl
 80099c2:	6962      	ldrpl	r2, [r4, #20]
 80099c4:	60a2      	str	r2, [r4, #8]
 80099c6:	e7f4      	b.n	80099b2 <__swsetup_r+0x8e>
 80099c8:	2000      	movs	r0, #0
 80099ca:	e7f7      	b.n	80099bc <__swsetup_r+0x98>
 80099cc:	200000dc 	.word	0x200000dc

080099d0 <__swhatbuf_r>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	460c      	mov	r4, r1
 80099d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d8:	2900      	cmp	r1, #0
 80099da:	b096      	sub	sp, #88	@ 0x58
 80099dc:	4615      	mov	r5, r2
 80099de:	461e      	mov	r6, r3
 80099e0:	da0d      	bge.n	80099fe <__swhatbuf_r+0x2e>
 80099e2:	89a3      	ldrh	r3, [r4, #12]
 80099e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80099e8:	f04f 0100 	mov.w	r1, #0
 80099ec:	bf14      	ite	ne
 80099ee:	2340      	movne	r3, #64	@ 0x40
 80099f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80099f4:	2000      	movs	r0, #0
 80099f6:	6031      	str	r1, [r6, #0]
 80099f8:	602b      	str	r3, [r5, #0]
 80099fa:	b016      	add	sp, #88	@ 0x58
 80099fc:	bd70      	pop	{r4, r5, r6, pc}
 80099fe:	466a      	mov	r2, sp
 8009a00:	f000 f8ae 	bl	8009b60 <_fstat_r>
 8009a04:	2800      	cmp	r0, #0
 8009a06:	dbec      	blt.n	80099e2 <__swhatbuf_r+0x12>
 8009a08:	9901      	ldr	r1, [sp, #4]
 8009a0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a12:	4259      	negs	r1, r3
 8009a14:	4159      	adcs	r1, r3
 8009a16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a1a:	e7eb      	b.n	80099f4 <__swhatbuf_r+0x24>

08009a1c <__smakebuf_r>:
 8009a1c:	898b      	ldrh	r3, [r1, #12]
 8009a1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a20:	079d      	lsls	r5, r3, #30
 8009a22:	4606      	mov	r6, r0
 8009a24:	460c      	mov	r4, r1
 8009a26:	d507      	bpl.n	8009a38 <__smakebuf_r+0x1c>
 8009a28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	6123      	str	r3, [r4, #16]
 8009a30:	2301      	movs	r3, #1
 8009a32:	6163      	str	r3, [r4, #20]
 8009a34:	b003      	add	sp, #12
 8009a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a38:	ab01      	add	r3, sp, #4
 8009a3a:	466a      	mov	r2, sp
 8009a3c:	f7ff ffc8 	bl	80099d0 <__swhatbuf_r>
 8009a40:	9f00      	ldr	r7, [sp, #0]
 8009a42:	4605      	mov	r5, r0
 8009a44:	4639      	mov	r1, r7
 8009a46:	4630      	mov	r0, r6
 8009a48:	f7ff fa26 	bl	8008e98 <_malloc_r>
 8009a4c:	b948      	cbnz	r0, 8009a62 <__smakebuf_r+0x46>
 8009a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a52:	059a      	lsls	r2, r3, #22
 8009a54:	d4ee      	bmi.n	8009a34 <__smakebuf_r+0x18>
 8009a56:	f023 0303 	bic.w	r3, r3, #3
 8009a5a:	f043 0302 	orr.w	r3, r3, #2
 8009a5e:	81a3      	strh	r3, [r4, #12]
 8009a60:	e7e2      	b.n	8009a28 <__smakebuf_r+0xc>
 8009a62:	89a3      	ldrh	r3, [r4, #12]
 8009a64:	6020      	str	r0, [r4, #0]
 8009a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a6a:	81a3      	strh	r3, [r4, #12]
 8009a6c:	9b01      	ldr	r3, [sp, #4]
 8009a6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009a72:	b15b      	cbz	r3, 8009a8c <__smakebuf_r+0x70>
 8009a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a78:	4630      	mov	r0, r6
 8009a7a:	f000 f80b 	bl	8009a94 <_isatty_r>
 8009a7e:	b128      	cbz	r0, 8009a8c <__smakebuf_r+0x70>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	f023 0303 	bic.w	r3, r3, #3
 8009a86:	f043 0301 	orr.w	r3, r3, #1
 8009a8a:	81a3      	strh	r3, [r4, #12]
 8009a8c:	89a3      	ldrh	r3, [r4, #12]
 8009a8e:	431d      	orrs	r5, r3
 8009a90:	81a5      	strh	r5, [r4, #12]
 8009a92:	e7cf      	b.n	8009a34 <__smakebuf_r+0x18>

08009a94 <_isatty_r>:
 8009a94:	b538      	push	{r3, r4, r5, lr}
 8009a96:	4d06      	ldr	r5, [pc, #24]	@ (8009ab0 <_isatty_r+0x1c>)
 8009a98:	2300      	movs	r3, #0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	4608      	mov	r0, r1
 8009a9e:	602b      	str	r3, [r5, #0]
 8009aa0:	f7f8 f9df 	bl	8001e62 <_isatty>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_isatty_r+0x1a>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_isatty_r+0x1a>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	20000bc0 	.word	0x20000bc0

08009ab4 <_lseek_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d07      	ldr	r5, [pc, #28]	@ (8009ad4 <_lseek_r+0x20>)
 8009ab8:	4604      	mov	r4, r0
 8009aba:	4608      	mov	r0, r1
 8009abc:	4611      	mov	r1, r2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	602a      	str	r2, [r5, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f7f8 f9d8 	bl	8001e78 <_lseek>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d102      	bne.n	8009ad2 <_lseek_r+0x1e>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	b103      	cbz	r3, 8009ad2 <_lseek_r+0x1e>
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	bd38      	pop	{r3, r4, r5, pc}
 8009ad4:	20000bc0 	.word	0x20000bc0

08009ad8 <_read_r>:
 8009ad8:	b538      	push	{r3, r4, r5, lr}
 8009ada:	4d07      	ldr	r5, [pc, #28]	@ (8009af8 <_read_r+0x20>)
 8009adc:	4604      	mov	r4, r0
 8009ade:	4608      	mov	r0, r1
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	602a      	str	r2, [r5, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f7f8 f982 	bl	8001df0 <_read>
 8009aec:	1c43      	adds	r3, r0, #1
 8009aee:	d102      	bne.n	8009af6 <_read_r+0x1e>
 8009af0:	682b      	ldr	r3, [r5, #0]
 8009af2:	b103      	cbz	r3, 8009af6 <_read_r+0x1e>
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	20000bc0 	.word	0x20000bc0

08009afc <_sbrk_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d06      	ldr	r5, [pc, #24]	@ (8009b18 <_sbrk_r+0x1c>)
 8009b00:	2300      	movs	r3, #0
 8009b02:	4604      	mov	r4, r0
 8009b04:	4608      	mov	r0, r1
 8009b06:	602b      	str	r3, [r5, #0]
 8009b08:	f7f8 f9c4 	bl	8001e94 <_sbrk>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d102      	bne.n	8009b16 <_sbrk_r+0x1a>
 8009b10:	682b      	ldr	r3, [r5, #0]
 8009b12:	b103      	cbz	r3, 8009b16 <_sbrk_r+0x1a>
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	20000bc0 	.word	0x20000bc0

08009b1c <_write_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4d07      	ldr	r5, [pc, #28]	@ (8009b3c <_write_r+0x20>)
 8009b20:	4604      	mov	r4, r0
 8009b22:	4608      	mov	r0, r1
 8009b24:	4611      	mov	r1, r2
 8009b26:	2200      	movs	r2, #0
 8009b28:	602a      	str	r2, [r5, #0]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f7f7 f9d2 	bl	8000ed4 <_write>
 8009b30:	1c43      	adds	r3, r0, #1
 8009b32:	d102      	bne.n	8009b3a <_write_r+0x1e>
 8009b34:	682b      	ldr	r3, [r5, #0]
 8009b36:	b103      	cbz	r3, 8009b3a <_write_r+0x1e>
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	20000bc0 	.word	0x20000bc0

08009b40 <_close_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d06      	ldr	r5, [pc, #24]	@ (8009b5c <_close_r+0x1c>)
 8009b44:	2300      	movs	r3, #0
 8009b46:	4604      	mov	r4, r0
 8009b48:	4608      	mov	r0, r1
 8009b4a:	602b      	str	r3, [r5, #0]
 8009b4c:	f7f8 f96d 	bl	8001e2a <_close>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	d102      	bne.n	8009b5a <_close_r+0x1a>
 8009b54:	682b      	ldr	r3, [r5, #0]
 8009b56:	b103      	cbz	r3, 8009b5a <_close_r+0x1a>
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	bd38      	pop	{r3, r4, r5, pc}
 8009b5c:	20000bc0 	.word	0x20000bc0

08009b60 <_fstat_r>:
 8009b60:	b538      	push	{r3, r4, r5, lr}
 8009b62:	4d07      	ldr	r5, [pc, #28]	@ (8009b80 <_fstat_r+0x20>)
 8009b64:	2300      	movs	r3, #0
 8009b66:	4604      	mov	r4, r0
 8009b68:	4608      	mov	r0, r1
 8009b6a:	4611      	mov	r1, r2
 8009b6c:	602b      	str	r3, [r5, #0]
 8009b6e:	f7f8 f968 	bl	8001e42 <_fstat>
 8009b72:	1c43      	adds	r3, r0, #1
 8009b74:	d102      	bne.n	8009b7c <_fstat_r+0x1c>
 8009b76:	682b      	ldr	r3, [r5, #0]
 8009b78:	b103      	cbz	r3, 8009b7c <_fstat_r+0x1c>
 8009b7a:	6023      	str	r3, [r4, #0]
 8009b7c:	bd38      	pop	{r3, r4, r5, pc}
 8009b7e:	bf00      	nop
 8009b80:	20000bc0 	.word	0x20000bc0

08009b84 <abort>:
 8009b84:	b508      	push	{r3, lr}
 8009b86:	2006      	movs	r0, #6
 8009b88:	f000 f8aa 	bl	8009ce0 <raise>
 8009b8c:	2001      	movs	r0, #1
 8009b8e:	f7f8 f924 	bl	8001dda <_exit>

08009b92 <_calloc_r>:
 8009b92:	b570      	push	{r4, r5, r6, lr}
 8009b94:	fba1 5402 	umull	r5, r4, r1, r2
 8009b98:	b934      	cbnz	r4, 8009ba8 <_calloc_r+0x16>
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	f7ff f97c 	bl	8008e98 <_malloc_r>
 8009ba0:	4606      	mov	r6, r0
 8009ba2:	b928      	cbnz	r0, 8009bb0 <_calloc_r+0x1e>
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	220c      	movs	r2, #12
 8009baa:	6002      	str	r2, [r0, #0]
 8009bac:	2600      	movs	r6, #0
 8009bae:	e7f9      	b.n	8009ba4 <_calloc_r+0x12>
 8009bb0:	462a      	mov	r2, r5
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	f7fe f944 	bl	8007e40 <memset>
 8009bb8:	e7f4      	b.n	8009ba4 <_calloc_r+0x12>
	...

08009bbc <_free_r>:
 8009bbc:	b538      	push	{r3, r4, r5, lr}
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	2900      	cmp	r1, #0
 8009bc2:	d041      	beq.n	8009c48 <_free_r+0x8c>
 8009bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bc8:	1f0c      	subs	r4, r1, #4
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	bfb8      	it	lt
 8009bce:	18e4      	addlt	r4, r4, r3
 8009bd0:	f7ff fa8e 	bl	80090f0 <__malloc_lock>
 8009bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8009c4c <_free_r+0x90>)
 8009bd6:	6813      	ldr	r3, [r2, #0]
 8009bd8:	b933      	cbnz	r3, 8009be8 <_free_r+0x2c>
 8009bda:	6063      	str	r3, [r4, #4]
 8009bdc:	6014      	str	r4, [r2, #0]
 8009bde:	4628      	mov	r0, r5
 8009be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009be4:	f7ff ba8a 	b.w	80090fc <__malloc_unlock>
 8009be8:	42a3      	cmp	r3, r4
 8009bea:	d908      	bls.n	8009bfe <_free_r+0x42>
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	1821      	adds	r1, r4, r0
 8009bf0:	428b      	cmp	r3, r1
 8009bf2:	bf01      	itttt	eq
 8009bf4:	6819      	ldreq	r1, [r3, #0]
 8009bf6:	685b      	ldreq	r3, [r3, #4]
 8009bf8:	1809      	addeq	r1, r1, r0
 8009bfa:	6021      	streq	r1, [r4, #0]
 8009bfc:	e7ed      	b.n	8009bda <_free_r+0x1e>
 8009bfe:	461a      	mov	r2, r3
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	b10b      	cbz	r3, 8009c08 <_free_r+0x4c>
 8009c04:	42a3      	cmp	r3, r4
 8009c06:	d9fa      	bls.n	8009bfe <_free_r+0x42>
 8009c08:	6811      	ldr	r1, [r2, #0]
 8009c0a:	1850      	adds	r0, r2, r1
 8009c0c:	42a0      	cmp	r0, r4
 8009c0e:	d10b      	bne.n	8009c28 <_free_r+0x6c>
 8009c10:	6820      	ldr	r0, [r4, #0]
 8009c12:	4401      	add	r1, r0
 8009c14:	1850      	adds	r0, r2, r1
 8009c16:	4283      	cmp	r3, r0
 8009c18:	6011      	str	r1, [r2, #0]
 8009c1a:	d1e0      	bne.n	8009bde <_free_r+0x22>
 8009c1c:	6818      	ldr	r0, [r3, #0]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	6053      	str	r3, [r2, #4]
 8009c22:	4408      	add	r0, r1
 8009c24:	6010      	str	r0, [r2, #0]
 8009c26:	e7da      	b.n	8009bde <_free_r+0x22>
 8009c28:	d902      	bls.n	8009c30 <_free_r+0x74>
 8009c2a:	230c      	movs	r3, #12
 8009c2c:	602b      	str	r3, [r5, #0]
 8009c2e:	e7d6      	b.n	8009bde <_free_r+0x22>
 8009c30:	6820      	ldr	r0, [r4, #0]
 8009c32:	1821      	adds	r1, r4, r0
 8009c34:	428b      	cmp	r3, r1
 8009c36:	bf04      	itt	eq
 8009c38:	6819      	ldreq	r1, [r3, #0]
 8009c3a:	685b      	ldreq	r3, [r3, #4]
 8009c3c:	6063      	str	r3, [r4, #4]
 8009c3e:	bf04      	itt	eq
 8009c40:	1809      	addeq	r1, r1, r0
 8009c42:	6021      	streq	r1, [r4, #0]
 8009c44:	6054      	str	r4, [r2, #4]
 8009c46:	e7ca      	b.n	8009bde <_free_r+0x22>
 8009c48:	bd38      	pop	{r3, r4, r5, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000bbc 	.word	0x20000bbc

08009c50 <__ascii_mbtowc>:
 8009c50:	b082      	sub	sp, #8
 8009c52:	b901      	cbnz	r1, 8009c56 <__ascii_mbtowc+0x6>
 8009c54:	a901      	add	r1, sp, #4
 8009c56:	b142      	cbz	r2, 8009c6a <__ascii_mbtowc+0x1a>
 8009c58:	b14b      	cbz	r3, 8009c6e <__ascii_mbtowc+0x1e>
 8009c5a:	7813      	ldrb	r3, [r2, #0]
 8009c5c:	600b      	str	r3, [r1, #0]
 8009c5e:	7812      	ldrb	r2, [r2, #0]
 8009c60:	1e10      	subs	r0, r2, #0
 8009c62:	bf18      	it	ne
 8009c64:	2001      	movne	r0, #1
 8009c66:	b002      	add	sp, #8
 8009c68:	4770      	bx	lr
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	e7fb      	b.n	8009c66 <__ascii_mbtowc+0x16>
 8009c6e:	f06f 0001 	mvn.w	r0, #1
 8009c72:	e7f8      	b.n	8009c66 <__ascii_mbtowc+0x16>

08009c74 <__ascii_wctomb>:
 8009c74:	4603      	mov	r3, r0
 8009c76:	4608      	mov	r0, r1
 8009c78:	b141      	cbz	r1, 8009c8c <__ascii_wctomb+0x18>
 8009c7a:	2aff      	cmp	r2, #255	@ 0xff
 8009c7c:	d904      	bls.n	8009c88 <__ascii_wctomb+0x14>
 8009c7e:	228a      	movs	r2, #138	@ 0x8a
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c86:	4770      	bx	lr
 8009c88:	700a      	strb	r2, [r1, #0]
 8009c8a:	2001      	movs	r0, #1
 8009c8c:	4770      	bx	lr

08009c8e <_raise_r>:
 8009c8e:	291f      	cmp	r1, #31
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4605      	mov	r5, r0
 8009c94:	460c      	mov	r4, r1
 8009c96:	d904      	bls.n	8009ca2 <_raise_r+0x14>
 8009c98:	2316      	movs	r3, #22
 8009c9a:	6003      	str	r3, [r0, #0]
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ca0:	bd38      	pop	{r3, r4, r5, pc}
 8009ca2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ca4:	b112      	cbz	r2, 8009cac <_raise_r+0x1e>
 8009ca6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009caa:	b94b      	cbnz	r3, 8009cc0 <_raise_r+0x32>
 8009cac:	4628      	mov	r0, r5
 8009cae:	f000 f831 	bl	8009d14 <_getpid_r>
 8009cb2:	4622      	mov	r2, r4
 8009cb4:	4601      	mov	r1, r0
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cbc:	f000 b818 	b.w	8009cf0 <_kill_r>
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d00a      	beq.n	8009cda <_raise_r+0x4c>
 8009cc4:	1c59      	adds	r1, r3, #1
 8009cc6:	d103      	bne.n	8009cd0 <_raise_r+0x42>
 8009cc8:	2316      	movs	r3, #22
 8009cca:	6003      	str	r3, [r0, #0]
 8009ccc:	2001      	movs	r0, #1
 8009cce:	e7e7      	b.n	8009ca0 <_raise_r+0x12>
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	4798      	blx	r3
 8009cda:	2000      	movs	r0, #0
 8009cdc:	e7e0      	b.n	8009ca0 <_raise_r+0x12>
	...

08009ce0 <raise>:
 8009ce0:	4b02      	ldr	r3, [pc, #8]	@ (8009cec <raise+0xc>)
 8009ce2:	4601      	mov	r1, r0
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	f7ff bfd2 	b.w	8009c8e <_raise_r>
 8009cea:	bf00      	nop
 8009cec:	200000dc 	.word	0x200000dc

08009cf0 <_kill_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4d07      	ldr	r5, [pc, #28]	@ (8009d10 <_kill_r+0x20>)
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	f7f8 f85c 	bl	8001dba <_kill>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	d102      	bne.n	8009d0c <_kill_r+0x1c>
 8009d06:	682b      	ldr	r3, [r5, #0]
 8009d08:	b103      	cbz	r3, 8009d0c <_kill_r+0x1c>
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	bd38      	pop	{r3, r4, r5, pc}
 8009d0e:	bf00      	nop
 8009d10:	20000bc0 	.word	0x20000bc0

08009d14 <_getpid_r>:
 8009d14:	f7f8 b849 	b.w	8001daa <_getpid>

08009d18 <_init>:
 8009d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1a:	bf00      	nop
 8009d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d1e:	bc08      	pop	{r3}
 8009d20:	469e      	mov	lr, r3
 8009d22:	4770      	bx	lr

08009d24 <_fini>:
 8009d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d26:	bf00      	nop
 8009d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d2a:	bc08      	pop	{r3}
 8009d2c:	469e      	mov	lr, r3
 8009d2e:	4770      	bx	lr
