
CA2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a258  0800a258  0000b258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7ac  0800a7ac  0000c298  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a7ac  0800a7ac  0000b7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7b4  0800a7b4  0000c298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7b4  0800a7b4  0000b7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7b8  0800a7b8  0000b7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000298  20000000  0800a7bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000092c  20000298  0800aa54  0000c298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  0800aa54  0000cbc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c298  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001badc  00000000  00000000  0000c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000414a  00000000  00000000  00027da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019d0  00000000  00000000  0002bef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013bc  00000000  00000000  0002d8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afe3  00000000  00000000  0002ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001edfd  00000000  00000000  00059c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fae88  00000000  00000000  00078a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001738e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ba4  00000000  00000000  00173928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0017b4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000298 	.word	0x20000298
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a240 	.word	0x0800a240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000029c 	.word	0x2000029c
 80001cc:	0800a240 	.word	0x0800a240

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//To print to terminal
int _write(int file, char *ptr, int len)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	4804      	ldr	r0, [pc, #16]	@ (8000efc <_write+0x28>)
 8000eec:	f005 fc71 	bl	80067d2 <HAL_UART_Transmit>
    return len;
 8000ef0:	687b      	ldr	r3, [r7, #4]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200003e8 	.word	0x200003e8

08000f00 <getRandomDelay.0>:
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int getRandomDelay(void)
  {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	f8c7 c004 	str.w	ip, [r7, #4]
      return (rand() % 11) + 10;
 8000f0a:	f007 f8bf 	bl	800808c <rand>
 8000f0e:	4601      	mov	r1, r0
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <getRandomDelay.0+0x34>)
 8000f12:	fb83 2301 	smull	r2, r3, r3, r1
 8000f16:	105a      	asrs	r2, r3, #1
 8000f18:	17cb      	asrs	r3, r1, #31
 8000f1a:	1ad2      	subs	r2, r2, r3
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	1aca      	subs	r2, r1, r3
 8000f28:	f102 030a 	add.w	r3, r2, #10
  }
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2e8ba2e9 	.word	0x2e8ba2e9

08000f38 <main>:
{
 8000f38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f3c:	b0aa      	sub	sp, #168	@ 0xa8
 8000f3e:	af04      	add	r7, sp, #16
int main(void)
 8000f40:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
	initialise_monitor_handles();
 8000f46:	f001 f8fd 	bl	8002144 <initialise_monitor_handles>
	HAL_Init();
 8000f4a:	f002 fa17 	bl	800337c <HAL_Init>
  SystemClock_Config();
 8000f4e:	f000 fa4d 	bl	80013ec <SystemClock_Config>
  MX_GPIO_Init();
 8000f52:	f000 fc15 	bl	8001780 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000f56:	f000 faab 	bl	80014b0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000f5a:	f000 fae1 	bl	8001520 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8000f5e:	f000 fb1d 	bl	800159c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000f62:	f000 fb41 	bl	80015e8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000f66:	f000 fb7d 	bl	8001664 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000f6a:	f000 fbab 	bl	80016c4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f6e:	f000 fbd9 	bl	8001724 <MX_USB_OTG_FS_PCD_Init>
  BSP_TSENSOR_Init();//Temperature init
 8000f72:	f001 fc61 	bl	8002838 <BSP_TSENSOR_Init>
  BSP_HSENSOR_Init();//Humidity init
 8000f76:	f001 fbbf 	bl	80026f8 <BSP_HSENSOR_Init>
  BSP_PSENSOR_Init();//Pressure init
 8000f7a:	f001 fc2f 	bl	80027dc <BSP_PSENSOR_Init>
  BSP_MAGNETO_Init();//Magnetometer init
 8000f7e:	f001 fbe9 	bl	8002754 <BSP_MAGNETO_Init>
  BSP_GYRO_Init();//Gyroscope init
 8000f82:	f001 fb75 	bl	8002670 <BSP_GYRO_Init>
  BSP_ACCELERO_Init();//Accelerometer init
 8000f86:	f001 fb1b 	bl	80025c0 <BSP_ACCELERO_Init>
  float getRandomErrorFactor(void)
  {
      return ((float)rand() / (float)RAND_MAX) * 0.1f - 0.05f;
  }
//  srand(HAL_GetTick());// Seed RNG
  uint32_t now = HAL_GetTick();
 8000f8a:	f002 fa5f 	bl	800344c <HAL_GetTick>
 8000f8e:	67f8      	str	r0, [r7, #124]	@ 0x7c

  // Generate an initial random 10-20ms delay for each sensor
  uint32_t randDelayTempHum   = getRandomDelay();
 8000f90:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f94:	469c      	mov	ip, r3
 8000f96:	f7ff ffb3 	bl	8000f00 <getRandomDelay.0>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	67bb      	str	r3, [r7, #120]	@ 0x78
  uint32_t randDelayAccelGyro = getRandomDelay();
 8000f9e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fa2:	469c      	mov	ip, r3
 8000fa4:	f7ff ffac 	bl	8000f00 <getRandomDelay.0>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t randDelayPressure  = getRandomDelay();
 8000fac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb0:	469c      	mov	ip, r3
 8000fb2:	f7ff ffa5 	bl	8000f00 <getRandomDelay.0>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t randDelayMagneto   = getRandomDelay();
 8000fba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fbe:	469c      	mov	ip, r3
 8000fc0:	f7ff ff9e 	bl	8000f00 <getRandomDelay.0>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  // Initialize last poll timestamps to current time plus base period plus random delay.
  uint32_t lastTempHumPoll   = now + 1000 + randDelayTempHum;  // 1Hz sensor
 8000fc8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000fca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000fcc:	4413      	add	r3, r2
 8000fce:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000fd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t lastAccelGyroPoll = now + 19   + randDelayAccelGyro;  // 52Hz sensor
 8000fd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000fd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fda:	4413      	add	r3, r2
 8000fdc:	3313      	adds	r3, #19
 8000fde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  uint32_t lastPressurePoll  = now + 40   + randDelayPressure;   // 25Hz sensor
 8000fe2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000fe4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000fe6:	4413      	add	r3, r2
 8000fe8:	3328      	adds	r3, #40	@ 0x28
 8000fea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t lastMagnetoPoll   = now + 25   + randDelayMagneto;    // 40Hz sensor
 8000fee:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000ff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ff2:	4413      	add	r3, r2
 8000ff4:	3319      	adds	r3, #25
 8000ff6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	HAL_Delay(1000);

	uint32_t now = HAL_GetTick();
 8000ffa:	f002 fa27 	bl	800344c <HAL_GetTick>
 8000ffe:	66b8      	str	r0, [r7, #104]	@ 0x68

	 // Poll Humidity/Temperature sensor at ~1Hz (1000ms + random 10-20ms)
	    if (now >= lastTempHumPoll)
 8001000:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001002:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001006:	429a      	cmp	r2, r3
 8001008:	d37e      	bcc.n	8001108 <main+0x1d0>
	    {
	         int randPollDelay = getRandomDelay();
 800100a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800100e:	469c      	mov	ip, r3
 8001010:	f7ff ff76 	bl	8000f00 <getRandomDelay.0>
 8001014:	6678      	str	r0, [r7, #100]	@ 0x64
	         lastTempHumPoll = now + 1000 + randPollDelay;
 8001016:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001018:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800101a:	4413      	add	r3, r2
 800101c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001020:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	         float temp = BSP_TSENSOR_ReadTemp();
 8001024:	f001 fc24 	bl	8002870 <BSP_TSENSOR_ReadTemp>
 8001028:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
	         float humidity = BSP_HSENSOR_ReadHumidity();
 800102c:	f001 fb84 	bl	8002738 <BSP_HSENSOR_ReadHumidity>
 8001030:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c

	         // Add error to temperature and humidity readings
	         float tempError = getRandomErrorFactor();
 8001034:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001038:	469c      	mov	ip, r3
 800103a:	f000 f9b5 	bl	80013a8 <getRandomErrorFactor.1>
 800103e:	ed87 0a16 	vstr	s0, [r7, #88]	@ 0x58
	         float humError  = getRandomErrorFactor();
 8001042:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001046:	469c      	mov	ip, r3
 8001048:	f000 f9ae 	bl	80013a8 <getRandomErrorFactor.1>
 800104c:	ed87 0a15 	vstr	s0, [r7, #84]	@ 0x54
	         float newTemp = temp * (1.0f + tempError);
 8001050:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001054:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001058:	ee77 7a87 	vadd.f32	s15, s15, s14
 800105c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001064:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	         float newHumidity = humidity * (1.0f + humError);
 8001068:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800106c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001070:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001074:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

	         printf("Temperature: %f C, Humidity: %f%%\r\n", newTemp, newHumidity);
 8001080:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001082:	f7ff fa61 	bl	8000548 <__aeabi_f2d>
 8001086:	4604      	mov	r4, r0
 8001088:	460d      	mov	r5, r1
 800108a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800108c:	f7ff fa5c 	bl	8000548 <__aeabi_f2d>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	e9cd 2300 	strd	r2, r3, [sp]
 8001098:	4622      	mov	r2, r4
 800109a:	462b      	mov	r3, r5
 800109c:	48b5      	ldr	r0, [pc, #724]	@ (8001374 <main+0x43c>)
 800109e:	f007 f8f5 	bl	800828c <iprintf>

	         // Event handling for high temperature and low humidity:
	         if (newTemp > HIGH_TEMP_THRESHOLD)
 80010a2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80010a6:	eeb3 7a0b 	vmov.f32	s14, #59	@ 0x41d80000  27.0
 80010aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	dd07      	ble.n	80010c4 <main+0x18c>
	         {
	             printf("** High temperature alert: %f C. Activating cooler **\r\n", newTemp);
 80010b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80010b6:	f7ff fa47 	bl	8000548 <__aeabi_f2d>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	48ae      	ldr	r0, [pc, #696]	@ (8001378 <main+0x440>)
 80010c0:	f007 f8e4 	bl	800828c <iprintf>
	         }
	         if (newHumidity < LOW_HUMIDITY_THRESHOLD)
 80010c4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80010c8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80010cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d4:	d507      	bpl.n	80010e6 <main+0x1ae>
	         {
	             printf("** Low humidity alert: %f%%! Activating Humidifier.**\r\n", newHumidity);
 80010d6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80010d8:	f7ff fa36 	bl	8000548 <__aeabi_f2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	48a6      	ldr	r0, [pc, #664]	@ (800137c <main+0x444>)
 80010e2:	f007 f8d3 	bl	800828c <iprintf>
	         }
	         if (newHumidity > HIGH_HUMIDITY_THRESHOLD)
 80010e6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80010ea:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8001380 <main+0x448>
 80010ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd07      	ble.n	8001108 <main+0x1d0>
	         {
	             printf("** High humidity alert: %f%% **\r\n", newHumidity);
 80010f8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80010fa:	f7ff fa25 	bl	8000548 <__aeabi_f2d>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	48a0      	ldr	r0, [pc, #640]	@ (8001384 <main+0x44c>)
 8001104:	f007 f8c2 	bl	800828c <iprintf>
	         }
	    }

	    // Poll Accelerometer/Gyro at ~52Hz (19ms + random 10-20ms)
	    if (now >= lastAccelGyroPoll)
 8001108:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800110a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800110e:	429a      	cmp	r2, r3
 8001110:	f0c0 8092 	bcc.w	8001238 <main+0x300>
	    {
	         int randPollDelay = getRandomDelay();
 8001114:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001118:	469c      	mov	ip, r3
 800111a:	f7ff fef1 	bl	8000f00 <getRandomDelay.0>
 800111e:	64b8      	str	r0, [r7, #72]	@ 0x48
	         lastAccelGyroPoll = now + 19 + randPollDelay;
 8001120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001122:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001124:	4413      	add	r3, r2
 8001126:	3313      	adds	r3, #19
 8001128:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	         int16_t accel_data_i16[3] = {0};
 800112c:	f107 0320 	add.w	r3, r7, #32
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	809a      	strh	r2, [r3, #4]
	         BSP_ACCELERO_AccGetXYZ(accel_data_i16);
 8001136:	f107 0320 	add.w	r3, r7, #32
 800113a:	4618      	mov	r0, r3
 800113c:	f001 fa80 	bl	8002640 <BSP_ACCELERO_AccGetXYZ>
	         float accel_data[3];
	         for (int i = 0; i < 3; i++)
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001146:	e02a      	b.n	800119e <main+0x266>
	         {
	             float error = getRandomErrorFactor();
 8001148:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800114c:	469c      	mov	ip, r3
 800114e:	f000 f92b 	bl	80013a8 <getRandomErrorFactor.1>
 8001152:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	             accel_data[i] = (accel_data_i16[i] / 100.0f) * (1.0f + error);
 8001156:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	3398      	adds	r3, #152	@ 0x98
 800115e:	443b      	add	r3, r7
 8001160:	f933 3c78 	ldrsh.w	r3, [r3, #-120]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8001388 <main+0x450>
 8001170:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001174:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001178:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800117c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001184:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	3398      	adds	r3, #152	@ 0x98
 800118c:	443b      	add	r3, r7
 800118e:	3b84      	subs	r3, #132	@ 0x84
 8001190:	edc3 7a00 	vstr	s15, [r3]
	         for (int i = 0; i < 3; i++)
 8001194:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001198:	3301      	adds	r3, #1
 800119a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800119e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	ddd0      	ble.n	8001148 <main+0x210>
	         }
	         printf("Accelerometer: X: %f, Y: %f, Z: %f\r\n",
	                accel_data[0], accel_data[1], accel_data[2]);
 80011a6:	697b      	ldr	r3, [r7, #20]
	         printf("Accelerometer: X: %f, Y: %f, Z: %f\r\n",
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff f9cd 	bl	8000548 <__aeabi_f2d>
 80011ae:	4680      	mov	r8, r0
 80011b0:	4689      	mov	r9, r1
	                accel_data[0], accel_data[1], accel_data[2]);
 80011b2:	69bb      	ldr	r3, [r7, #24]
	         printf("Accelerometer: X: %f, Y: %f, Z: %f\r\n",
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9c7 	bl	8000548 <__aeabi_f2d>
 80011ba:	4604      	mov	r4, r0
 80011bc:	460d      	mov	r5, r1
	                accel_data[0], accel_data[1], accel_data[2]);
 80011be:	69fb      	ldr	r3, [r7, #28]
	         printf("Accelerometer: X: %f, Y: %f, Z: %f\r\n",
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9c1 	bl	8000548 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011ce:	e9cd 4500 	strd	r4, r5, [sp]
 80011d2:	4642      	mov	r2, r8
 80011d4:	464b      	mov	r3, r9
 80011d6:	486d      	ldr	r0, [pc, #436]	@ (800138c <main+0x454>)
 80011d8:	f007 f858 	bl	800828c <iprintf>
	         // Event handling for high vibration: If any axis exceeds the threshold, flash an LED.
	         if (fabs(accel_data[0]) > VIBRATION_THRESHOLD ||
 80011dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e0:	eef0 7ae7 	vabs.f32	s15, s15
 80011e4:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80011e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f0:	dc15      	bgt.n	800121e <main+0x2e6>
	             fabs(accel_data[1]) > VIBRATION_THRESHOLD ||
 80011f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80011f6:	eef0 7ae7 	vabs.f32	s15, s15
	         if (fabs(accel_data[0]) > VIBRATION_THRESHOLD ||
 80011fa:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 80011fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001206:	dc0a      	bgt.n	800121e <main+0x2e6>
	             fabs(accel_data[2]) > VIBRATION_THRESHOLD)
 8001208:	edd7 7a07 	vldr	s15, [r7, #28]
 800120c:	eef0 7ae7 	vabs.f32	s15, s15
	             fabs(accel_data[1]) > VIBRATION_THRESHOLD ||
 8001210:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8001214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121c:	dd0c      	ble.n	8001238 <main+0x300>
	         {
	        	 printf("** Vibration warning! **\r\n");
 800121e:	485c      	ldr	r0, [pc, #368]	@ (8001390 <main+0x458>)
 8001220:	f007 f89c 	bl	800835c <puts>
	        	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8001224:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001228:	485a      	ldr	r0, [pc, #360]	@ (8001394 <main+0x45c>)
 800122a:	f002 fe13 	bl	8003e54 <HAL_GPIO_TogglePin>
	        	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 800122e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001232:	4859      	ldr	r0, [pc, #356]	@ (8001398 <main+0x460>)
 8001234:	f002 fe0e 	bl	8003e54 <HAL_GPIO_TogglePin>
	         }
	    }

	    // Poll Pressure sensor at ~25Hz (40ms + random 10-20ms)
	    if (now >= lastPressurePoll)
 8001238:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800123a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800123e:	429a      	cmp	r2, r3
 8001240:	d32a      	bcc.n	8001298 <main+0x360>
	    {
	         int randPollDelay = getRandomDelay();
 8001242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001246:	469c      	mov	ip, r3
 8001248:	f7ff fe5a 	bl	8000f00 <getRandomDelay.0>
 800124c:	6438      	str	r0, [r7, #64]	@ 0x40
	         lastPressurePoll = now + 40 + randPollDelay;
 800124e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001250:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001252:	4413      	add	r3, r2
 8001254:	3328      	adds	r3, #40	@ 0x28
 8001256:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	         float pressure = BSP_PSENSOR_ReadPressure();
 800125a:	f001 fadf 	bl	800281c <BSP_PSENSOR_ReadPressure>
 800125e:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	         float error = getRandomErrorFactor();
 8001262:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001266:	469c      	mov	ip, r3
 8001268:	f000 f89e 	bl	80013a8 <getRandomErrorFactor.1>
 800126c:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
	         float newPressure = pressure * (1.0f + error);
 8001270:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001274:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001278:	ee77 7a87 	vadd.f32	s15, s15, s14
 800127c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001284:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	         printf("Pressure: %f hPa\r\n", newPressure);
 8001288:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800128a:	f7ff f95d 	bl	8000548 <__aeabi_f2d>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4842      	ldr	r0, [pc, #264]	@ (800139c <main+0x464>)
 8001294:	f006 fffa 	bl	800828c <iprintf>
	    }

	    // Poll Magnetometer sensor at ~40Hz (25ms + random 10-20ms)
	    if (now >= lastMagnetoPoll)
 8001298:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800129a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800129e:	429a      	cmp	r2, r3
 80012a0:	d35f      	bcc.n	8001362 <main+0x42a>
	    {
	         int randPollDelay = getRandomDelay();
 80012a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012a6:	469c      	mov	ip, r3
 80012a8:	f7ff fe2a 	bl	8000f00 <getRandomDelay.0>
 80012ac:	6338      	str	r0, [r7, #48]	@ 0x30
	         lastMagnetoPoll = now + 25 + randPollDelay;
 80012ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80012b2:	4413      	add	r3, r2
 80012b4:	3319      	adds	r3, #25
 80012b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	         int16_t magneto_data[3] = {0};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	809a      	strh	r2, [r3, #4]
	         BSP_MAGNETO_GetXYZ(magneto_data);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4618      	mov	r0, r3
 80012ca:	f001 fa6f 	bl	80027ac <BSP_MAGNETO_GetXYZ>
	         float newMagneto[3];
	         for (int i = 0; i < 3; i++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80012d4:	e026      	b.n	8001324 <main+0x3ec>
	             {
	                 float error = getRandomErrorFactor();
 80012d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012da:	469c      	mov	ip, r3
 80012dc:	f000 f864 	bl	80013a8 <getRandomErrorFactor.1>
 80012e0:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	                 newMagneto[i] = magneto_data[i] * (1.0f + error);
 80012e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	3398      	adds	r3, #152	@ 0x98
 80012ec:	443b      	add	r3, r7
 80012ee:	f933 3c8c 	ldrsh.w	r3, [r3, #-140]
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80012fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	3398      	adds	r3, #152	@ 0x98
 8001312:	443b      	add	r3, r7
 8001314:	3b98      	subs	r3, #152	@ 0x98
 8001316:	edc3 7a00 	vstr	s15, [r3]
	         for (int i = 0; i < 3; i++)
 800131a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800131e:	3301      	adds	r3, #1
 8001320:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001324:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001328:	2b02      	cmp	r3, #2
 800132a:	ddd4      	ble.n	80012d6 <main+0x39e>
	             }
	         printf("Magnetometer: X: %f, Y: %f, Z: %f\r\n",
	        		 newMagneto[0], newMagneto[1], newMagneto[2]);
 800132c:	683b      	ldr	r3, [r7, #0]
	         printf("Magnetometer: X: %f, Y: %f, Z: %f\r\n",
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f90a 	bl	8000548 <__aeabi_f2d>
 8001334:	4680      	mov	r8, r0
 8001336:	4689      	mov	r9, r1
	        		 newMagneto[0], newMagneto[1], newMagneto[2]);
 8001338:	687b      	ldr	r3, [r7, #4]
	         printf("Magnetometer: X: %f, Y: %f, Z: %f\r\n",
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f904 	bl	8000548 <__aeabi_f2d>
 8001340:	4604      	mov	r4, r0
 8001342:	460d      	mov	r5, r1
	        		 newMagneto[0], newMagneto[1], newMagneto[2]);
 8001344:	68bb      	ldr	r3, [r7, #8]
	         printf("Magnetometer: X: %f, Y: %f, Z: %f\r\n",
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8fe 	bl	8000548 <__aeabi_f2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001354:	e9cd 4500 	strd	r4, r5, [sp]
 8001358:	4642      	mov	r2, r8
 800135a:	464b      	mov	r3, r9
 800135c:	4810      	ldr	r0, [pc, #64]	@ (80013a0 <main+0x468>)
 800135e:	f006 ff95 	bl	800828c <iprintf>
//	    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
//	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);

	    // A short delay to avoid a busy loop.
//	    HAL_Delay(1);// default polling rate
	    HAL_Delay(1000);
 8001362:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001366:	f002 f87d 	bl	8003464 <HAL_Delay>
	    printf("=========\r\n");
 800136a:	480e      	ldr	r0, [pc, #56]	@ (80013a4 <main+0x46c>)
 800136c:	f006 fff6 	bl	800835c <puts>
  {
 8001370:	e643      	b.n	8000ffa <main+0xc2>
 8001372:	bf00      	nop
 8001374:	0800a258 	.word	0x0800a258
 8001378:	0800a27c 	.word	0x0800a27c
 800137c:	0800a2b4 	.word	0x0800a2b4
 8001380:	428c0000 	.word	0x428c0000
 8001384:	0800a2ec 	.word	0x0800a2ec
 8001388:	42c80000 	.word	0x42c80000
 800138c:	0800a310 	.word	0x0800a310
 8001390:	0800a338 	.word	0x0800a338
 8001394:	48000400 	.word	0x48000400
 8001398:	48000800 	.word	0x48000800
 800139c:	0800a354 	.word	0x0800a354
 80013a0:	0800a368 	.word	0x0800a368
 80013a4:	0800a38c 	.word	0x0800a38c

080013a8 <getRandomErrorFactor.1>:
  {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	f8c7 c004 	str.w	ip, [r7, #4]
      return ((float)rand() / (float)RAND_MAX) * 0.1f - 0.05f;
 80013b2:	f006 fe6b 	bl	800808c <rand>
 80013b6:	ee07 0a90 	vmov	s15, r0
 80013ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013be:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80013e0 <getRandomErrorFactor.1+0x38>
 80013c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c6:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80013e4 <getRandomErrorFactor.1+0x3c>
 80013ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ce:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80013e8 <getRandomErrorFactor.1+0x40>
 80013d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
  }
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	4f000000 	.word	0x4f000000
 80013e4:	3dcccccd 	.word	0x3dcccccd
 80013e8:	3d4ccccd 	.word	0x3d4ccccd

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b096      	sub	sp, #88	@ 0x58
 80013f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2244      	movs	r2, #68	@ 0x44
 80013f8:	2100      	movs	r1, #0
 80013fa:	4618      	mov	r0, r3
 80013fc:	f006 ffb6 	bl	800836c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800140e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001412:	f003 fcff 	bl	8004e14 <HAL_PWREx_ControlVoltageScaling>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800141c:	f000 fb62 	bl	8001ae4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001420:	f003 fcda 	bl	8004dd8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001424:	4b21      	ldr	r3, [pc, #132]	@ (80014ac <SystemClock_Config+0xc0>)
 8001426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800142a:	4a20      	ldr	r2, [pc, #128]	@ (80014ac <SystemClock_Config+0xc0>)
 800142c:	f023 0318 	bic.w	r3, r3, #24
 8001430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001434:	2314      	movs	r3, #20
 8001436:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800143c:	2301      	movs	r3, #1
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001444:	2360      	movs	r3, #96	@ 0x60
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800144c:	2301      	movs	r3, #1
 800144e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001450:	2301      	movs	r3, #1
 8001452:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001454:	2328      	movs	r3, #40	@ 0x28
 8001456:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001458:	2307      	movs	r3, #7
 800145a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800145c:	2302      	movs	r3, #2
 800145e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fdf5 	bl	8005058 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001474:	f000 fb36 	bl	8001ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	2303      	movs	r3, #3
 800147e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	2104      	movs	r1, #4
 8001490:	4618      	mov	r0, r3
 8001492:	f004 f9bd 	bl	8005810 <HAL_RCC_ClockConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800149c:	f000 fb22 	bl	8001ae4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014a0:	f004 fec4 	bl	800622c <HAL_RCCEx_EnableMSIPLLMode>
}
 80014a4:	bf00      	nop
 80014a6:	3758      	adds	r7, #88	@ 0x58
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000

080014b0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80014b4:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014b6:	4a19      	ldr	r2, [pc, #100]	@ (800151c <MX_DFSDM1_Init+0x6c>)
 80014b8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80014ba:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014bc:	2201      	movs	r2, #1
 80014be:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80014c0:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80014c6:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014de:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80014e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80014e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014e8:	2204      	movs	r2, #4
 80014ea:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80014f8:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 8001500:	2200      	movs	r2, #0
 8001502:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	@ (8001518 <MX_DFSDM1_Init+0x68>)
 8001506:	f002 f8e3 	bl	80036d0 <HAL_DFSDM_ChannelInit>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001510:	f000 fae8 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200002b4 	.word	0x200002b4
 800151c:	40016020 	.word	0x40016020

08001520 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001524:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <MX_I2C2_Init+0x74>)
 8001526:	4a1c      	ldr	r2, [pc, #112]	@ (8001598 <MX_I2C2_Init+0x78>)
 8001528:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <MX_I2C2_Init+0x74>)
 800152c:	f640 6214 	movw	r2, #3604	@ 0xe14
 8001530:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <MX_I2C2_Init+0x74>)
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <MX_I2C2_Init+0x74>)
 800153a:	2201      	movs	r2, #1
 800153c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <MX_I2C2_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001544:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <MX_I2C2_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <MX_I2C2_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001550:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <MX_I2C2_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MX_I2C2_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800155c:	480d      	ldr	r0, [pc, #52]	@ (8001594 <MX_I2C2_Init+0x74>)
 800155e:	f002 fcb6 	bl	8003ece <HAL_I2C_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001568:	f000 fabc 	bl	8001ae4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	4809      	ldr	r0, [pc, #36]	@ (8001594 <MX_I2C2_Init+0x74>)
 8001570:	f003 fa68 	bl	8004a44 <HAL_I2CEx_ConfigAnalogFilter>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800157a:	f000 fab3 	bl	8001ae4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800157e:	2100      	movs	r1, #0
 8001580:	4804      	ldr	r0, [pc, #16]	@ (8001594 <MX_I2C2_Init+0x74>)
 8001582:	f003 faaa 	bl	8004ada <HAL_I2CEx_ConfigDigitalFilter>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800158c:	f000 faaa 	bl	8001ae4 <Error_Handler>
  }
  /* USER  BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200002ec 	.word	0x200002ec
 8001598:	40005800 	.word	0x40005800

0800159c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <MX_QUADSPI_Init+0x44>)
 80015a2:	4a10      	ldr	r2, [pc, #64]	@ (80015e4 <MX_QUADSPI_Init+0x48>)
 80015a4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <MX_QUADSPI_Init+0x44>)
 80015a8:	2202      	movs	r2, #2
 80015aa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <MX_QUADSPI_Init+0x44>)
 80015ae:	2204      	movs	r2, #4
 80015b0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <MX_QUADSPI_Init+0x44>)
 80015b4:	2210      	movs	r2, #16
 80015b6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80015b8:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <MX_QUADSPI_Init+0x44>)
 80015ba:	2217      	movs	r2, #23
 80015bc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80015be:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <MX_QUADSPI_Init+0x44>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <MX_QUADSPI_Init+0x44>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <MX_QUADSPI_Init+0x44>)
 80015cc:	f003 fc88 	bl	8004ee0 <HAL_QSPI_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80015d6:	f000 fa85 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000340 	.word	0x20000340
 80015e4:	a0001000 	.word	0xa0001000

080015e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <MX_SPI3_Init+0x74>)
 80015ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <MX_SPI3_Init+0x78>)
 80015f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015f2:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <MX_SPI3_Init+0x74>)
 80015f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <MX_SPI3_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001600:	4b16      	ldr	r3, [pc, #88]	@ (800165c <MX_SPI3_Init+0x74>)
 8001602:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001606:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001608:	4b14      	ldr	r3, [pc, #80]	@ (800165c <MX_SPI3_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800160e:	4b13      	ldr	r3, [pc, #76]	@ (800165c <MX_SPI3_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <MX_SPI3_Init+0x74>)
 8001616:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800161a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <MX_SPI3_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001622:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <MX_SPI3_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <MX_SPI3_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800162e:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <MX_SPI3_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <MX_SPI3_Init+0x74>)
 8001636:	2207      	movs	r2, #7
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <MX_SPI3_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001640:	4b06      	ldr	r3, [pc, #24]	@ (800165c <MX_SPI3_Init+0x74>)
 8001642:	2208      	movs	r2, #8
 8001644:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001646:	4805      	ldr	r0, [pc, #20]	@ (800165c <MX_SPI3_Init+0x74>)
 8001648:	f004 ffd2 	bl	80065f0 <HAL_SPI_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001652:	f000 fa47 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000384 	.word	0x20000384
 8001660:	40003c00 	.word	0x40003c00

08001664 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001668:	4b14      	ldr	r3, [pc, #80]	@ (80016bc <MX_USART1_UART_Init+0x58>)
 800166a:	4a15      	ldr	r2, [pc, #84]	@ (80016c0 <MX_USART1_UART_Init+0x5c>)
 800166c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800166e:	4b13      	ldr	r3, [pc, #76]	@ (80016bc <MX_USART1_UART_Init+0x58>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b11      	ldr	r3, [pc, #68]	@ (80016bc <MX_USART1_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <MX_USART1_UART_Init+0x58>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001682:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <MX_USART1_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <MX_USART1_UART_Init+0x58>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <MX_USART1_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <MX_USART1_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169a:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <MX_USART1_UART_Init+0x58>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <MX_USART1_UART_Init+0x58>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_USART1_UART_Init+0x58>)
 80016a8:	f005 f845 	bl	8006736 <HAL_UART_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016b2:	f000 fa17 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200003e8 	.word	0x200003e8
 80016c0:	40013800 	.word	0x40013800

080016c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <MX_USART3_UART_Init+0x58>)
 80016ca:	4a15      	ldr	r2, [pc, #84]	@ (8001720 <MX_USART3_UART_Init+0x5c>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <MX_USART3_UART_Init+0x58>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <MX_USART3_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_USART3_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <MX_USART3_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_USART3_UART_Init+0x58>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <MX_USART3_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_USART3_UART_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <MX_USART3_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_USART3_UART_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_USART3_UART_Init+0x58>)
 8001708:	f005 f815 	bl	8006736 <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 f9e7 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000470 	.word	0x20000470
 8001720:	40004800 	.word	0x40004800

08001724 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800172a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800172e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001732:	2206      	movs	r2, #6
 8001734:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001738:	2202      	movs	r2, #2
 800173a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800173e:	2202      	movs	r2, #2
 8001740:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001742:	4b0e      	ldr	r3, [pc, #56]	@ (800177c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001748:	4b0c      	ldr	r3, [pc, #48]	@ (800177c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800174a:	2200      	movs	r2, #0
 800174c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001750:	2200      	movs	r2, #0
 8001752:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001754:	4b09      	ldr	r3, [pc, #36]	@ (800177c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001756:	2200      	movs	r2, #0
 8001758:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800175a:	4b08      	ldr	r3, [pc, #32]	@ (800177c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800175c:	2200      	movs	r2, #0
 800175e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001762:	2200      	movs	r2, #0
 8001764:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	@ (800177c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001768:	f003 fa03 	bl	8004b72 <HAL_PCD_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001772:	f000 f9b7 	bl	8001ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200004f8 	.word	0x200004f8

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	@ 0x28
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001796:	4bbd      	ldr	r3, [pc, #756]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4abc      	ldr	r2, [pc, #752]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4bba      	ldr	r3, [pc, #744]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ae:	4bb7      	ldr	r3, [pc, #732]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b2:	4ab6      	ldr	r2, [pc, #728]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ba:	4bb4      	ldr	r3, [pc, #720]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4bb1      	ldr	r3, [pc, #708]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ca:	4ab0      	ldr	r2, [pc, #704]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d2:	4bae      	ldr	r3, [pc, #696]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4bab      	ldr	r3, [pc, #684]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	4aaa      	ldr	r2, [pc, #680]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ea:	4ba8      	ldr	r3, [pc, #672]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	4ba5      	ldr	r3, [pc, #660]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fa:	4aa4      	ldr	r2, [pc, #656]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001802:	4ba2      	ldr	r3, [pc, #648]	@ (8001a8c <MX_GPIO_Init+0x30c>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001814:	489e      	ldr	r0, [pc, #632]	@ (8001a90 <MX_GPIO_Init+0x310>)
 8001816:	f002 fb05 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	f248 1104 	movw	r1, #33028	@ 0x8104
 8001820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001824:	f002 fafe 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001828:	2200      	movs	r2, #0
 800182a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800182e:	4899      	ldr	r0, [pc, #612]	@ (8001a94 <MX_GPIO_Init+0x314>)
 8001830:	f002 faf8 	bl	8003e24 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f241 0181 	movw	r1, #4225	@ 0x1081
 800183a:	4897      	ldr	r0, [pc, #604]	@ (8001a98 <MX_GPIO_Init+0x318>)
 800183c:	f002 faf2 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001846:	4894      	ldr	r0, [pc, #592]	@ (8001a98 <MX_GPIO_Init+0x318>)
 8001848:	f002 faec 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001852:	4892      	ldr	r0, [pc, #584]	@ (8001a9c <MX_GPIO_Init+0x31c>)
 8001854:	f002 fae6 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2120      	movs	r1, #32
 800185c:	488d      	ldr	r0, [pc, #564]	@ (8001a94 <MX_GPIO_Init+0x314>)
 800185e:	f002 fae1 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001862:	2201      	movs	r2, #1
 8001864:	2101      	movs	r1, #1
 8001866:	488a      	ldr	r0, [pc, #552]	@ (8001a90 <MX_GPIO_Init+0x310>)
 8001868:	f002 fadc 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800186c:	f240 1315 	movw	r3, #277	@ 0x115
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4882      	ldr	r0, [pc, #520]	@ (8001a90 <MX_GPIO_Init+0x310>)
 8001886:	f002 f82f 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800188a:	236a      	movs	r3, #106	@ 0x6a
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800188e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	487c      	ldr	r0, [pc, #496]	@ (8001a90 <MX_GPIO_Init+0x310>)
 80018a0:	f002 f822 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80018a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	4878      	ldr	r0, [pc, #480]	@ (8001a9c <MX_GPIO_Init+0x31c>)
 80018bc:	f002 f814 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80018c0:	233f      	movs	r3, #63	@ 0x3f
 80018c2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018c4:	230b      	movs	r3, #11
 80018c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	4872      	ldr	r0, [pc, #456]	@ (8001a9c <MX_GPIO_Init+0x31c>)
 80018d4:	f002 f808 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80018d8:	2303      	movs	r3, #3
 80018da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018e8:	2308      	movs	r3, #8
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f6:	f001 fff7 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80018fa:	f248 1304 	movw	r3, #33028	@ 0x8104
 80018fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001916:	f001 ffe7 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800191a:	2308      	movs	r3, #8
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800192a:	2301      	movs	r3, #1
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001938:	f001 ffd6 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800193c:	2310      	movs	r3, #16
 800193e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001940:	230b      	movs	r3, #11
 8001942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	4619      	mov	r1, r3
 800194e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001952:	f001 ffc9 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001956:	23e0      	movs	r3, #224	@ 0xe0
 8001958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001966:	2305      	movs	r3, #5
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001974:	f001 ffb8 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001978:	2301      	movs	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0314 	add.w	r3, r7, #20
 800198a:	4619      	mov	r1, r3
 800198c:	4841      	ldr	r0, [pc, #260]	@ (8001a94 <MX_GPIO_Init+0x314>)
 800198e:	f001 ffab 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001992:	2302      	movs	r3, #2
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001996:	230b      	movs	r3, #11
 8001998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4619      	mov	r1, r3
 80019a4:	483b      	ldr	r0, [pc, #236]	@ (8001a94 <MX_GPIO_Init+0x314>)
 80019a6:	f001 ff9f 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80019aa:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80019ae:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4834      	ldr	r0, [pc, #208]	@ (8001a94 <MX_GPIO_Init+0x314>)
 80019c4:	f001 ff90 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80019c8:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80019cc:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	4619      	mov	r1, r3
 80019de:	482e      	ldr	r0, [pc, #184]	@ (8001a98 <MX_GPIO_Init+0x318>)
 80019e0:	f001 ff82 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80019e4:	f243 0381 	movw	r3, #12417	@ 0x3081
 80019e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f6:	f107 0314 	add.w	r3, r7, #20
 80019fa:	4619      	mov	r1, r3
 80019fc:	4826      	ldr	r0, [pc, #152]	@ (8001a98 <MX_GPIO_Init+0x318>)
 80019fe:	f001 ff73 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001a02:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4820      	ldr	r0, [pc, #128]	@ (8001a9c <MX_GPIO_Init+0x31c>)
 8001a1c:	f001 ff64 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001a20:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4819      	ldr	r0, [pc, #100]	@ (8001a9c <MX_GPIO_Init+0x31c>)
 8001a38:	f001 ff56 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a4c:	2305      	movs	r3, #5
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	4810      	ldr	r0, [pc, #64]	@ (8001a98 <MX_GPIO_Init+0x318>)
 8001a58:	f001 ff46 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001a5c:	2378      	movs	r3, #120	@ 0x78
 8001a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a6c:	2307      	movs	r3, #7
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4808      	ldr	r0, [pc, #32]	@ (8001a98 <MX_GPIO_Init+0x318>)
 8001a78:	f001 ff36 	bl	80038e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001a7c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a82:	2312      	movs	r3, #18
 8001a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e00a      	b.n	8001aa0 <MX_GPIO_Init+0x320>
 8001a8a:	bf00      	nop
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	48001000 	.word	0x48001000
 8001a94:	48000400 	.word	0x48000400
 8001a98:	48000c00 	.word	0x48000c00
 8001a9c:	48000800 	.word	0x48000800
 8001aa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa6:	2304      	movs	r3, #4
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <MX_GPIO_Init+0x360>)
 8001ab2:	f001 ff19 	bl	80038e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2017      	movs	r0, #23
 8001abc:	f001 fdd1 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ac0:	2017      	movs	r0, #23
 8001ac2:	f001 fdea 	bl	800369a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2028      	movs	r0, #40	@ 0x28
 8001acc:	f001 fdc9 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ad0:	2028      	movs	r0, #40	@ 0x28
 8001ad2:	f001 fde2 	bl	800369a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	@ 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	48000400 	.word	0x48000400

08001ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae8:	b672      	cpsid	i
}
 8001aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aec:	bf00      	nop
 8001aee:	e7fd      	b.n	8001aec <Error_Handler+0x8>

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_MspInit+0x44>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afa:	4a0e      	ldr	r2, [pc, #56]	@ (8001b34 <HAL_MspInit+0x44>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	4a08      	ldr	r2, [pc, #32]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b0ac      	sub	sp, #176	@ 0xb0
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2288      	movs	r2, #136	@ 0x88
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f006 fc07 	bl	800836c <memset>
  if(DFSDM1_Init == 0)
 8001b5e:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d142      	bne.n	8001bec <HAL_DFSDM_ChannelMspInit+0xb4>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 f86e 	bl	8005c58 <HAL_RCCEx_PeriphCLKConfig>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001b82:	f7ff ffaf 	bl	8001ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b86:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b92:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9e:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	4a15      	ldr	r2, [pc, #84]	@ (8001bf8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ba4:	f043 0310 	orr.w	r3, r3, #16
 8001ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001baa:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001bb6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001bba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001bd0:	2306      	movs	r3, #6
 8001bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bd6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001bde:	f001 fe83 	bl	80038e8 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001be2:	4b04      	ldr	r3, [pc, #16]	@ (8001bf4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	3301      	adds	r3, #1
 8001be8:	4a02      	ldr	r2, [pc, #8]	@ (8001bf4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001bea:	6013      	str	r3, [r2, #0]
  }

}
 8001bec:	bf00      	nop
 8001bee:	37b0      	adds	r7, #176	@ 0xb0
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200009dc 	.word	0x200009dc
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	48001000 	.word	0x48001000

08001c00 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b0ac      	sub	sp, #176	@ 0xb0
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2288      	movs	r2, #136	@ 0x88
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f006 fba3 	bl	800836c <memset>
  if(hi2c->Instance==I2C2)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a21      	ldr	r2, [pc, #132]	@ (8001cb0 <HAL_I2C_MspInit+0xb0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d13b      	bne.n	8001ca8 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f004 f80b 	bl	8005c58 <HAL_RCCEx_PeriphCLKConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c48:	f7ff ff4c 	bl	8001ae4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c50:	4a18      	ldr	r2, [pc, #96]	@ (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c52:	f043 0302 	orr.w	r3, r3, #2
 8001c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c58:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001c64:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6c:	2312      	movs	r3, #18
 8001c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c84:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480b      	ldr	r0, [pc, #44]	@ (8001cb8 <HAL_I2C_MspInit+0xb8>)
 8001c8c:	f001 fe2c 	bl	80038e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c90:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c94:	4a07      	ldr	r2, [pc, #28]	@ (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c96:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_I2C_MspInit+0xb4>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001ca8:	bf00      	nop
 8001caa:	37b0      	adds	r7, #176	@ 0xb0
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40005800 	.word	0x40005800
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000400 	.word	0x48000400

08001cbc <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf8 <HAL_I2C_MspDeInit+0x3c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d10f      	bne.n	8001cee <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C2_MspDeInit 0 */

    /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001cce:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_I2C_MspDeInit+0x40>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <HAL_I2C_MspDeInit+0x40>)
 8001cd4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001cd8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001cda:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001cde:	4808      	ldr	r0, [pc, #32]	@ (8001d00 <HAL_I2C_MspDeInit+0x44>)
 8001ce0:	f001 ffac 	bl	8003c3c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001ce4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ce8:	4805      	ldr	r0, [pc, #20]	@ (8001d00 <HAL_I2C_MspDeInit+0x44>)
 8001cea:	f001 ffa7 	bl	8003c3c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C2_MspDeInit 1 */

    /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40005800 	.word	0x40005800
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	48000400 	.word	0x48000400

08001d04 <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	@ 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a17      	ldr	r2, [pc, #92]	@ (8001d80 <HAL_QSPI_MspInit+0x7c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d128      	bne.n	8001d78 <HAL_QSPI_MspInit+0x74>
  {
    /* USER CODE BEGIN QUADSPI_MspInit 0 */

    /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <HAL_QSPI_MspInit+0x80>)
 8001d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d2a:	4a16      	ldr	r2, [pc, #88]	@ (8001d84 <HAL_QSPI_MspInit+0x80>)
 8001d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d30:	6513      	str	r3, [r2, #80]	@ 0x50
 8001d32:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <HAL_QSPI_MspInit+0x80>)
 8001d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_QSPI_MspInit+0x80>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d42:	4a10      	ldr	r2, [pc, #64]	@ (8001d84 <HAL_QSPI_MspInit+0x80>)
 8001d44:	f043 0310 	orr.w	r3, r3, #16
 8001d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d84 <HAL_QSPI_MspInit+0x80>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001d56:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001d5a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d68:	230a      	movs	r3, #10
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	4805      	ldr	r0, [pc, #20]	@ (8001d88 <HAL_QSPI_MspInit+0x84>)
 8001d74:	f001 fdb8 	bl	80038e8 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001d78:	bf00      	nop
 8001d7a:	3728      	adds	r7, #40	@ 0x28
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	a0001000 	.word	0xa0001000
 8001d84:	40021000 	.word	0x40021000
 8001d88:	48001000 	.word	0x48001000

08001d8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	@ 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a17      	ldr	r2, [pc, #92]	@ (8001e08 <HAL_SPI_MspInit+0x7c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d128      	bne.n	8001e00 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI3_MspInit 0 */

    /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dae:	4b17      	ldr	r3, [pc, #92]	@ (8001e0c <HAL_SPI_MspInit+0x80>)
 8001db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db2:	4a16      	ldr	r2, [pc, #88]	@ (8001e0c <HAL_SPI_MspInit+0x80>)
 8001db4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dba:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <HAL_SPI_MspInit+0x80>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <HAL_SPI_MspInit+0x80>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	4a10      	ldr	r2, [pc, #64]	@ (8001e0c <HAL_SPI_MspInit+0x80>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <HAL_SPI_MspInit+0x80>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001dde:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dec:	2303      	movs	r3, #3
 8001dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001df0:	2306      	movs	r3, #6
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4805      	ldr	r0, [pc, #20]	@ (8001e10 <HAL_SPI_MspInit+0x84>)
 8001dfc:	f001 fd74 	bl	80038e8 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001e00:	bf00      	nop
 8001e02:	3728      	adds	r7, #40	@ 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40003c00 	.word	0x40003c00
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	48000800 	.word	0x48000800

08001e14 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b0ae      	sub	sp, #184	@ 0xb8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	2288      	movs	r2, #136	@ 0x88
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f006 fa99 	bl	800836c <memset>
  if(huart->Instance==USART1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a42      	ldr	r2, [pc, #264]	@ (8001f48 <HAL_UART_MspInit+0x134>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d13b      	bne.n	8001ebc <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e44:	2301      	movs	r3, #1
 8001e46:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	4618      	mov	r0, r3
 8001e52:	f003 ff01 	bl	8005c58 <HAL_RCCEx_PeriphCLKConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e5c:	f7ff fe42 	bl	8001ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e60:	4b3a      	ldr	r3, [pc, #232]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e64:	4a39      	ldr	r2, [pc, #228]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001e66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e6c:	4b37      	ldr	r3, [pc, #220]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001e6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e78:	4b34      	ldr	r3, [pc, #208]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e7c:	4a33      	ldr	r2, [pc, #204]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e84:	4b31      	ldr	r3, [pc, #196]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001e90:	23c0      	movs	r3, #192	@ 0xc0
 8001e92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4826      	ldr	r0, [pc, #152]	@ (8001f50 <HAL_UART_MspInit+0x13c>)
 8001eb6:	f001 fd17 	bl	80038e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eba:	e040      	b.n	8001f3e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a24      	ldr	r2, [pc, #144]	@ (8001f54 <HAL_UART_MspInit+0x140>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d13b      	bne.n	8001f3e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fec0 	bl	8005c58 <HAL_RCCEx_PeriphCLKConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001ede:	f7ff fe01 	bl	8001ae4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	4a19      	ldr	r2, [pc, #100]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eee:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efe:	4a13      	ldr	r2, [pc, #76]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <HAL_UART_MspInit+0x138>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001f12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f32:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4807      	ldr	r0, [pc, #28]	@ (8001f58 <HAL_UART_MspInit+0x144>)
 8001f3a:	f001 fcd5 	bl	80038e8 <HAL_GPIO_Init>
}
 8001f3e:	bf00      	nop
 8001f40:	37b8      	adds	r7, #184	@ 0xb8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40013800 	.word	0x40013800
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	48000400 	.word	0x48000400
 8001f54:	40004800 	.word	0x40004800
 8001f58:	48000c00 	.word	0x48000c00

08001f5c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0ac      	sub	sp, #176	@ 0xb0
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2288      	movs	r2, #136	@ 0x88
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f006 f9f5 	bl	800836c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f8a:	d17c      	bne.n	8002086 <HAL_PCD_MspInit+0x12a>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f90:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001f92:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001fa2:	2318      	movs	r3, #24
 8001fa4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001faa:	2302      	movs	r3, #2
 8001fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001fb2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001fb6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 fe4b 	bl	8005c58 <HAL_RCCEx_PeriphCLKConfig>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001fc8:	f7ff fd8c 	bl	8001ae4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fcc:	4b30      	ldr	r3, [pc, #192]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fe8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ff8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002002:	f001 fc71 	bl	80038e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8002006:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800200a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201a:	2303      	movs	r3, #3
 800201c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002020:	230a      	movs	r3, #10
 8002022:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800202a:	4619      	mov	r1, r3
 800202c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002030:	f001 fc5a 	bl	80038e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002034:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 8002036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002038:	4a15      	ldr	r2, [pc, #84]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 800203a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800203e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002040:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 8002042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002044:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204c:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d114      	bne.n	8002082 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205c:	4a0c      	ldr	r2, [pc, #48]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 800205e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002062:	6593      	str	r3, [r2, #88]	@ 0x58
 8002064:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8002070:	f002 ff26 	bl	8004ec0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002074:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <HAL_PCD_MspInit+0x134>)
 800207a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800207e:	6593      	str	r3, [r2, #88]	@ 0x58

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002080:	e001      	b.n	8002086 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8002082:	f002 ff1d 	bl	8004ec0 <HAL_PWREx_EnableVddUSB>
}
 8002086:	bf00      	nop
 8002088:	37b0      	adds	r7, #176	@ 0xb0
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000

08002094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <NMI_Handler+0x4>

0800209c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <MemManage_Handler+0x4>

080020ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <BusFault_Handler+0x4>

080020b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <UsageFault_Handler+0x4>

080020bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ea:	f001 f99b 	bl	8003424 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80020f6:	2020      	movs	r0, #32
 80020f8:	f001 fec6 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80020fc:	2040      	movs	r0, #64	@ 0x40
 80020fe:	f001 fec3 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002102:	2080      	movs	r0, #128	@ 0x80
 8002104:	f001 fec0 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002108:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800210c:	f001 febc 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}

08002114 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002118:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800211c:	f001 feb4 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002120:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002124:	f001 feb0 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002128:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800212c:	f001 feac 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002130:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002134:	f001 fea8 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002138:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800213c:	f001 fea4 	bl	8003e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_getpid>:

int _getpid(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  return 1;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_kill>:

int _kill(int pid, int sig)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800216c:	f006 f906 	bl	800837c <__errno>
 8002170:	4603      	mov	r3, r0
 8002172:	2216      	movs	r2, #22
 8002174:	601a      	str	r2, [r3, #0]
  return -1;
 8002176:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <_exit>:

void _exit (int status)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800218a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff ffe7 	bl	8002162 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <_exit+0x12>

08002198 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	e00a      	b.n	80021c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021aa:	f3af 8000 	nop.w
 80021ae:	4601      	mov	r1, r0
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	60ba      	str	r2, [r7, #8]
 80021b6:	b2ca      	uxtb	r2, r1
 80021b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3301      	adds	r3, #1
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	dbf0      	blt.n	80021aa <_read+0x12>
  }

  return len;
 80021c8:	687b      	ldr	r3, [r7, #4]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021fa:	605a      	str	r2, [r3, #4]
  return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <_isatty>:

int _isatty(int file)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002244:	4a14      	ldr	r2, [pc, #80]	@ (8002298 <_sbrk+0x5c>)
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <_sbrk+0x60>)
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002250:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <_sbrk+0x64>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d102      	bne.n	800225e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <_sbrk+0x64>)
 800225a:	4a12      	ldr	r2, [pc, #72]	@ (80022a4 <_sbrk+0x68>)
 800225c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800225e:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	429a      	cmp	r2, r3
 800226a:	d207      	bcs.n	800227c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800226c:	f006 f886 	bl	800837c <__errno>
 8002270:	4603      	mov	r3, r0
 8002272:	220c      	movs	r2, #12
 8002274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002276:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800227a:	e009      	b.n	8002290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <_sbrk+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <_sbrk+0x64>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	4a05      	ldr	r2, [pc, #20]	@ (80022a0 <_sbrk+0x64>)
 800228c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800228e:	68fb      	ldr	r3, [r7, #12]
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20018000 	.word	0x20018000
 800229c:	00000400 	.word	0x00000400
 80022a0:	200009e0 	.word	0x200009e0
 80022a4:	20000bc8 	.word	0x20000bc8

080022a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <SystemInit+0x20>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <SystemInit+0x20>)
 80022b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002304 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d0:	f7ff ffea 	bl	80022a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d4:	480c      	ldr	r0, [pc, #48]	@ (8002308 <LoopForever+0x6>)
  ldr r1, =_edata
 80022d6:	490d      	ldr	r1, [pc, #52]	@ (800230c <LoopForever+0xa>)
  ldr r2, =_sidata
 80022d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002310 <LoopForever+0xe>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022dc:	e002      	b.n	80022e4 <LoopCopyDataInit>

080022de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e2:	3304      	adds	r3, #4

080022e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e8:	d3f9      	bcc.n	80022de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002318 <LoopForever+0x16>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f0:	e001      	b.n	80022f6 <LoopFillZerobss>

080022f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f4:	3204      	adds	r2, #4

080022f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f8:	d3fb      	bcc.n	80022f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fa:	f006 f845 	bl	8008388 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022fe:	f7fe fe1b 	bl	8000f38 <main>

08002302 <LoopForever>:

LoopForever:
    b LoopForever
 8002302:	e7fe      	b.n	8002302 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002304:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800230c:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 8002310:	0800a7bc 	.word	0x0800a7bc
  ldr r2, =_sbss
 8002314:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 8002318:	20000bc4 	.word	0x20000bc4

0800231c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC1_2_IRQHandler>
	...

08002320 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	@ 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002328:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <I2Cx_MspInit+0xa8>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232c:	4a26      	ldr	r2, [pc, #152]	@ (80023c8 <I2Cx_MspInit+0xa8>)
 800232e:	f043 0302 	orr.w	r3, r3, #2
 8002332:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002334:	4b24      	ldr	r3, [pc, #144]	@ (80023c8 <I2Cx_MspInit+0xa8>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002340:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002344:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002346:	2312      	movs	r3, #18
 8002348:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800234a:	2301      	movs	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002352:	2304      	movs	r3, #4
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	481b      	ldr	r0, [pc, #108]	@ (80023cc <I2Cx_MspInit+0xac>)
 800235e:	f001 fac3 	bl	80038e8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	4818      	ldr	r0, [pc, #96]	@ (80023cc <I2Cx_MspInit+0xac>)
 800236a:	f001 fabd 	bl	80038e8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800236e:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <I2Cx_MspInit+0xa8>)
 8002370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002372:	4a15      	ldr	r2, [pc, #84]	@ (80023c8 <I2Cx_MspInit+0xa8>)
 8002374:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002378:	6593      	str	r3, [r2, #88]	@ 0x58
 800237a:	4b13      	ldr	r3, [pc, #76]	@ (80023c8 <I2Cx_MspInit+0xa8>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002386:	4b10      	ldr	r3, [pc, #64]	@ (80023c8 <I2Cx_MspInit+0xa8>)
 8002388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238a:	4a0f      	ldr	r2, [pc, #60]	@ (80023c8 <I2Cx_MspInit+0xa8>)
 800238c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002390:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002392:	4b0d      	ldr	r3, [pc, #52]	@ (80023c8 <I2Cx_MspInit+0xa8>)
 8002394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002396:	4a0c      	ldr	r2, [pc, #48]	@ (80023c8 <I2Cx_MspInit+0xa8>)
 8002398:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800239c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	210f      	movs	r1, #15
 80023a2:	2021      	movs	r0, #33	@ 0x21
 80023a4:	f001 f95d 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80023a8:	2021      	movs	r0, #33	@ 0x21
 80023aa:	f001 f976 	bl	800369a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80023ae:	2200      	movs	r2, #0
 80023b0:	210f      	movs	r1, #15
 80023b2:	2022      	movs	r0, #34	@ 0x22
 80023b4:	f001 f955 	bl	8003662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80023b8:	2022      	movs	r0, #34	@ 0x22
 80023ba:	f001 f96e 	bl	800369a <HAL_NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	@ 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	48000400 	.word	0x48000400

080023d0 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a12      	ldr	r2, [pc, #72]	@ (8002424 <I2Cx_Init+0x54>)
 80023dc:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a11      	ldr	r2, [pc, #68]	@ (8002428 <I2Cx_Init+0x58>)
 80023e2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff89 	bl	8002320 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f001 fd5d 	bl	8003ece <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002414:	2100      	movs	r1, #0
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f002 fb14 	bl	8004a44 <HAL_I2CEx_ConfigAnalogFilter>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40005800 	.word	0x40005800
 8002428:	00702681 	.word	0x00702681

0800242c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	@ 0x28
 8002430:	af04      	add	r7, sp, #16
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	4608      	mov	r0, r1
 8002436:	4611      	mov	r1, r2
 8002438:	461a      	mov	r2, r3
 800243a:	4603      	mov	r3, r0
 800243c:	72fb      	strb	r3, [r7, #11]
 800243e:	460b      	mov	r3, r1
 8002440:	813b      	strh	r3, [r7, #8]
 8002442:	4613      	mov	r3, r2
 8002444:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800244a:	7afb      	ldrb	r3, [r7, #11]
 800244c:	b299      	uxth	r1, r3
 800244e:	88f8      	ldrh	r0, [r7, #6]
 8002450:	893a      	ldrh	r2, [r7, #8]
 8002452:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002456:	9302      	str	r3, [sp, #8]
 8002458:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	4603      	mov	r3, r0
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f001 ff12 	bl	800428c <HAL_I2C_Mem_Read>
 8002468:	4603      	mov	r3, r0
 800246a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800246c:	7dfb      	ldrb	r3, [r7, #23]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d004      	beq.n	800247c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002472:	7afb      	ldrb	r3, [r7, #11]
 8002474:	4619      	mov	r1, r3
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f832 	bl	80024e0 <I2Cx_Error>
  }
  return status;
 800247c:	7dfb      	ldrb	r3, [r7, #23]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b08a      	sub	sp, #40	@ 0x28
 800248a:	af04      	add	r7, sp, #16
 800248c:	60f8      	str	r0, [r7, #12]
 800248e:	4608      	mov	r0, r1
 8002490:	4611      	mov	r1, r2
 8002492:	461a      	mov	r2, r3
 8002494:	4603      	mov	r3, r0
 8002496:	72fb      	strb	r3, [r7, #11]
 8002498:	460b      	mov	r3, r1
 800249a:	813b      	strh	r3, [r7, #8]
 800249c:	4613      	mov	r3, r2
 800249e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024a0:	2300      	movs	r3, #0
 80024a2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80024a4:	7afb      	ldrb	r3, [r7, #11]
 80024a6:	b299      	uxth	r1, r3
 80024a8:	88f8      	ldrh	r0, [r7, #6]
 80024aa:	893a      	ldrh	r2, [r7, #8]
 80024ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	6a3b      	ldr	r3, [r7, #32]
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	4603      	mov	r3, r0
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f001 fdd1 	bl	8004064 <HAL_I2C_Mem_Write>
 80024c2:	4603      	mov	r3, r0
 80024c4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80024c6:	7dfb      	ldrb	r3, [r7, #23]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80024cc:	7afb      	ldrb	r3, [r7, #11]
 80024ce:	4619      	mov	r1, r3
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f805 	bl	80024e0 <I2Cx_Error>
  }
  return status;
 80024d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3718      	adds	r7, #24
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f001 fd89 	bl	8004004 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ff6c 	bl	80023d0 <I2Cx_Init>
}
 80024f8:	bf00      	nop
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002504:	4802      	ldr	r0, [pc, #8]	@ (8002510 <SENSOR_IO_Init+0x10>)
 8002506:	f7ff ff63 	bl	80023d0 <I2Cx_Init>
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200009e4 	.word	0x200009e4

08002514 <SENSOR_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af02      	add	r7, sp, #8
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
 800251e:	460b      	mov	r3, r1
 8002520:	71bb      	strb	r3, [r7, #6]
 8002522:	4613      	mov	r3, r2
 8002524:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	b29a      	uxth	r2, r3
 800252a:	79f9      	ldrb	r1, [r7, #7]
 800252c:	2301      	movs	r3, #1
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	1d7b      	adds	r3, r7, #5
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	2301      	movs	r3, #1
 8002536:	4803      	ldr	r0, [pc, #12]	@ (8002544 <SENSOR_IO_Write+0x30>)
 8002538:	f7ff ffa5 	bl	8002486 <I2Cx_WriteMultiple>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	200009e4 	.word	0x200009e4

08002548 <SENSOR_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af02      	add	r7, sp, #8
 800254e:	4603      	mov	r3, r0
 8002550:	460a      	mov	r2, r1
 8002552:	71fb      	strb	r3, [r7, #7]
 8002554:	4613      	mov	r3, r2
 8002556:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800255c:	79bb      	ldrb	r3, [r7, #6]
 800255e:	b29a      	uxth	r2, r3
 8002560:	79f9      	ldrb	r1, [r7, #7]
 8002562:	2301      	movs	r3, #1
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	f107 030f 	add.w	r3, r7, #15
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	2301      	movs	r3, #1
 800256e:	4804      	ldr	r0, [pc, #16]	@ (8002580 <SENSOR_IO_Read+0x38>)
 8002570:	f7ff ff5c 	bl	800242c <I2Cx_ReadMultiple>

  return read_value;
 8002574:	7bfb      	ldrb	r3, [r7, #15]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200009e4 	.word	0x200009e4

08002584 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af02      	add	r7, sp, #8
 800258a:	603a      	str	r2, [r7, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	460b      	mov	r3, r1
 8002594:	71bb      	strb	r3, [r7, #6]
 8002596:	4613      	mov	r3, r2
 8002598:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800259a:	79bb      	ldrb	r3, [r7, #6]
 800259c:	b29a      	uxth	r2, r3
 800259e:	79f9      	ldrb	r1, [r7, #7]
 80025a0:	88bb      	ldrh	r3, [r7, #4]
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2301      	movs	r3, #1
 80025aa:	4804      	ldr	r0, [pc, #16]	@ (80025bc <SENSOR_IO_ReadMultiple+0x38>)
 80025ac:	f7ff ff3e 	bl	800242c <I2Cx_ReadMultiple>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200009e4 	.word	0x200009e4

080025c0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80025ca:	2300      	movs	r3, #0
 80025cc:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80025ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002638 <BSP_ACCELERO_Init+0x78>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	4798      	blx	r3
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b6a      	cmp	r3, #106	@ 0x6a
 80025d8:	d002      	beq.n	80025e0 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	e025      	b.n	800262c <BSP_ACCELERO_Init+0x6c>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80025e0:	4b16      	ldr	r3, [pc, #88]	@ (800263c <BSP_ACCELERO_Init+0x7c>)
 80025e2:	4a15      	ldr	r2, [pc, #84]	@ (8002638 <BSP_ACCELERO_Init+0x78>)
 80025e4:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80025e6:	2330      	movs	r3, #48	@ 0x30
 80025e8:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80025ee:	2300      	movs	r3, #0
 80025f0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80025f2:	2340      	movs	r3, #64	@ 0x40
 80025f4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80025fe:	797a      	ldrb	r2, [r7, #5]
 8002600:	7abb      	ldrb	r3, [r7, #10]
 8002602:	4313      	orrs	r3, r2
 8002604:	b2db      	uxtb	r3, r3
 8002606:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002608:	7a3b      	ldrb	r3, [r7, #8]
 800260a:	f043 0304 	orr.w	r3, r3, #4
 800260e:	b2db      	uxtb	r3, r3
 8002610:	b21b      	sxth	r3, r3
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	b21a      	sxth	r2, r3
 8002616:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800261a:	4313      	orrs	r3, r2
 800261c:	b21b      	sxth	r3, r3
 800261e:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002620:	4b06      	ldr	r3, [pc, #24]	@ (800263c <BSP_ACCELERO_Init+0x7c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	89ba      	ldrh	r2, [r7, #12]
 8002628:	4610      	mov	r0, r2
 800262a:	4798      	blx	r3
  }  

  return ret;
 800262c:	7bfb      	ldrb	r3, [r7, #15]
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000060 	.word	0x20000060
 800263c:	20000a38 	.word	0x20000a38

08002640 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002648:	4b08      	ldr	r3, [pc, #32]	@ (800266c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d009      	beq.n	8002664 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002650:	4b06      	ldr	r3, [pc, #24]	@ (800266c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
    }
  }
}
 8002664:	bf00      	nop
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000a38 	.word	0x20000a38

08002670 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800267a:	2300      	movs	r3, #0
 800267c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800267e:	4b1c      	ldr	r3, [pc, #112]	@ (80026f0 <BSP_GYRO_Init+0x80>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4798      	blx	r3
 8002684:	4603      	mov	r3, r0
 8002686:	2b6a      	cmp	r3, #106	@ 0x6a
 8002688:	d002      	beq.n	8002690 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	73fb      	strb	r3, [r7, #15]
 800268e:	e029      	b.n	80026e4 <BSP_GYRO_Init+0x74>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002690:	4b18      	ldr	r3, [pc, #96]	@ (80026f4 <BSP_GYRO_Init+0x84>)
 8002692:	4a17      	ldr	r2, [pc, #92]	@ (80026f0 <BSP_GYRO_Init+0x80>)
 8002694:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800269a:	2330      	movs	r3, #48	@ 0x30
 800269c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800269e:	2300      	movs	r3, #0
 80026a0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80026a6:	2340      	movs	r3, #64	@ 0x40
 80026a8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80026ae:	230c      	movs	r3, #12
 80026b0:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80026b2:	7aba      	ldrb	r2, [r7, #10]
 80026b4:	797b      	ldrb	r3, [r7, #5]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80026bc:	7a3b      	ldrb	r3, [r7, #8]
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	b21b      	sxth	r3, r3
 80026c6:	021b      	lsls	r3, r3, #8
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b21b      	sxth	r3, r3
 80026d2:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80026d4:	4b07      	ldr	r3, [pc, #28]	@ (80026f4 <BSP_GYRO_Init+0x84>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	89ba      	ldrh	r2, [r7, #12]
 80026dc:	4610      	mov	r0, r2
 80026de:	4798      	blx	r3
    
    ret = GYRO_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000094 	.word	0x20000094
 80026f4:	20000a3c 	.word	0x20000a3c

080026f8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80026fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <BSP_HSENSOR_Init+0x38>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	20be      	movs	r0, #190	@ 0xbe
 8002704:	4798      	blx	r3
 8002706:	4603      	mov	r3, r0
 8002708:	2bbc      	cmp	r3, #188	@ 0xbc
 800270a:	d002      	beq.n	8002712 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	e009      	b.n	8002726 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002712:	4b08      	ldr	r3, [pc, #32]	@ (8002734 <BSP_HSENSOR_Init+0x3c>)
 8002714:	4a06      	ldr	r2, [pc, #24]	@ (8002730 <BSP_HSENSOR_Init+0x38>)
 8002716:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <BSP_HSENSOR_Init+0x3c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	20be      	movs	r0, #190	@ 0xbe
 8002720:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002726:	687b      	ldr	r3, [r7, #4]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000004 	.word	0x20000004
 8002734:	20000a40 	.word	0x20000a40

08002738 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <BSP_HSENSOR_ReadHumidity+0x18>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	20be      	movs	r0, #190	@ 0xbe
 8002744:	4798      	blx	r3
 8002746:	eef0 7a40 	vmov.f32	s15, s0
}
 800274a:	eeb0 0a67 	vmov.f32	s0, s15
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000a40 	.word	0x20000a40

08002754 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800275e:	4b11      	ldr	r3, [pc, #68]	@ (80027a4 <BSP_MAGNETO_Init+0x50>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	4798      	blx	r3
 8002764:	4603      	mov	r3, r0
 8002766:	2b3d      	cmp	r3, #61	@ 0x3d
 8002768:	d002      	beq.n	8002770 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	71fb      	strb	r3, [r7, #7]
 800276e:	e013      	b.n	8002798 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002770:	4b0d      	ldr	r3, [pc, #52]	@ (80027a8 <BSP_MAGNETO_Init+0x54>)
 8002772:	4a0c      	ldr	r2, [pc, #48]	@ (80027a4 <BSP_MAGNETO_Init+0x50>)
 8002774:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002776:	2358      	movs	r3, #88	@ 0x58
 8002778:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800277a:	2300      	movs	r3, #0
 800277c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800277e:	2300      	movs	r3, #0
 8002780:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002782:	2308      	movs	r3, #8
 8002784:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002786:	2340      	movs	r3, #64	@ 0x40
 8002788:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <BSP_MAGNETO_Init+0x54>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	463a      	mov	r2, r7
 8002792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002796:	4798      	blx	r3
  } 

  return ret;  
 8002798:	79fb      	ldrb	r3, [r7, #7]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000020 	.word	0x20000020
 80027a8:	20000a44 	.word	0x20000a44

080027ac <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <BSP_MAGNETO_GetXYZ+0x2c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <BSP_MAGNETO_GetXYZ+0x2c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d004      	beq.n	80027d0 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 80027c6:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <BSP_MAGNETO_GetXYZ+0x2c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000a44 	.word	0x20000a44

080027dc <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80027e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <BSP_PSENSOR_Init+0x38>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	20ba      	movs	r0, #186	@ 0xba
 80027e8:	4798      	blx	r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	2bb1      	cmp	r3, #177	@ 0xb1
 80027ee:	d002      	beq.n	80027f6 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	e009      	b.n	800280a <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80027f6:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <BSP_PSENSOR_Init+0x3c>)
 80027f8:	4a06      	ldr	r2, [pc, #24]	@ (8002814 <BSP_PSENSOR_Init+0x38>)
 80027fa:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80027fc:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <BSP_PSENSOR_Init+0x3c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	20ba      	movs	r0, #186	@ 0xba
 8002804:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 800280a:	687b      	ldr	r3, [r7, #4]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000054 	.word	0x20000054
 8002818:	20000a48 	.word	0x20000a48

0800281c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002820:	4b04      	ldr	r3, [pc, #16]	@ (8002834 <BSP_PSENSOR_ReadPressure+0x18>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	20ba      	movs	r0, #186	@ 0xba
 8002828:	4798      	blx	r3
 800282a:	eef0 7a40 	vmov.f32	s15, s0
}
 800282e:	eeb0 0a67 	vmov.f32	s0, s15
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000a48 	.word	0x20000a48

08002838 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002842:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <BSP_TSENSOR_Init+0x30>)
 8002844:	4a09      	ldr	r2, [pc, #36]	@ (800286c <BSP_TSENSOR_Init+0x34>)
 8002846:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002848:	f7ff fe5a 	bl	8002500 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <BSP_TSENSOR_Init+0x30>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2100      	movs	r1, #0
 8002854:	20be      	movs	r0, #190	@ 0xbe
 8002856:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800285c:	79fb      	ldrb	r3, [r7, #7]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000a4c 	.word	0x20000a4c
 800286c:	20000010 	.word	0x20000010

08002870 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002874:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <BSP_TSENSOR_ReadTemp+0x18>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	20be      	movs	r0, #190	@ 0xbe
 800287c:	4798      	blx	r3
 800287e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002882:	eeb0 0a67 	vmov.f32	s0, s15
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000a4c 	.word	0x20000a4c

0800288c <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2120      	movs	r1, #32
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff fe53 	bl	8002548 <SENSOR_IO_Read>
 80028a2:	4603      	mov	r3, r0
 80028a4:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	f023 0304 	bic.w	r3, r3, #4
 80028ac:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	f043 0304 	orr.w	r3, r3, #4
 80028b4:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	f023 0303 	bic.w	r3, r3, #3
 80028bc:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80028cc:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	2120      	movs	r1, #32
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fe1c 	bl	8002514 <SENSOR_IO_Write>
}
 80028dc:	bf00      	nop
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 80028f2:	f7ff fe05 	bl	8002500 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	210f      	movs	r1, #15
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fe23 	bl	8002548 <SENSOR_IO_Read>
 8002902:	4603      	mov	r3, r0
 8002904:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	b2d8      	uxtb	r0, r3
 800291e:	f107 020c 	add.w	r2, r7, #12
 8002922:	2302      	movs	r3, #2
 8002924:	21b0      	movs	r1, #176	@ 0xb0
 8002926:	f7ff fe2d 	bl	8002584 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800292a:	7b3b      	ldrb	r3, [r7, #12]
 800292c:	085b      	lsrs	r3, r3, #1
 800292e:	b2db      	uxtb	r3, r3
 8002930:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002932:	7b7b      	ldrb	r3, [r7, #13]
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800293a:	88fb      	ldrh	r3, [r7, #6]
 800293c:	b2d8      	uxtb	r0, r3
 800293e:	f107 020c 	add.w	r2, r7, #12
 8002942:	2302      	movs	r3, #2
 8002944:	21b6      	movs	r1, #182	@ 0xb6
 8002946:	f7ff fe1d 	bl	8002584 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800294a:	7b7b      	ldrb	r3, [r7, #13]
 800294c:	b21b      	sxth	r3, r3
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	b21a      	sxth	r2, r3
 8002952:	7b3b      	ldrb	r3, [r7, #12]
 8002954:	b21b      	sxth	r3, r3
 8002956:	4313      	orrs	r3, r2
 8002958:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800295a:	88fb      	ldrh	r3, [r7, #6]
 800295c:	b2d8      	uxtb	r0, r3
 800295e:	f107 020c 	add.w	r2, r7, #12
 8002962:	2302      	movs	r3, #2
 8002964:	21ba      	movs	r1, #186	@ 0xba
 8002966:	f7ff fe0d 	bl	8002584 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800296a:	7b7b      	ldrb	r3, [r7, #13]
 800296c:	b21b      	sxth	r3, r3
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	b21a      	sxth	r2, r3
 8002972:	7b3b      	ldrb	r3, [r7, #12]
 8002974:	b21b      	sxth	r3, r3
 8002976:	4313      	orrs	r3, r2
 8002978:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800297a:	88fb      	ldrh	r3, [r7, #6]
 800297c:	b2d8      	uxtb	r0, r3
 800297e:	f107 020c 	add.w	r2, r7, #12
 8002982:	2302      	movs	r3, #2
 8002984:	21a8      	movs	r1, #168	@ 0xa8
 8002986:	f7ff fdfd 	bl	8002584 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800298a:	7b7b      	ldrb	r3, [r7, #13]
 800298c:	b21b      	sxth	r3, r3
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	b21a      	sxth	r2, r3
 8002992:	7b3b      	ldrb	r3, [r7, #12]
 8002994:	b21b      	sxth	r3, r3
 8002996:	4313      	orrs	r3, r2
 8002998:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800299a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800299e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	ee07 3a90 	vmov	s15, r3
 80029a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029ac:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80029b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80029c2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80029c6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e8:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 80029ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80029f0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80029f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f8:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 80029fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a00:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002a44 <HTS221_H_ReadHumidity+0x134>
 8002a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0c:	dd01      	ble.n	8002a12 <HTS221_H_ReadHumidity+0x102>
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <HTS221_H_ReadHumidity+0x138>)
 8002a10:	e00a      	b.n	8002a28 <HTS221_H_ReadHumidity+0x118>
        : tmp_f;
 8002a12:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1e:	d502      	bpl.n	8002a26 <HTS221_H_ReadHumidity+0x116>
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	e000      	b.n	8002a28 <HTS221_H_ReadHumidity+0x118>
 8002a26:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002a28:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002a2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a2e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002a32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a36:	eef0 7a66 	vmov.f32	s15, s13
}
 8002a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	447a0000 	.word	0x447a0000
 8002a48:	447a0000 	.word	0x447a0000

08002a4c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2120      	movs	r1, #32
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fd72 	bl	8002548 <SENSOR_IO_Read>
 8002a64:	4603      	mov	r3, r0
 8002a66:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002a68:	7bfb      	ldrb	r3, [r7, #15]
 8002a6a:	f023 0304 	bic.w	r3, r3, #4
 8002a6e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
 8002a7a:	f023 0303 	bic.w	r3, r3, #3
 8002a7e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a8e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	2120      	movs	r1, #32
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fd3b 	bl	8002514 <SENSOR_IO_Write>
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b088      	sub	sp, #32
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	4603      	mov	r3, r0
 8002aae:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002ab0:	88fb      	ldrh	r3, [r7, #6]
 8002ab2:	b2d8      	uxtb	r0, r3
 8002ab4:	f107 0208 	add.w	r2, r7, #8
 8002ab8:	2302      	movs	r3, #2
 8002aba:	21b2      	movs	r1, #178	@ 0xb2
 8002abc:	f7ff fd62 	bl	8002584 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2135      	movs	r1, #53	@ 0x35
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fd3e 	bl	8002548 <SENSOR_IO_Read>
 8002acc:	4603      	mov	r3, r0
 8002ace:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002ad0:	7ffb      	ldrb	r3, [r7, #31]
 8002ad2:	b21b      	sxth	r3, r3
 8002ad4:	021b      	lsls	r3, r3, #8
 8002ad6:	b21b      	sxth	r3, r3
 8002ad8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002adc:	b21a      	sxth	r2, r3
 8002ade:	7a3b      	ldrb	r3, [r7, #8]
 8002ae0:	b21b      	sxth	r3, r3
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002ae6:	7ffb      	ldrb	r3, [r7, #31]
 8002ae8:	b21b      	sxth	r3, r3
 8002aea:	019b      	lsls	r3, r3, #6
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002af2:	b21a      	sxth	r2, r3
 8002af4:	7a7b      	ldrb	r3, [r7, #9]
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	4313      	orrs	r3, r2
 8002afa:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002afc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002b00:	10db      	asrs	r3, r3, #3
 8002b02:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002b04:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b08:	10db      	asrs	r3, r3, #3
 8002b0a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	b2d8      	uxtb	r0, r3
 8002b10:	f107 0208 	add.w	r2, r7, #8
 8002b14:	2304      	movs	r3, #4
 8002b16:	21bc      	movs	r1, #188	@ 0xbc
 8002b18:	f7ff fd34 	bl	8002584 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002b1c:	7a7b      	ldrb	r3, [r7, #9]
 8002b1e:	b21b      	sxth	r3, r3
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	b21a      	sxth	r2, r3
 8002b24:	7a3b      	ldrb	r3, [r7, #8]
 8002b26:	b21b      	sxth	r3, r3
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	b21a      	sxth	r2, r3
 8002b34:	7abb      	ldrb	r3, [r7, #10]
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	b2d8      	uxtb	r0, r3
 8002b40:	f107 0208 	add.w	r2, r7, #8
 8002b44:	2302      	movs	r3, #2
 8002b46:	21aa      	movs	r1, #170	@ 0xaa
 8002b48:	f7ff fd1c 	bl	8002584 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002b4c:	7a7b      	ldrb	r3, [r7, #9]
 8002b4e:	b21b      	sxth	r3, r3
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	b21a      	sxth	r2, r3
 8002b54:	7a3b      	ldrb	r3, [r7, #8]
 8002b56:	b21b      	sxth	r3, r3
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002b5c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002b60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	ee07 3a90 	vmov	s15, r3
 8002b6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002b72:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b80:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b84:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b9a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002baa:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	ee07 3a90 	vmov	s15, r3
}
 8002bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb8:	3720      	adds	r7, #32
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002bca:	783b      	ldrb	r3, [r7, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2120      	movs	r1, #32
 8002bd0:	203c      	movs	r0, #60	@ 0x3c
 8002bd2:	f7ff fc9f 	bl	8002514 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002bd6:	787b      	ldrb	r3, [r7, #1]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2121      	movs	r1, #33	@ 0x21
 8002bdc:	203c      	movs	r0, #60	@ 0x3c
 8002bde:	f7ff fc99 	bl	8002514 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002be2:	78bb      	ldrb	r3, [r7, #2]
 8002be4:	461a      	mov	r2, r3
 8002be6:	2122      	movs	r1, #34	@ 0x22
 8002be8:	203c      	movs	r0, #60	@ 0x3c
 8002bea:	f7ff fc93 	bl	8002514 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2123      	movs	r1, #35	@ 0x23
 8002bf4:	203c      	movs	r0, #60	@ 0x3c
 8002bf6:	f7ff fc8d 	bl	8002514 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002bfa:	793b      	ldrb	r3, [r7, #4]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2124      	movs	r1, #36	@ 0x24
 8002c00:	203c      	movs	r0, #60	@ 0x3c
 8002c02:	f7ff fc87 	bl	8002514 <SENSOR_IO_Write>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002c14:	2300      	movs	r3, #0
 8002c16:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002c18:	2122      	movs	r1, #34	@ 0x22
 8002c1a:	203c      	movs	r0, #60	@ 0x3c
 8002c1c:	f7ff fc94 	bl	8002548 <SENSOR_IO_Read>
 8002c20:	4603      	mov	r3, r0
 8002c22:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	f023 0303 	bic.w	r3, r3, #3
 8002c2a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	f043 0303 	orr.w	r3, r3, #3
 8002c32:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002c34:	79fb      	ldrb	r3, [r7, #7]
 8002c36:	461a      	mov	r2, r3
 8002c38:	2122      	movs	r1, #34	@ 0x22
 8002c3a:	203c      	movs	r0, #60	@ 0x3c
 8002c3c:	f7ff fc6a 	bl	8002514 <SENSOR_IO_Write>
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002c4c:	f7ff fc58 	bl	8002500 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002c50:	210f      	movs	r1, #15
 8002c52:	203c      	movs	r0, #60	@ 0x3c
 8002c54:	f7ff fc78 	bl	8002548 <SENSOR_IO_Read>
 8002c58:	4603      	mov	r3, r0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002c6c:	2122      	movs	r1, #34	@ 0x22
 8002c6e:	203c      	movs	r0, #60	@ 0x3c
 8002c70:	f7ff fc6a 	bl	8002548 <SENSOR_IO_Read>
 8002c74:	4603      	mov	r3, r0
 8002c76:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	f023 0320 	bic.w	r3, r3, #32
 8002c7e:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002c80:	88fb      	ldrh	r3, [r7, #6]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	f043 0320 	orr.w	r3, r3, #32
 8002c8c:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	461a      	mov	r2, r3
 8002c92:	2122      	movs	r1, #34	@ 0x22
 8002c94:	203c      	movs	r0, #60	@ 0x3c
 8002c96:	f7ff fc3d 	bl	8002514 <SENSOR_IO_Write>
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002cba:	2121      	movs	r1, #33	@ 0x21
 8002cbc:	203c      	movs	r0, #60	@ 0x3c
 8002cbe:	f7ff fc43 	bl	8002548 <SENSOR_IO_Read>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002cc6:	f107 0208 	add.w	r2, r7, #8
 8002cca:	2306      	movs	r3, #6
 8002ccc:	21a8      	movs	r1, #168	@ 0xa8
 8002cce:	203c      	movs	r0, #60	@ 0x3c
 8002cd0:	f7ff fc58 	bl	8002584 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	77fb      	strb	r3, [r7, #31]
 8002cd8:	e01a      	b.n	8002d10 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002cda:	7ffb      	ldrb	r3, [r7, #31]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	3301      	adds	r3, #1
 8002ce0:	3320      	adds	r3, #32
 8002ce2:	443b      	add	r3, r7
 8002ce4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	7ffa      	ldrb	r2, [r7, #31]
 8002cee:	0052      	lsls	r2, r2, #1
 8002cf0:	3220      	adds	r2, #32
 8002cf2:	443a      	add	r2, r7
 8002cf4:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	7ffb      	ldrb	r3, [r7, #31]
 8002cfe:	b212      	sxth	r2, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	3320      	adds	r3, #32
 8002d04:	443b      	add	r3, r7
 8002d06:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]
 8002d10:	7ffb      	ldrb	r3, [r7, #31]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d9e1      	bls.n	8002cda <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002d16:	7dfb      	ldrb	r3, [r7, #23]
 8002d18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002d1c:	2b60      	cmp	r3, #96	@ 0x60
 8002d1e:	d013      	beq.n	8002d48 <LIS3MDL_MagReadXYZ+0xa4>
 8002d20:	2b60      	cmp	r3, #96	@ 0x60
 8002d22:	dc14      	bgt.n	8002d4e <LIS3MDL_MagReadXYZ+0xaa>
 8002d24:	2b40      	cmp	r3, #64	@ 0x40
 8002d26:	d00c      	beq.n	8002d42 <LIS3MDL_MagReadXYZ+0x9e>
 8002d28:	2b40      	cmp	r3, #64	@ 0x40
 8002d2a:	dc10      	bgt.n	8002d4e <LIS3MDL_MagReadXYZ+0xaa>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <LIS3MDL_MagReadXYZ+0x92>
 8002d30:	2b20      	cmp	r3, #32
 8002d32:	d003      	beq.n	8002d3c <LIS3MDL_MagReadXYZ+0x98>
 8002d34:	e00b      	b.n	8002d4e <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002d36:	4b19      	ldr	r3, [pc, #100]	@ (8002d9c <LIS3MDL_MagReadXYZ+0xf8>)
 8002d38:	61bb      	str	r3, [r7, #24]
    break;
 8002d3a:	e008      	b.n	8002d4e <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002d3c:	4b18      	ldr	r3, [pc, #96]	@ (8002da0 <LIS3MDL_MagReadXYZ+0xfc>)
 8002d3e:	61bb      	str	r3, [r7, #24]
    break;
 8002d40:	e005      	b.n	8002d4e <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002d42:	4b18      	ldr	r3, [pc, #96]	@ (8002da4 <LIS3MDL_MagReadXYZ+0x100>)
 8002d44:	61bb      	str	r3, [r7, #24]
    break;
 8002d46:	e002      	b.n	8002d4e <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002d48:	4b17      	ldr	r3, [pc, #92]	@ (8002da8 <LIS3MDL_MagReadXYZ+0x104>)
 8002d4a:	61bb      	str	r3, [r7, #24]
    break;    
 8002d4c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	77fb      	strb	r3, [r7, #31]
 8002d52:	e01a      	b.n	8002d8a <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002d54:	7ffb      	ldrb	r3, [r7, #31]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	3320      	adds	r3, #32
 8002d5a:	443b      	add	r3, r7
 8002d5c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002d60:	ee07 3a90 	vmov	s15, r3
 8002d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d68:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d70:	7ffb      	ldrb	r3, [r7, #31]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d7c:	ee17 2a90 	vmov	r2, s15
 8002d80:	b212      	sxth	r2, r2
 8002d82:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002d84:	7ffb      	ldrb	r3, [r7, #31]
 8002d86:	3301      	adds	r3, #1
 8002d88:	77fb      	strb	r3, [r7, #31]
 8002d8a:	7ffb      	ldrb	r3, [r7, #31]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d9e1      	bls.n	8002d54 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	3e0f5c29 	.word	0x3e0f5c29
 8002da0:	3e947ae1 	.word	0x3e947ae1
 8002da4:	3edc28f6 	.word	0x3edc28f6
 8002da8:	3f147ae1 	.word	0x3f147ae1

08002dac <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 f879 	bl	8002eb0 <LPS22HB_Init>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	4603      	mov	r3, r0
 8002dce:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002dd4:	f7ff fb94 	bl	8002500 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002dd8:	88fb      	ldrh	r3, [r7, #6]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	210f      	movs	r1, #15
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fbb2 	bl	8002548 <SENSOR_IO_Read>
 8002de4:	4603      	mov	r3, r0
 8002de6:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8002e02:	2300      	movs	r3, #0
 8002e04:	74fb      	strb	r3, [r7, #19]
 8002e06:	e013      	b.n	8002e30 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002e08:	88fb      	ldrh	r3, [r7, #6]
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	7cfb      	ldrb	r3, [r7, #19]
 8002e0e:	3328      	adds	r3, #40	@ 0x28
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	7cfc      	ldrb	r4, [r7, #19]
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f7ff fb96 	bl	8002548 <SENSOR_IO_Read>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f104 0318 	add.w	r3, r4, #24
 8002e24:	443b      	add	r3, r7
 8002e26:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8002e2a:	7cfb      	ldrb	r3, [r7, #19]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	74fb      	strb	r3, [r7, #19]
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d9e8      	bls.n	8002e08 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	74fb      	strb	r3, [r7, #19]
 8002e3a:	e00f      	b.n	8002e5c <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	3318      	adds	r3, #24
 8002e40:	443b      	add	r3, r7
 8002e42:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002e46:	461a      	mov	r2, r3
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	74fb      	strb	r3, [r7, #19]
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d9ec      	bls.n	8002e3c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e72:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2264      	movs	r2, #100	@ 0x64
 8002e7c:	fb02 f303 	mul.w	r3, r2, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	da01      	bge.n	8002e88 <LPS22HB_P_ReadPressure+0x94>
 8002e84:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002e88:	131b      	asrs	r3, r3, #12
 8002e8a:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e96:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002eac <LPS22HB_P_ReadPressure+0xb8>
 8002e9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e9e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd90      	pop	{r4, r7, pc}
 8002eac:	42c80000 	.word	0x42c80000

08002eb0 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	211a      	movs	r1, #26
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fb41 	bl	8002548 <SENSOR_IO_Read>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	f023 0301 	bic.w	r3, r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	7bfa      	ldrb	r2, [r7, #15]
 8002ee0:	211a      	movs	r1, #26
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7ff fb16 	bl	8002514 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2110      	movs	r1, #16
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fb2a 	bl	8002548 <SENSOR_IO_Read>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002efe:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8002f06:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	f023 0302 	bic.w	r3, r3, #2
 8002f0e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	7bfa      	ldrb	r2, [r7, #15]
 8002f1e:	2110      	movs	r1, #16
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff faf7 	bl	8002514 <SENSOR_IO_Write>
}  
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002f3c:	2110      	movs	r1, #16
 8002f3e:	20d4      	movs	r0, #212	@ 0xd4
 8002f40:	f7ff fb02 	bl	8002548 <SENSOR_IO_Read>
 8002f44:	4603      	mov	r3, r0
 8002f46:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002f48:	88fb      	ldrh	r3, [r7, #6]
 8002f4a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002f4c:	7bbb      	ldrb	r3, [r7, #14]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002f54:	7bba      	ldrb	r2, [r7, #14]
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002f5c:	7bbb      	ldrb	r3, [r7, #14]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	2110      	movs	r1, #16
 8002f62:	20d4      	movs	r0, #212	@ 0xd4
 8002f64:	f7ff fad6 	bl	8002514 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002f68:	2112      	movs	r1, #18
 8002f6a:	20d4      	movs	r0, #212	@ 0xd4
 8002f6c:	f7ff faec 	bl	8002548 <SENSOR_IO_Read>
 8002f70:	4603      	mov	r3, r0
 8002f72:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002f7c:	7bbb      	ldrb	r3, [r7, #14]
 8002f7e:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002f82:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002f84:	7bba      	ldrb	r2, [r7, #14]
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002f8c:	7bbb      	ldrb	r3, [r7, #14]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	2112      	movs	r1, #18
 8002f92:	20d4      	movs	r0, #212	@ 0xd4
 8002f94:	f7ff fabe 	bl	8002514 <SENSOR_IO_Write>
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002faa:	2110      	movs	r1, #16
 8002fac:	20d4      	movs	r0, #212	@ 0xd4
 8002fae:	f7ff facb 	bl	8002548 <SENSOR_IO_Read>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002fb6:	79fb      	ldrb	r3, [r7, #7]
 8002fb8:	f003 030f 	and.w	r3, r3, #15
 8002fbc:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2110      	movs	r1, #16
 8002fc4:	20d4      	movs	r0, #212	@ 0xd4
 8002fc6:	f7ff faa5 	bl	8002514 <SENSOR_IO_Write>
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002fd6:	f7ff fa93 	bl	8002500 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002fda:	210f      	movs	r1, #15
 8002fdc:	20d4      	movs	r0, #212	@ 0xd4
 8002fde:	f7ff fab3 	bl	8002548 <SENSOR_IO_Read>
 8002fe2:	4603      	mov	r3, r0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4603      	mov	r3, r0
 8002ff0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002ff6:	2115      	movs	r1, #21
 8002ff8:	20d4      	movs	r0, #212	@ 0xd4
 8002ffa:	f7ff faa5 	bl	8002548 <SENSOR_IO_Read>
 8002ffe:	4603      	mov	r3, r0
 8003000:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	f023 0310 	bic.w	r3, r3, #16
 8003008:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800300a:	88fb      	ldrh	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	f043 0310 	orr.w	r3, r3, #16
 8003016:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	461a      	mov	r2, r3
 800301c:	2115      	movs	r1, #21
 800301e:	20d4      	movs	r0, #212	@ 0xd4
 8003020:	f7ff fa78 	bl	8002514 <SENSOR_IO_Write>
}
 8003024:	bf00      	nop
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8003034:	2300      	movs	r3, #0
 8003036:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003042:	2110      	movs	r1, #16
 8003044:	20d4      	movs	r0, #212	@ 0xd4
 8003046:	f7ff fa7f 	bl	8002548 <SENSOR_IO_Read>
 800304a:	4603      	mov	r3, r0
 800304c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800304e:	f107 0208 	add.w	r2, r7, #8
 8003052:	2306      	movs	r3, #6
 8003054:	2128      	movs	r1, #40	@ 0x28
 8003056:	20d4      	movs	r0, #212	@ 0xd4
 8003058:	f7ff fa94 	bl	8002584 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800305c:	2300      	movs	r3, #0
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	e01a      	b.n	8003098 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003062:	7ffb      	ldrb	r3, [r7, #31]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	3301      	adds	r3, #1
 8003068:	3320      	adds	r3, #32
 800306a:	443b      	add	r3, r7
 800306c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	b29b      	uxth	r3, r3
 8003074:	7ffa      	ldrb	r2, [r7, #31]
 8003076:	0052      	lsls	r2, r2, #1
 8003078:	3220      	adds	r2, #32
 800307a:	443a      	add	r2, r7
 800307c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8003080:	4413      	add	r3, r2
 8003082:	b29a      	uxth	r2, r3
 8003084:	7ffb      	ldrb	r3, [r7, #31]
 8003086:	b212      	sxth	r2, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	3320      	adds	r3, #32
 800308c:	443b      	add	r3, r7
 800308e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003092:	7ffb      	ldrb	r3, [r7, #31]
 8003094:	3301      	adds	r3, #1
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	7ffb      	ldrb	r3, [r7, #31]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d9e1      	bls.n	8003062 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800309e:	7dfb      	ldrb	r3, [r7, #23]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d829      	bhi.n	80030fc <LSM6DSL_AccReadXYZ+0xd0>
 80030a8:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <LSM6DSL_AccReadXYZ+0x84>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030e5 	.word	0x080030e5
 80030b4:	080030fd 	.word	0x080030fd
 80030b8:	080030fd 	.word	0x080030fd
 80030bc:	080030fd 	.word	0x080030fd
 80030c0:	080030f7 	.word	0x080030f7
 80030c4:	080030fd 	.word	0x080030fd
 80030c8:	080030fd 	.word	0x080030fd
 80030cc:	080030fd 	.word	0x080030fd
 80030d0:	080030eb 	.word	0x080030eb
 80030d4:	080030fd 	.word	0x080030fd
 80030d8:	080030fd 	.word	0x080030fd
 80030dc:	080030fd 	.word	0x080030fd
 80030e0:	080030f1 	.word	0x080030f1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80030e4:	4b18      	ldr	r3, [pc, #96]	@ (8003148 <LSM6DSL_AccReadXYZ+0x11c>)
 80030e6:	61bb      	str	r3, [r7, #24]
    break;
 80030e8:	e008      	b.n	80030fc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80030ea:	4b18      	ldr	r3, [pc, #96]	@ (800314c <LSM6DSL_AccReadXYZ+0x120>)
 80030ec:	61bb      	str	r3, [r7, #24]
    break;
 80030ee:	e005      	b.n	80030fc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80030f0:	4b17      	ldr	r3, [pc, #92]	@ (8003150 <LSM6DSL_AccReadXYZ+0x124>)
 80030f2:	61bb      	str	r3, [r7, #24]
    break;
 80030f4:	e002      	b.n	80030fc <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80030f6:	4b17      	ldr	r3, [pc, #92]	@ (8003154 <LSM6DSL_AccReadXYZ+0x128>)
 80030f8:	61bb      	str	r3, [r7, #24]
    break;    
 80030fa:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	77fb      	strb	r3, [r7, #31]
 8003100:	e01a      	b.n	8003138 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8003102:	7ffb      	ldrb	r3, [r7, #31]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	3320      	adds	r3, #32
 8003108:	443b      	add	r3, r7
 800310a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003116:	edd7 7a06 	vldr	s15, [r7, #24]
 800311a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800311e:	7ffb      	ldrb	r3, [r7, #31]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800312a:	ee17 2a90 	vmov	r2, s15
 800312e:	b212      	sxth	r2, r2
 8003130:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8003132:	7ffb      	ldrb	r3, [r7, #31]
 8003134:	3301      	adds	r3, #1
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	7ffb      	ldrb	r3, [r7, #31]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d9e1      	bls.n	8003102 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	3d79db23 	.word	0x3d79db23
 800314c:	3df9db23 	.word	0x3df9db23
 8003150:	3e79db23 	.word	0x3e79db23
 8003154:	3ef9db23 	.word	0x3ef9db23

08003158 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003166:	2111      	movs	r1, #17
 8003168:	20d4      	movs	r0, #212	@ 0xd4
 800316a:	f7ff f9ed 	bl	8002548 <SENSOR_IO_Read>
 800316e:	4603      	mov	r3, r0
 8003170:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8003176:	7bbb      	ldrb	r3, [r7, #14]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800317e:	7bba      	ldrb	r2, [r7, #14]
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	4313      	orrs	r3, r2
 8003184:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8003186:	7bbb      	ldrb	r3, [r7, #14]
 8003188:	461a      	mov	r2, r3
 800318a:	2111      	movs	r1, #17
 800318c:	20d4      	movs	r0, #212	@ 0xd4
 800318e:	f7ff f9c1 	bl	8002514 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003192:	2112      	movs	r1, #18
 8003194:	20d4      	movs	r0, #212	@ 0xd4
 8003196:	f7ff f9d7 	bl	8002548 <SENSOR_IO_Read>
 800319a:	4603      	mov	r3, r0
 800319c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80031a6:	7bbb      	ldrb	r3, [r7, #14]
 80031a8:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 80031ac:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80031ae:	7bba      	ldrb	r2, [r7, #14]
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80031b6:	7bbb      	ldrb	r3, [r7, #14]
 80031b8:	461a      	mov	r2, r3
 80031ba:	2112      	movs	r1, #18
 80031bc:	20d4      	movs	r0, #212	@ 0xd4
 80031be:	f7ff f9a9 	bl	8002514 <SENSOR_IO_Write>
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80031d0:	2300      	movs	r3, #0
 80031d2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80031d4:	2111      	movs	r1, #17
 80031d6:	20d4      	movs	r0, #212	@ 0xd4
 80031d8:	f7ff f9b6 	bl	8002548 <SENSOR_IO_Read>
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	461a      	mov	r2, r3
 80031ec:	2111      	movs	r1, #17
 80031ee:	20d4      	movs	r0, #212	@ 0xd4
 80031f0:	f7ff f990 	bl	8002514 <SENSOR_IO_Write>
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8003200:	f7ff f97e 	bl	8002500 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8003204:	210f      	movs	r1, #15
 8003206:	20d4      	movs	r0, #212	@ 0xd4
 8003208:	f7ff f99e 	bl	8002548 <SENSOR_IO_Read>
 800320c:	4603      	mov	r3, r0
}
 800320e:	4618      	mov	r0, r3
 8003210:	bd80      	pop	{r7, pc}

08003212 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8003220:	2116      	movs	r1, #22
 8003222:	20d4      	movs	r0, #212	@ 0xd4
 8003224:	f7ff f990 	bl	8002548 <SENSOR_IO_Read>
 8003228:	4603      	mov	r3, r0
 800322a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003232:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8003234:	88fb      	ldrh	r3, [r7, #6]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003240:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8003242:	7bfb      	ldrb	r3, [r7, #15]
 8003244:	461a      	mov	r2, r3
 8003246:	2116      	movs	r1, #22
 8003248:	20d4      	movs	r0, #212	@ 0xd4
 800324a:	f7ff f963 	bl	8002514 <SENSOR_IO_Write>
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8003260:	2300      	movs	r3, #0
 8003262:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800326e:	2111      	movs	r1, #17
 8003270:	20d4      	movs	r0, #212	@ 0xd4
 8003272:	f7ff f969 	bl	8002548 <SENSOR_IO_Read>
 8003276:	4603      	mov	r3, r0
 8003278:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800327a:	f107 0208 	add.w	r2, r7, #8
 800327e:	2306      	movs	r3, #6
 8003280:	2122      	movs	r1, #34	@ 0x22
 8003282:	20d4      	movs	r0, #212	@ 0xd4
 8003284:	f7ff f97e 	bl	8002584 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003288:	2300      	movs	r3, #0
 800328a:	77fb      	strb	r3, [r7, #31]
 800328c:	e01a      	b.n	80032c4 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800328e:	7ffb      	ldrb	r3, [r7, #31]
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	3301      	adds	r3, #1
 8003294:	3320      	adds	r3, #32
 8003296:	443b      	add	r3, r7
 8003298:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	b29b      	uxth	r3, r3
 80032a0:	7ffa      	ldrb	r2, [r7, #31]
 80032a2:	0052      	lsls	r2, r2, #1
 80032a4:	3220      	adds	r2, #32
 80032a6:	443a      	add	r2, r7
 80032a8:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 80032ac:	4413      	add	r3, r2
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	7ffb      	ldrb	r3, [r7, #31]
 80032b2:	b212      	sxth	r2, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	3320      	adds	r3, #32
 80032b8:	443b      	add	r3, r7
 80032ba:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80032be:	7ffb      	ldrb	r3, [r7, #31]
 80032c0:	3301      	adds	r3, #1
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	7ffb      	ldrb	r3, [r7, #31]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d9e1      	bls.n	800328e <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b0c      	cmp	r3, #12
 80032d2:	d829      	bhi.n	8003328 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 80032d4:	a201      	add	r2, pc, #4	@ (adr r2, 80032dc <LSM6DSL_GyroReadXYZAngRate+0x84>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003311 	.word	0x08003311
 80032e0:	08003329 	.word	0x08003329
 80032e4:	08003329 	.word	0x08003329
 80032e8:	08003329 	.word	0x08003329
 80032ec:	08003317 	.word	0x08003317
 80032f0:	08003329 	.word	0x08003329
 80032f4:	08003329 	.word	0x08003329
 80032f8:	08003329 	.word	0x08003329
 80032fc:	0800331d 	.word	0x0800331d
 8003300:	08003329 	.word	0x08003329
 8003304:	08003329 	.word	0x08003329
 8003308:	08003329 	.word	0x08003329
 800330c:	08003323 	.word	0x08003323
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8003310:	4b16      	ldr	r3, [pc, #88]	@ (800336c <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8003312:	61bb      	str	r3, [r7, #24]
    break;
 8003314:	e008      	b.n	8003328 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8003316:	4b16      	ldr	r3, [pc, #88]	@ (8003370 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8003318:	61bb      	str	r3, [r7, #24]
    break;
 800331a:	e005      	b.n	8003328 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800331c:	4b15      	ldr	r3, [pc, #84]	@ (8003374 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800331e:	61bb      	str	r3, [r7, #24]
    break;
 8003320:	e002      	b.n	8003328 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8003322:	4b15      	ldr	r3, [pc, #84]	@ (8003378 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8003324:	61bb      	str	r3, [r7, #24]
    break;    
 8003326:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8003328:	2300      	movs	r3, #0
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e016      	b.n	800335c <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800332e:	7ffb      	ldrb	r3, [r7, #31]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	3320      	adds	r3, #32
 8003334:	443b      	add	r3, r7
 8003336:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003342:	7ffb      	ldrb	r3, [r7, #31]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	edd7 7a06 	vldr	s15, [r7, #24]
 800334e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003352:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003356:	7ffb      	ldrb	r3, [r7, #31]
 8003358:	3301      	adds	r3, #1
 800335a:	77fb      	strb	r3, [r7, #31]
 800335c:	7ffb      	ldrb	r3, [r7, #31]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d9e5      	bls.n	800332e <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	3720      	adds	r7, #32
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	410c0000 	.word	0x410c0000
 8003370:	418c0000 	.word	0x418c0000
 8003374:	420c0000 	.word	0x420c0000
 8003378:	428c0000 	.word	0x428c0000

0800337c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003386:	2003      	movs	r0, #3
 8003388:	f000 f960 	bl	800364c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800338c:	2000      	movs	r0, #0
 800338e:	f000 f80d 	bl	80033ac <HAL_InitTick>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	71fb      	strb	r3, [r7, #7]
 800339c:	e001      	b.n	80033a2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800339e:	f7fe fba7 	bl	8001af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80033a2:	79fb      	ldrb	r3, [r7, #7]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033b8:	4b17      	ldr	r3, [pc, #92]	@ (8003418 <HAL_InitTick+0x6c>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d023      	beq.n	8003408 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033c0:	4b16      	ldr	r3, [pc, #88]	@ (800341c <HAL_InitTick+0x70>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4b14      	ldr	r3, [pc, #80]	@ (8003418 <HAL_InitTick+0x6c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	4619      	mov	r1, r3
 80033ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80033d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f96d 	bl	80036b6 <HAL_SYSTICK_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10f      	bne.n	8003402 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b0f      	cmp	r3, #15
 80033e6:	d809      	bhi.n	80033fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033e8:	2200      	movs	r2, #0
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033f0:	f000 f937 	bl	8003662 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003420 <HAL_InitTick+0x74>)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e007      	b.n	800340c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e004      	b.n	800340c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
 8003406:	e001      	b.n	800340c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	200000cc 	.word	0x200000cc
 800341c:	20000000 	.word	0x20000000
 8003420:	200000c8 	.word	0x200000c8

08003424 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003428:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_IncTick+0x20>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_IncTick+0x24>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4413      	add	r3, r2
 8003434:	4a04      	ldr	r2, [pc, #16]	@ (8003448 <HAL_IncTick+0x24>)
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	200000cc 	.word	0x200000cc
 8003448:	20000a50 	.word	0x20000a50

0800344c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return uwTick;
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <HAL_GetTick+0x14>)
 8003452:	681b      	ldr	r3, [r3, #0]
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	20000a50 	.word	0x20000a50

08003464 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800346c:	f7ff ffee 	bl	800344c <HAL_GetTick>
 8003470:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800347c:	d005      	beq.n	800348a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800347e:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <HAL_Delay+0x44>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800348a:	bf00      	nop
 800348c:	f7ff ffde 	bl	800344c <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	429a      	cmp	r2, r3
 800349a:	d8f7      	bhi.n	800348c <HAL_Delay+0x28>
  {
  }
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200000cc 	.word	0x200000cc

080034ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034bc:	4b0c      	ldr	r3, [pc, #48]	@ (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034c8:	4013      	ands	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034de:	4a04      	ldr	r2, [pc, #16]	@ (80034f0 <__NVIC_SetPriorityGrouping+0x44>)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	60d3      	str	r3, [r2, #12]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f8:	4b04      	ldr	r3, [pc, #16]	@ (800350c <__NVIC_GetPriorityGrouping+0x18>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	0a1b      	lsrs	r3, r3, #8
 80034fe:	f003 0307 	and.w	r3, r3, #7
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000ed00 	.word	0xe000ed00

08003510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800351a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351e:	2b00      	cmp	r3, #0
 8003520:	db0b      	blt.n	800353a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	f003 021f 	and.w	r2, r3, #31
 8003528:	4907      	ldr	r1, [pc, #28]	@ (8003548 <__NVIC_EnableIRQ+0x38>)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2001      	movs	r0, #1
 8003532:	fa00 f202 	lsl.w	r2, r0, r2
 8003536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000e100 	.word	0xe000e100

0800354c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	6039      	str	r1, [r7, #0]
 8003556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	2b00      	cmp	r3, #0
 800355e:	db0a      	blt.n	8003576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	b2da      	uxtb	r2, r3
 8003564:	490c      	ldr	r1, [pc, #48]	@ (8003598 <__NVIC_SetPriority+0x4c>)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	0112      	lsls	r2, r2, #4
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	440b      	add	r3, r1
 8003570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003574:	e00a      	b.n	800358c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	4908      	ldr	r1, [pc, #32]	@ (800359c <__NVIC_SetPriority+0x50>)
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	3b04      	subs	r3, #4
 8003584:	0112      	lsls	r2, r2, #4
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	440b      	add	r3, r1
 800358a:	761a      	strb	r2, [r3, #24]
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000e100 	.word	0xe000e100
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	@ 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f1c3 0307 	rsb	r3, r3, #7
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	bf28      	it	cs
 80035be:	2304      	movcs	r3, #4
 80035c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3304      	adds	r3, #4
 80035c6:	2b06      	cmp	r3, #6
 80035c8:	d902      	bls.n	80035d0 <NVIC_EncodePriority+0x30>
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3b03      	subs	r3, #3
 80035ce:	e000      	b.n	80035d2 <NVIC_EncodePriority+0x32>
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	401a      	ands	r2, r3
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	fa01 f303 	lsl.w	r3, r1, r3
 80035f2:	43d9      	mvns	r1, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f8:	4313      	orrs	r3, r2
         );
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3724      	adds	r7, #36	@ 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3b01      	subs	r3, #1
 8003614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003618:	d301      	bcc.n	800361e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800361a:	2301      	movs	r3, #1
 800361c:	e00f      	b.n	800363e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800361e:	4a0a      	ldr	r2, [pc, #40]	@ (8003648 <SysTick_Config+0x40>)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003626:	210f      	movs	r1, #15
 8003628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800362c:	f7ff ff8e 	bl	800354c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003630:	4b05      	ldr	r3, [pc, #20]	@ (8003648 <SysTick_Config+0x40>)
 8003632:	2200      	movs	r2, #0
 8003634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003636:	4b04      	ldr	r3, [pc, #16]	@ (8003648 <SysTick_Config+0x40>)
 8003638:	2207      	movs	r2, #7
 800363a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	e000e010 	.word	0xe000e010

0800364c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7ff ff29 	bl	80034ac <__NVIC_SetPriorityGrouping>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003674:	f7ff ff3e 	bl	80034f4 <__NVIC_GetPriorityGrouping>
 8003678:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	68b9      	ldr	r1, [r7, #8]
 800367e:	6978      	ldr	r0, [r7, #20]
 8003680:	f7ff ff8e 	bl	80035a0 <NVIC_EncodePriority>
 8003684:	4602      	mov	r2, r0
 8003686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368a:	4611      	mov	r1, r2
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff5d 	bl	800354c <__NVIC_SetPriority>
}
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff ff31 	bl	8003510 <__NVIC_EnableIRQ>
}
 80036ae:	bf00      	nop
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	b082      	sub	sp, #8
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ffa2 	bl	8003608 <SysTick_Config>
 80036c4:	4603      	mov	r3, r0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3708      	adds	r7, #8
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0ac      	b.n	800383c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f8b2 	bl	8003850 <DFSDM_GetChannelFromInstance>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4a55      	ldr	r2, [pc, #340]	@ (8003844 <HAL_DFSDM_ChannelInit+0x174>)
 80036f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e09f      	b.n	800383c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7fe fa1b 	bl	8001b38 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003702:	4b51      	ldr	r3, [pc, #324]	@ (8003848 <HAL_DFSDM_ChannelInit+0x178>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	4a4f      	ldr	r2, [pc, #316]	@ (8003848 <HAL_DFSDM_ChannelInit+0x178>)
 800370a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800370c:	4b4e      	ldr	r3, [pc, #312]	@ (8003848 <HAL_DFSDM_ChannelInit+0x178>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d125      	bne.n	8003760 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003714:	4b4d      	ldr	r3, [pc, #308]	@ (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a4c      	ldr	r2, [pc, #304]	@ (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 800371a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800371e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003720:	4b4a      	ldr	r3, [pc, #296]	@ (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4948      	ldr	r1, [pc, #288]	@ (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800372e:	4b47      	ldr	r3, [pc, #284]	@ (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a46      	ldr	r2, [pc, #280]	@ (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003734:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003738:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	791b      	ldrb	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d108      	bne.n	8003754 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003742:	4b42      	ldr	r3, [pc, #264]	@ (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	3b01      	subs	r3, #1
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	493f      	ldr	r1, [pc, #252]	@ (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003754:	4b3d      	ldr	r3, [pc, #244]	@ (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a3c      	ldr	r2, [pc, #240]	@ (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 800375a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800375e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 800376e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800377e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003784:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 020f 	bic.w	r2, r2, #15
 800379c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 80037c4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6899      	ldr	r1, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	3b01      	subs	r3, #1
 80037d6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f002 0207 	and.w	r2, r2, #7
 80037f0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037fc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800381c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f810 	bl	8003850 <DFSDM_GetChannelFromInstance>
 8003830:	4602      	mov	r2, r0
 8003832:	4904      	ldr	r1, [pc, #16]	@ (8003844 <HAL_DFSDM_ChannelInit+0x174>)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000a58 	.word	0x20000a58
 8003848:	20000a54 	.word	0x20000a54
 800384c:	40016000 	.word	0x40016000

08003850 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1c      	ldr	r2, [pc, #112]	@ (80038cc <DFSDM_GetChannelFromInstance+0x7c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d102      	bne.n	8003866 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e02b      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a19      	ldr	r2, [pc, #100]	@ (80038d0 <DFSDM_GetChannelFromInstance+0x80>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d102      	bne.n	8003874 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e024      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a17      	ldr	r2, [pc, #92]	@ (80038d4 <DFSDM_GetChannelFromInstance+0x84>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d102      	bne.n	8003882 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800387c:	2302      	movs	r3, #2
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e01d      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a14      	ldr	r2, [pc, #80]	@ (80038d8 <DFSDM_GetChannelFromInstance+0x88>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d102      	bne.n	8003890 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800388a:	2304      	movs	r3, #4
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	e016      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a12      	ldr	r2, [pc, #72]	@ (80038dc <DFSDM_GetChannelFromInstance+0x8c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d102      	bne.n	800389e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003898:	2305      	movs	r3, #5
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e00f      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a0f      	ldr	r2, [pc, #60]	@ (80038e0 <DFSDM_GetChannelFromInstance+0x90>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d102      	bne.n	80038ac <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80038a6:	2306      	movs	r3, #6
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	e008      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0d      	ldr	r2, [pc, #52]	@ (80038e4 <DFSDM_GetChannelFromInstance+0x94>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d102      	bne.n	80038ba <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80038b4:	2307      	movs	r3, #7
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e001      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80038ba:	2303      	movs	r3, #3
 80038bc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80038be:	68fb      	ldr	r3, [r7, #12]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40016000 	.word	0x40016000
 80038d0:	40016020 	.word	0x40016020
 80038d4:	40016040 	.word	0x40016040
 80038d8:	40016080 	.word	0x40016080
 80038dc:	400160a0 	.word	0x400160a0
 80038e0:	400160c0 	.word	0x400160c0
 80038e4:	400160e0 	.word	0x400160e0

080038e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038f6:	e17f      	b.n	8003bf8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2101      	movs	r1, #1
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	fa01 f303 	lsl.w	r3, r1, r3
 8003904:	4013      	ands	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8171 	beq.w	8003bf2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d005      	beq.n	8003928 <HAL_GPIO_Init+0x40>
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d130      	bne.n	800398a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	2203      	movs	r2, #3
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800395e:	2201      	movs	r2, #1
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4013      	ands	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	091b      	lsrs	r3, r3, #4
 8003974:	f003 0201 	and.w	r2, r3, #1
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b03      	cmp	r3, #3
 8003994:	d118      	bne.n	80039c8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800399a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800399c:	2201      	movs	r2, #1
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	08db      	lsrs	r3, r3, #3
 80039b2:	f003 0201 	and.w	r2, r3, #1
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d017      	beq.n	8003a04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	2203      	movs	r2, #3
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43db      	mvns	r3, r3
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4013      	ands	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	693a      	ldr	r2, [r7, #16]
 8003a02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d123      	bne.n	8003a58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	08da      	lsrs	r2, r3, #3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3208      	adds	r2, #8
 8003a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	220f      	movs	r2, #15
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	08da      	lsrs	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3208      	adds	r2, #8
 8003a52:	6939      	ldr	r1, [r7, #16]
 8003a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0203 	and.w	r2, r3, #3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80ac 	beq.w	8003bf2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8003c18 <HAL_GPIO_Init+0x330>)
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a9e:	4a5e      	ldr	r2, [pc, #376]	@ (8003c18 <HAL_GPIO_Init+0x330>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c18 <HAL_GPIO_Init+0x330>)
 8003aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ab2:	4a5a      	ldr	r2, [pc, #360]	@ (8003c1c <HAL_GPIO_Init+0x334>)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	3302      	adds	r3, #2
 8003aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	220f      	movs	r2, #15
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003adc:	d025      	beq.n	8003b2a <HAL_GPIO_Init+0x242>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a4f      	ldr	r2, [pc, #316]	@ (8003c20 <HAL_GPIO_Init+0x338>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01f      	beq.n	8003b26 <HAL_GPIO_Init+0x23e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a4e      	ldr	r2, [pc, #312]	@ (8003c24 <HAL_GPIO_Init+0x33c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d019      	beq.n	8003b22 <HAL_GPIO_Init+0x23a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a4d      	ldr	r2, [pc, #308]	@ (8003c28 <HAL_GPIO_Init+0x340>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_GPIO_Init+0x236>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4c      	ldr	r2, [pc, #304]	@ (8003c2c <HAL_GPIO_Init+0x344>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00d      	beq.n	8003b1a <HAL_GPIO_Init+0x232>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a4b      	ldr	r2, [pc, #300]	@ (8003c30 <HAL_GPIO_Init+0x348>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <HAL_GPIO_Init+0x22e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a4a      	ldr	r2, [pc, #296]	@ (8003c34 <HAL_GPIO_Init+0x34c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <HAL_GPIO_Init+0x22a>
 8003b0e:	2306      	movs	r3, #6
 8003b10:	e00c      	b.n	8003b2c <HAL_GPIO_Init+0x244>
 8003b12:	2307      	movs	r3, #7
 8003b14:	e00a      	b.n	8003b2c <HAL_GPIO_Init+0x244>
 8003b16:	2305      	movs	r3, #5
 8003b18:	e008      	b.n	8003b2c <HAL_GPIO_Init+0x244>
 8003b1a:	2304      	movs	r3, #4
 8003b1c:	e006      	b.n	8003b2c <HAL_GPIO_Init+0x244>
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e004      	b.n	8003b2c <HAL_GPIO_Init+0x244>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e002      	b.n	8003b2c <HAL_GPIO_Init+0x244>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <HAL_GPIO_Init+0x244>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	f002 0203 	and.w	r2, r2, #3
 8003b32:	0092      	lsls	r2, r2, #2
 8003b34:	4093      	lsls	r3, r2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b3c:	4937      	ldr	r1, [pc, #220]	@ (8003c1c <HAL_GPIO_Init+0x334>)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	089b      	lsrs	r3, r3, #2
 8003b42:	3302      	adds	r3, #2
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c38 <HAL_GPIO_Init+0x350>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	43db      	mvns	r3, r3
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4013      	ands	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b6e:	4a32      	ldr	r2, [pc, #200]	@ (8003c38 <HAL_GPIO_Init+0x350>)
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b74:	4b30      	ldr	r3, [pc, #192]	@ (8003c38 <HAL_GPIO_Init+0x350>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4013      	ands	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b98:	4a27      	ldr	r2, [pc, #156]	@ (8003c38 <HAL_GPIO_Init+0x350>)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b9e:	4b26      	ldr	r3, [pc, #152]	@ (8003c38 <HAL_GPIO_Init+0x350>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8003c38 <HAL_GPIO_Init+0x350>)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <HAL_GPIO_Init+0x350>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bec:	4a12      	ldr	r2, [pc, #72]	@ (8003c38 <HAL_GPIO_Init+0x350>)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f47f ae78 	bne.w	80038f8 <HAL_GPIO_Init+0x10>
  }
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40010000 	.word	0x40010000
 8003c20:	48000400 	.word	0x48000400
 8003c24:	48000800 	.word	0x48000800
 8003c28:	48000c00 	.word	0x48000c00
 8003c2c:	48001000 	.word	0x48001000
 8003c30:	48001400 	.word	0x48001400
 8003c34:	48001800 	.word	0x48001800
 8003c38:	40010400 	.word	0x40010400

08003c3c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c4a:	e0cd      	b.n	8003de8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	4013      	ands	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80c0 	beq.w	8003de2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003c62:	4a68      	ldr	r2, [pc, #416]	@ (8003e04 <HAL_GPIO_DeInit+0x1c8>)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	089b      	lsrs	r3, r3, #2
 8003c68:	3302      	adds	r3, #2
 8003c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	220f      	movs	r2, #15
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	4013      	ands	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003c8a:	d025      	beq.n	8003cd8 <HAL_GPIO_DeInit+0x9c>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a5e      	ldr	r2, [pc, #376]	@ (8003e08 <HAL_GPIO_DeInit+0x1cc>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d01f      	beq.n	8003cd4 <HAL_GPIO_DeInit+0x98>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a5d      	ldr	r2, [pc, #372]	@ (8003e0c <HAL_GPIO_DeInit+0x1d0>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d019      	beq.n	8003cd0 <HAL_GPIO_DeInit+0x94>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a5c      	ldr	r2, [pc, #368]	@ (8003e10 <HAL_GPIO_DeInit+0x1d4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d013      	beq.n	8003ccc <HAL_GPIO_DeInit+0x90>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a5b      	ldr	r2, [pc, #364]	@ (8003e14 <HAL_GPIO_DeInit+0x1d8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d00d      	beq.n	8003cc8 <HAL_GPIO_DeInit+0x8c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a5a      	ldr	r2, [pc, #360]	@ (8003e18 <HAL_GPIO_DeInit+0x1dc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d007      	beq.n	8003cc4 <HAL_GPIO_DeInit+0x88>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a59      	ldr	r2, [pc, #356]	@ (8003e1c <HAL_GPIO_DeInit+0x1e0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <HAL_GPIO_DeInit+0x84>
 8003cbc:	2306      	movs	r3, #6
 8003cbe:	e00c      	b.n	8003cda <HAL_GPIO_DeInit+0x9e>
 8003cc0:	2307      	movs	r3, #7
 8003cc2:	e00a      	b.n	8003cda <HAL_GPIO_DeInit+0x9e>
 8003cc4:	2305      	movs	r3, #5
 8003cc6:	e008      	b.n	8003cda <HAL_GPIO_DeInit+0x9e>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	e006      	b.n	8003cda <HAL_GPIO_DeInit+0x9e>
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e004      	b.n	8003cda <HAL_GPIO_DeInit+0x9e>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e002      	b.n	8003cda <HAL_GPIO_DeInit+0x9e>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_GPIO_DeInit+0x9e>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	f002 0203 	and.w	r2, r2, #3
 8003ce0:	0092      	lsls	r2, r2, #2
 8003ce2:	4093      	lsls	r3, r2
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d132      	bne.n	8003d50 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003cea:	4b4d      	ldr	r3, [pc, #308]	@ (8003e20 <HAL_GPIO_DeInit+0x1e4>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	494b      	ldr	r1, [pc, #300]	@ (8003e20 <HAL_GPIO_DeInit+0x1e4>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003cf8:	4b49      	ldr	r3, [pc, #292]	@ (8003e20 <HAL_GPIO_DeInit+0x1e4>)
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	4947      	ldr	r1, [pc, #284]	@ (8003e20 <HAL_GPIO_DeInit+0x1e4>)
 8003d02:	4013      	ands	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003d06:	4b46      	ldr	r3, [pc, #280]	@ (8003e20 <HAL_GPIO_DeInit+0x1e4>)
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	4944      	ldr	r1, [pc, #272]	@ (8003e20 <HAL_GPIO_DeInit+0x1e4>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003d14:	4b42      	ldr	r3, [pc, #264]	@ (8003e20 <HAL_GPIO_DeInit+0x1e4>)
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	4940      	ldr	r1, [pc, #256]	@ (8003e20 <HAL_GPIO_DeInit+0x1e4>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	220f      	movs	r2, #15
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003d32:	4a34      	ldr	r2, [pc, #208]	@ (8003e04 <HAL_GPIO_DeInit+0x1c8>)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	089b      	lsrs	r3, r3, #2
 8003d38:	3302      	adds	r3, #2
 8003d3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	43da      	mvns	r2, r3
 8003d42:	4830      	ldr	r0, [pc, #192]	@ (8003e04 <HAL_GPIO_DeInit+0x1c8>)
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	089b      	lsrs	r3, r3, #2
 8003d48:	400a      	ands	r2, r1
 8003d4a:	3302      	adds	r3, #2
 8003d4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	2103      	movs	r1, #3
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	08da      	lsrs	r2, r3, #3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3208      	adds	r2, #8
 8003d6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	220f      	movs	r2, #15
 8003d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	08d2      	lsrs	r2, r2, #3
 8003d84:	4019      	ands	r1, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3208      	adds	r2, #8
 8003d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	2103      	movs	r1, #3
 8003d98:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	401a      	ands	r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	2101      	movs	r1, #1
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	2103      	movs	r1, #3
 8003dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	401a      	ands	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	401a      	ands	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	3301      	adds	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f47f af2b 	bne.w	8003c4c <HAL_GPIO_DeInit+0x10>
  }
}
 8003df6:	bf00      	nop
 8003df8:	bf00      	nop
 8003dfa:	371c      	adds	r7, #28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40010000 	.word	0x40010000
 8003e08:	48000400 	.word	0x48000400
 8003e0c:	48000800 	.word	0x48000800
 8003e10:	48000c00 	.word	0x48000c00
 8003e14:	48001000 	.word	0x48001000
 8003e18:	48001400 	.word	0x48001400
 8003e1c:	48001800 	.word	0x48001800
 8003e20:	40010400 	.word	0x40010400

08003e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
 8003e30:	4613      	mov	r3, r2
 8003e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e34:	787b      	ldrb	r3, [r7, #1]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e40:	e002      	b.n	8003e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e42:	887a      	ldrh	r2, [r7, #2]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e66:	887a      	ldrh	r2, [r7, #2]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	041a      	lsls	r2, r3, #16
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	43d9      	mvns	r1, r3
 8003e72:	887b      	ldrh	r3, [r7, #2]
 8003e74:	400b      	ands	r3, r1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	619a      	str	r2, [r3, #24]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e92:	4b08      	ldr	r3, [pc, #32]	@ (8003eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e9e:	4a05      	ldr	r2, [pc, #20]	@ (8003eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea0:	88fb      	ldrh	r3, [r7, #6]
 8003ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 f806 	bl	8003eb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003eac:	bf00      	nop
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40010400 	.word	0x40010400

08003eb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e08d      	b.n	8003ffc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7fd fe83 	bl	8001c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2224      	movs	r2, #36	@ 0x24
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0201 	bic.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f1e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f2e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d107      	bne.n	8003f48 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f44:	609a      	str	r2, [r3, #8]
 8003f46:	e006      	b.n	8003f56 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f54:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d108      	bne.n	8003f70 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	e007      	b.n	8003f80 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f7e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f92:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fa2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69d9      	ldr	r1, [r3, #28]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1a      	ldr	r2, [r3, #32]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0201 	orr.w	r2, r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e021      	b.n	800405a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2224      	movs	r2, #36	@ 0x24
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fd fe44 	bl	8001cbc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b088      	sub	sp, #32
 8004068:	af02      	add	r7, sp, #8
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	4608      	mov	r0, r1
 800406e:	4611      	mov	r1, r2
 8004070:	461a      	mov	r2, r3
 8004072:	4603      	mov	r3, r0
 8004074:	817b      	strh	r3, [r7, #10]
 8004076:	460b      	mov	r3, r1
 8004078:	813b      	strh	r3, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b20      	cmp	r3, #32
 8004088:	f040 80f9 	bne.w	800427e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_I2C_Mem_Write+0x34>
 8004092:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800409e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0ed      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d101      	bne.n	80040b2 <HAL_I2C_Mem_Write+0x4e>
 80040ae:	2302      	movs	r3, #2
 80040b0:	e0e6      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040ba:	f7ff f9c7 	bl	800344c <HAL_GetTick>
 80040be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2319      	movs	r3, #25
 80040c6:	2201      	movs	r2, #1
 80040c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fac3 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0d1      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2221      	movs	r2, #33	@ 0x21
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2240      	movs	r2, #64	@ 0x40
 80040e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a3a      	ldr	r2, [r7, #32]
 80040f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80040fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004104:	88f8      	ldrh	r0, [r7, #6]
 8004106:	893a      	ldrh	r2, [r7, #8]
 8004108:	8979      	ldrh	r1, [r7, #10]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	4603      	mov	r3, r0
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f000 f9d3 	bl	80044c0 <I2C_RequestMemoryWrite>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0a9      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2bff      	cmp	r3, #255	@ 0xff
 8004134:	d90e      	bls.n	8004154 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	22ff      	movs	r2, #255	@ 0xff
 800413a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004140:	b2da      	uxtb	r2, r3
 8004142:	8979      	ldrh	r1, [r7, #10]
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fc47 	bl	80049e0 <I2C_TransferConfig>
 8004152:	e00f      	b.n	8004174 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	b2da      	uxtb	r2, r3
 8004164:	8979      	ldrh	r1, [r7, #10]
 8004166:	2300      	movs	r3, #0
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fc36 	bl	80049e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fac6 	bl	800470a <I2C_WaitOnTXISFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e07b      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041bc:	b29b      	uxth	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d034      	beq.n	800422c <HAL_I2C_Mem_Write+0x1c8>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d130      	bne.n	800422c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d0:	2200      	movs	r2, #0
 80041d2:	2180      	movs	r1, #128	@ 0x80
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fa3f 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e04d      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2bff      	cmp	r3, #255	@ 0xff
 80041ec:	d90e      	bls.n	800420c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	22ff      	movs	r2, #255	@ 0xff
 80041f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	8979      	ldrh	r1, [r7, #10]
 80041fc:	2300      	movs	r3, #0
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 fbeb 	bl	80049e0 <I2C_TransferConfig>
 800420a:	e00f      	b.n	800422c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421a:	b2da      	uxtb	r2, r3
 800421c:	8979      	ldrh	r1, [r7, #10]
 800421e:	2300      	movs	r3, #0
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fbda 	bl	80049e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29b      	uxth	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d19e      	bne.n	8004174 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 faac 	bl	8004798 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e01a      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2220      	movs	r2, #32
 8004250:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6859      	ldr	r1, [r3, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b0a      	ldr	r3, [pc, #40]	@ (8004288 <HAL_I2C_Mem_Write+0x224>)
 800425e:	400b      	ands	r3, r1
 8004260:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800427e:	2302      	movs	r3, #2
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	fe00e800 	.word	0xfe00e800

0800428c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	4608      	mov	r0, r1
 8004296:	4611      	mov	r1, r2
 8004298:	461a      	mov	r2, r3
 800429a:	4603      	mov	r3, r0
 800429c:	817b      	strh	r3, [r7, #10]
 800429e:	460b      	mov	r3, r1
 80042a0:	813b      	strh	r3, [r7, #8]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	f040 80fd 	bne.w	80044ae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_I2C_Mem_Read+0x34>
 80042ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d105      	bne.n	80042cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0f1      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_I2C_Mem_Read+0x4e>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e0ea      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042e2:	f7ff f8b3 	bl	800344c <HAL_GetTick>
 80042e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	2319      	movs	r3, #25
 80042ee:	2201      	movs	r2, #1
 80042f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 f9af 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0d5      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2222      	movs	r2, #34	@ 0x22
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2240      	movs	r2, #64	@ 0x40
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004324:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800432c:	88f8      	ldrh	r0, [r7, #6]
 800432e:	893a      	ldrh	r2, [r7, #8]
 8004330:	8979      	ldrh	r1, [r7, #10]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	9301      	str	r3, [sp, #4]
 8004336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	4603      	mov	r3, r0
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 f913 	bl	8004568 <I2C_RequestMemoryRead>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0ad      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004358:	b29b      	uxth	r3, r3
 800435a:	2bff      	cmp	r3, #255	@ 0xff
 800435c:	d90e      	bls.n	800437c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004368:	b2da      	uxtb	r2, r3
 800436a:	8979      	ldrh	r1, [r7, #10]
 800436c:	4b52      	ldr	r3, [pc, #328]	@ (80044b8 <HAL_I2C_Mem_Read+0x22c>)
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fb33 	bl	80049e0 <I2C_TransferConfig>
 800437a:	e00f      	b.n	800439c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438a:	b2da      	uxtb	r2, r3
 800438c:	8979      	ldrh	r1, [r7, #10]
 800438e:	4b4a      	ldr	r3, [pc, #296]	@ (80044b8 <HAL_I2C_Mem_Read+0x22c>)
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 fb22 	bl	80049e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a2:	2200      	movs	r2, #0
 80043a4:	2104      	movs	r1, #4
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f956 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e07c      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d034      	beq.n	800445c <HAL_I2C_Mem_Read+0x1d0>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d130      	bne.n	800445c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	2200      	movs	r2, #0
 8004402:	2180      	movs	r1, #128	@ 0x80
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f927 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e04d      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2bff      	cmp	r3, #255	@ 0xff
 800441c:	d90e      	bls.n	800443c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004428:	b2da      	uxtb	r2, r3
 800442a:	8979      	ldrh	r1, [r7, #10]
 800442c:	2300      	movs	r3, #0
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fad3 	bl	80049e0 <I2C_TransferConfig>
 800443a:	e00f      	b.n	800445c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800444a:	b2da      	uxtb	r2, r3
 800444c:	8979      	ldrh	r1, [r7, #10]
 800444e:	2300      	movs	r3, #0
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fac2 	bl	80049e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d19a      	bne.n	800439c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f994 	bl	8004798 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e01a      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2220      	movs	r2, #32
 8004480:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <HAL_I2C_Mem_Read+0x230>)
 800448e:	400b      	ands	r3, r1
 8004490:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	80002400 	.word	0x80002400
 80044bc:	fe00e800 	.word	0xfe00e800

080044c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	4608      	mov	r0, r1
 80044ca:	4611      	mov	r1, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	4603      	mov	r3, r0
 80044d0:	817b      	strh	r3, [r7, #10]
 80044d2:	460b      	mov	r3, r1
 80044d4:	813b      	strh	r3, [r7, #8]
 80044d6:	4613      	mov	r3, r2
 80044d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	8979      	ldrh	r1, [r7, #10]
 80044e0:	4b20      	ldr	r3, [pc, #128]	@ (8004564 <I2C_RequestMemoryWrite+0xa4>)
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fa79 	bl	80049e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	69b9      	ldr	r1, [r7, #24]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 f909 	bl	800470a <I2C_WaitOnTXISFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e02c      	b.n	800455c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004508:	893b      	ldrh	r3, [r7, #8]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	629a      	str	r2, [r3, #40]	@ 0x28
 8004512:	e015      	b.n	8004540 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004514:	893b      	ldrh	r3, [r7, #8]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	b29b      	uxth	r3, r3
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	69b9      	ldr	r1, [r7, #24]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f8ef 	bl	800470a <I2C_WaitOnTXISFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e012      	b.n	800455c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004536:	893b      	ldrh	r3, [r7, #8]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2200      	movs	r2, #0
 8004548:	2180      	movs	r1, #128	@ 0x80
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f884 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	80002000 	.word	0x80002000

08004568 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	4608      	mov	r0, r1
 8004572:	4611      	mov	r1, r2
 8004574:	461a      	mov	r2, r3
 8004576:	4603      	mov	r3, r0
 8004578:	817b      	strh	r3, [r7, #10]
 800457a:	460b      	mov	r3, r1
 800457c:	813b      	strh	r3, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	8979      	ldrh	r1, [r7, #10]
 8004588:	4b20      	ldr	r3, [pc, #128]	@ (800460c <I2C_RequestMemoryRead+0xa4>)
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2300      	movs	r3, #0
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 fa26 	bl	80049e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004594:	69fa      	ldr	r2, [r7, #28]
 8004596:	69b9      	ldr	r1, [r7, #24]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f8b6 	bl	800470a <I2C_WaitOnTXISFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e02c      	b.n	8004602 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d105      	bne.n	80045ba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045ae:	893b      	ldrh	r3, [r7, #8]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80045b8:	e015      	b.n	80045e6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80045ba:	893b      	ldrh	r3, [r7, #8]
 80045bc:	0a1b      	lsrs	r3, r3, #8
 80045be:	b29b      	uxth	r3, r3
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f89c 	bl	800470a <I2C_WaitOnTXISFlagUntilTimeout>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d001      	beq.n	80045dc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e012      	b.n	8004602 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80045dc:	893b      	ldrh	r3, [r7, #8]
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2140      	movs	r1, #64	@ 0x40
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f831 	bl	8004658 <I2C_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e000      	b.n	8004602 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	80002000 	.word	0x80002000

08004610 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d103      	bne.n	800462e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2200      	movs	r2, #0
 800462c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b01      	cmp	r3, #1
 800463a:	d007      	beq.n	800464c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	619a      	str	r2, [r3, #24]
  }
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004668:	e03b      	b.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	6839      	ldr	r1, [r7, #0]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f8d6 	bl	8004820 <I2C_IsErrorOccurred>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e041      	b.n	8004702 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004684:	d02d      	beq.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004686:	f7fe fee1 	bl	800344c <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d302      	bcc.n	800469c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d122      	bne.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699a      	ldr	r2, [r3, #24]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4013      	ands	r3, r2
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	79fb      	ldrb	r3, [r7, #7]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d113      	bne.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046be:	f043 0220 	orr.w	r2, r3, #32
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e00f      	b.n	8004702 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	4013      	ands	r3, r2
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	bf0c      	ite	eq
 80046f2:	2301      	moveq	r3, #1
 80046f4:	2300      	movne	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d0b4      	beq.n	800466a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004716:	e033      	b.n	8004780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f87f 	bl	8004820 <I2C_IsErrorOccurred>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e031      	b.n	8004790 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004732:	d025      	beq.n	8004780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004734:	f7fe fe8a 	bl	800344c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	d302      	bcc.n	800474a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d11a      	bne.n	8004780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b02      	cmp	r3, #2
 8004756:	d013      	beq.n	8004780 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475c:	f043 0220 	orr.w	r2, r3, #32
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e007      	b.n	8004790 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b02      	cmp	r3, #2
 800478c:	d1c4      	bne.n	8004718 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a4:	e02f      	b.n	8004806 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f838 	bl	8004820 <I2C_IsErrorOccurred>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e02d      	b.n	8004816 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fe fe47 	bl	800344c <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d11a      	bne.n	8004806 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f003 0320 	and.w	r3, r3, #32
 80047da:	2b20      	cmp	r3, #32
 80047dc:	d013      	beq.n	8004806 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e007      	b.n	8004816 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f003 0320 	and.w	r3, r3, #32
 8004810:	2b20      	cmp	r3, #32
 8004812:	d1c8      	bne.n	80047a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	@ 0x28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800483a:	2300      	movs	r3, #0
 800483c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	d068      	beq.n	800491e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2210      	movs	r2, #16
 8004852:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004854:	e049      	b.n	80048ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800485c:	d045      	beq.n	80048ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800485e:	f7fe fdf5 	bl	800344c <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <I2C_IsErrorOccurred+0x54>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d13a      	bne.n	80048ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800487e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004886:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004896:	d121      	bne.n	80048dc <I2C_IsErrorOccurred+0xbc>
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800489e:	d01d      	beq.n	80048dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	2b20      	cmp	r3, #32
 80048a4:	d01a      	beq.n	80048dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80048b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048b6:	f7fe fdc9 	bl	800344c <HAL_GetTick>
 80048ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048bc:	e00e      	b.n	80048dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048be:	f7fe fdc5 	bl	800344c <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b19      	cmp	r3, #25
 80048ca:	d907      	bls.n	80048dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f043 0320 	orr.w	r3, r3, #32
 80048d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80048da:	e006      	b.n	80048ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d1e9      	bne.n	80048be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d003      	beq.n	8004900 <I2C_IsErrorOccurred+0xe0>
 80048f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d0aa      	beq.n	8004856 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004900:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004904:	2b00      	cmp	r3, #0
 8004906:	d103      	bne.n	8004910 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2220      	movs	r2, #32
 800490e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004910:	6a3b      	ldr	r3, [r7, #32]
 8004912:	f043 0304 	orr.w	r3, r3, #4
 8004916:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f043 0301 	orr.w	r3, r3, #1
 8004936:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004940:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f043 0308 	orr.w	r3, r3, #8
 8004958:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004962:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00b      	beq.n	800498c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	f043 0302 	orr.w	r3, r3, #2
 800497a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004984:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800498c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01c      	beq.n	80049ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff fe3b 	bl	8004610 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <I2C_IsErrorOccurred+0x1bc>)
 80049a6:	400b      	ands	r3, r1
 80049a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2220      	movs	r2, #32
 80049ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80049ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3728      	adds	r7, #40	@ 0x28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	fe00e800 	.word	0xfe00e800

080049e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	817b      	strh	r3, [r7, #10]
 80049ee:	4613      	mov	r3, r2
 80049f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80049f2:	897b      	ldrh	r3, [r7, #10]
 80049f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80049f8:	7a7b      	ldrb	r3, [r7, #9]
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a06:	6a3b      	ldr	r3, [r7, #32]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	0d5b      	lsrs	r3, r3, #21
 8004a1a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a1e:	4b08      	ldr	r3, [pc, #32]	@ (8004a40 <I2C_TransferConfig+0x60>)
 8004a20:	430b      	orrs	r3, r1
 8004a22:	43db      	mvns	r3, r3
 8004a24:	ea02 0103 	and.w	r1, r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	03ff63ff 	.word	0x03ff63ff

08004a44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d138      	bne.n	8004acc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e032      	b.n	8004ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2224      	movs	r2, #36	@ 0x24
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6819      	ldr	r1, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e000      	b.n	8004ace <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004acc:	2302      	movs	r3, #2
  }
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d139      	bne.n	8004b64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e033      	b.n	8004b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2224      	movs	r2, #36	@ 0x24
 8004b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e000      	b.n	8004b66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b64:	2302      	movs	r3, #2
  }
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b086      	sub	sp, #24
 8004b76:	af02      	add	r7, sp, #8
 8004b78:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e101      	b.n	8004d88 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fd f9df 	bl	8001f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f002 fb97 	bl	80072e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	7c1a      	ldrb	r2, [r3, #16]
 8004bbe:	f88d 2000 	strb.w	r2, [sp]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bc6:	f002 fb60 	bl	800728a <USB_CoreInit>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0d5      	b.n	8004d88 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f002 fb8f 	bl	8007306 <USB_SetCurrentMode>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d005      	beq.n	8004bfa <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e0c6      	b.n	8004d88 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]
 8004bfe:	e04a      	b.n	8004c96 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c00:	7bfa      	ldrb	r2, [r7, #15]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3315      	adds	r3, #21
 8004c10:	2201      	movs	r2, #1
 8004c12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3314      	adds	r3, #20
 8004c24:	7bfa      	ldrb	r2, [r7, #15]
 8004c26:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	b298      	uxth	r0, r3
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	332e      	adds	r3, #46	@ 0x2e
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c40:	7bfa      	ldrb	r2, [r7, #15]
 8004c42:	6879      	ldr	r1, [r7, #4]
 8004c44:	4613      	mov	r3, r2
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	3318      	adds	r3, #24
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c54:	7bfa      	ldrb	r2, [r7, #15]
 8004c56:	6879      	ldr	r1, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	331c      	adds	r3, #28
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c68:	7bfa      	ldrb	r2, [r7, #15]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	3320      	adds	r3, #32
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c7c:	7bfa      	ldrb	r2, [r7, #15]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4413      	add	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	3324      	adds	r3, #36	@ 0x24
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	3301      	adds	r3, #1
 8004c94:	73fb      	strb	r3, [r7, #15]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	791b      	ldrb	r3, [r3, #4]
 8004c9a:	7bfa      	ldrb	r2, [r7, #15]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d3af      	bcc.n	8004c00 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	73fb      	strb	r3, [r7, #15]
 8004ca4:	e044      	b.n	8004d30 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004ca6:	7bfa      	ldrb	r2, [r7, #15]
 8004ca8:	6879      	ldr	r1, [r7, #4]
 8004caa:	4613      	mov	r3, r2
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4413      	add	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	440b      	add	r3, r1
 8004cb4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cbc:	7bfa      	ldrb	r2, [r7, #15]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004cce:	7bfa      	ldrb	r2, [r7, #15]
 8004cd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cd2:	7bfa      	ldrb	r2, [r7, #15]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ce8:	7bfa      	ldrb	r2, [r7, #15]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cfe:	7bfa      	ldrb	r2, [r7, #15]
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d14:	7bfa      	ldrb	r2, [r7, #15]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	791b      	ldrb	r3, [r3, #4]
 8004d34:	7bfa      	ldrb	r2, [r7, #15]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d3b5      	bcc.n	8004ca6 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	7c1a      	ldrb	r2, [r3, #16]
 8004d42:	f88d 2000 	strb.w	r2, [sp]
 8004d46:	3304      	adds	r3, #4
 8004d48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d4a:	f002 fb29 	bl	80073a0 <USB_DevInit>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d005      	beq.n	8004d60 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e013      	b.n	8004d88 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	7b1b      	ldrb	r3, [r3, #12]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d102      	bne.n	8004d7c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f80a 	bl	8004d90 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f002 fcce 	bl	8007722 <USB_DevDisconnect>

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dc2:	f043 0303 	orr.w	r3, r3, #3
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a04      	ldr	r2, [pc, #16]	@ (8004df4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de6:	6013      	str	r3, [r2, #0]
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	40007000 	.word	0x40007000

08004df8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004dfc:	4b04      	ldr	r3, [pc, #16]	@ (8004e10 <HAL_PWREx_GetVoltageRange+0x18>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40007000 	.word	0x40007000

08004e14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e22:	d130      	bne.n	8004e86 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e24:	4b23      	ldr	r3, [pc, #140]	@ (8004eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e30:	d038      	beq.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e32:	4b20      	ldr	r3, [pc, #128]	@ (8004eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e42:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2232      	movs	r2, #50	@ 0x32
 8004e48:	fb02 f303 	mul.w	r3, r2, r3
 8004e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	0c9b      	lsrs	r3, r3, #18
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e58:	e002      	b.n	8004e60 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e60:	4b14      	ldr	r3, [pc, #80]	@ (8004eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6c:	d102      	bne.n	8004e74 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1f2      	bne.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e74:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e80:	d110      	bne.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e00f      	b.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e86:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e92:	d007      	beq.n	8004ea4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e94:	4b07      	ldr	r3, [pc, #28]	@ (8004eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e9c:	4a05      	ldr	r2, [pc, #20]	@ (8004eb4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ea2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	40007000 	.word	0x40007000
 8004eb8:	20000000 	.word	0x20000000
 8004ebc:	431bde83 	.word	0x431bde83

08004ec0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004ec4:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a04      	ldr	r2, [pc, #16]	@ (8004edc <HAL_PWREx_EnableVddUSB+0x1c>)
 8004eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ece:	6053      	str	r3, [r2, #4]
}
 8004ed0:	bf00      	nop
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40007000 	.word	0x40007000

08004ee0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004ee8:	f7fe fab0 	bl	800344c <HAL_GetTick>
 8004eec:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e063      	b.n	8004fc0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10b      	bne.n	8004f1c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7fc fef9 	bl	8001d04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004f12:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f858 	bl	8004fcc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	021a      	lsls	r2, r3, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2120      	movs	r1, #32
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f850 	bl	8004fe8 <QSPI_WaitFlagStateUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004f4c:	7afb      	ldrb	r3, [r7, #11]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d131      	bne.n	8004fb6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f5c:	f023 0310 	bic.w	r3, r3, #16
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6852      	ldr	r2, [r2, #4]
 8004f64:	0611      	lsls	r1, r2, #24
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	68d2      	ldr	r2, [r2, #12]
 8004f6a:	4311      	orrs	r1, r2
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	430b      	orrs	r3, r1
 8004f72:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	4b13      	ldr	r3, [pc, #76]	@ (8004fc8 <HAL_QSPI_Init+0xe8>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6912      	ldr	r2, [r2, #16]
 8004f82:	0411      	lsls	r1, r2, #16
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6952      	ldr	r2, [r2, #20]
 8004f88:	4311      	orrs	r1, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6992      	ldr	r2, [r2, #24]
 8004f8e:	4311      	orrs	r1, r2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	430b      	orrs	r3, r1
 8004f96:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8004fbe:	7afb      	ldrb	r3, [r7, #11]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	ffe0f8fe 	.word	0xffe0f8fe

08004fcc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004ff8:	e01a      	b.n	8005030 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005000:	d016      	beq.n	8005030 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005002:	f7fe fa23 	bl	800344c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	429a      	cmp	r2, r3
 8005010:	d302      	bcc.n	8005018 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10b      	bne.n	8005030 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2204      	movs	r2, #4
 800501c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	f043 0201 	orr.w	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e00e      	b.n	800504e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	4013      	ands	r3, r2
 800503a:	2b00      	cmp	r3, #0
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	429a      	cmp	r2, r3
 800504a:	d1d6      	bne.n	8004ffa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e3ca      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800506a:	4b97      	ldr	r3, [pc, #604]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	f003 030c 	and.w	r3, r3, #12
 8005072:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005074:	4b94      	ldr	r3, [pc, #592]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 80e4 	beq.w	8005254 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d007      	beq.n	80050a2 <HAL_RCC_OscConfig+0x4a>
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	2b0c      	cmp	r3, #12
 8005096:	f040 808b 	bne.w	80051b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b01      	cmp	r3, #1
 800509e:	f040 8087 	bne.w	80051b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050a2:	4b89      	ldr	r3, [pc, #548]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d005      	beq.n	80050ba <HAL_RCC_OscConfig+0x62>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e3a2      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1a      	ldr	r2, [r3, #32]
 80050be:	4b82      	ldr	r3, [pc, #520]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d004      	beq.n	80050d4 <HAL_RCC_OscConfig+0x7c>
 80050ca:	4b7f      	ldr	r3, [pc, #508]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050d2:	e005      	b.n	80050e0 <HAL_RCC_OscConfig+0x88>
 80050d4:	4b7c      	ldr	r3, [pc, #496]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80050d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d223      	bcs.n	800512c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fd55 	bl	8005b98 <RCC_SetFlashLatencyFromMSIRange>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e383      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050f8:	4b73      	ldr	r3, [pc, #460]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a72      	ldr	r2, [pc, #456]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80050fe:	f043 0308 	orr.w	r3, r3, #8
 8005102:	6013      	str	r3, [r2, #0]
 8005104:	4b70      	ldr	r3, [pc, #448]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	496d      	ldr	r1, [pc, #436]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005112:	4313      	orrs	r3, r2
 8005114:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005116:	4b6c      	ldr	r3, [pc, #432]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	4968      	ldr	r1, [pc, #416]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005126:	4313      	orrs	r3, r2
 8005128:	604b      	str	r3, [r1, #4]
 800512a:	e025      	b.n	8005178 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800512c:	4b66      	ldr	r3, [pc, #408]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a65      	ldr	r2, [pc, #404]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005132:	f043 0308 	orr.w	r3, r3, #8
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	4b63      	ldr	r3, [pc, #396]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	4960      	ldr	r1, [pc, #384]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005146:	4313      	orrs	r3, r2
 8005148:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800514a:	4b5f      	ldr	r3, [pc, #380]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	021b      	lsls	r3, r3, #8
 8005158:	495b      	ldr	r1, [pc, #364]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 800515a:	4313      	orrs	r3, r2
 800515c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d109      	bne.n	8005178 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fd15 	bl	8005b98 <RCC_SetFlashLatencyFromMSIRange>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e343      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005178:	f000 fc4a 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 800517c:	4602      	mov	r2, r0
 800517e:	4b52      	ldr	r3, [pc, #328]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	4950      	ldr	r1, [pc, #320]	@ (80052cc <HAL_RCC_OscConfig+0x274>)
 800518a:	5ccb      	ldrb	r3, [r1, r3]
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
 8005194:	4a4e      	ldr	r2, [pc, #312]	@ (80052d0 <HAL_RCC_OscConfig+0x278>)
 8005196:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005198:	4b4e      	ldr	r3, [pc, #312]	@ (80052d4 <HAL_RCC_OscConfig+0x27c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f7fe f905 	bl	80033ac <HAL_InitTick>
 80051a2:	4603      	mov	r3, r0
 80051a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d052      	beq.n	8005252 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	e327      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d032      	beq.n	800521e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051b8:	4b43      	ldr	r3, [pc, #268]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a42      	ldr	r2, [pc, #264]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80051be:	f043 0301 	orr.w	r3, r3, #1
 80051c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051c4:	f7fe f942 	bl	800344c <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051cc:	f7fe f93e 	bl	800344c <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e310      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051de:	4b3a      	ldr	r3, [pc, #232]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051ea:	4b37      	ldr	r3, [pc, #220]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a36      	ldr	r2, [pc, #216]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80051f0:	f043 0308 	orr.w	r3, r3, #8
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	4b34      	ldr	r3, [pc, #208]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	4931      	ldr	r1, [pc, #196]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005204:	4313      	orrs	r3, r2
 8005206:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005208:	4b2f      	ldr	r3, [pc, #188]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	492c      	ldr	r1, [pc, #176]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005218:	4313      	orrs	r3, r2
 800521a:	604b      	str	r3, [r1, #4]
 800521c:	e01a      	b.n	8005254 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800521e:	4b2a      	ldr	r3, [pc, #168]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a29      	ldr	r2, [pc, #164]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800522a:	f7fe f90f 	bl	800344c <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005232:	f7fe f90b 	bl	800344c <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e2dd      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005244:	4b20      	ldr	r3, [pc, #128]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f0      	bne.n	8005232 <HAL_RCC_OscConfig+0x1da>
 8005250:	e000      	b.n	8005254 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005252:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d074      	beq.n	800534a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b08      	cmp	r3, #8
 8005264:	d005      	beq.n	8005272 <HAL_RCC_OscConfig+0x21a>
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b0c      	cmp	r3, #12
 800526a:	d10e      	bne.n	800528a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	2b03      	cmp	r3, #3
 8005270:	d10b      	bne.n	800528a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005272:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d064      	beq.n	8005348 <HAL_RCC_OscConfig+0x2f0>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d160      	bne.n	8005348 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e2ba      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005292:	d106      	bne.n	80052a2 <HAL_RCC_OscConfig+0x24a>
 8005294:	4b0c      	ldr	r3, [pc, #48]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a0b      	ldr	r2, [pc, #44]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 800529a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	e026      	b.n	80052f0 <HAL_RCC_OscConfig+0x298>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052aa:	d115      	bne.n	80052d8 <HAL_RCC_OscConfig+0x280>
 80052ac:	4b06      	ldr	r3, [pc, #24]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a05      	ldr	r2, [pc, #20]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80052b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	4b03      	ldr	r3, [pc, #12]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a02      	ldr	r2, [pc, #8]	@ (80052c8 <HAL_RCC_OscConfig+0x270>)
 80052be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	e014      	b.n	80052f0 <HAL_RCC_OscConfig+0x298>
 80052c6:	bf00      	nop
 80052c8:	40021000 	.word	0x40021000
 80052cc:	0800a398 	.word	0x0800a398
 80052d0:	20000000 	.word	0x20000000
 80052d4:	200000c8 	.word	0x200000c8
 80052d8:	4ba0      	ldr	r3, [pc, #640]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a9f      	ldr	r2, [pc, #636]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80052de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	4b9d      	ldr	r3, [pc, #628]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a9c      	ldr	r2, [pc, #624]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80052ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d013      	beq.n	8005320 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fe f8a8 	bl	800344c <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005300:	f7fe f8a4 	bl	800344c <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	@ 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e276      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005312:	4b92      	ldr	r3, [pc, #584]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0x2a8>
 800531e:	e014      	b.n	800534a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005320:	f7fe f894 	bl	800344c <HAL_GetTick>
 8005324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005326:	e008      	b.n	800533a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005328:	f7fe f890 	bl	800344c <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	2b64      	cmp	r3, #100	@ 0x64
 8005334:	d901      	bls.n	800533a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e262      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800533a:	4b88      	ldr	r3, [pc, #544]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d1f0      	bne.n	8005328 <HAL_RCC_OscConfig+0x2d0>
 8005346:	e000      	b.n	800534a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d060      	beq.n	8005418 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b04      	cmp	r3, #4
 800535a:	d005      	beq.n	8005368 <HAL_RCC_OscConfig+0x310>
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b0c      	cmp	r3, #12
 8005360:	d119      	bne.n	8005396 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b02      	cmp	r3, #2
 8005366:	d116      	bne.n	8005396 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005368:	4b7c      	ldr	r3, [pc, #496]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_RCC_OscConfig+0x328>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d101      	bne.n	8005380 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e23f      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005380:	4b76      	ldr	r3, [pc, #472]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	061b      	lsls	r3, r3, #24
 800538e:	4973      	ldr	r1, [pc, #460]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 8005390:	4313      	orrs	r3, r2
 8005392:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005394:	e040      	b.n	8005418 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d023      	beq.n	80053e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800539e:	4b6f      	ldr	r3, [pc, #444]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a6e      	ldr	r2, [pc, #440]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80053a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053aa:	f7fe f84f 	bl	800344c <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053b0:	e008      	b.n	80053c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053b2:	f7fe f84b 	bl	800344c <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e21d      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053c4:	4b65      	ldr	r3, [pc, #404]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d0f0      	beq.n	80053b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d0:	4b62      	ldr	r3, [pc, #392]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	061b      	lsls	r3, r3, #24
 80053de:	495f      	ldr	r1, [pc, #380]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	604b      	str	r3, [r1, #4]
 80053e4:	e018      	b.n	8005418 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053e6:	4b5d      	ldr	r3, [pc, #372]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a5c      	ldr	r2, [pc, #368]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80053ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f2:	f7fe f82b 	bl	800344c <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053fa:	f7fe f827 	bl	800344c <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e1f9      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800540c:	4b53      	ldr	r3, [pc, #332]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f0      	bne.n	80053fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0308 	and.w	r3, r3, #8
 8005420:	2b00      	cmp	r3, #0
 8005422:	d03c      	beq.n	800549e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	695b      	ldr	r3, [r3, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01c      	beq.n	8005466 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800542c:	4b4b      	ldr	r3, [pc, #300]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 800542e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005432:	4a4a      	ldr	r2, [pc, #296]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 8005434:	f043 0301 	orr.w	r3, r3, #1
 8005438:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543c:	f7fe f806 	bl	800344c <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005444:	f7fe f802 	bl	800344c <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e1d4      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005456:	4b41      	ldr	r3, [pc, #260]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 8005458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0ef      	beq.n	8005444 <HAL_RCC_OscConfig+0x3ec>
 8005464:	e01b      	b.n	800549e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005466:	4b3d      	ldr	r3, [pc, #244]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 8005468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800546c:	4a3b      	ldr	r2, [pc, #236]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 800546e:	f023 0301 	bic.w	r3, r3, #1
 8005472:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005476:	f7fd ffe9 	bl	800344c <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800547e:	f7fd ffe5 	bl	800344c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e1b7      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005490:	4b32      	ldr	r3, [pc, #200]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 8005492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1ef      	bne.n	800547e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0304 	and.w	r3, r3, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80a6 	beq.w	80055f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ac:	2300      	movs	r3, #0
 80054ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80054b0:	4b2a      	ldr	r3, [pc, #168]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80054b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10d      	bne.n	80054d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054bc:	4b27      	ldr	r3, [pc, #156]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80054be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c0:	4a26      	ldr	r2, [pc, #152]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80054c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80054c8:	4b24      	ldr	r3, [pc, #144]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 80054ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d0:	60bb      	str	r3, [r7, #8]
 80054d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054d4:	2301      	movs	r3, #1
 80054d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054d8:	4b21      	ldr	r3, [pc, #132]	@ (8005560 <HAL_RCC_OscConfig+0x508>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d118      	bne.n	8005516 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005560 <HAL_RCC_OscConfig+0x508>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a1d      	ldr	r2, [pc, #116]	@ (8005560 <HAL_RCC_OscConfig+0x508>)
 80054ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f0:	f7fd ffac 	bl	800344c <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054f8:	f7fd ffa8 	bl	800344c <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e17a      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800550a:	4b15      	ldr	r3, [pc, #84]	@ (8005560 <HAL_RCC_OscConfig+0x508>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d108      	bne.n	8005530 <HAL_RCC_OscConfig+0x4d8>
 800551e:	4b0f      	ldr	r3, [pc, #60]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005524:	4a0d      	ldr	r2, [pc, #52]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800552e:	e029      	b.n	8005584 <HAL_RCC_OscConfig+0x52c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b05      	cmp	r3, #5
 8005536:	d115      	bne.n	8005564 <HAL_RCC_OscConfig+0x50c>
 8005538:	4b08      	ldr	r3, [pc, #32]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 800553a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800553e:	4a07      	ldr	r2, [pc, #28]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 8005540:	f043 0304 	orr.w	r3, r3, #4
 8005544:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005548:	4b04      	ldr	r3, [pc, #16]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800554e:	4a03      	ldr	r2, [pc, #12]	@ (800555c <HAL_RCC_OscConfig+0x504>)
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005558:	e014      	b.n	8005584 <HAL_RCC_OscConfig+0x52c>
 800555a:	bf00      	nop
 800555c:	40021000 	.word	0x40021000
 8005560:	40007000 	.word	0x40007000
 8005564:	4b9c      	ldr	r3, [pc, #624]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 8005566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800556a:	4a9b      	ldr	r2, [pc, #620]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 800556c:	f023 0301 	bic.w	r3, r3, #1
 8005570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005574:	4b98      	ldr	r3, [pc, #608]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800557a:	4a97      	ldr	r2, [pc, #604]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 800557c:	f023 0304 	bic.w	r3, r3, #4
 8005580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d016      	beq.n	80055ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558c:	f7fd ff5e 	bl	800344c <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005592:	e00a      	b.n	80055aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005594:	f7fd ff5a 	bl	800344c <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e12a      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055aa:	4b8b      	ldr	r3, [pc, #556]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0ed      	beq.n	8005594 <HAL_RCC_OscConfig+0x53c>
 80055b8:	e015      	b.n	80055e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ba:	f7fd ff47 	bl	800344c <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055c0:	e00a      	b.n	80055d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c2:	f7fd ff43 	bl	800344c <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d901      	bls.n	80055d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80055d4:	2303      	movs	r3, #3
 80055d6:	e113      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055d8:	4b7f      	ldr	r3, [pc, #508]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1ed      	bne.n	80055c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055e6:	7ffb      	ldrb	r3, [r7, #31]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d105      	bne.n	80055f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ec:	4b7a      	ldr	r3, [pc, #488]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 80055ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f0:	4a79      	ldr	r2, [pc, #484]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 80055f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055f6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80fe 	beq.w	80057fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005606:	2b02      	cmp	r3, #2
 8005608:	f040 80d0 	bne.w	80057ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800560c:	4b72      	ldr	r3, [pc, #456]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f003 0203 	and.w	r2, r3, #3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	429a      	cmp	r2, r3
 800561e:	d130      	bne.n	8005682 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	3b01      	subs	r3, #1
 800562c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800562e:	429a      	cmp	r2, r3
 8005630:	d127      	bne.n	8005682 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800563c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800563e:	429a      	cmp	r2, r3
 8005640:	d11f      	bne.n	8005682 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800564c:	2a07      	cmp	r2, #7
 800564e:	bf14      	ite	ne
 8005650:	2201      	movne	r2, #1
 8005652:	2200      	moveq	r2, #0
 8005654:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005656:	4293      	cmp	r3, r2
 8005658:	d113      	bne.n	8005682 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005664:	085b      	lsrs	r3, r3, #1
 8005666:	3b01      	subs	r3, #1
 8005668:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800566a:	429a      	cmp	r2, r3
 800566c:	d109      	bne.n	8005682 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005678:	085b      	lsrs	r3, r3, #1
 800567a:	3b01      	subs	r3, #1
 800567c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800567e:	429a      	cmp	r2, r3
 8005680:	d06e      	beq.n	8005760 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b0c      	cmp	r3, #12
 8005686:	d069      	beq.n	800575c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005688:	4b53      	ldr	r3, [pc, #332]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d105      	bne.n	80056a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005694:	4b50      	ldr	r3, [pc, #320]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e0ad      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056a4:	4b4c      	ldr	r3, [pc, #304]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a4b      	ldr	r2, [pc, #300]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 80056aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056b0:	f7fd fecc 	bl	800344c <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056b8:	f7fd fec8 	bl	800344c <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e09a      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056ca:	4b43      	ldr	r3, [pc, #268]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056d6:	4b40      	ldr	r3, [pc, #256]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	4b40      	ldr	r3, [pc, #256]	@ (80057dc <HAL_RCC_OscConfig+0x784>)
 80056dc:	4013      	ands	r3, r2
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056e6:	3a01      	subs	r2, #1
 80056e8:	0112      	lsls	r2, r2, #4
 80056ea:	4311      	orrs	r1, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80056f0:	0212      	lsls	r2, r2, #8
 80056f2:	4311      	orrs	r1, r2
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056f8:	0852      	lsrs	r2, r2, #1
 80056fa:	3a01      	subs	r2, #1
 80056fc:	0552      	lsls	r2, r2, #21
 80056fe:	4311      	orrs	r1, r2
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005704:	0852      	lsrs	r2, r2, #1
 8005706:	3a01      	subs	r2, #1
 8005708:	0652      	lsls	r2, r2, #25
 800570a:	4311      	orrs	r1, r2
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005710:	0912      	lsrs	r2, r2, #4
 8005712:	0452      	lsls	r2, r2, #17
 8005714:	430a      	orrs	r2, r1
 8005716:	4930      	ldr	r1, [pc, #192]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 8005718:	4313      	orrs	r3, r2
 800571a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800571c:	4b2e      	ldr	r3, [pc, #184]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a2d      	ldr	r2, [pc, #180]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 8005722:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005726:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005728:	4b2b      	ldr	r3, [pc, #172]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	4a2a      	ldr	r2, [pc, #168]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 800572e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005732:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005734:	f7fd fe8a 	bl	800344c <HAL_GetTick>
 8005738:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573c:	f7fd fe86 	bl	800344c <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e058      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800574e:	4b22      	ldr	r3, [pc, #136]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0f0      	beq.n	800573c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800575a:	e050      	b.n	80057fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e04f      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005760:	4b1d      	ldr	r3, [pc, #116]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d148      	bne.n	80057fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800576c:	4b1a      	ldr	r3, [pc, #104]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a19      	ldr	r2, [pc, #100]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 8005772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005776:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005778:	4b17      	ldr	r3, [pc, #92]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4a16      	ldr	r2, [pc, #88]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 800577e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005782:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005784:	f7fd fe62 	bl	800344c <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800578c:	f7fd fe5e 	bl	800344c <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e030      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800579e:	4b0e      	ldr	r3, [pc, #56]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0f0      	beq.n	800578c <HAL_RCC_OscConfig+0x734>
 80057aa:	e028      	b.n	80057fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	2b0c      	cmp	r3, #12
 80057b0:	d023      	beq.n	80057fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b2:	4b09      	ldr	r3, [pc, #36]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a08      	ldr	r2, [pc, #32]	@ (80057d8 <HAL_RCC_OscConfig+0x780>)
 80057b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057be:	f7fd fe45 	bl	800344c <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c4:	e00c      	b.n	80057e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057c6:	f7fd fe41 	bl	800344c <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d905      	bls.n	80057e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e013      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
 80057d8:	40021000 	.word	0x40021000
 80057dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057e0:	4b09      	ldr	r3, [pc, #36]	@ (8005808 <HAL_RCC_OscConfig+0x7b0>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1ec      	bne.n	80057c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057ec:	4b06      	ldr	r3, [pc, #24]	@ (8005808 <HAL_RCC_OscConfig+0x7b0>)
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	4905      	ldr	r1, [pc, #20]	@ (8005808 <HAL_RCC_OscConfig+0x7b0>)
 80057f2:	4b06      	ldr	r3, [pc, #24]	@ (800580c <HAL_RCC_OscConfig+0x7b4>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	60cb      	str	r3, [r1, #12]
 80057f8:	e001      	b.n	80057fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e000      	b.n	8005800 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3720      	adds	r7, #32
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40021000 	.word	0x40021000
 800580c:	feeefffc 	.word	0xfeeefffc

08005810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e0e7      	b.n	80059f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005824:	4b75      	ldr	r3, [pc, #468]	@ (80059fc <HAL_RCC_ClockConfig+0x1ec>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d910      	bls.n	8005854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005832:	4b72      	ldr	r3, [pc, #456]	@ (80059fc <HAL_RCC_ClockConfig+0x1ec>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f023 0207 	bic.w	r2, r3, #7
 800583a:	4970      	ldr	r1, [pc, #448]	@ (80059fc <HAL_RCC_ClockConfig+0x1ec>)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	4313      	orrs	r3, r2
 8005840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005842:	4b6e      	ldr	r3, [pc, #440]	@ (80059fc <HAL_RCC_ClockConfig+0x1ec>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	429a      	cmp	r2, r3
 800584e:	d001      	beq.n	8005854 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e0cf      	b.n	80059f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d010      	beq.n	8005882 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	4b66      	ldr	r3, [pc, #408]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800586c:	429a      	cmp	r2, r3
 800586e:	d908      	bls.n	8005882 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005870:	4b63      	ldr	r3, [pc, #396]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4960      	ldr	r1, [pc, #384]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 800587e:	4313      	orrs	r3, r2
 8005880:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d04c      	beq.n	8005928 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d107      	bne.n	80058a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005896:	4b5a      	ldr	r3, [pc, #360]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d121      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e0a6      	b.n	80059f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058ae:	4b54      	ldr	r3, [pc, #336]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d115      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e09a      	b.n	80059f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d107      	bne.n	80058d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058c6:	4b4e      	ldr	r3, [pc, #312]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d109      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e08e      	b.n	80059f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e086      	b.n	80059f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058e6:	4b46      	ldr	r3, [pc, #280]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f023 0203 	bic.w	r2, r3, #3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4943      	ldr	r1, [pc, #268]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 80058f4:	4313      	orrs	r3, r2
 80058f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058f8:	f7fd fda8 	bl	800344c <HAL_GetTick>
 80058fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fe:	e00a      	b.n	8005916 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005900:	f7fd fda4 	bl	800344c <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e06e      	b.n	80059f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005916:	4b3a      	ldr	r3, [pc, #232]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 020c 	and.w	r2, r3, #12
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	429a      	cmp	r2, r3
 8005926:	d1eb      	bne.n	8005900 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d010      	beq.n	8005956 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	4b31      	ldr	r3, [pc, #196]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005940:	429a      	cmp	r2, r3
 8005942:	d208      	bcs.n	8005956 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005944:	4b2e      	ldr	r3, [pc, #184]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	492b      	ldr	r1, [pc, #172]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005956:	4b29      	ldr	r3, [pc, #164]	@ (80059fc <HAL_RCC_ClockConfig+0x1ec>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d210      	bcs.n	8005986 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005964:	4b25      	ldr	r3, [pc, #148]	@ (80059fc <HAL_RCC_ClockConfig+0x1ec>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f023 0207 	bic.w	r2, r3, #7
 800596c:	4923      	ldr	r1, [pc, #140]	@ (80059fc <HAL_RCC_ClockConfig+0x1ec>)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	4313      	orrs	r3, r2
 8005972:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005974:	4b21      	ldr	r3, [pc, #132]	@ (80059fc <HAL_RCC_ClockConfig+0x1ec>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0307 	and.w	r3, r3, #7
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d001      	beq.n	8005986 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e036      	b.n	80059f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005992:	4b1b      	ldr	r3, [pc, #108]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4918      	ldr	r1, [pc, #96]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d009      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059b0:	4b13      	ldr	r3, [pc, #76]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	4910      	ldr	r1, [pc, #64]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059c4:	f000 f824 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 80059c8:	4602      	mov	r2, r0
 80059ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005a00 <HAL_RCC_ClockConfig+0x1f0>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	091b      	lsrs	r3, r3, #4
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	490b      	ldr	r1, [pc, #44]	@ (8005a04 <HAL_RCC_ClockConfig+0x1f4>)
 80059d6:	5ccb      	ldrb	r3, [r1, r3]
 80059d8:	f003 031f 	and.w	r3, r3, #31
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
 80059e0:	4a09      	ldr	r2, [pc, #36]	@ (8005a08 <HAL_RCC_ClockConfig+0x1f8>)
 80059e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059e4:	4b09      	ldr	r3, [pc, #36]	@ (8005a0c <HAL_RCC_ClockConfig+0x1fc>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fd fcdf 	bl	80033ac <HAL_InitTick>
 80059ee:	4603      	mov	r3, r0
 80059f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80059f2:	7afb      	ldrb	r3, [r7, #11]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	40022000 	.word	0x40022000
 8005a00:	40021000 	.word	0x40021000
 8005a04:	0800a398 	.word	0x0800a398
 8005a08:	20000000 	.word	0x20000000
 8005a0c:	200000c8 	.word	0x200000c8

08005a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b089      	sub	sp, #36	@ 0x24
 8005a14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61fb      	str	r3, [r7, #28]
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a28:	4b3b      	ldr	r3, [pc, #236]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0303 	and.w	r3, r3, #3
 8005a30:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_RCC_GetSysClockFreq+0x34>
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	2b0c      	cmp	r3, #12
 8005a3c:	d121      	bne.n	8005a82 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d11e      	bne.n	8005a82 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a44:	4b34      	ldr	r3, [pc, #208]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d107      	bne.n	8005a60 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a50:	4b31      	ldr	r3, [pc, #196]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a56:	0a1b      	lsrs	r3, r3, #8
 8005a58:	f003 030f 	and.w	r3, r3, #15
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	e005      	b.n	8005a6c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a60:	4b2d      	ldr	r3, [pc, #180]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	091b      	lsrs	r3, r3, #4
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a6c:	4a2b      	ldr	r2, [pc, #172]	@ (8005b1c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a74:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10d      	bne.n	8005a98 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a80:	e00a      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d102      	bne.n	8005a8e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a88:	4b25      	ldr	r3, [pc, #148]	@ (8005b20 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a8a:	61bb      	str	r3, [r7, #24]
 8005a8c:	e004      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d101      	bne.n	8005a98 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a94:	4b23      	ldr	r3, [pc, #140]	@ (8005b24 <HAL_RCC_GetSysClockFreq+0x114>)
 8005a96:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b0c      	cmp	r3, #12
 8005a9c:	d134      	bne.n	8005b08 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 0303 	and.w	r3, r3, #3
 8005aa6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d003      	beq.n	8005ab6 <HAL_RCC_GetSysClockFreq+0xa6>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d003      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0xac>
 8005ab4:	e005      	b.n	8005ac2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b20 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ab8:	617b      	str	r3, [r7, #20]
      break;
 8005aba:	e005      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005abc:	4b19      	ldr	r3, [pc, #100]	@ (8005b24 <HAL_RCC_GetSysClockFreq+0x114>)
 8005abe:	617b      	str	r3, [r7, #20]
      break;
 8005ac0:	e002      	b.n	8005ac8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	617b      	str	r3, [r7, #20]
      break;
 8005ac6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ac8:	4b13      	ldr	r3, [pc, #76]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	091b      	lsrs	r3, r3, #4
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ad6:	4b10      	ldr	r3, [pc, #64]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	0a1b      	lsrs	r3, r3, #8
 8005adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ae0:	697a      	ldr	r2, [r7, #20]
 8005ae2:	fb03 f202 	mul.w	r2, r3, r2
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005aee:	4b0a      	ldr	r3, [pc, #40]	@ (8005b18 <HAL_RCC_GetSysClockFreq+0x108>)
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	0e5b      	lsrs	r3, r3, #25
 8005af4:	f003 0303 	and.w	r3, r3, #3
 8005af8:	3301      	adds	r3, #1
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005b08:	69bb      	ldr	r3, [r7, #24]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3724      	adds	r7, #36	@ 0x24
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	0800a3b0 	.word	0x0800a3b0
 8005b20:	00f42400 	.word	0x00f42400
 8005b24:	007a1200 	.word	0x007a1200

08005b28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b2c:	4b03      	ldr	r3, [pc, #12]	@ (8005b3c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	20000000 	.word	0x20000000

08005b40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b44:	f7ff fff0 	bl	8005b28 <HAL_RCC_GetHCLKFreq>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	f003 0307 	and.w	r3, r3, #7
 8005b54:	4904      	ldr	r1, [pc, #16]	@ (8005b68 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b56:	5ccb      	ldrb	r3, [r1, r3]
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40021000 	.word	0x40021000
 8005b68:	0800a3a8 	.word	0x0800a3a8

08005b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b70:	f7ff ffda 	bl	8005b28 <HAL_RCC_GetHCLKFreq>
 8005b74:	4602      	mov	r2, r0
 8005b76:	4b06      	ldr	r3, [pc, #24]	@ (8005b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	0adb      	lsrs	r3, r3, #11
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	4904      	ldr	r1, [pc, #16]	@ (8005b94 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b82:	5ccb      	ldrb	r3, [r1, r3]
 8005b84:	f003 031f 	and.w	r3, r3, #31
 8005b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	40021000 	.word	0x40021000
 8005b94:	0800a3a8 	.word	0x0800a3a8

08005b98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005ba4:	4b2a      	ldr	r3, [pc, #168]	@ (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ba8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bb0:	f7ff f922 	bl	8004df8 <HAL_PWREx_GetVoltageRange>
 8005bb4:	6178      	str	r0, [r7, #20]
 8005bb6:	e014      	b.n	8005be2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bb8:	4b25      	ldr	r3, [pc, #148]	@ (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bbc:	4a24      	ldr	r2, [pc, #144]	@ (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bc4:	4b22      	ldr	r3, [pc, #136]	@ (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bd0:	f7ff f912 	bl	8004df8 <HAL_PWREx_GetVoltageRange>
 8005bd4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bda:	4a1d      	ldr	r2, [pc, #116]	@ (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005be0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005be8:	d10b      	bne.n	8005c02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b80      	cmp	r3, #128	@ 0x80
 8005bee:	d919      	bls.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2ba0      	cmp	r3, #160	@ 0xa0
 8005bf4:	d902      	bls.n	8005bfc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bf6:	2302      	movs	r3, #2
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	e013      	b.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	613b      	str	r3, [r7, #16]
 8005c00:	e010      	b.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b80      	cmp	r3, #128	@ 0x80
 8005c06:	d902      	bls.n	8005c0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c08:	2303      	movs	r3, #3
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	e00a      	b.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b80      	cmp	r3, #128	@ 0x80
 8005c12:	d102      	bne.n	8005c1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c14:	2302      	movs	r3, #2
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	e004      	b.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b70      	cmp	r3, #112	@ 0x70
 8005c1e:	d101      	bne.n	8005c24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c20:	2301      	movs	r3, #1
 8005c22:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c24:	4b0b      	ldr	r3, [pc, #44]	@ (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f023 0207 	bic.w	r2, r3, #7
 8005c2c:	4909      	ldr	r1, [pc, #36]	@ (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c34:	4b07      	ldr	r3, [pc, #28]	@ (8005c54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d001      	beq.n	8005c46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e000      	b.n	8005c48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3718      	adds	r7, #24
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40021000 	.word	0x40021000
 8005c54:	40022000 	.word	0x40022000

08005c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c60:	2300      	movs	r3, #0
 8005c62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005c64:	2300      	movs	r3, #0
 8005c66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d041      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c78:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c7c:	d02a      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005c7e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005c82:	d824      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c88:	d008      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005c8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005c8e:	d81e      	bhi.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005c94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c98:	d010      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005c9a:	e018      	b.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005c9c:	4b86      	ldr	r3, [pc, #536]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	4a85      	ldr	r2, [pc, #532]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ca8:	e015      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3304      	adds	r3, #4
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 facb 	bl	800624c <RCCEx_PLLSAI1_Config>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cba:	e00c      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	3320      	adds	r3, #32
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 fbb6 	bl	8006434 <RCCEx_PLLSAI2_Config>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ccc:	e003      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	74fb      	strb	r3, [r7, #19]
      break;
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cd6:	7cfb      	ldrb	r3, [r7, #19]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10b      	bne.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005cdc:	4b76      	ldr	r3, [pc, #472]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cea:	4973      	ldr	r1, [pc, #460]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cec:	4313      	orrs	r3, r2
 8005cee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005cf2:	e001      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf4:	7cfb      	ldrb	r3, [r7, #19]
 8005cf6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d041      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d0c:	d02a      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005d0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d12:	d824      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d18:	d008      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d1e:	d81e      	bhi.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d28:	d010      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005d2a:	e018      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d2c:	4b62      	ldr	r3, [pc, #392]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4a61      	ldr	r2, [pc, #388]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d38:	e015      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	3304      	adds	r3, #4
 8005d3e:	2100      	movs	r1, #0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f000 fa83 	bl	800624c <RCCEx_PLLSAI1_Config>
 8005d46:	4603      	mov	r3, r0
 8005d48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d4a:	e00c      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3320      	adds	r3, #32
 8005d50:	2100      	movs	r1, #0
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fb6e 	bl	8006434 <RCCEx_PLLSAI2_Config>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005d5c:	e003      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	74fb      	strb	r3, [r7, #19]
      break;
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d66:	7cfb      	ldrb	r3, [r7, #19]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d6c:	4b52      	ldr	r3, [pc, #328]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d72:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d7a:	494f      	ldr	r1, [pc, #316]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005d82:	e001      	b.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d84:	7cfb      	ldrb	r3, [r7, #19]
 8005d86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80a0 	beq.w	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d96:	2300      	movs	r3, #0
 8005d98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d9a:	4b47      	ldr	r3, [pc, #284]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005daa:	2300      	movs	r3, #0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00d      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005db0:	4b41      	ldr	r3, [pc, #260]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005db4:	4a40      	ldr	r2, [pc, #256]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dba:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dc4:	60bb      	str	r3, [r7, #8]
 8005dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a3a      	ldr	r2, [pc, #232]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005dd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005dd8:	f7fd fb38 	bl	800344c <HAL_GetTick>
 8005ddc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005dde:	e009      	b.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de0:	f7fd fb34 	bl	800344c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d902      	bls.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	74fb      	strb	r3, [r7, #19]
        break;
 8005df2:	e005      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005df4:	4b31      	ldr	r3, [pc, #196]	@ (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d0ef      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005e00:	7cfb      	ldrb	r3, [r7, #19]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d15c      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e06:	4b2c      	ldr	r3, [pc, #176]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01f      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d019      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e24:	4b24      	ldr	r3, [pc, #144]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e30:	4b21      	ldr	r3, [pc, #132]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e36:	4a20      	ldr	r2, [pc, #128]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e40:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e46:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e50:	4a19      	ldr	r2, [pc, #100]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d016      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e62:	f7fd faf3 	bl	800344c <HAL_GetTick>
 8005e66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e68:	e00b      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6a:	f7fd faef 	bl	800344c <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d902      	bls.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	74fb      	strb	r3, [r7, #19]
            break;
 8005e80:	e006      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e82:	4b0d      	ldr	r3, [pc, #52]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e88:	f003 0302 	and.w	r3, r3, #2
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0ec      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005e90:	7cfb      	ldrb	r3, [r7, #19]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10c      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e96:	4b08      	ldr	r3, [pc, #32]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ea6:	4904      	ldr	r1, [pc, #16]	@ (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005eae:	e009      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005eb0:	7cfb      	ldrb	r3, [r7, #19]
 8005eb2:	74bb      	strb	r3, [r7, #18]
 8005eb4:	e006      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005eb6:	bf00      	nop
 8005eb8:	40021000 	.word	0x40021000
 8005ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec0:	7cfb      	ldrb	r3, [r7, #19]
 8005ec2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ec4:	7c7b      	ldrb	r3, [r7, #17]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d105      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eca:	4b9e      	ldr	r3, [pc, #632]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ece:	4a9d      	ldr	r2, [pc, #628]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ed4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ee2:	4b98      	ldr	r3, [pc, #608]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee8:	f023 0203 	bic.w	r2, r3, #3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	4994      	ldr	r1, [pc, #592]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00a      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f04:	4b8f      	ldr	r3, [pc, #572]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0a:	f023 020c 	bic.w	r2, r3, #12
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f12:	498c      	ldr	r1, [pc, #560]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00a      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f26:	4b87      	ldr	r3, [pc, #540]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f34:	4983      	ldr	r1, [pc, #524]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f48:	4b7e      	ldr	r3, [pc, #504]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f56:	497b      	ldr	r1, [pc, #492]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f6a:	4b76      	ldr	r3, [pc, #472]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f78:	4972      	ldr	r1, [pc, #456]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f8c:	4b6d      	ldr	r3, [pc, #436]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f9a:	496a      	ldr	r1, [pc, #424]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fae:	4b65      	ldr	r3, [pc, #404]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fbc:	4961      	ldr	r1, [pc, #388]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00a      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005fd0:	4b5c      	ldr	r3, [pc, #368]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fde:	4959      	ldr	r1, [pc, #356]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00a      	beq.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ff2:	4b54      	ldr	r3, [pc, #336]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006000:	4950      	ldr	r1, [pc, #320]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006002:	4313      	orrs	r3, r2
 8006004:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00a      	beq.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006014:	4b4b      	ldr	r3, [pc, #300]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006022:	4948      	ldr	r1, [pc, #288]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006036:	4b43      	ldr	r3, [pc, #268]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006038:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800603c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006044:	493f      	ldr	r1, [pc, #252]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d028      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006058:	4b3a      	ldr	r3, [pc, #232]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800605e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006066:	4937      	ldr	r1, [pc, #220]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006072:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006076:	d106      	bne.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006078:	4b32      	ldr	r3, [pc, #200]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	4a31      	ldr	r2, [pc, #196]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800607e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006082:	60d3      	str	r3, [r2, #12]
 8006084:	e011      	b.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800608a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800608e:	d10c      	bne.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3304      	adds	r3, #4
 8006094:	2101      	movs	r1, #1
 8006096:	4618      	mov	r0, r3
 8006098:	f000 f8d8 	bl	800624c <RCCEx_PLLSAI1_Config>
 800609c:	4603      	mov	r3, r0
 800609e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80060a0:	7cfb      	ldrb	r3, [r7, #19]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80060a6:	7cfb      	ldrb	r3, [r7, #19]
 80060a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d028      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80060b6:	4b23      	ldr	r3, [pc, #140]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c4:	491f      	ldr	r1, [pc, #124]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060d4:	d106      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060d6:	4b1b      	ldr	r3, [pc, #108]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	4a1a      	ldr	r2, [pc, #104]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060e0:	60d3      	str	r3, [r2, #12]
 80060e2:	e011      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060ec:	d10c      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	3304      	adds	r3, #4
 80060f2:	2101      	movs	r1, #1
 80060f4:	4618      	mov	r0, r3
 80060f6:	f000 f8a9 	bl	800624c <RCCEx_PLLSAI1_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80060fe:	7cfb      	ldrb	r3, [r7, #19]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006104:	7cfb      	ldrb	r3, [r7, #19]
 8006106:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d02b      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006114:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800611a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006122:	4908      	ldr	r1, [pc, #32]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006124:	4313      	orrs	r3, r2
 8006126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800612e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006132:	d109      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006134:	4b03      	ldr	r3, [pc, #12]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	4a02      	ldr	r2, [pc, #8]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800613e:	60d3      	str	r3, [r2, #12]
 8006140:	e014      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006142:	bf00      	nop
 8006144:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800614c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006150:	d10c      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	2101      	movs	r1, #1
 8006158:	4618      	mov	r0, r3
 800615a:	f000 f877 	bl	800624c <RCCEx_PLLSAI1_Config>
 800615e:	4603      	mov	r3, r0
 8006160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006162:	7cfb      	ldrb	r3, [r7, #19]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d001      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006168:	7cfb      	ldrb	r3, [r7, #19]
 800616a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d02f      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006178:	4b2b      	ldr	r3, [pc, #172]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800617e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006186:	4928      	ldr	r1, [pc, #160]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006188:	4313      	orrs	r3, r2
 800618a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006192:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006196:	d10d      	bne.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3304      	adds	r3, #4
 800619c:	2102      	movs	r1, #2
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f854 	bl	800624c <RCCEx_PLLSAI1_Config>
 80061a4:	4603      	mov	r3, r0
 80061a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061a8:	7cfb      	ldrb	r3, [r7, #19]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d014      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061ae:	7cfb      	ldrb	r3, [r7, #19]
 80061b0:	74bb      	strb	r3, [r7, #18]
 80061b2:	e011      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061bc:	d10c      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3320      	adds	r3, #32
 80061c2:	2102      	movs	r1, #2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 f935 	bl	8006434 <RCCEx_PLLSAI2_Config>
 80061ca:	4603      	mov	r3, r0
 80061cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061ce:	7cfb      	ldrb	r3, [r7, #19]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80061d4:	7cfb      	ldrb	r3, [r7, #19]
 80061d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00a      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061e4:	4b10      	ldr	r3, [pc, #64]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061f2:	490d      	ldr	r1, [pc, #52]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00b      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006206:	4b08      	ldr	r3, [pc, #32]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006216:	4904      	ldr	r1, [pc, #16]	@ (8006228 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006218:	4313      	orrs	r3, r2
 800621a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800621e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40021000 	.word	0x40021000

0800622c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006230:	4b05      	ldr	r3, [pc, #20]	@ (8006248 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a04      	ldr	r2, [pc, #16]	@ (8006248 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006236:	f043 0304 	orr.w	r3, r3, #4
 800623a:	6013      	str	r3, [r2, #0]
}
 800623c:	bf00      	nop
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	40021000 	.word	0x40021000

0800624c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800625a:	4b75      	ldr	r3, [pc, #468]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d018      	beq.n	8006298 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006266:	4b72      	ldr	r3, [pc, #456]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f003 0203 	and.w	r2, r3, #3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	429a      	cmp	r2, r3
 8006274:	d10d      	bne.n	8006292 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
       ||
 800627a:	2b00      	cmp	r3, #0
 800627c:	d009      	beq.n	8006292 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800627e:	4b6c      	ldr	r3, [pc, #432]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	091b      	lsrs	r3, r3, #4
 8006284:	f003 0307 	and.w	r3, r3, #7
 8006288:	1c5a      	adds	r2, r3, #1
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
       ||
 800628e:	429a      	cmp	r2, r3
 8006290:	d047      	beq.n	8006322 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	73fb      	strb	r3, [r7, #15]
 8006296:	e044      	b.n	8006322 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b03      	cmp	r3, #3
 800629e:	d018      	beq.n	80062d2 <RCCEx_PLLSAI1_Config+0x86>
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	d825      	bhi.n	80062f0 <RCCEx_PLLSAI1_Config+0xa4>
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d002      	beq.n	80062ae <RCCEx_PLLSAI1_Config+0x62>
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d009      	beq.n	80062c0 <RCCEx_PLLSAI1_Config+0x74>
 80062ac:	e020      	b.n	80062f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062ae:	4b60      	ldr	r3, [pc, #384]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d11d      	bne.n	80062f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062be:	e01a      	b.n	80062f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062c0:	4b5b      	ldr	r3, [pc, #364]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d116      	bne.n	80062fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d0:	e013      	b.n	80062fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062d2:	4b57      	ldr	r3, [pc, #348]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10f      	bne.n	80062fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062de:	4b54      	ldr	r3, [pc, #336]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062ee:	e006      	b.n	80062fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	73fb      	strb	r3, [r7, #15]
      break;
 80062f4:	e004      	b.n	8006300 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062f6:	bf00      	nop
 80062f8:	e002      	b.n	8006300 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062fa:	bf00      	nop
 80062fc:	e000      	b.n	8006300 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80062fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8006300:	7bfb      	ldrb	r3, [r7, #15]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10d      	bne.n	8006322 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006306:	4b4a      	ldr	r3, [pc, #296]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6819      	ldr	r1, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	3b01      	subs	r3, #1
 8006318:	011b      	lsls	r3, r3, #4
 800631a:	430b      	orrs	r3, r1
 800631c:	4944      	ldr	r1, [pc, #272]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 800631e:	4313      	orrs	r3, r2
 8006320:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d17d      	bne.n	8006424 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006328:	4b41      	ldr	r3, [pc, #260]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a40      	ldr	r2, [pc, #256]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 800632e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006332:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006334:	f7fd f88a 	bl	800344c <HAL_GetTick>
 8006338:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800633a:	e009      	b.n	8006350 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800633c:	f7fd f886 	bl	800344c <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b02      	cmp	r3, #2
 8006348:	d902      	bls.n	8006350 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	73fb      	strb	r3, [r7, #15]
        break;
 800634e:	e005      	b.n	800635c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006350:	4b37      	ldr	r3, [pc, #220]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d1ef      	bne.n	800633c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d160      	bne.n	8006424 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d111      	bne.n	800638c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006368:	4b31      	ldr	r3, [pc, #196]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006370:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6892      	ldr	r2, [r2, #8]
 8006378:	0211      	lsls	r1, r2, #8
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	68d2      	ldr	r2, [r2, #12]
 800637e:	0912      	lsrs	r2, r2, #4
 8006380:	0452      	lsls	r2, r2, #17
 8006382:	430a      	orrs	r2, r1
 8006384:	492a      	ldr	r1, [pc, #168]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006386:	4313      	orrs	r3, r2
 8006388:	610b      	str	r3, [r1, #16]
 800638a:	e027      	b.n	80063dc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d112      	bne.n	80063b8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006392:	4b27      	ldr	r3, [pc, #156]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800639a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6892      	ldr	r2, [r2, #8]
 80063a2:	0211      	lsls	r1, r2, #8
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6912      	ldr	r2, [r2, #16]
 80063a8:	0852      	lsrs	r2, r2, #1
 80063aa:	3a01      	subs	r2, #1
 80063ac:	0552      	lsls	r2, r2, #21
 80063ae:	430a      	orrs	r2, r1
 80063b0:	491f      	ldr	r1, [pc, #124]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	610b      	str	r3, [r1, #16]
 80063b6:	e011      	b.n	80063dc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80063c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6892      	ldr	r2, [r2, #8]
 80063c8:	0211      	lsls	r1, r2, #8
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6952      	ldr	r2, [r2, #20]
 80063ce:	0852      	lsrs	r2, r2, #1
 80063d0:	3a01      	subs	r2, #1
 80063d2:	0652      	lsls	r2, r2, #25
 80063d4:	430a      	orrs	r2, r1
 80063d6:	4916      	ldr	r1, [pc, #88]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80063dc:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a13      	ldr	r2, [pc, #76]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80063e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e8:	f7fd f830 	bl	800344c <HAL_GetTick>
 80063ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80063ee:	e009      	b.n	8006404 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063f0:	f7fd f82c 	bl	800344c <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d902      	bls.n	8006404 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	73fb      	strb	r3, [r7, #15]
          break;
 8006402:	e005      	b.n	8006410 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006404:	4b0a      	ldr	r3, [pc, #40]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0ef      	beq.n	80063f0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d106      	bne.n	8006424 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006416:	4b06      	ldr	r3, [pc, #24]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006418:	691a      	ldr	r2, [r3, #16]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	4904      	ldr	r1, [pc, #16]	@ (8006430 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006420:	4313      	orrs	r3, r2
 8006422:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006424:	7bfb      	ldrb	r3, [r7, #15]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	40021000 	.word	0x40021000

08006434 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006442:	4b6a      	ldr	r3, [pc, #424]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d018      	beq.n	8006480 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800644e:	4b67      	ldr	r3, [pc, #412]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f003 0203 	and.w	r2, r3, #3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	429a      	cmp	r2, r3
 800645c:	d10d      	bne.n	800647a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
       ||
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006466:	4b61      	ldr	r3, [pc, #388]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	091b      	lsrs	r3, r3, #4
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
       ||
 8006476:	429a      	cmp	r2, r3
 8006478:	d047      	beq.n	800650a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	73fb      	strb	r3, [r7, #15]
 800647e:	e044      	b.n	800650a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b03      	cmp	r3, #3
 8006486:	d018      	beq.n	80064ba <RCCEx_PLLSAI2_Config+0x86>
 8006488:	2b03      	cmp	r3, #3
 800648a:	d825      	bhi.n	80064d8 <RCCEx_PLLSAI2_Config+0xa4>
 800648c:	2b01      	cmp	r3, #1
 800648e:	d002      	beq.n	8006496 <RCCEx_PLLSAI2_Config+0x62>
 8006490:	2b02      	cmp	r3, #2
 8006492:	d009      	beq.n	80064a8 <RCCEx_PLLSAI2_Config+0x74>
 8006494:	e020      	b.n	80064d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006496:	4b55      	ldr	r3, [pc, #340]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d11d      	bne.n	80064de <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064a6:	e01a      	b.n	80064de <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064a8:	4b50      	ldr	r3, [pc, #320]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d116      	bne.n	80064e2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064b8:	e013      	b.n	80064e2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064ba:	4b4c      	ldr	r3, [pc, #304]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10f      	bne.n	80064e6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064c6:	4b49      	ldr	r3, [pc, #292]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d109      	bne.n	80064e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064d6:	e006      	b.n	80064e6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
      break;
 80064dc:	e004      	b.n	80064e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064de:	bf00      	nop
 80064e0:	e002      	b.n	80064e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064e2:	bf00      	nop
 80064e4:	e000      	b.n	80064e8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80064e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10d      	bne.n	800650a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064ee:	4b3f      	ldr	r3, [pc, #252]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6819      	ldr	r1, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	3b01      	subs	r3, #1
 8006500:	011b      	lsls	r3, r3, #4
 8006502:	430b      	orrs	r3, r1
 8006504:	4939      	ldr	r1, [pc, #228]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006506:	4313      	orrs	r3, r2
 8006508:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d167      	bne.n	80065e0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006510:	4b36      	ldr	r3, [pc, #216]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a35      	ldr	r2, [pc, #212]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800651a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800651c:	f7fc ff96 	bl	800344c <HAL_GetTick>
 8006520:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006522:	e009      	b.n	8006538 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006524:	f7fc ff92 	bl	800344c <HAL_GetTick>
 8006528:	4602      	mov	r2, r0
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b02      	cmp	r3, #2
 8006530:	d902      	bls.n	8006538 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	73fb      	strb	r3, [r7, #15]
        break;
 8006536:	e005      	b.n	8006544 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006538:	4b2c      	ldr	r3, [pc, #176]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1ef      	bne.n	8006524 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d14a      	bne.n	80065e0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d111      	bne.n	8006574 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006550:	4b26      	ldr	r3, [pc, #152]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6892      	ldr	r2, [r2, #8]
 8006560:	0211      	lsls	r1, r2, #8
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	68d2      	ldr	r2, [r2, #12]
 8006566:	0912      	lsrs	r2, r2, #4
 8006568:	0452      	lsls	r2, r2, #17
 800656a:	430a      	orrs	r2, r1
 800656c:	491f      	ldr	r1, [pc, #124]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800656e:	4313      	orrs	r3, r2
 8006570:	614b      	str	r3, [r1, #20]
 8006572:	e011      	b.n	8006598 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006574:	4b1d      	ldr	r3, [pc, #116]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800657c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6892      	ldr	r2, [r2, #8]
 8006584:	0211      	lsls	r1, r2, #8
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6912      	ldr	r2, [r2, #16]
 800658a:	0852      	lsrs	r2, r2, #1
 800658c:	3a01      	subs	r2, #1
 800658e:	0652      	lsls	r2, r2, #25
 8006590:	430a      	orrs	r2, r1
 8006592:	4916      	ldr	r1, [pc, #88]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 8006594:	4313      	orrs	r3, r2
 8006596:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006598:	4b14      	ldr	r3, [pc, #80]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a13      	ldr	r2, [pc, #76]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 800659e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065a4:	f7fc ff52 	bl	800344c <HAL_GetTick>
 80065a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065aa:	e009      	b.n	80065c0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80065ac:	f7fc ff4e 	bl	800344c <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d902      	bls.n	80065c0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	73fb      	strb	r3, [r7, #15]
          break;
 80065be:	e005      	b.n	80065cc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80065c0:	4b0a      	ldr	r3, [pc, #40]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0ef      	beq.n	80065ac <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d106      	bne.n	80065e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80065d2:	4b06      	ldr	r3, [pc, #24]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d4:	695a      	ldr	r2, [r3, #20]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	4904      	ldr	r1, [pc, #16]	@ (80065ec <RCCEx_PLLSAI2_Config+0x1b8>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40021000 	.word	0x40021000

080065f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e095      	b.n	800672e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006606:	2b00      	cmp	r3, #0
 8006608:	d108      	bne.n	800661c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006612:	d009      	beq.n	8006628 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	61da      	str	r2, [r3, #28]
 800661a:	e005      	b.n	8006628 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d106      	bne.n	8006648 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7fb fba2 	bl	8001d8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800665e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006668:	d902      	bls.n	8006670 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	e002      	b.n	8006676 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006674:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800667e:	d007      	beq.n	8006690 <HAL_SPI_Init+0xa0>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006688:	d002      	beq.n	8006690 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	431a      	orrs	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d2:	ea42 0103 	orr.w	r1, r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	0c1b      	lsrs	r3, r3, #16
 80066ec:	f003 0204 	and.w	r2, r3, #4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f4:	f003 0310 	and.w	r3, r3, #16
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066fe:	f003 0308 	and.w	r3, r3, #8
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800670c:	ea42 0103 	orr.w	r1, r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	430a      	orrs	r2, r1
 800671c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e040      	b.n	80067ca <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fb fb5b 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2224      	movs	r2, #36	@ 0x24
 8006762:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f022 0201 	bic.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fb69 	bl	8006e54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f8ae 	bl	80068e4 <UART_SetConfig>
 8006788:	4603      	mov	r3, r0
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e01b      	b.n	80067ca <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0201 	orr.w	r2, r2, #1
 80067c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fbe8 	bl	8006f98 <UART_CheckIdleState>
 80067c8:	4603      	mov	r3, r0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b08a      	sub	sp, #40	@ 0x28
 80067d6:	af02      	add	r7, sp, #8
 80067d8:	60f8      	str	r0, [r7, #12]
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	603b      	str	r3, [r7, #0]
 80067de:	4613      	mov	r3, r2
 80067e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d177      	bne.n	80068da <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_UART_Transmit+0x24>
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e070      	b.n	80068dc <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2221      	movs	r2, #33	@ 0x21
 8006806:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006808:	f7fc fe20 	bl	800344c <HAL_GetTick>
 800680c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	88fa      	ldrh	r2, [r7, #6]
 8006812:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	88fa      	ldrh	r2, [r7, #6]
 800681a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006826:	d108      	bne.n	800683a <HAL_UART_Transmit+0x68>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d104      	bne.n	800683a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006830:	2300      	movs	r3, #0
 8006832:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	61bb      	str	r3, [r7, #24]
 8006838:	e003      	b.n	8006842 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800683e:	2300      	movs	r3, #0
 8006840:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006842:	e02f      	b.n	80068a4 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2200      	movs	r2, #0
 800684c:	2180      	movs	r1, #128	@ 0x80
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f000 fc4a 	bl	80070e8 <UART_WaitOnFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d004      	beq.n	8006864 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e03b      	b.n	80068dc <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10b      	bne.n	8006882 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	881a      	ldrh	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006876:	b292      	uxth	r2, r2
 8006878:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	3302      	adds	r3, #2
 800687e:	61bb      	str	r3, [r7, #24]
 8006880:	e007      	b.n	8006892 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	781a      	ldrb	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	3301      	adds	r3, #1
 8006890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006898:	b29b      	uxth	r3, r3
 800689a:	3b01      	subs	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1c9      	bne.n	8006844 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2200      	movs	r2, #0
 80068b8:	2140      	movs	r1, #64	@ 0x40
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 fc14 	bl	80070e8 <UART_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2220      	movs	r2, #32
 80068ca:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e005      	b.n	80068dc <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	e000      	b.n	80068dc <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80068da:	2302      	movs	r3, #2
  }
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3720      	adds	r7, #32
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068e8:	b08a      	sub	sp, #40	@ 0x28
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	431a      	orrs	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	431a      	orrs	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	4313      	orrs	r3, r2
 800690a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4ba4      	ldr	r3, [pc, #656]	@ (8006ba4 <UART_SetConfig+0x2c0>)
 8006914:	4013      	ands	r3, r2
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	6812      	ldr	r2, [r2, #0]
 800691a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800691c:	430b      	orrs	r3, r1
 800691e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68da      	ldr	r2, [r3, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a99      	ldr	r2, [pc, #612]	@ (8006ba8 <UART_SetConfig+0x2c4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d004      	beq.n	8006950 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694c:	4313      	orrs	r3, r2
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006960:	430a      	orrs	r2, r1
 8006962:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a90      	ldr	r2, [pc, #576]	@ (8006bac <UART_SetConfig+0x2c8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d126      	bne.n	80069bc <UART_SetConfig+0xd8>
 800696e:	4b90      	ldr	r3, [pc, #576]	@ (8006bb0 <UART_SetConfig+0x2cc>)
 8006970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006974:	f003 0303 	and.w	r3, r3, #3
 8006978:	2b03      	cmp	r3, #3
 800697a:	d81b      	bhi.n	80069b4 <UART_SetConfig+0xd0>
 800697c:	a201      	add	r2, pc, #4	@ (adr r2, 8006984 <UART_SetConfig+0xa0>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	08006995 	.word	0x08006995
 8006988:	080069a5 	.word	0x080069a5
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069ad 	.word	0x080069ad
 8006994:	2301      	movs	r3, #1
 8006996:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800699a:	e116      	b.n	8006bca <UART_SetConfig+0x2e6>
 800699c:	2302      	movs	r3, #2
 800699e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069a2:	e112      	b.n	8006bca <UART_SetConfig+0x2e6>
 80069a4:	2304      	movs	r3, #4
 80069a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069aa:	e10e      	b.n	8006bca <UART_SetConfig+0x2e6>
 80069ac:	2308      	movs	r3, #8
 80069ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069b2:	e10a      	b.n	8006bca <UART_SetConfig+0x2e6>
 80069b4:	2310      	movs	r3, #16
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80069ba:	e106      	b.n	8006bca <UART_SetConfig+0x2e6>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a7c      	ldr	r2, [pc, #496]	@ (8006bb4 <UART_SetConfig+0x2d0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d138      	bne.n	8006a38 <UART_SetConfig+0x154>
 80069c6:	4b7a      	ldr	r3, [pc, #488]	@ (8006bb0 <UART_SetConfig+0x2cc>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069cc:	f003 030c 	and.w	r3, r3, #12
 80069d0:	2b0c      	cmp	r3, #12
 80069d2:	d82d      	bhi.n	8006a30 <UART_SetConfig+0x14c>
 80069d4:	a201      	add	r2, pc, #4	@ (adr r2, 80069dc <UART_SetConfig+0xf8>)
 80069d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069da:	bf00      	nop
 80069dc:	08006a11 	.word	0x08006a11
 80069e0:	08006a31 	.word	0x08006a31
 80069e4:	08006a31 	.word	0x08006a31
 80069e8:	08006a31 	.word	0x08006a31
 80069ec:	08006a21 	.word	0x08006a21
 80069f0:	08006a31 	.word	0x08006a31
 80069f4:	08006a31 	.word	0x08006a31
 80069f8:	08006a31 	.word	0x08006a31
 80069fc:	08006a19 	.word	0x08006a19
 8006a00:	08006a31 	.word	0x08006a31
 8006a04:	08006a31 	.word	0x08006a31
 8006a08:	08006a31 	.word	0x08006a31
 8006a0c:	08006a29 	.word	0x08006a29
 8006a10:	2300      	movs	r3, #0
 8006a12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a16:	e0d8      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006a18:	2302      	movs	r3, #2
 8006a1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a1e:	e0d4      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006a20:	2304      	movs	r3, #4
 8006a22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a26:	e0d0      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006a28:	2308      	movs	r3, #8
 8006a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a2e:	e0cc      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006a30:	2310      	movs	r3, #16
 8006a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a36:	e0c8      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a5e      	ldr	r2, [pc, #376]	@ (8006bb8 <UART_SetConfig+0x2d4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d125      	bne.n	8006a8e <UART_SetConfig+0x1aa>
 8006a42:	4b5b      	ldr	r3, [pc, #364]	@ (8006bb0 <UART_SetConfig+0x2cc>)
 8006a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006a4c:	2b30      	cmp	r3, #48	@ 0x30
 8006a4e:	d016      	beq.n	8006a7e <UART_SetConfig+0x19a>
 8006a50:	2b30      	cmp	r3, #48	@ 0x30
 8006a52:	d818      	bhi.n	8006a86 <UART_SetConfig+0x1a2>
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d00a      	beq.n	8006a6e <UART_SetConfig+0x18a>
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d814      	bhi.n	8006a86 <UART_SetConfig+0x1a2>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <UART_SetConfig+0x182>
 8006a60:	2b10      	cmp	r3, #16
 8006a62:	d008      	beq.n	8006a76 <UART_SetConfig+0x192>
 8006a64:	e00f      	b.n	8006a86 <UART_SetConfig+0x1a2>
 8006a66:	2300      	movs	r3, #0
 8006a68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a6c:	e0ad      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a74:	e0a9      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006a76:	2304      	movs	r3, #4
 8006a78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a7c:	e0a5      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006a7e:	2308      	movs	r3, #8
 8006a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a84:	e0a1      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006a86:	2310      	movs	r3, #16
 8006a88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006a8c:	e09d      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a4a      	ldr	r2, [pc, #296]	@ (8006bbc <UART_SetConfig+0x2d8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d125      	bne.n	8006ae4 <UART_SetConfig+0x200>
 8006a98:	4b45      	ldr	r3, [pc, #276]	@ (8006bb0 <UART_SetConfig+0x2cc>)
 8006a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006aa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006aa4:	d016      	beq.n	8006ad4 <UART_SetConfig+0x1f0>
 8006aa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006aa8:	d818      	bhi.n	8006adc <UART_SetConfig+0x1f8>
 8006aaa:	2b80      	cmp	r3, #128	@ 0x80
 8006aac:	d00a      	beq.n	8006ac4 <UART_SetConfig+0x1e0>
 8006aae:	2b80      	cmp	r3, #128	@ 0x80
 8006ab0:	d814      	bhi.n	8006adc <UART_SetConfig+0x1f8>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <UART_SetConfig+0x1d8>
 8006ab6:	2b40      	cmp	r3, #64	@ 0x40
 8006ab8:	d008      	beq.n	8006acc <UART_SetConfig+0x1e8>
 8006aba:	e00f      	b.n	8006adc <UART_SetConfig+0x1f8>
 8006abc:	2300      	movs	r3, #0
 8006abe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ac2:	e082      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006aca:	e07e      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006acc:	2304      	movs	r3, #4
 8006ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ad2:	e07a      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ada:	e076      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ae2:	e072      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a35      	ldr	r2, [pc, #212]	@ (8006bc0 <UART_SetConfig+0x2dc>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d12a      	bne.n	8006b44 <UART_SetConfig+0x260>
 8006aee:	4b30      	ldr	r3, [pc, #192]	@ (8006bb0 <UART_SetConfig+0x2cc>)
 8006af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006af8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006afc:	d01a      	beq.n	8006b34 <UART_SetConfig+0x250>
 8006afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b02:	d81b      	bhi.n	8006b3c <UART_SetConfig+0x258>
 8006b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b08:	d00c      	beq.n	8006b24 <UART_SetConfig+0x240>
 8006b0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b0e:	d815      	bhi.n	8006b3c <UART_SetConfig+0x258>
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <UART_SetConfig+0x238>
 8006b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b18:	d008      	beq.n	8006b2c <UART_SetConfig+0x248>
 8006b1a:	e00f      	b.n	8006b3c <UART_SetConfig+0x258>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b22:	e052      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006b24:	2302      	movs	r3, #2
 8006b26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b2a:	e04e      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b32:	e04a      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006b34:	2308      	movs	r3, #8
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b3a:	e046      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b42:	e042      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a17      	ldr	r2, [pc, #92]	@ (8006ba8 <UART_SetConfig+0x2c4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d13a      	bne.n	8006bc4 <UART_SetConfig+0x2e0>
 8006b4e:	4b18      	ldr	r3, [pc, #96]	@ (8006bb0 <UART_SetConfig+0x2cc>)
 8006b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006b58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b5c:	d01a      	beq.n	8006b94 <UART_SetConfig+0x2b0>
 8006b5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006b62:	d81b      	bhi.n	8006b9c <UART_SetConfig+0x2b8>
 8006b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b68:	d00c      	beq.n	8006b84 <UART_SetConfig+0x2a0>
 8006b6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b6e:	d815      	bhi.n	8006b9c <UART_SetConfig+0x2b8>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <UART_SetConfig+0x298>
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b78:	d008      	beq.n	8006b8c <UART_SetConfig+0x2a8>
 8006b7a:	e00f      	b.n	8006b9c <UART_SetConfig+0x2b8>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b82:	e022      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006b84:	2302      	movs	r3, #2
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b8a:	e01e      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006b8c:	2304      	movs	r3, #4
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b92:	e01a      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006b94:	2308      	movs	r3, #8
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b9a:	e016      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006b9c:	2310      	movs	r3, #16
 8006b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ba2:	e012      	b.n	8006bca <UART_SetConfig+0x2e6>
 8006ba4:	efff69f3 	.word	0xefff69f3
 8006ba8:	40008000 	.word	0x40008000
 8006bac:	40013800 	.word	0x40013800
 8006bb0:	40021000 	.word	0x40021000
 8006bb4:	40004400 	.word	0x40004400
 8006bb8:	40004800 	.word	0x40004800
 8006bbc:	40004c00 	.word	0x40004c00
 8006bc0:	40005000 	.word	0x40005000
 8006bc4:	2310      	movs	r3, #16
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a9f      	ldr	r2, [pc, #636]	@ (8006e4c <UART_SetConfig+0x568>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d17a      	bne.n	8006cca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d824      	bhi.n	8006c26 <UART_SetConfig+0x342>
 8006bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8006be4 <UART_SetConfig+0x300>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c09 	.word	0x08006c09
 8006be8:	08006c27 	.word	0x08006c27
 8006bec:	08006c11 	.word	0x08006c11
 8006bf0:	08006c27 	.word	0x08006c27
 8006bf4:	08006c17 	.word	0x08006c17
 8006bf8:	08006c27 	.word	0x08006c27
 8006bfc:	08006c27 	.word	0x08006c27
 8006c00:	08006c27 	.word	0x08006c27
 8006c04:	08006c1f 	.word	0x08006c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c08:	f7fe ff9a 	bl	8005b40 <HAL_RCC_GetPCLK1Freq>
 8006c0c:	61f8      	str	r0, [r7, #28]
        break;
 8006c0e:	e010      	b.n	8006c32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c10:	4b8f      	ldr	r3, [pc, #572]	@ (8006e50 <UART_SetConfig+0x56c>)
 8006c12:	61fb      	str	r3, [r7, #28]
        break;
 8006c14:	e00d      	b.n	8006c32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c16:	f7fe fefb 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8006c1a:	61f8      	str	r0, [r7, #28]
        break;
 8006c1c:	e009      	b.n	8006c32 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c22:	61fb      	str	r3, [r7, #28]
        break;
 8006c24:	e005      	b.n	8006c32 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006c30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 80fb 	beq.w	8006e30 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	4613      	mov	r3, r2
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	4413      	add	r3, r2
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d305      	bcc.n	8006c56 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d903      	bls.n	8006c5e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006c5c:	e0e8      	b.n	8006e30 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	2200      	movs	r2, #0
 8006c62:	461c      	mov	r4, r3
 8006c64:	4615      	mov	r5, r2
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	f04f 0300 	mov.w	r3, #0
 8006c6e:	022b      	lsls	r3, r5, #8
 8006c70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006c74:	0222      	lsls	r2, r4, #8
 8006c76:	68f9      	ldr	r1, [r7, #12]
 8006c78:	6849      	ldr	r1, [r1, #4]
 8006c7a:	0849      	lsrs	r1, r1, #1
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	4688      	mov	r8, r1
 8006c80:	4681      	mov	r9, r0
 8006c82:	eb12 0a08 	adds.w	sl, r2, r8
 8006c86:	eb43 0b09 	adc.w	fp, r3, r9
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	603b      	str	r3, [r7, #0]
 8006c92:	607a      	str	r2, [r7, #4]
 8006c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c98:	4650      	mov	r0, sl
 8006c9a:	4659      	mov	r1, fp
 8006c9c:	f7f9 ff84 	bl	8000ba8 <__aeabi_uldivmod>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	460b      	mov	r3, r1
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cae:	d308      	bcc.n	8006cc2 <UART_SetConfig+0x3de>
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cb6:	d204      	bcs.n	8006cc2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	60da      	str	r2, [r3, #12]
 8006cc0:	e0b6      	b.n	8006e30 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006cc8:	e0b2      	b.n	8006e30 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cd2:	d15e      	bne.n	8006d92 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006cd8:	2b08      	cmp	r3, #8
 8006cda:	d828      	bhi.n	8006d2e <UART_SetConfig+0x44a>
 8006cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce4 <UART_SetConfig+0x400>)
 8006cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce2:	bf00      	nop
 8006ce4:	08006d09 	.word	0x08006d09
 8006ce8:	08006d11 	.word	0x08006d11
 8006cec:	08006d19 	.word	0x08006d19
 8006cf0:	08006d2f 	.word	0x08006d2f
 8006cf4:	08006d1f 	.word	0x08006d1f
 8006cf8:	08006d2f 	.word	0x08006d2f
 8006cfc:	08006d2f 	.word	0x08006d2f
 8006d00:	08006d2f 	.word	0x08006d2f
 8006d04:	08006d27 	.word	0x08006d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d08:	f7fe ff1a 	bl	8005b40 <HAL_RCC_GetPCLK1Freq>
 8006d0c:	61f8      	str	r0, [r7, #28]
        break;
 8006d0e:	e014      	b.n	8006d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d10:	f7fe ff2c 	bl	8005b6c <HAL_RCC_GetPCLK2Freq>
 8006d14:	61f8      	str	r0, [r7, #28]
        break;
 8006d16:	e010      	b.n	8006d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d18:	4b4d      	ldr	r3, [pc, #308]	@ (8006e50 <UART_SetConfig+0x56c>)
 8006d1a:	61fb      	str	r3, [r7, #28]
        break;
 8006d1c:	e00d      	b.n	8006d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d1e:	f7fe fe77 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8006d22:	61f8      	str	r0, [r7, #28]
        break;
 8006d24:	e009      	b.n	8006d3a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d2a:	61fb      	str	r3, [r7, #28]
        break;
 8006d2c:	e005      	b.n	8006d3a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006d38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d077      	beq.n	8006e30 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	005a      	lsls	r2, r3, #1
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	085b      	lsrs	r3, r3, #1
 8006d4a:	441a      	add	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d54:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b0f      	cmp	r3, #15
 8006d5a:	d916      	bls.n	8006d8a <UART_SetConfig+0x4a6>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d62:	d212      	bcs.n	8006d8a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	f023 030f 	bic.w	r3, r3, #15
 8006d6c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	085b      	lsrs	r3, r3, #1
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	f003 0307 	and.w	r3, r3, #7
 8006d78:	b29a      	uxth	r2, r3
 8006d7a:	8afb      	ldrh	r3, [r7, #22]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	8afa      	ldrh	r2, [r7, #22]
 8006d86:	60da      	str	r2, [r3, #12]
 8006d88:	e052      	b.n	8006e30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006d90:	e04e      	b.n	8006e30 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d96:	2b08      	cmp	r3, #8
 8006d98:	d827      	bhi.n	8006dea <UART_SetConfig+0x506>
 8006d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006da0 <UART_SetConfig+0x4bc>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006dcd 	.word	0x08006dcd
 8006da8:	08006dd5 	.word	0x08006dd5
 8006dac:	08006deb 	.word	0x08006deb
 8006db0:	08006ddb 	.word	0x08006ddb
 8006db4:	08006deb 	.word	0x08006deb
 8006db8:	08006deb 	.word	0x08006deb
 8006dbc:	08006deb 	.word	0x08006deb
 8006dc0:	08006de3 	.word	0x08006de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc4:	f7fe febc 	bl	8005b40 <HAL_RCC_GetPCLK1Freq>
 8006dc8:	61f8      	str	r0, [r7, #28]
        break;
 8006dca:	e014      	b.n	8006df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dcc:	f7fe fece 	bl	8005b6c <HAL_RCC_GetPCLK2Freq>
 8006dd0:	61f8      	str	r0, [r7, #28]
        break;
 8006dd2:	e010      	b.n	8006df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8006e50 <UART_SetConfig+0x56c>)
 8006dd6:	61fb      	str	r3, [r7, #28]
        break;
 8006dd8:	e00d      	b.n	8006df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dda:	f7fe fe19 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8006dde:	61f8      	str	r0, [r7, #28]
        break;
 8006de0:	e009      	b.n	8006df6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006de6:	61fb      	str	r3, [r7, #28]
        break;
 8006de8:	e005      	b.n	8006df6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006df4:	bf00      	nop
    }

    if (pclk != 0U)
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d019      	beq.n	8006e30 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	085a      	lsrs	r2, r3, #1
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	441a      	add	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	2b0f      	cmp	r3, #15
 8006e14:	d909      	bls.n	8006e2a <UART_SetConfig+0x546>
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e1c:	d205      	bcs.n	8006e2a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	60da      	str	r2, [r3, #12]
 8006e28:	e002      	b.n	8006e30 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2200      	movs	r2, #0
 8006e34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006e3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3728      	adds	r7, #40	@ 0x28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40008000 	.word	0x40008000
 8006e50:	00f42400 	.word	0x00f42400

08006e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e60:	f003 0308 	and.w	r3, r3, #8
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00a      	beq.n	8006ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee8:	f003 0310 	and.w	r3, r3, #16
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00a      	beq.n	8006f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d01a      	beq.n	8006f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f52:	d10a      	bne.n	8006f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	430a      	orrs	r2, r1
 8006f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00a      	beq.n	8006f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	605a      	str	r2, [r3, #4]
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b098      	sub	sp, #96	@ 0x60
 8006f9c:	af02      	add	r7, sp, #8
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006fa8:	f7fc fa50 	bl	800344c <HAL_GetTick>
 8006fac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d12e      	bne.n	800701a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f88c 	bl	80070e8 <UART_WaitOnFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d021      	beq.n	800701a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fea:	653b      	str	r3, [r7, #80]	@ 0x50
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ff6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e6      	bne.n	8006fd6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e062      	b.n	80070e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0304 	and.w	r3, r3, #4
 8007024:	2b04      	cmp	r3, #4
 8007026:	d149      	bne.n	80070bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007028:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007030:	2200      	movs	r2, #0
 8007032:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f856 	bl	80070e8 <UART_WaitOnFlagUntilTimeout>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d03c      	beq.n	80070bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	623b      	str	r3, [r7, #32]
   return(result);
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	461a      	mov	r2, r3
 800705e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007060:	633b      	str	r3, [r7, #48]	@ 0x30
 8007062:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007064:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007068:	e841 2300 	strex	r3, r2, [r1]
 800706c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800706e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1e6      	bne.n	8007042 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3308      	adds	r3, #8
 800707a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	e853 3f00 	ldrex	r3, [r3]
 8007082:	60fb      	str	r3, [r7, #12]
   return(result);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3308      	adds	r3, #8
 8007092:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007094:	61fa      	str	r2, [r7, #28]
 8007096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007098:	69b9      	ldr	r1, [r7, #24]
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	e841 2300 	strex	r3, r2, [r1]
 80070a0:	617b      	str	r3, [r7, #20]
   return(result);
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1e5      	bne.n	8007074 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e011      	b.n	80070e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3758      	adds	r7, #88	@ 0x58
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	603b      	str	r3, [r7, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f8:	e04f      	b.n	800719a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007100:	d04b      	beq.n	800719a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007102:	f7fc f9a3 	bl	800344c <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	429a      	cmp	r2, r3
 8007110:	d302      	bcc.n	8007118 <UART_WaitOnFlagUntilTimeout+0x30>
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e04e      	b.n	80071ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f003 0304 	and.w	r3, r3, #4
 8007126:	2b00      	cmp	r3, #0
 8007128:	d037      	beq.n	800719a <UART_WaitOnFlagUntilTimeout+0xb2>
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b80      	cmp	r3, #128	@ 0x80
 800712e:	d034      	beq.n	800719a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2b40      	cmp	r3, #64	@ 0x40
 8007134:	d031      	beq.n	800719a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b08      	cmp	r3, #8
 8007142:	d110      	bne.n	8007166 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2208      	movs	r2, #8
 800714a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f838 	bl	80071c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2208      	movs	r2, #8
 8007156:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e029      	b.n	80071ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69db      	ldr	r3, [r3, #28]
 800716c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007174:	d111      	bne.n	800719a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800717e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f000 f81e 	bl	80071c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e00f      	b.n	80071ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4013      	ands	r3, r2
 80071a4:	68ba      	ldr	r2, [r7, #8]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	bf0c      	ite	eq
 80071aa:	2301      	moveq	r3, #1
 80071ac:	2300      	movne	r3, #0
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	79fb      	ldrb	r3, [r7, #7]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d0a0      	beq.n	80070fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b095      	sub	sp, #84	@ 0x54
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	461a      	mov	r2, r3
 80071e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80071ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e6      	bne.n	80071ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3308      	adds	r3, #8
 8007202:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	61fb      	str	r3, [r7, #28]
   return(result);
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	f023 0301 	bic.w	r3, r3, #1
 8007212:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3308      	adds	r3, #8
 800721a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800721c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800721e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007222:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e5      	bne.n	80071fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007234:	2b01      	cmp	r3, #1
 8007236:	d118      	bne.n	800726a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	60bb      	str	r3, [r7, #8]
   return(result);
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f023 0310 	bic.w	r3, r3, #16
 800724c:	647b      	str	r3, [r7, #68]	@ 0x44
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6979      	ldr	r1, [r7, #20]
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	613b      	str	r3, [r7, #16]
   return(result);
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e6      	bne.n	8007238 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800727e:	bf00      	nop
 8007280:	3754      	adds	r7, #84	@ 0x54
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800728a:	b084      	sub	sp, #16
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	f107 001c 	add.w	r0, r7, #28
 8007298:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa69 	bl	8007780 <USB_CoreReset>
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80072b2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d106      	bne.n	80072c8 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80072c6:	e005      	b.n	80072d4 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072e0:	b004      	add	sp, #16
 80072e2:	4770      	bx	lr

080072e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f023 0201 	bic.w	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d115      	bne.n	8007354 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007334:	200a      	movs	r0, #10
 8007336:	f7fc f895 	bl	8003464 <HAL_Delay>
      ms += 10U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	330a      	adds	r3, #10
 800733e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fa0f 	bl	8007764 <USB_GetMode>
 8007346:	4603      	mov	r3, r0
 8007348:	2b01      	cmp	r3, #1
 800734a:	d01e      	beq.n	800738a <USB_SetCurrentMode+0x84>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007350:	d9f0      	bls.n	8007334 <USB_SetCurrentMode+0x2e>
 8007352:	e01a      	b.n	800738a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d115      	bne.n	8007386 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007366:	200a      	movs	r0, #10
 8007368:	f7fc f87c 	bl	8003464 <HAL_Delay>
      ms += 10U;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	330a      	adds	r3, #10
 8007370:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9f6 	bl	8007764 <USB_GetMode>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <USB_SetCurrentMode+0x84>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2bc7      	cmp	r3, #199	@ 0xc7
 8007382:	d9f0      	bls.n	8007366 <USB_SetCurrentMode+0x60>
 8007384:	e001      	b.n	800738a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e005      	b.n	8007396 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2bc8      	cmp	r3, #200	@ 0xc8
 800738e:	d101      	bne.n	8007394 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e000      	b.n	8007396 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073a0:	b084      	sub	sp, #16
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b086      	sub	sp, #24
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80073ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80073ba:	2300      	movs	r3, #0
 80073bc:	613b      	str	r3, [r7, #16]
 80073be:	e009      	b.n	80073d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	3340      	adds	r3, #64	@ 0x40
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	3301      	adds	r3, #1
 80073d2:	613b      	str	r3, [r7, #16]
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	2b0e      	cmp	r3, #14
 80073d8:	d9f2      	bls.n	80073c0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80073da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d11c      	bne.n	800741c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073f0:	f043 0302 	orr.w	r3, r3, #2
 80073f4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fa:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	e005      	b.n	8007428 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007420:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800742e:	461a      	mov	r2, r3
 8007430:	2300      	movs	r3, #0
 8007432:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007434:	2103      	movs	r1, #3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f95a 	bl	80076f0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800743c:	2110      	movs	r1, #16
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f8f6 	bl	8007630 <USB_FlushTxFifo>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d001      	beq.n	800744e <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f920 	bl	8007694 <USB_FlushRxFifo>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007464:	461a      	mov	r2, r3
 8007466:	2300      	movs	r3, #0
 8007468:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007470:	461a      	mov	r2, r3
 8007472:	2300      	movs	r3, #0
 8007474:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800747c:	461a      	mov	r2, r3
 800747e:	2300      	movs	r3, #0
 8007480:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007482:	2300      	movs	r3, #0
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	e043      	b.n	8007510 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800749a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800749e:	d118      	bne.n	80074d2 <USB_DevInit+0x132>
    {
      if (i == 0U)
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	015a      	lsls	r2, r3, #5
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4413      	add	r3, r2
 80074ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b2:	461a      	mov	r2, r3
 80074b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	e013      	b.n	80074e4 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074c8:	461a      	mov	r2, r3
 80074ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	e008      	b.n	80074e4 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074de:	461a      	mov	r2, r3
 80074e0:	2300      	movs	r3, #0
 80074e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f0:	461a      	mov	r2, r3
 80074f2:	2300      	movs	r3, #0
 80074f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007502:	461a      	mov	r2, r3
 8007504:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007508:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	3301      	adds	r3, #1
 800750e:	613b      	str	r3, [r7, #16]
 8007510:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007514:	461a      	mov	r2, r3
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4293      	cmp	r3, r2
 800751a:	d3b5      	bcc.n	8007488 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800751c:	2300      	movs	r3, #0
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	e043      	b.n	80075aa <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007534:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007538:	d118      	bne.n	800756c <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	015a      	lsls	r2, r3, #5
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4413      	add	r3, r2
 8007548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800754c:	461a      	mov	r2, r3
 800754e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	e013      	b.n	800757e <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007562:	461a      	mov	r2, r3
 8007564:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	e008      	b.n	800757e <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007578:	461a      	mov	r2, r3
 800757a:	2300      	movs	r3, #0
 800757c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	4413      	add	r3, r2
 8007586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800758a:	461a      	mov	r2, r3
 800758c:	2300      	movs	r3, #0
 800758e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800759c:	461a      	mov	r2, r3
 800759e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	3301      	adds	r3, #1
 80075a8:	613b      	str	r3, [r7, #16]
 80075aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80075ae:	461a      	mov	r2, r3
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d3b5      	bcc.n	8007522 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80075d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	f043 0210 	orr.w	r2, r3, #16
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	699a      	ldr	r2, [r3, #24]
 80075e8:	4b10      	ldr	r3, [pc, #64]	@ (800762c <USB_DevInit+0x28c>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80075f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d005      	beq.n	8007604 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	f043 0208 	orr.w	r2, r3, #8
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007604:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007608:	2b01      	cmp	r3, #1
 800760a:	d107      	bne.n	800761c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007614:	f043 0304 	orr.w	r3, r3, #4
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800761c:	7dfb      	ldrb	r3, [r7, #23]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3718      	adds	r7, #24
 8007622:	46bd      	mov	sp, r7
 8007624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007628:	b004      	add	sp, #16
 800762a:	4770      	bx	lr
 800762c:	803c3800 	.word	0x803c3800

08007630 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3301      	adds	r3, #1
 8007642:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800764a:	d901      	bls.n	8007650 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e01b      	b.n	8007688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	daf2      	bge.n	800763e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	019b      	lsls	r3, r3, #6
 8007660:	f043 0220 	orr.w	r2, r3, #32
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3301      	adds	r3, #1
 800766c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007674:	d901      	bls.n	800767a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e006      	b.n	8007688 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b20      	cmp	r3, #32
 8007684:	d0f0      	beq.n	8007668 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3714      	adds	r7, #20
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076ac:	d901      	bls.n	80076b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e018      	b.n	80076e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	daf2      	bge.n	80076a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2210      	movs	r2, #16
 80076c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	3301      	adds	r3, #1
 80076c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076d0:	d901      	bls.n	80076d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076d2:	2303      	movs	r3, #3
 80076d4:	e006      	b.n	80076e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f003 0310 	and.w	r3, r3, #16
 80076de:	2b10      	cmp	r3, #16
 80076e0:	d0f0      	beq.n	80076c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3714      	adds	r7, #20
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr

080076f0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	68f9      	ldr	r1, [r7, #12]
 800770c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007710:	4313      	orrs	r3, r2
 8007712:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800773c:	f023 0303 	bic.w	r3, r3, #3
 8007740:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007750:	f043 0302 	orr.w	r3, r3, #2
 8007754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	f003 0301 	and.w	r3, r3, #1
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	3301      	adds	r3, #1
 8007790:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007798:	d901      	bls.n	800779e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800779a:	2303      	movs	r3, #3
 800779c:	e01b      	b.n	80077d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	daf2      	bge.n	800778c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f043 0201 	orr.w	r2, r3, #1
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3301      	adds	r3, #1
 80077ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077c2:	d901      	bls.n	80077c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e006      	b.n	80077d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	f003 0301 	and.w	r3, r3, #1
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d0f0      	beq.n	80077b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr

080077e2 <__cvt>:
 80077e2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077e6:	ec57 6b10 	vmov	r6, r7, d0
 80077ea:	2f00      	cmp	r7, #0
 80077ec:	460c      	mov	r4, r1
 80077ee:	4619      	mov	r1, r3
 80077f0:	463b      	mov	r3, r7
 80077f2:	bfbb      	ittet	lt
 80077f4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80077f8:	461f      	movlt	r7, r3
 80077fa:	2300      	movge	r3, #0
 80077fc:	232d      	movlt	r3, #45	@ 0x2d
 80077fe:	700b      	strb	r3, [r1, #0]
 8007800:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007802:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007806:	4691      	mov	r9, r2
 8007808:	f023 0820 	bic.w	r8, r3, #32
 800780c:	bfbc      	itt	lt
 800780e:	4632      	movlt	r2, r6
 8007810:	4616      	movlt	r6, r2
 8007812:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007816:	d005      	beq.n	8007824 <__cvt+0x42>
 8007818:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800781c:	d100      	bne.n	8007820 <__cvt+0x3e>
 800781e:	3401      	adds	r4, #1
 8007820:	2102      	movs	r1, #2
 8007822:	e000      	b.n	8007826 <__cvt+0x44>
 8007824:	2103      	movs	r1, #3
 8007826:	ab03      	add	r3, sp, #12
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	ab02      	add	r3, sp, #8
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	ec47 6b10 	vmov	d0, r6, r7
 8007832:	4653      	mov	r3, sl
 8007834:	4622      	mov	r2, r4
 8007836:	f000 fe87 	bl	8008548 <_dtoa_r>
 800783a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800783e:	4605      	mov	r5, r0
 8007840:	d119      	bne.n	8007876 <__cvt+0x94>
 8007842:	f019 0f01 	tst.w	r9, #1
 8007846:	d00e      	beq.n	8007866 <__cvt+0x84>
 8007848:	eb00 0904 	add.w	r9, r0, r4
 800784c:	2200      	movs	r2, #0
 800784e:	2300      	movs	r3, #0
 8007850:	4630      	mov	r0, r6
 8007852:	4639      	mov	r1, r7
 8007854:	f7f9 f938 	bl	8000ac8 <__aeabi_dcmpeq>
 8007858:	b108      	cbz	r0, 800785e <__cvt+0x7c>
 800785a:	f8cd 900c 	str.w	r9, [sp, #12]
 800785e:	2230      	movs	r2, #48	@ 0x30
 8007860:	9b03      	ldr	r3, [sp, #12]
 8007862:	454b      	cmp	r3, r9
 8007864:	d31e      	bcc.n	80078a4 <__cvt+0xc2>
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800786a:	1b5b      	subs	r3, r3, r5
 800786c:	4628      	mov	r0, r5
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	b004      	add	sp, #16
 8007872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007876:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800787a:	eb00 0904 	add.w	r9, r0, r4
 800787e:	d1e5      	bne.n	800784c <__cvt+0x6a>
 8007880:	7803      	ldrb	r3, [r0, #0]
 8007882:	2b30      	cmp	r3, #48	@ 0x30
 8007884:	d10a      	bne.n	800789c <__cvt+0xba>
 8007886:	2200      	movs	r2, #0
 8007888:	2300      	movs	r3, #0
 800788a:	4630      	mov	r0, r6
 800788c:	4639      	mov	r1, r7
 800788e:	f7f9 f91b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007892:	b918      	cbnz	r0, 800789c <__cvt+0xba>
 8007894:	f1c4 0401 	rsb	r4, r4, #1
 8007898:	f8ca 4000 	str.w	r4, [sl]
 800789c:	f8da 3000 	ldr.w	r3, [sl]
 80078a0:	4499      	add	r9, r3
 80078a2:	e7d3      	b.n	800784c <__cvt+0x6a>
 80078a4:	1c59      	adds	r1, r3, #1
 80078a6:	9103      	str	r1, [sp, #12]
 80078a8:	701a      	strb	r2, [r3, #0]
 80078aa:	e7d9      	b.n	8007860 <__cvt+0x7e>

080078ac <__exponent>:
 80078ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078ae:	2900      	cmp	r1, #0
 80078b0:	bfba      	itte	lt
 80078b2:	4249      	neglt	r1, r1
 80078b4:	232d      	movlt	r3, #45	@ 0x2d
 80078b6:	232b      	movge	r3, #43	@ 0x2b
 80078b8:	2909      	cmp	r1, #9
 80078ba:	7002      	strb	r2, [r0, #0]
 80078bc:	7043      	strb	r3, [r0, #1]
 80078be:	dd29      	ble.n	8007914 <__exponent+0x68>
 80078c0:	f10d 0307 	add.w	r3, sp, #7
 80078c4:	461d      	mov	r5, r3
 80078c6:	270a      	movs	r7, #10
 80078c8:	461a      	mov	r2, r3
 80078ca:	fbb1 f6f7 	udiv	r6, r1, r7
 80078ce:	fb07 1416 	mls	r4, r7, r6, r1
 80078d2:	3430      	adds	r4, #48	@ 0x30
 80078d4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078d8:	460c      	mov	r4, r1
 80078da:	2c63      	cmp	r4, #99	@ 0x63
 80078dc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80078e0:	4631      	mov	r1, r6
 80078e2:	dcf1      	bgt.n	80078c8 <__exponent+0x1c>
 80078e4:	3130      	adds	r1, #48	@ 0x30
 80078e6:	1e94      	subs	r4, r2, #2
 80078e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078ec:	1c41      	adds	r1, r0, #1
 80078ee:	4623      	mov	r3, r4
 80078f0:	42ab      	cmp	r3, r5
 80078f2:	d30a      	bcc.n	800790a <__exponent+0x5e>
 80078f4:	f10d 0309 	add.w	r3, sp, #9
 80078f8:	1a9b      	subs	r3, r3, r2
 80078fa:	42ac      	cmp	r4, r5
 80078fc:	bf88      	it	hi
 80078fe:	2300      	movhi	r3, #0
 8007900:	3302      	adds	r3, #2
 8007902:	4403      	add	r3, r0
 8007904:	1a18      	subs	r0, r3, r0
 8007906:	b003      	add	sp, #12
 8007908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800790a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800790e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007912:	e7ed      	b.n	80078f0 <__exponent+0x44>
 8007914:	2330      	movs	r3, #48	@ 0x30
 8007916:	3130      	adds	r1, #48	@ 0x30
 8007918:	7083      	strb	r3, [r0, #2]
 800791a:	70c1      	strb	r1, [r0, #3]
 800791c:	1d03      	adds	r3, r0, #4
 800791e:	e7f1      	b.n	8007904 <__exponent+0x58>

08007920 <_printf_float>:
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	b08d      	sub	sp, #52	@ 0x34
 8007926:	460c      	mov	r4, r1
 8007928:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800792c:	4616      	mov	r6, r2
 800792e:	461f      	mov	r7, r3
 8007930:	4605      	mov	r5, r0
 8007932:	f000 fd51 	bl	80083d8 <_localeconv_r>
 8007936:	6803      	ldr	r3, [r0, #0]
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	4618      	mov	r0, r3
 800793c:	f7f8 fc98 	bl	8000270 <strlen>
 8007940:	2300      	movs	r3, #0
 8007942:	930a      	str	r3, [sp, #40]	@ 0x28
 8007944:	f8d8 3000 	ldr.w	r3, [r8]
 8007948:	9005      	str	r0, [sp, #20]
 800794a:	3307      	adds	r3, #7
 800794c:	f023 0307 	bic.w	r3, r3, #7
 8007950:	f103 0208 	add.w	r2, r3, #8
 8007954:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007958:	f8d4 b000 	ldr.w	fp, [r4]
 800795c:	f8c8 2000 	str.w	r2, [r8]
 8007960:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007964:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007968:	9307      	str	r3, [sp, #28]
 800796a:	f8cd 8018 	str.w	r8, [sp, #24]
 800796e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007976:	4b9c      	ldr	r3, [pc, #624]	@ (8007be8 <_printf_float+0x2c8>)
 8007978:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800797c:	f7f9 f8d6 	bl	8000b2c <__aeabi_dcmpun>
 8007980:	bb70      	cbnz	r0, 80079e0 <_printf_float+0xc0>
 8007982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007986:	4b98      	ldr	r3, [pc, #608]	@ (8007be8 <_printf_float+0x2c8>)
 8007988:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800798c:	f7f9 f8b0 	bl	8000af0 <__aeabi_dcmple>
 8007990:	bb30      	cbnz	r0, 80079e0 <_printf_float+0xc0>
 8007992:	2200      	movs	r2, #0
 8007994:	2300      	movs	r3, #0
 8007996:	4640      	mov	r0, r8
 8007998:	4649      	mov	r1, r9
 800799a:	f7f9 f89f 	bl	8000adc <__aeabi_dcmplt>
 800799e:	b110      	cbz	r0, 80079a6 <_printf_float+0x86>
 80079a0:	232d      	movs	r3, #45	@ 0x2d
 80079a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079a6:	4a91      	ldr	r2, [pc, #580]	@ (8007bec <_printf_float+0x2cc>)
 80079a8:	4b91      	ldr	r3, [pc, #580]	@ (8007bf0 <_printf_float+0x2d0>)
 80079aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079ae:	bf8c      	ite	hi
 80079b0:	4690      	movhi	r8, r2
 80079b2:	4698      	movls	r8, r3
 80079b4:	2303      	movs	r3, #3
 80079b6:	6123      	str	r3, [r4, #16]
 80079b8:	f02b 0304 	bic.w	r3, fp, #4
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	f04f 0900 	mov.w	r9, #0
 80079c2:	9700      	str	r7, [sp, #0]
 80079c4:	4633      	mov	r3, r6
 80079c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079c8:	4621      	mov	r1, r4
 80079ca:	4628      	mov	r0, r5
 80079cc:	f000 f9d2 	bl	8007d74 <_printf_common>
 80079d0:	3001      	adds	r0, #1
 80079d2:	f040 808d 	bne.w	8007af0 <_printf_float+0x1d0>
 80079d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079da:	b00d      	add	sp, #52	@ 0x34
 80079dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e0:	4642      	mov	r2, r8
 80079e2:	464b      	mov	r3, r9
 80079e4:	4640      	mov	r0, r8
 80079e6:	4649      	mov	r1, r9
 80079e8:	f7f9 f8a0 	bl	8000b2c <__aeabi_dcmpun>
 80079ec:	b140      	cbz	r0, 8007a00 <_printf_float+0xe0>
 80079ee:	464b      	mov	r3, r9
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bfbc      	itt	lt
 80079f4:	232d      	movlt	r3, #45	@ 0x2d
 80079f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079fa:	4a7e      	ldr	r2, [pc, #504]	@ (8007bf4 <_printf_float+0x2d4>)
 80079fc:	4b7e      	ldr	r3, [pc, #504]	@ (8007bf8 <_printf_float+0x2d8>)
 80079fe:	e7d4      	b.n	80079aa <_printf_float+0x8a>
 8007a00:	6863      	ldr	r3, [r4, #4]
 8007a02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a06:	9206      	str	r2, [sp, #24]
 8007a08:	1c5a      	adds	r2, r3, #1
 8007a0a:	d13b      	bne.n	8007a84 <_printf_float+0x164>
 8007a0c:	2306      	movs	r3, #6
 8007a0e:	6063      	str	r3, [r4, #4]
 8007a10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a14:	2300      	movs	r3, #0
 8007a16:	6022      	str	r2, [r4, #0]
 8007a18:	9303      	str	r3, [sp, #12]
 8007a1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a20:	ab09      	add	r3, sp, #36	@ 0x24
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	6861      	ldr	r1, [r4, #4]
 8007a26:	ec49 8b10 	vmov	d0, r8, r9
 8007a2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f7ff fed7 	bl	80077e2 <__cvt>
 8007a34:	9b06      	ldr	r3, [sp, #24]
 8007a36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a38:	2b47      	cmp	r3, #71	@ 0x47
 8007a3a:	4680      	mov	r8, r0
 8007a3c:	d129      	bne.n	8007a92 <_printf_float+0x172>
 8007a3e:	1cc8      	adds	r0, r1, #3
 8007a40:	db02      	blt.n	8007a48 <_printf_float+0x128>
 8007a42:	6863      	ldr	r3, [r4, #4]
 8007a44:	4299      	cmp	r1, r3
 8007a46:	dd41      	ble.n	8007acc <_printf_float+0x1ac>
 8007a48:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a4c:	fa5f fa8a 	uxtb.w	sl, sl
 8007a50:	3901      	subs	r1, #1
 8007a52:	4652      	mov	r2, sl
 8007a54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a58:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a5a:	f7ff ff27 	bl	80078ac <__exponent>
 8007a5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a60:	1813      	adds	r3, r2, r0
 8007a62:	2a01      	cmp	r2, #1
 8007a64:	4681      	mov	r9, r0
 8007a66:	6123      	str	r3, [r4, #16]
 8007a68:	dc02      	bgt.n	8007a70 <_printf_float+0x150>
 8007a6a:	6822      	ldr	r2, [r4, #0]
 8007a6c:	07d2      	lsls	r2, r2, #31
 8007a6e:	d501      	bpl.n	8007a74 <_printf_float+0x154>
 8007a70:	3301      	adds	r3, #1
 8007a72:	6123      	str	r3, [r4, #16]
 8007a74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0a2      	beq.n	80079c2 <_printf_float+0xa2>
 8007a7c:	232d      	movs	r3, #45	@ 0x2d
 8007a7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a82:	e79e      	b.n	80079c2 <_printf_float+0xa2>
 8007a84:	9a06      	ldr	r2, [sp, #24]
 8007a86:	2a47      	cmp	r2, #71	@ 0x47
 8007a88:	d1c2      	bne.n	8007a10 <_printf_float+0xf0>
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1c0      	bne.n	8007a10 <_printf_float+0xf0>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e7bd      	b.n	8007a0e <_printf_float+0xee>
 8007a92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a96:	d9db      	bls.n	8007a50 <_printf_float+0x130>
 8007a98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a9c:	d118      	bne.n	8007ad0 <_printf_float+0x1b0>
 8007a9e:	2900      	cmp	r1, #0
 8007aa0:	6863      	ldr	r3, [r4, #4]
 8007aa2:	dd0b      	ble.n	8007abc <_printf_float+0x19c>
 8007aa4:	6121      	str	r1, [r4, #16]
 8007aa6:	b913      	cbnz	r3, 8007aae <_printf_float+0x18e>
 8007aa8:	6822      	ldr	r2, [r4, #0]
 8007aaa:	07d0      	lsls	r0, r2, #31
 8007aac:	d502      	bpl.n	8007ab4 <_printf_float+0x194>
 8007aae:	3301      	adds	r3, #1
 8007ab0:	440b      	add	r3, r1
 8007ab2:	6123      	str	r3, [r4, #16]
 8007ab4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ab6:	f04f 0900 	mov.w	r9, #0
 8007aba:	e7db      	b.n	8007a74 <_printf_float+0x154>
 8007abc:	b913      	cbnz	r3, 8007ac4 <_printf_float+0x1a4>
 8007abe:	6822      	ldr	r2, [r4, #0]
 8007ac0:	07d2      	lsls	r2, r2, #31
 8007ac2:	d501      	bpl.n	8007ac8 <_printf_float+0x1a8>
 8007ac4:	3302      	adds	r3, #2
 8007ac6:	e7f4      	b.n	8007ab2 <_printf_float+0x192>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e7f2      	b.n	8007ab2 <_printf_float+0x192>
 8007acc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ad2:	4299      	cmp	r1, r3
 8007ad4:	db05      	blt.n	8007ae2 <_printf_float+0x1c2>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	6121      	str	r1, [r4, #16]
 8007ada:	07d8      	lsls	r0, r3, #31
 8007adc:	d5ea      	bpl.n	8007ab4 <_printf_float+0x194>
 8007ade:	1c4b      	adds	r3, r1, #1
 8007ae0:	e7e7      	b.n	8007ab2 <_printf_float+0x192>
 8007ae2:	2900      	cmp	r1, #0
 8007ae4:	bfd4      	ite	le
 8007ae6:	f1c1 0202 	rsble	r2, r1, #2
 8007aea:	2201      	movgt	r2, #1
 8007aec:	4413      	add	r3, r2
 8007aee:	e7e0      	b.n	8007ab2 <_printf_float+0x192>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	055a      	lsls	r2, r3, #21
 8007af4:	d407      	bmi.n	8007b06 <_printf_float+0x1e6>
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	4642      	mov	r2, r8
 8007afa:	4631      	mov	r1, r6
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b8      	blx	r7
 8007b00:	3001      	adds	r0, #1
 8007b02:	d12b      	bne.n	8007b5c <_printf_float+0x23c>
 8007b04:	e767      	b.n	80079d6 <_printf_float+0xb6>
 8007b06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b0a:	f240 80dd 	bls.w	8007cc8 <_printf_float+0x3a8>
 8007b0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b12:	2200      	movs	r2, #0
 8007b14:	2300      	movs	r3, #0
 8007b16:	f7f8 ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d033      	beq.n	8007b86 <_printf_float+0x266>
 8007b1e:	4a37      	ldr	r2, [pc, #220]	@ (8007bfc <_printf_float+0x2dc>)
 8007b20:	2301      	movs	r3, #1
 8007b22:	4631      	mov	r1, r6
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b8      	blx	r7
 8007b28:	3001      	adds	r0, #1
 8007b2a:	f43f af54 	beq.w	80079d6 <_printf_float+0xb6>
 8007b2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b32:	4543      	cmp	r3, r8
 8007b34:	db02      	blt.n	8007b3c <_printf_float+0x21c>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	07d8      	lsls	r0, r3, #31
 8007b3a:	d50f      	bpl.n	8007b5c <_printf_float+0x23c>
 8007b3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b40:	4631      	mov	r1, r6
 8007b42:	4628      	mov	r0, r5
 8007b44:	47b8      	blx	r7
 8007b46:	3001      	adds	r0, #1
 8007b48:	f43f af45 	beq.w	80079d6 <_printf_float+0xb6>
 8007b4c:	f04f 0900 	mov.w	r9, #0
 8007b50:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007b54:	f104 0a1a 	add.w	sl, r4, #26
 8007b58:	45c8      	cmp	r8, r9
 8007b5a:	dc09      	bgt.n	8007b70 <_printf_float+0x250>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	079b      	lsls	r3, r3, #30
 8007b60:	f100 8103 	bmi.w	8007d6a <_printf_float+0x44a>
 8007b64:	68e0      	ldr	r0, [r4, #12]
 8007b66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b68:	4298      	cmp	r0, r3
 8007b6a:	bfb8      	it	lt
 8007b6c:	4618      	movlt	r0, r3
 8007b6e:	e734      	b.n	80079da <_printf_float+0xba>
 8007b70:	2301      	movs	r3, #1
 8007b72:	4652      	mov	r2, sl
 8007b74:	4631      	mov	r1, r6
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f af2b 	beq.w	80079d6 <_printf_float+0xb6>
 8007b80:	f109 0901 	add.w	r9, r9, #1
 8007b84:	e7e8      	b.n	8007b58 <_printf_float+0x238>
 8007b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	dc39      	bgt.n	8007c00 <_printf_float+0x2e0>
 8007b8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007bfc <_printf_float+0x2dc>)
 8007b8e:	2301      	movs	r3, #1
 8007b90:	4631      	mov	r1, r6
 8007b92:	4628      	mov	r0, r5
 8007b94:	47b8      	blx	r7
 8007b96:	3001      	adds	r0, #1
 8007b98:	f43f af1d 	beq.w	80079d6 <_printf_float+0xb6>
 8007b9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ba0:	ea59 0303 	orrs.w	r3, r9, r3
 8007ba4:	d102      	bne.n	8007bac <_printf_float+0x28c>
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	07d9      	lsls	r1, r3, #31
 8007baa:	d5d7      	bpl.n	8007b5c <_printf_float+0x23c>
 8007bac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	f43f af0d 	beq.w	80079d6 <_printf_float+0xb6>
 8007bbc:	f04f 0a00 	mov.w	sl, #0
 8007bc0:	f104 0b1a 	add.w	fp, r4, #26
 8007bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc6:	425b      	negs	r3, r3
 8007bc8:	4553      	cmp	r3, sl
 8007bca:	dc01      	bgt.n	8007bd0 <_printf_float+0x2b0>
 8007bcc:	464b      	mov	r3, r9
 8007bce:	e793      	b.n	8007af8 <_printf_float+0x1d8>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	465a      	mov	r2, fp
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b8      	blx	r7
 8007bda:	3001      	adds	r0, #1
 8007bdc:	f43f aefb 	beq.w	80079d6 <_printf_float+0xb6>
 8007be0:	f10a 0a01 	add.w	sl, sl, #1
 8007be4:	e7ee      	b.n	8007bc4 <_printf_float+0x2a4>
 8007be6:	bf00      	nop
 8007be8:	7fefffff 	.word	0x7fefffff
 8007bec:	0800a3e4 	.word	0x0800a3e4
 8007bf0:	0800a3e0 	.word	0x0800a3e0
 8007bf4:	0800a3ec 	.word	0x0800a3ec
 8007bf8:	0800a3e8 	.word	0x0800a3e8
 8007bfc:	0800a3f0 	.word	0x0800a3f0
 8007c00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c06:	4553      	cmp	r3, sl
 8007c08:	bfa8      	it	ge
 8007c0a:	4653      	movge	r3, sl
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	4699      	mov	r9, r3
 8007c10:	dc36      	bgt.n	8007c80 <_printf_float+0x360>
 8007c12:	f04f 0b00 	mov.w	fp, #0
 8007c16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c1a:	f104 021a 	add.w	r2, r4, #26
 8007c1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c20:	9306      	str	r3, [sp, #24]
 8007c22:	eba3 0309 	sub.w	r3, r3, r9
 8007c26:	455b      	cmp	r3, fp
 8007c28:	dc31      	bgt.n	8007c8e <_printf_float+0x36e>
 8007c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c2c:	459a      	cmp	sl, r3
 8007c2e:	dc3a      	bgt.n	8007ca6 <_printf_float+0x386>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	07da      	lsls	r2, r3, #31
 8007c34:	d437      	bmi.n	8007ca6 <_printf_float+0x386>
 8007c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c38:	ebaa 0903 	sub.w	r9, sl, r3
 8007c3c:	9b06      	ldr	r3, [sp, #24]
 8007c3e:	ebaa 0303 	sub.w	r3, sl, r3
 8007c42:	4599      	cmp	r9, r3
 8007c44:	bfa8      	it	ge
 8007c46:	4699      	movge	r9, r3
 8007c48:	f1b9 0f00 	cmp.w	r9, #0
 8007c4c:	dc33      	bgt.n	8007cb6 <_printf_float+0x396>
 8007c4e:	f04f 0800 	mov.w	r8, #0
 8007c52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c56:	f104 0b1a 	add.w	fp, r4, #26
 8007c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c5c:	ebaa 0303 	sub.w	r3, sl, r3
 8007c60:	eba3 0309 	sub.w	r3, r3, r9
 8007c64:	4543      	cmp	r3, r8
 8007c66:	f77f af79 	ble.w	8007b5c <_printf_float+0x23c>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	465a      	mov	r2, fp
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	f43f aeae 	beq.w	80079d6 <_printf_float+0xb6>
 8007c7a:	f108 0801 	add.w	r8, r8, #1
 8007c7e:	e7ec      	b.n	8007c5a <_printf_float+0x33a>
 8007c80:	4642      	mov	r2, r8
 8007c82:	4631      	mov	r1, r6
 8007c84:	4628      	mov	r0, r5
 8007c86:	47b8      	blx	r7
 8007c88:	3001      	adds	r0, #1
 8007c8a:	d1c2      	bne.n	8007c12 <_printf_float+0x2f2>
 8007c8c:	e6a3      	b.n	80079d6 <_printf_float+0xb6>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4631      	mov	r1, r6
 8007c92:	4628      	mov	r0, r5
 8007c94:	9206      	str	r2, [sp, #24]
 8007c96:	47b8      	blx	r7
 8007c98:	3001      	adds	r0, #1
 8007c9a:	f43f ae9c 	beq.w	80079d6 <_printf_float+0xb6>
 8007c9e:	9a06      	ldr	r2, [sp, #24]
 8007ca0:	f10b 0b01 	add.w	fp, fp, #1
 8007ca4:	e7bb      	b.n	8007c1e <_printf_float+0x2fe>
 8007ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007caa:	4631      	mov	r1, r6
 8007cac:	4628      	mov	r0, r5
 8007cae:	47b8      	blx	r7
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d1c0      	bne.n	8007c36 <_printf_float+0x316>
 8007cb4:	e68f      	b.n	80079d6 <_printf_float+0xb6>
 8007cb6:	9a06      	ldr	r2, [sp, #24]
 8007cb8:	464b      	mov	r3, r9
 8007cba:	4442      	add	r2, r8
 8007cbc:	4631      	mov	r1, r6
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	47b8      	blx	r7
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	d1c3      	bne.n	8007c4e <_printf_float+0x32e>
 8007cc6:	e686      	b.n	80079d6 <_printf_float+0xb6>
 8007cc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ccc:	f1ba 0f01 	cmp.w	sl, #1
 8007cd0:	dc01      	bgt.n	8007cd6 <_printf_float+0x3b6>
 8007cd2:	07db      	lsls	r3, r3, #31
 8007cd4:	d536      	bpl.n	8007d44 <_printf_float+0x424>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	4642      	mov	r2, r8
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4628      	mov	r0, r5
 8007cde:	47b8      	blx	r7
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	f43f ae78 	beq.w	80079d6 <_printf_float+0xb6>
 8007ce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cea:	4631      	mov	r1, r6
 8007cec:	4628      	mov	r0, r5
 8007cee:	47b8      	blx	r7
 8007cf0:	3001      	adds	r0, #1
 8007cf2:	f43f ae70 	beq.w	80079d6 <_printf_float+0xb6>
 8007cf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007d02:	f7f8 fee1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d06:	b9c0      	cbnz	r0, 8007d3a <_printf_float+0x41a>
 8007d08:	4653      	mov	r3, sl
 8007d0a:	f108 0201 	add.w	r2, r8, #1
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4628      	mov	r0, r5
 8007d12:	47b8      	blx	r7
 8007d14:	3001      	adds	r0, #1
 8007d16:	d10c      	bne.n	8007d32 <_printf_float+0x412>
 8007d18:	e65d      	b.n	80079d6 <_printf_float+0xb6>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	465a      	mov	r2, fp
 8007d1e:	4631      	mov	r1, r6
 8007d20:	4628      	mov	r0, r5
 8007d22:	47b8      	blx	r7
 8007d24:	3001      	adds	r0, #1
 8007d26:	f43f ae56 	beq.w	80079d6 <_printf_float+0xb6>
 8007d2a:	f108 0801 	add.w	r8, r8, #1
 8007d2e:	45d0      	cmp	r8, sl
 8007d30:	dbf3      	blt.n	8007d1a <_printf_float+0x3fa>
 8007d32:	464b      	mov	r3, r9
 8007d34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d38:	e6df      	b.n	8007afa <_printf_float+0x1da>
 8007d3a:	f04f 0800 	mov.w	r8, #0
 8007d3e:	f104 0b1a 	add.w	fp, r4, #26
 8007d42:	e7f4      	b.n	8007d2e <_printf_float+0x40e>
 8007d44:	2301      	movs	r3, #1
 8007d46:	4642      	mov	r2, r8
 8007d48:	e7e1      	b.n	8007d0e <_printf_float+0x3ee>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	464a      	mov	r2, r9
 8007d4e:	4631      	mov	r1, r6
 8007d50:	4628      	mov	r0, r5
 8007d52:	47b8      	blx	r7
 8007d54:	3001      	adds	r0, #1
 8007d56:	f43f ae3e 	beq.w	80079d6 <_printf_float+0xb6>
 8007d5a:	f108 0801 	add.w	r8, r8, #1
 8007d5e:	68e3      	ldr	r3, [r4, #12]
 8007d60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d62:	1a5b      	subs	r3, r3, r1
 8007d64:	4543      	cmp	r3, r8
 8007d66:	dcf0      	bgt.n	8007d4a <_printf_float+0x42a>
 8007d68:	e6fc      	b.n	8007b64 <_printf_float+0x244>
 8007d6a:	f04f 0800 	mov.w	r8, #0
 8007d6e:	f104 0919 	add.w	r9, r4, #25
 8007d72:	e7f4      	b.n	8007d5e <_printf_float+0x43e>

08007d74 <_printf_common>:
 8007d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d78:	4616      	mov	r6, r2
 8007d7a:	4698      	mov	r8, r3
 8007d7c:	688a      	ldr	r2, [r1, #8]
 8007d7e:	690b      	ldr	r3, [r1, #16]
 8007d80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d84:	4293      	cmp	r3, r2
 8007d86:	bfb8      	it	lt
 8007d88:	4613      	movlt	r3, r2
 8007d8a:	6033      	str	r3, [r6, #0]
 8007d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d90:	4607      	mov	r7, r0
 8007d92:	460c      	mov	r4, r1
 8007d94:	b10a      	cbz	r2, 8007d9a <_printf_common+0x26>
 8007d96:	3301      	adds	r3, #1
 8007d98:	6033      	str	r3, [r6, #0]
 8007d9a:	6823      	ldr	r3, [r4, #0]
 8007d9c:	0699      	lsls	r1, r3, #26
 8007d9e:	bf42      	ittt	mi
 8007da0:	6833      	ldrmi	r3, [r6, #0]
 8007da2:	3302      	addmi	r3, #2
 8007da4:	6033      	strmi	r3, [r6, #0]
 8007da6:	6825      	ldr	r5, [r4, #0]
 8007da8:	f015 0506 	ands.w	r5, r5, #6
 8007dac:	d106      	bne.n	8007dbc <_printf_common+0x48>
 8007dae:	f104 0a19 	add.w	sl, r4, #25
 8007db2:	68e3      	ldr	r3, [r4, #12]
 8007db4:	6832      	ldr	r2, [r6, #0]
 8007db6:	1a9b      	subs	r3, r3, r2
 8007db8:	42ab      	cmp	r3, r5
 8007dba:	dc26      	bgt.n	8007e0a <_printf_common+0x96>
 8007dbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dc0:	6822      	ldr	r2, [r4, #0]
 8007dc2:	3b00      	subs	r3, #0
 8007dc4:	bf18      	it	ne
 8007dc6:	2301      	movne	r3, #1
 8007dc8:	0692      	lsls	r2, r2, #26
 8007dca:	d42b      	bmi.n	8007e24 <_printf_common+0xb0>
 8007dcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dd0:	4641      	mov	r1, r8
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	47c8      	blx	r9
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	d01e      	beq.n	8007e18 <_printf_common+0xa4>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	6922      	ldr	r2, [r4, #16]
 8007dde:	f003 0306 	and.w	r3, r3, #6
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	bf02      	ittt	eq
 8007de6:	68e5      	ldreq	r5, [r4, #12]
 8007de8:	6833      	ldreq	r3, [r6, #0]
 8007dea:	1aed      	subeq	r5, r5, r3
 8007dec:	68a3      	ldr	r3, [r4, #8]
 8007dee:	bf0c      	ite	eq
 8007df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007df4:	2500      	movne	r5, #0
 8007df6:	4293      	cmp	r3, r2
 8007df8:	bfc4      	itt	gt
 8007dfa:	1a9b      	subgt	r3, r3, r2
 8007dfc:	18ed      	addgt	r5, r5, r3
 8007dfe:	2600      	movs	r6, #0
 8007e00:	341a      	adds	r4, #26
 8007e02:	42b5      	cmp	r5, r6
 8007e04:	d11a      	bne.n	8007e3c <_printf_common+0xc8>
 8007e06:	2000      	movs	r0, #0
 8007e08:	e008      	b.n	8007e1c <_printf_common+0xa8>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	4652      	mov	r2, sl
 8007e0e:	4641      	mov	r1, r8
 8007e10:	4638      	mov	r0, r7
 8007e12:	47c8      	blx	r9
 8007e14:	3001      	adds	r0, #1
 8007e16:	d103      	bne.n	8007e20 <_printf_common+0xac>
 8007e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e20:	3501      	adds	r5, #1
 8007e22:	e7c6      	b.n	8007db2 <_printf_common+0x3e>
 8007e24:	18e1      	adds	r1, r4, r3
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	2030      	movs	r0, #48	@ 0x30
 8007e2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e2e:	4422      	add	r2, r4
 8007e30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e38:	3302      	adds	r3, #2
 8007e3a:	e7c7      	b.n	8007dcc <_printf_common+0x58>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	4622      	mov	r2, r4
 8007e40:	4641      	mov	r1, r8
 8007e42:	4638      	mov	r0, r7
 8007e44:	47c8      	blx	r9
 8007e46:	3001      	adds	r0, #1
 8007e48:	d0e6      	beq.n	8007e18 <_printf_common+0xa4>
 8007e4a:	3601      	adds	r6, #1
 8007e4c:	e7d9      	b.n	8007e02 <_printf_common+0x8e>
	...

08007e50 <_printf_i>:
 8007e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e54:	7e0f      	ldrb	r7, [r1, #24]
 8007e56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e58:	2f78      	cmp	r7, #120	@ 0x78
 8007e5a:	4691      	mov	r9, r2
 8007e5c:	4680      	mov	r8, r0
 8007e5e:	460c      	mov	r4, r1
 8007e60:	469a      	mov	sl, r3
 8007e62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e66:	d807      	bhi.n	8007e78 <_printf_i+0x28>
 8007e68:	2f62      	cmp	r7, #98	@ 0x62
 8007e6a:	d80a      	bhi.n	8007e82 <_printf_i+0x32>
 8007e6c:	2f00      	cmp	r7, #0
 8007e6e:	f000 80d1 	beq.w	8008014 <_printf_i+0x1c4>
 8007e72:	2f58      	cmp	r7, #88	@ 0x58
 8007e74:	f000 80b8 	beq.w	8007fe8 <_printf_i+0x198>
 8007e78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e80:	e03a      	b.n	8007ef8 <_printf_i+0xa8>
 8007e82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e86:	2b15      	cmp	r3, #21
 8007e88:	d8f6      	bhi.n	8007e78 <_printf_i+0x28>
 8007e8a:	a101      	add	r1, pc, #4	@ (adr r1, 8007e90 <_printf_i+0x40>)
 8007e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e90:	08007ee9 	.word	0x08007ee9
 8007e94:	08007efd 	.word	0x08007efd
 8007e98:	08007e79 	.word	0x08007e79
 8007e9c:	08007e79 	.word	0x08007e79
 8007ea0:	08007e79 	.word	0x08007e79
 8007ea4:	08007e79 	.word	0x08007e79
 8007ea8:	08007efd 	.word	0x08007efd
 8007eac:	08007e79 	.word	0x08007e79
 8007eb0:	08007e79 	.word	0x08007e79
 8007eb4:	08007e79 	.word	0x08007e79
 8007eb8:	08007e79 	.word	0x08007e79
 8007ebc:	08007ffb 	.word	0x08007ffb
 8007ec0:	08007f27 	.word	0x08007f27
 8007ec4:	08007fb5 	.word	0x08007fb5
 8007ec8:	08007e79 	.word	0x08007e79
 8007ecc:	08007e79 	.word	0x08007e79
 8007ed0:	0800801d 	.word	0x0800801d
 8007ed4:	08007e79 	.word	0x08007e79
 8007ed8:	08007f27 	.word	0x08007f27
 8007edc:	08007e79 	.word	0x08007e79
 8007ee0:	08007e79 	.word	0x08007e79
 8007ee4:	08007fbd 	.word	0x08007fbd
 8007ee8:	6833      	ldr	r3, [r6, #0]
 8007eea:	1d1a      	adds	r2, r3, #4
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6032      	str	r2, [r6, #0]
 8007ef0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ef4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e09c      	b.n	8008036 <_printf_i+0x1e6>
 8007efc:	6833      	ldr	r3, [r6, #0]
 8007efe:	6820      	ldr	r0, [r4, #0]
 8007f00:	1d19      	adds	r1, r3, #4
 8007f02:	6031      	str	r1, [r6, #0]
 8007f04:	0606      	lsls	r6, r0, #24
 8007f06:	d501      	bpl.n	8007f0c <_printf_i+0xbc>
 8007f08:	681d      	ldr	r5, [r3, #0]
 8007f0a:	e003      	b.n	8007f14 <_printf_i+0xc4>
 8007f0c:	0645      	lsls	r5, r0, #25
 8007f0e:	d5fb      	bpl.n	8007f08 <_printf_i+0xb8>
 8007f10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f14:	2d00      	cmp	r5, #0
 8007f16:	da03      	bge.n	8007f20 <_printf_i+0xd0>
 8007f18:	232d      	movs	r3, #45	@ 0x2d
 8007f1a:	426d      	negs	r5, r5
 8007f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f20:	4858      	ldr	r0, [pc, #352]	@ (8008084 <_printf_i+0x234>)
 8007f22:	230a      	movs	r3, #10
 8007f24:	e011      	b.n	8007f4a <_printf_i+0xfa>
 8007f26:	6821      	ldr	r1, [r4, #0]
 8007f28:	6833      	ldr	r3, [r6, #0]
 8007f2a:	0608      	lsls	r0, r1, #24
 8007f2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f30:	d402      	bmi.n	8007f38 <_printf_i+0xe8>
 8007f32:	0649      	lsls	r1, r1, #25
 8007f34:	bf48      	it	mi
 8007f36:	b2ad      	uxthmi	r5, r5
 8007f38:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f3a:	4852      	ldr	r0, [pc, #328]	@ (8008084 <_printf_i+0x234>)
 8007f3c:	6033      	str	r3, [r6, #0]
 8007f3e:	bf14      	ite	ne
 8007f40:	230a      	movne	r3, #10
 8007f42:	2308      	moveq	r3, #8
 8007f44:	2100      	movs	r1, #0
 8007f46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f4a:	6866      	ldr	r6, [r4, #4]
 8007f4c:	60a6      	str	r6, [r4, #8]
 8007f4e:	2e00      	cmp	r6, #0
 8007f50:	db05      	blt.n	8007f5e <_printf_i+0x10e>
 8007f52:	6821      	ldr	r1, [r4, #0]
 8007f54:	432e      	orrs	r6, r5
 8007f56:	f021 0104 	bic.w	r1, r1, #4
 8007f5a:	6021      	str	r1, [r4, #0]
 8007f5c:	d04b      	beq.n	8007ff6 <_printf_i+0x1a6>
 8007f5e:	4616      	mov	r6, r2
 8007f60:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f64:	fb03 5711 	mls	r7, r3, r1, r5
 8007f68:	5dc7      	ldrb	r7, [r0, r7]
 8007f6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f6e:	462f      	mov	r7, r5
 8007f70:	42bb      	cmp	r3, r7
 8007f72:	460d      	mov	r5, r1
 8007f74:	d9f4      	bls.n	8007f60 <_printf_i+0x110>
 8007f76:	2b08      	cmp	r3, #8
 8007f78:	d10b      	bne.n	8007f92 <_printf_i+0x142>
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	07df      	lsls	r7, r3, #31
 8007f7e:	d508      	bpl.n	8007f92 <_printf_i+0x142>
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	6861      	ldr	r1, [r4, #4]
 8007f84:	4299      	cmp	r1, r3
 8007f86:	bfde      	ittt	le
 8007f88:	2330      	movle	r3, #48	@ 0x30
 8007f8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f8e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007f92:	1b92      	subs	r2, r2, r6
 8007f94:	6122      	str	r2, [r4, #16]
 8007f96:	f8cd a000 	str.w	sl, [sp]
 8007f9a:	464b      	mov	r3, r9
 8007f9c:	aa03      	add	r2, sp, #12
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	f7ff fee7 	bl	8007d74 <_printf_common>
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	d14a      	bne.n	8008040 <_printf_i+0x1f0>
 8007faa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fae:	b004      	add	sp, #16
 8007fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	f043 0320 	orr.w	r3, r3, #32
 8007fba:	6023      	str	r3, [r4, #0]
 8007fbc:	4832      	ldr	r0, [pc, #200]	@ (8008088 <_printf_i+0x238>)
 8007fbe:	2778      	movs	r7, #120	@ 0x78
 8007fc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fc4:	6823      	ldr	r3, [r4, #0]
 8007fc6:	6831      	ldr	r1, [r6, #0]
 8007fc8:	061f      	lsls	r7, r3, #24
 8007fca:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fce:	d402      	bmi.n	8007fd6 <_printf_i+0x186>
 8007fd0:	065f      	lsls	r7, r3, #25
 8007fd2:	bf48      	it	mi
 8007fd4:	b2ad      	uxthmi	r5, r5
 8007fd6:	6031      	str	r1, [r6, #0]
 8007fd8:	07d9      	lsls	r1, r3, #31
 8007fda:	bf44      	itt	mi
 8007fdc:	f043 0320 	orrmi.w	r3, r3, #32
 8007fe0:	6023      	strmi	r3, [r4, #0]
 8007fe2:	b11d      	cbz	r5, 8007fec <_printf_i+0x19c>
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	e7ad      	b.n	8007f44 <_printf_i+0xf4>
 8007fe8:	4826      	ldr	r0, [pc, #152]	@ (8008084 <_printf_i+0x234>)
 8007fea:	e7e9      	b.n	8007fc0 <_printf_i+0x170>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	f023 0320 	bic.w	r3, r3, #32
 8007ff2:	6023      	str	r3, [r4, #0]
 8007ff4:	e7f6      	b.n	8007fe4 <_printf_i+0x194>
 8007ff6:	4616      	mov	r6, r2
 8007ff8:	e7bd      	b.n	8007f76 <_printf_i+0x126>
 8007ffa:	6833      	ldr	r3, [r6, #0]
 8007ffc:	6825      	ldr	r5, [r4, #0]
 8007ffe:	6961      	ldr	r1, [r4, #20]
 8008000:	1d18      	adds	r0, r3, #4
 8008002:	6030      	str	r0, [r6, #0]
 8008004:	062e      	lsls	r6, r5, #24
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	d501      	bpl.n	800800e <_printf_i+0x1be>
 800800a:	6019      	str	r1, [r3, #0]
 800800c:	e002      	b.n	8008014 <_printf_i+0x1c4>
 800800e:	0668      	lsls	r0, r5, #25
 8008010:	d5fb      	bpl.n	800800a <_printf_i+0x1ba>
 8008012:	8019      	strh	r1, [r3, #0]
 8008014:	2300      	movs	r3, #0
 8008016:	6123      	str	r3, [r4, #16]
 8008018:	4616      	mov	r6, r2
 800801a:	e7bc      	b.n	8007f96 <_printf_i+0x146>
 800801c:	6833      	ldr	r3, [r6, #0]
 800801e:	1d1a      	adds	r2, r3, #4
 8008020:	6032      	str	r2, [r6, #0]
 8008022:	681e      	ldr	r6, [r3, #0]
 8008024:	6862      	ldr	r2, [r4, #4]
 8008026:	2100      	movs	r1, #0
 8008028:	4630      	mov	r0, r6
 800802a:	f7f8 f8d1 	bl	80001d0 <memchr>
 800802e:	b108      	cbz	r0, 8008034 <_printf_i+0x1e4>
 8008030:	1b80      	subs	r0, r0, r6
 8008032:	6060      	str	r0, [r4, #4]
 8008034:	6863      	ldr	r3, [r4, #4]
 8008036:	6123      	str	r3, [r4, #16]
 8008038:	2300      	movs	r3, #0
 800803a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800803e:	e7aa      	b.n	8007f96 <_printf_i+0x146>
 8008040:	6923      	ldr	r3, [r4, #16]
 8008042:	4632      	mov	r2, r6
 8008044:	4649      	mov	r1, r9
 8008046:	4640      	mov	r0, r8
 8008048:	47d0      	blx	sl
 800804a:	3001      	adds	r0, #1
 800804c:	d0ad      	beq.n	8007faa <_printf_i+0x15a>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	079b      	lsls	r3, r3, #30
 8008052:	d413      	bmi.n	800807c <_printf_i+0x22c>
 8008054:	68e0      	ldr	r0, [r4, #12]
 8008056:	9b03      	ldr	r3, [sp, #12]
 8008058:	4298      	cmp	r0, r3
 800805a:	bfb8      	it	lt
 800805c:	4618      	movlt	r0, r3
 800805e:	e7a6      	b.n	8007fae <_printf_i+0x15e>
 8008060:	2301      	movs	r3, #1
 8008062:	4632      	mov	r2, r6
 8008064:	4649      	mov	r1, r9
 8008066:	4640      	mov	r0, r8
 8008068:	47d0      	blx	sl
 800806a:	3001      	adds	r0, #1
 800806c:	d09d      	beq.n	8007faa <_printf_i+0x15a>
 800806e:	3501      	adds	r5, #1
 8008070:	68e3      	ldr	r3, [r4, #12]
 8008072:	9903      	ldr	r1, [sp, #12]
 8008074:	1a5b      	subs	r3, r3, r1
 8008076:	42ab      	cmp	r3, r5
 8008078:	dcf2      	bgt.n	8008060 <_printf_i+0x210>
 800807a:	e7eb      	b.n	8008054 <_printf_i+0x204>
 800807c:	2500      	movs	r5, #0
 800807e:	f104 0619 	add.w	r6, r4, #25
 8008082:	e7f5      	b.n	8008070 <_printf_i+0x220>
 8008084:	0800a3f2 	.word	0x0800a3f2
 8008088:	0800a403 	.word	0x0800a403

0800808c <rand>:
 800808c:	4b16      	ldr	r3, [pc, #88]	@ (80080e8 <rand+0x5c>)
 800808e:	b510      	push	{r4, lr}
 8008090:	681c      	ldr	r4, [r3, #0]
 8008092:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008094:	b9b3      	cbnz	r3, 80080c4 <rand+0x38>
 8008096:	2018      	movs	r0, #24
 8008098:	f001 f968 	bl	800936c <malloc>
 800809c:	4602      	mov	r2, r0
 800809e:	6320      	str	r0, [r4, #48]	@ 0x30
 80080a0:	b920      	cbnz	r0, 80080ac <rand+0x20>
 80080a2:	4b12      	ldr	r3, [pc, #72]	@ (80080ec <rand+0x60>)
 80080a4:	4812      	ldr	r0, [pc, #72]	@ (80080f0 <rand+0x64>)
 80080a6:	2152      	movs	r1, #82	@ 0x52
 80080a8:	f000 f9a8 	bl	80083fc <__assert_func>
 80080ac:	4911      	ldr	r1, [pc, #68]	@ (80080f4 <rand+0x68>)
 80080ae:	4b12      	ldr	r3, [pc, #72]	@ (80080f8 <rand+0x6c>)
 80080b0:	e9c0 1300 	strd	r1, r3, [r0]
 80080b4:	4b11      	ldr	r3, [pc, #68]	@ (80080fc <rand+0x70>)
 80080b6:	6083      	str	r3, [r0, #8]
 80080b8:	230b      	movs	r3, #11
 80080ba:	8183      	strh	r3, [r0, #12]
 80080bc:	2100      	movs	r1, #0
 80080be:	2001      	movs	r0, #1
 80080c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80080c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80080c6:	480e      	ldr	r0, [pc, #56]	@ (8008100 <rand+0x74>)
 80080c8:	690b      	ldr	r3, [r1, #16]
 80080ca:	694c      	ldr	r4, [r1, #20]
 80080cc:	4a0d      	ldr	r2, [pc, #52]	@ (8008104 <rand+0x78>)
 80080ce:	4358      	muls	r0, r3
 80080d0:	fb02 0004 	mla	r0, r2, r4, r0
 80080d4:	fba3 3202 	umull	r3, r2, r3, r2
 80080d8:	3301      	adds	r3, #1
 80080da:	eb40 0002 	adc.w	r0, r0, r2
 80080de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80080e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80080e6:	bd10      	pop	{r4, pc}
 80080e8:	200000dc 	.word	0x200000dc
 80080ec:	0800a414 	.word	0x0800a414
 80080f0:	0800a42b 	.word	0x0800a42b
 80080f4:	abcd330e 	.word	0xabcd330e
 80080f8:	e66d1234 	.word	0xe66d1234
 80080fc:	0005deec 	.word	0x0005deec
 8008100:	5851f42d 	.word	0x5851f42d
 8008104:	4c957f2d 	.word	0x4c957f2d

08008108 <std>:
 8008108:	2300      	movs	r3, #0
 800810a:	b510      	push	{r4, lr}
 800810c:	4604      	mov	r4, r0
 800810e:	e9c0 3300 	strd	r3, r3, [r0]
 8008112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008116:	6083      	str	r3, [r0, #8]
 8008118:	8181      	strh	r1, [r0, #12]
 800811a:	6643      	str	r3, [r0, #100]	@ 0x64
 800811c:	81c2      	strh	r2, [r0, #14]
 800811e:	6183      	str	r3, [r0, #24]
 8008120:	4619      	mov	r1, r3
 8008122:	2208      	movs	r2, #8
 8008124:	305c      	adds	r0, #92	@ 0x5c
 8008126:	f000 f921 	bl	800836c <memset>
 800812a:	4b0d      	ldr	r3, [pc, #52]	@ (8008160 <std+0x58>)
 800812c:	6263      	str	r3, [r4, #36]	@ 0x24
 800812e:	4b0d      	ldr	r3, [pc, #52]	@ (8008164 <std+0x5c>)
 8008130:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008132:	4b0d      	ldr	r3, [pc, #52]	@ (8008168 <std+0x60>)
 8008134:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008136:	4b0d      	ldr	r3, [pc, #52]	@ (800816c <std+0x64>)
 8008138:	6323      	str	r3, [r4, #48]	@ 0x30
 800813a:	4b0d      	ldr	r3, [pc, #52]	@ (8008170 <std+0x68>)
 800813c:	6224      	str	r4, [r4, #32]
 800813e:	429c      	cmp	r4, r3
 8008140:	d006      	beq.n	8008150 <std+0x48>
 8008142:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008146:	4294      	cmp	r4, r2
 8008148:	d002      	beq.n	8008150 <std+0x48>
 800814a:	33d0      	adds	r3, #208	@ 0xd0
 800814c:	429c      	cmp	r4, r3
 800814e:	d105      	bne.n	800815c <std+0x54>
 8008150:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008158:	f000 b93a 	b.w	80083d0 <__retarget_lock_init_recursive>
 800815c:	bd10      	pop	{r4, pc}
 800815e:	bf00      	nop
 8008160:	08009d25 	.word	0x08009d25
 8008164:	08009d47 	.word	0x08009d47
 8008168:	08009d7f 	.word	0x08009d7f
 800816c:	08009da3 	.word	0x08009da3
 8008170:	20000a78 	.word	0x20000a78

08008174 <stdio_exit_handler>:
 8008174:	4a02      	ldr	r2, [pc, #8]	@ (8008180 <stdio_exit_handler+0xc>)
 8008176:	4903      	ldr	r1, [pc, #12]	@ (8008184 <stdio_exit_handler+0x10>)
 8008178:	4803      	ldr	r0, [pc, #12]	@ (8008188 <stdio_exit_handler+0x14>)
 800817a:	f000 b869 	b.w	8008250 <_fwalk_sglue>
 800817e:	bf00      	nop
 8008180:	200000d0 	.word	0x200000d0
 8008184:	080095c9 	.word	0x080095c9
 8008188:	200000e0 	.word	0x200000e0

0800818c <cleanup_stdio>:
 800818c:	6841      	ldr	r1, [r0, #4]
 800818e:	4b0c      	ldr	r3, [pc, #48]	@ (80081c0 <cleanup_stdio+0x34>)
 8008190:	4299      	cmp	r1, r3
 8008192:	b510      	push	{r4, lr}
 8008194:	4604      	mov	r4, r0
 8008196:	d001      	beq.n	800819c <cleanup_stdio+0x10>
 8008198:	f001 fa16 	bl	80095c8 <_fflush_r>
 800819c:	68a1      	ldr	r1, [r4, #8]
 800819e:	4b09      	ldr	r3, [pc, #36]	@ (80081c4 <cleanup_stdio+0x38>)
 80081a0:	4299      	cmp	r1, r3
 80081a2:	d002      	beq.n	80081aa <cleanup_stdio+0x1e>
 80081a4:	4620      	mov	r0, r4
 80081a6:	f001 fa0f 	bl	80095c8 <_fflush_r>
 80081aa:	68e1      	ldr	r1, [r4, #12]
 80081ac:	4b06      	ldr	r3, [pc, #24]	@ (80081c8 <cleanup_stdio+0x3c>)
 80081ae:	4299      	cmp	r1, r3
 80081b0:	d004      	beq.n	80081bc <cleanup_stdio+0x30>
 80081b2:	4620      	mov	r0, r4
 80081b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b8:	f001 ba06 	b.w	80095c8 <_fflush_r>
 80081bc:	bd10      	pop	{r4, pc}
 80081be:	bf00      	nop
 80081c0:	20000a78 	.word	0x20000a78
 80081c4:	20000ae0 	.word	0x20000ae0
 80081c8:	20000b48 	.word	0x20000b48

080081cc <global_stdio_init.part.0>:
 80081cc:	b510      	push	{r4, lr}
 80081ce:	4b0b      	ldr	r3, [pc, #44]	@ (80081fc <global_stdio_init.part.0+0x30>)
 80081d0:	4c0b      	ldr	r4, [pc, #44]	@ (8008200 <global_stdio_init.part.0+0x34>)
 80081d2:	4a0c      	ldr	r2, [pc, #48]	@ (8008204 <global_stdio_init.part.0+0x38>)
 80081d4:	601a      	str	r2, [r3, #0]
 80081d6:	4620      	mov	r0, r4
 80081d8:	2200      	movs	r2, #0
 80081da:	2104      	movs	r1, #4
 80081dc:	f7ff ff94 	bl	8008108 <std>
 80081e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80081e4:	2201      	movs	r2, #1
 80081e6:	2109      	movs	r1, #9
 80081e8:	f7ff ff8e 	bl	8008108 <std>
 80081ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081f0:	2202      	movs	r2, #2
 80081f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081f6:	2112      	movs	r1, #18
 80081f8:	f7ff bf86 	b.w	8008108 <std>
 80081fc:	20000bb0 	.word	0x20000bb0
 8008200:	20000a78 	.word	0x20000a78
 8008204:	08008175 	.word	0x08008175

08008208 <__sfp_lock_acquire>:
 8008208:	4801      	ldr	r0, [pc, #4]	@ (8008210 <__sfp_lock_acquire+0x8>)
 800820a:	f000 b8e2 	b.w	80083d2 <__retarget_lock_acquire_recursive>
 800820e:	bf00      	nop
 8008210:	20000bb5 	.word	0x20000bb5

08008214 <__sfp_lock_release>:
 8008214:	4801      	ldr	r0, [pc, #4]	@ (800821c <__sfp_lock_release+0x8>)
 8008216:	f000 b8dd 	b.w	80083d4 <__retarget_lock_release_recursive>
 800821a:	bf00      	nop
 800821c:	20000bb5 	.word	0x20000bb5

08008220 <__sinit>:
 8008220:	b510      	push	{r4, lr}
 8008222:	4604      	mov	r4, r0
 8008224:	f7ff fff0 	bl	8008208 <__sfp_lock_acquire>
 8008228:	6a23      	ldr	r3, [r4, #32]
 800822a:	b11b      	cbz	r3, 8008234 <__sinit+0x14>
 800822c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008230:	f7ff bff0 	b.w	8008214 <__sfp_lock_release>
 8008234:	4b04      	ldr	r3, [pc, #16]	@ (8008248 <__sinit+0x28>)
 8008236:	6223      	str	r3, [r4, #32]
 8008238:	4b04      	ldr	r3, [pc, #16]	@ (800824c <__sinit+0x2c>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1f5      	bne.n	800822c <__sinit+0xc>
 8008240:	f7ff ffc4 	bl	80081cc <global_stdio_init.part.0>
 8008244:	e7f2      	b.n	800822c <__sinit+0xc>
 8008246:	bf00      	nop
 8008248:	0800818d 	.word	0x0800818d
 800824c:	20000bb0 	.word	0x20000bb0

08008250 <_fwalk_sglue>:
 8008250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008254:	4607      	mov	r7, r0
 8008256:	4688      	mov	r8, r1
 8008258:	4614      	mov	r4, r2
 800825a:	2600      	movs	r6, #0
 800825c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008260:	f1b9 0901 	subs.w	r9, r9, #1
 8008264:	d505      	bpl.n	8008272 <_fwalk_sglue+0x22>
 8008266:	6824      	ldr	r4, [r4, #0]
 8008268:	2c00      	cmp	r4, #0
 800826a:	d1f7      	bne.n	800825c <_fwalk_sglue+0xc>
 800826c:	4630      	mov	r0, r6
 800826e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008272:	89ab      	ldrh	r3, [r5, #12]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d907      	bls.n	8008288 <_fwalk_sglue+0x38>
 8008278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800827c:	3301      	adds	r3, #1
 800827e:	d003      	beq.n	8008288 <_fwalk_sglue+0x38>
 8008280:	4629      	mov	r1, r5
 8008282:	4638      	mov	r0, r7
 8008284:	47c0      	blx	r8
 8008286:	4306      	orrs	r6, r0
 8008288:	3568      	adds	r5, #104	@ 0x68
 800828a:	e7e9      	b.n	8008260 <_fwalk_sglue+0x10>

0800828c <iprintf>:
 800828c:	b40f      	push	{r0, r1, r2, r3}
 800828e:	b507      	push	{r0, r1, r2, lr}
 8008290:	4906      	ldr	r1, [pc, #24]	@ (80082ac <iprintf+0x20>)
 8008292:	ab04      	add	r3, sp, #16
 8008294:	6808      	ldr	r0, [r1, #0]
 8008296:	f853 2b04 	ldr.w	r2, [r3], #4
 800829a:	6881      	ldr	r1, [r0, #8]
 800829c:	9301      	str	r3, [sp, #4]
 800829e:	f000 ff4d 	bl	800913c <_vfiprintf_r>
 80082a2:	b003      	add	sp, #12
 80082a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80082a8:	b004      	add	sp, #16
 80082aa:	4770      	bx	lr
 80082ac:	200000dc 	.word	0x200000dc

080082b0 <_puts_r>:
 80082b0:	6a03      	ldr	r3, [r0, #32]
 80082b2:	b570      	push	{r4, r5, r6, lr}
 80082b4:	6884      	ldr	r4, [r0, #8]
 80082b6:	4605      	mov	r5, r0
 80082b8:	460e      	mov	r6, r1
 80082ba:	b90b      	cbnz	r3, 80082c0 <_puts_r+0x10>
 80082bc:	f7ff ffb0 	bl	8008220 <__sinit>
 80082c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082c2:	07db      	lsls	r3, r3, #31
 80082c4:	d405      	bmi.n	80082d2 <_puts_r+0x22>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	0598      	lsls	r0, r3, #22
 80082ca:	d402      	bmi.n	80082d2 <_puts_r+0x22>
 80082cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ce:	f000 f880 	bl	80083d2 <__retarget_lock_acquire_recursive>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	0719      	lsls	r1, r3, #28
 80082d6:	d502      	bpl.n	80082de <_puts_r+0x2e>
 80082d8:	6923      	ldr	r3, [r4, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d135      	bne.n	800834a <_puts_r+0x9a>
 80082de:	4621      	mov	r1, r4
 80082e0:	4628      	mov	r0, r5
 80082e2:	f001 fdb3 	bl	8009e4c <__swsetup_r>
 80082e6:	b380      	cbz	r0, 800834a <_puts_r+0x9a>
 80082e8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80082ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082ee:	07da      	lsls	r2, r3, #31
 80082f0:	d405      	bmi.n	80082fe <_puts_r+0x4e>
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	059b      	lsls	r3, r3, #22
 80082f6:	d402      	bmi.n	80082fe <_puts_r+0x4e>
 80082f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082fa:	f000 f86b 	bl	80083d4 <__retarget_lock_release_recursive>
 80082fe:	4628      	mov	r0, r5
 8008300:	bd70      	pop	{r4, r5, r6, pc}
 8008302:	2b00      	cmp	r3, #0
 8008304:	da04      	bge.n	8008310 <_puts_r+0x60>
 8008306:	69a2      	ldr	r2, [r4, #24]
 8008308:	429a      	cmp	r2, r3
 800830a:	dc17      	bgt.n	800833c <_puts_r+0x8c>
 800830c:	290a      	cmp	r1, #10
 800830e:	d015      	beq.n	800833c <_puts_r+0x8c>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	6022      	str	r2, [r4, #0]
 8008316:	7019      	strb	r1, [r3, #0]
 8008318:	68a3      	ldr	r3, [r4, #8]
 800831a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800831e:	3b01      	subs	r3, #1
 8008320:	60a3      	str	r3, [r4, #8]
 8008322:	2900      	cmp	r1, #0
 8008324:	d1ed      	bne.n	8008302 <_puts_r+0x52>
 8008326:	2b00      	cmp	r3, #0
 8008328:	da11      	bge.n	800834e <_puts_r+0x9e>
 800832a:	4622      	mov	r2, r4
 800832c:	210a      	movs	r1, #10
 800832e:	4628      	mov	r0, r5
 8008330:	f001 fd4e 	bl	8009dd0 <__swbuf_r>
 8008334:	3001      	adds	r0, #1
 8008336:	d0d7      	beq.n	80082e8 <_puts_r+0x38>
 8008338:	250a      	movs	r5, #10
 800833a:	e7d7      	b.n	80082ec <_puts_r+0x3c>
 800833c:	4622      	mov	r2, r4
 800833e:	4628      	mov	r0, r5
 8008340:	f001 fd46 	bl	8009dd0 <__swbuf_r>
 8008344:	3001      	adds	r0, #1
 8008346:	d1e7      	bne.n	8008318 <_puts_r+0x68>
 8008348:	e7ce      	b.n	80082e8 <_puts_r+0x38>
 800834a:	3e01      	subs	r6, #1
 800834c:	e7e4      	b.n	8008318 <_puts_r+0x68>
 800834e:	6823      	ldr	r3, [r4, #0]
 8008350:	1c5a      	adds	r2, r3, #1
 8008352:	6022      	str	r2, [r4, #0]
 8008354:	220a      	movs	r2, #10
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	e7ee      	b.n	8008338 <_puts_r+0x88>
	...

0800835c <puts>:
 800835c:	4b02      	ldr	r3, [pc, #8]	@ (8008368 <puts+0xc>)
 800835e:	4601      	mov	r1, r0
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	f7ff bfa5 	b.w	80082b0 <_puts_r>
 8008366:	bf00      	nop
 8008368:	200000dc 	.word	0x200000dc

0800836c <memset>:
 800836c:	4402      	add	r2, r0
 800836e:	4603      	mov	r3, r0
 8008370:	4293      	cmp	r3, r2
 8008372:	d100      	bne.n	8008376 <memset+0xa>
 8008374:	4770      	bx	lr
 8008376:	f803 1b01 	strb.w	r1, [r3], #1
 800837a:	e7f9      	b.n	8008370 <memset+0x4>

0800837c <__errno>:
 800837c:	4b01      	ldr	r3, [pc, #4]	@ (8008384 <__errno+0x8>)
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	200000dc 	.word	0x200000dc

08008388 <__libc_init_array>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	4d0d      	ldr	r5, [pc, #52]	@ (80083c0 <__libc_init_array+0x38>)
 800838c:	4c0d      	ldr	r4, [pc, #52]	@ (80083c4 <__libc_init_array+0x3c>)
 800838e:	1b64      	subs	r4, r4, r5
 8008390:	10a4      	asrs	r4, r4, #2
 8008392:	2600      	movs	r6, #0
 8008394:	42a6      	cmp	r6, r4
 8008396:	d109      	bne.n	80083ac <__libc_init_array+0x24>
 8008398:	4d0b      	ldr	r5, [pc, #44]	@ (80083c8 <__libc_init_array+0x40>)
 800839a:	4c0c      	ldr	r4, [pc, #48]	@ (80083cc <__libc_init_array+0x44>)
 800839c:	f001 ff50 	bl	800a240 <_init>
 80083a0:	1b64      	subs	r4, r4, r5
 80083a2:	10a4      	asrs	r4, r4, #2
 80083a4:	2600      	movs	r6, #0
 80083a6:	42a6      	cmp	r6, r4
 80083a8:	d105      	bne.n	80083b6 <__libc_init_array+0x2e>
 80083aa:	bd70      	pop	{r4, r5, r6, pc}
 80083ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b0:	4798      	blx	r3
 80083b2:	3601      	adds	r6, #1
 80083b4:	e7ee      	b.n	8008394 <__libc_init_array+0xc>
 80083b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083ba:	4798      	blx	r3
 80083bc:	3601      	adds	r6, #1
 80083be:	e7f2      	b.n	80083a6 <__libc_init_array+0x1e>
 80083c0:	0800a7b4 	.word	0x0800a7b4
 80083c4:	0800a7b4 	.word	0x0800a7b4
 80083c8:	0800a7b4 	.word	0x0800a7b4
 80083cc:	0800a7b8 	.word	0x0800a7b8

080083d0 <__retarget_lock_init_recursive>:
 80083d0:	4770      	bx	lr

080083d2 <__retarget_lock_acquire_recursive>:
 80083d2:	4770      	bx	lr

080083d4 <__retarget_lock_release_recursive>:
 80083d4:	4770      	bx	lr
	...

080083d8 <_localeconv_r>:
 80083d8:	4800      	ldr	r0, [pc, #0]	@ (80083dc <_localeconv_r+0x4>)
 80083da:	4770      	bx	lr
 80083dc:	2000021c 	.word	0x2000021c

080083e0 <memcpy>:
 80083e0:	440a      	add	r2, r1
 80083e2:	4291      	cmp	r1, r2
 80083e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80083e8:	d100      	bne.n	80083ec <memcpy+0xc>
 80083ea:	4770      	bx	lr
 80083ec:	b510      	push	{r4, lr}
 80083ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f6:	4291      	cmp	r1, r2
 80083f8:	d1f9      	bne.n	80083ee <memcpy+0xe>
 80083fa:	bd10      	pop	{r4, pc}

080083fc <__assert_func>:
 80083fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083fe:	4614      	mov	r4, r2
 8008400:	461a      	mov	r2, r3
 8008402:	4b09      	ldr	r3, [pc, #36]	@ (8008428 <__assert_func+0x2c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4605      	mov	r5, r0
 8008408:	68d8      	ldr	r0, [r3, #12]
 800840a:	b14c      	cbz	r4, 8008420 <__assert_func+0x24>
 800840c:	4b07      	ldr	r3, [pc, #28]	@ (800842c <__assert_func+0x30>)
 800840e:	9100      	str	r1, [sp, #0]
 8008410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008414:	4906      	ldr	r1, [pc, #24]	@ (8008430 <__assert_func+0x34>)
 8008416:	462b      	mov	r3, r5
 8008418:	f001 fcc8 	bl	8009dac <fiprintf>
 800841c:	f001 fe46 	bl	800a0ac <abort>
 8008420:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <__assert_func+0x38>)
 8008422:	461c      	mov	r4, r3
 8008424:	e7f3      	b.n	800840e <__assert_func+0x12>
 8008426:	bf00      	nop
 8008428:	200000dc 	.word	0x200000dc
 800842c:	0800a483 	.word	0x0800a483
 8008430:	0800a490 	.word	0x0800a490
 8008434:	0800a4be 	.word	0x0800a4be

08008438 <quorem>:
 8008438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	6903      	ldr	r3, [r0, #16]
 800843e:	690c      	ldr	r4, [r1, #16]
 8008440:	42a3      	cmp	r3, r4
 8008442:	4607      	mov	r7, r0
 8008444:	db7e      	blt.n	8008544 <quorem+0x10c>
 8008446:	3c01      	subs	r4, #1
 8008448:	f101 0814 	add.w	r8, r1, #20
 800844c:	00a3      	lsls	r3, r4, #2
 800844e:	f100 0514 	add.w	r5, r0, #20
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800845e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008462:	3301      	adds	r3, #1
 8008464:	429a      	cmp	r2, r3
 8008466:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800846a:	fbb2 f6f3 	udiv	r6, r2, r3
 800846e:	d32e      	bcc.n	80084ce <quorem+0x96>
 8008470:	f04f 0a00 	mov.w	sl, #0
 8008474:	46c4      	mov	ip, r8
 8008476:	46ae      	mov	lr, r5
 8008478:	46d3      	mov	fp, sl
 800847a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800847e:	b298      	uxth	r0, r3
 8008480:	fb06 a000 	mla	r0, r6, r0, sl
 8008484:	0c02      	lsrs	r2, r0, #16
 8008486:	0c1b      	lsrs	r3, r3, #16
 8008488:	fb06 2303 	mla	r3, r6, r3, r2
 800848c:	f8de 2000 	ldr.w	r2, [lr]
 8008490:	b280      	uxth	r0, r0
 8008492:	b292      	uxth	r2, r2
 8008494:	1a12      	subs	r2, r2, r0
 8008496:	445a      	add	r2, fp
 8008498:	f8de 0000 	ldr.w	r0, [lr]
 800849c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80084a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80084aa:	b292      	uxth	r2, r2
 80084ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80084b0:	45e1      	cmp	r9, ip
 80084b2:	f84e 2b04 	str.w	r2, [lr], #4
 80084b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80084ba:	d2de      	bcs.n	800847a <quorem+0x42>
 80084bc:	9b00      	ldr	r3, [sp, #0]
 80084be:	58eb      	ldr	r3, [r5, r3]
 80084c0:	b92b      	cbnz	r3, 80084ce <quorem+0x96>
 80084c2:	9b01      	ldr	r3, [sp, #4]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	429d      	cmp	r5, r3
 80084c8:	461a      	mov	r2, r3
 80084ca:	d32f      	bcc.n	800852c <quorem+0xf4>
 80084cc:	613c      	str	r4, [r7, #16]
 80084ce:	4638      	mov	r0, r7
 80084d0:	f001 fb20 	bl	8009b14 <__mcmp>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	db25      	blt.n	8008524 <quorem+0xec>
 80084d8:	4629      	mov	r1, r5
 80084da:	2000      	movs	r0, #0
 80084dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80084e0:	f8d1 c000 	ldr.w	ip, [r1]
 80084e4:	fa1f fe82 	uxth.w	lr, r2
 80084e8:	fa1f f38c 	uxth.w	r3, ip
 80084ec:	eba3 030e 	sub.w	r3, r3, lr
 80084f0:	4403      	add	r3, r0
 80084f2:	0c12      	lsrs	r2, r2, #16
 80084f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80084f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008502:	45c1      	cmp	r9, r8
 8008504:	f841 3b04 	str.w	r3, [r1], #4
 8008508:	ea4f 4022 	mov.w	r0, r2, asr #16
 800850c:	d2e6      	bcs.n	80084dc <quorem+0xa4>
 800850e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008516:	b922      	cbnz	r2, 8008522 <quorem+0xea>
 8008518:	3b04      	subs	r3, #4
 800851a:	429d      	cmp	r5, r3
 800851c:	461a      	mov	r2, r3
 800851e:	d30b      	bcc.n	8008538 <quorem+0x100>
 8008520:	613c      	str	r4, [r7, #16]
 8008522:	3601      	adds	r6, #1
 8008524:	4630      	mov	r0, r6
 8008526:	b003      	add	sp, #12
 8008528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852c:	6812      	ldr	r2, [r2, #0]
 800852e:	3b04      	subs	r3, #4
 8008530:	2a00      	cmp	r2, #0
 8008532:	d1cb      	bne.n	80084cc <quorem+0x94>
 8008534:	3c01      	subs	r4, #1
 8008536:	e7c6      	b.n	80084c6 <quorem+0x8e>
 8008538:	6812      	ldr	r2, [r2, #0]
 800853a:	3b04      	subs	r3, #4
 800853c:	2a00      	cmp	r2, #0
 800853e:	d1ef      	bne.n	8008520 <quorem+0xe8>
 8008540:	3c01      	subs	r4, #1
 8008542:	e7ea      	b.n	800851a <quorem+0xe2>
 8008544:	2000      	movs	r0, #0
 8008546:	e7ee      	b.n	8008526 <quorem+0xee>

08008548 <_dtoa_r>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	69c7      	ldr	r7, [r0, #28]
 800854e:	b097      	sub	sp, #92	@ 0x5c
 8008550:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008554:	ec55 4b10 	vmov	r4, r5, d0
 8008558:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800855a:	9107      	str	r1, [sp, #28]
 800855c:	4681      	mov	r9, r0
 800855e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008560:	9311      	str	r3, [sp, #68]	@ 0x44
 8008562:	b97f      	cbnz	r7, 8008584 <_dtoa_r+0x3c>
 8008564:	2010      	movs	r0, #16
 8008566:	f000 ff01 	bl	800936c <malloc>
 800856a:	4602      	mov	r2, r0
 800856c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008570:	b920      	cbnz	r0, 800857c <_dtoa_r+0x34>
 8008572:	4ba9      	ldr	r3, [pc, #676]	@ (8008818 <_dtoa_r+0x2d0>)
 8008574:	21ef      	movs	r1, #239	@ 0xef
 8008576:	48a9      	ldr	r0, [pc, #676]	@ (800881c <_dtoa_r+0x2d4>)
 8008578:	f7ff ff40 	bl	80083fc <__assert_func>
 800857c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008580:	6007      	str	r7, [r0, #0]
 8008582:	60c7      	str	r7, [r0, #12]
 8008584:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008588:	6819      	ldr	r1, [r3, #0]
 800858a:	b159      	cbz	r1, 80085a4 <_dtoa_r+0x5c>
 800858c:	685a      	ldr	r2, [r3, #4]
 800858e:	604a      	str	r2, [r1, #4]
 8008590:	2301      	movs	r3, #1
 8008592:	4093      	lsls	r3, r2
 8008594:	608b      	str	r3, [r1, #8]
 8008596:	4648      	mov	r0, r9
 8008598:	f001 f88a 	bl	80096b0 <_Bfree>
 800859c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	1e2b      	subs	r3, r5, #0
 80085a6:	bfb9      	ittee	lt
 80085a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80085ac:	9305      	strlt	r3, [sp, #20]
 80085ae:	2300      	movge	r3, #0
 80085b0:	6033      	strge	r3, [r6, #0]
 80085b2:	9f05      	ldr	r7, [sp, #20]
 80085b4:	4b9a      	ldr	r3, [pc, #616]	@ (8008820 <_dtoa_r+0x2d8>)
 80085b6:	bfbc      	itt	lt
 80085b8:	2201      	movlt	r2, #1
 80085ba:	6032      	strlt	r2, [r6, #0]
 80085bc:	43bb      	bics	r3, r7
 80085be:	d112      	bne.n	80085e6 <_dtoa_r+0x9e>
 80085c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80085c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80085c6:	6013      	str	r3, [r2, #0]
 80085c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085cc:	4323      	orrs	r3, r4
 80085ce:	f000 855a 	beq.w	8009086 <_dtoa_r+0xb3e>
 80085d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80085d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008834 <_dtoa_r+0x2ec>
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 855c 	beq.w	8009096 <_dtoa_r+0xb4e>
 80085de:	f10a 0303 	add.w	r3, sl, #3
 80085e2:	f000 bd56 	b.w	8009092 <_dtoa_r+0xb4a>
 80085e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80085ea:	2200      	movs	r2, #0
 80085ec:	ec51 0b17 	vmov	r0, r1, d7
 80085f0:	2300      	movs	r3, #0
 80085f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80085f6:	f7f8 fa67 	bl	8000ac8 <__aeabi_dcmpeq>
 80085fa:	4680      	mov	r8, r0
 80085fc:	b158      	cbz	r0, 8008616 <_dtoa_r+0xce>
 80085fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008600:	2301      	movs	r3, #1
 8008602:	6013      	str	r3, [r2, #0]
 8008604:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008606:	b113      	cbz	r3, 800860e <_dtoa_r+0xc6>
 8008608:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800860a:	4b86      	ldr	r3, [pc, #536]	@ (8008824 <_dtoa_r+0x2dc>)
 800860c:	6013      	str	r3, [r2, #0]
 800860e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008838 <_dtoa_r+0x2f0>
 8008612:	f000 bd40 	b.w	8009096 <_dtoa_r+0xb4e>
 8008616:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800861a:	aa14      	add	r2, sp, #80	@ 0x50
 800861c:	a915      	add	r1, sp, #84	@ 0x54
 800861e:	4648      	mov	r0, r9
 8008620:	f001 fb28 	bl	8009c74 <__d2b>
 8008624:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008628:	9002      	str	r0, [sp, #8]
 800862a:	2e00      	cmp	r6, #0
 800862c:	d078      	beq.n	8008720 <_dtoa_r+0x1d8>
 800862e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008630:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008638:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800863c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008640:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008644:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008648:	4619      	mov	r1, r3
 800864a:	2200      	movs	r2, #0
 800864c:	4b76      	ldr	r3, [pc, #472]	@ (8008828 <_dtoa_r+0x2e0>)
 800864e:	f7f7 fe1b 	bl	8000288 <__aeabi_dsub>
 8008652:	a36b      	add	r3, pc, #428	@ (adr r3, 8008800 <_dtoa_r+0x2b8>)
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	f7f7 ffce 	bl	80005f8 <__aeabi_dmul>
 800865c:	a36a      	add	r3, pc, #424	@ (adr r3, 8008808 <_dtoa_r+0x2c0>)
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	f7f7 fe13 	bl	800028c <__adddf3>
 8008666:	4604      	mov	r4, r0
 8008668:	4630      	mov	r0, r6
 800866a:	460d      	mov	r5, r1
 800866c:	f7f7 ff5a 	bl	8000524 <__aeabi_i2d>
 8008670:	a367      	add	r3, pc, #412	@ (adr r3, 8008810 <_dtoa_r+0x2c8>)
 8008672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008676:	f7f7 ffbf 	bl	80005f8 <__aeabi_dmul>
 800867a:	4602      	mov	r2, r0
 800867c:	460b      	mov	r3, r1
 800867e:	4620      	mov	r0, r4
 8008680:	4629      	mov	r1, r5
 8008682:	f7f7 fe03 	bl	800028c <__adddf3>
 8008686:	4604      	mov	r4, r0
 8008688:	460d      	mov	r5, r1
 800868a:	f7f8 fa65 	bl	8000b58 <__aeabi_d2iz>
 800868e:	2200      	movs	r2, #0
 8008690:	4607      	mov	r7, r0
 8008692:	2300      	movs	r3, #0
 8008694:	4620      	mov	r0, r4
 8008696:	4629      	mov	r1, r5
 8008698:	f7f8 fa20 	bl	8000adc <__aeabi_dcmplt>
 800869c:	b140      	cbz	r0, 80086b0 <_dtoa_r+0x168>
 800869e:	4638      	mov	r0, r7
 80086a0:	f7f7 ff40 	bl	8000524 <__aeabi_i2d>
 80086a4:	4622      	mov	r2, r4
 80086a6:	462b      	mov	r3, r5
 80086a8:	f7f8 fa0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80086ac:	b900      	cbnz	r0, 80086b0 <_dtoa_r+0x168>
 80086ae:	3f01      	subs	r7, #1
 80086b0:	2f16      	cmp	r7, #22
 80086b2:	d852      	bhi.n	800875a <_dtoa_r+0x212>
 80086b4:	4b5d      	ldr	r3, [pc, #372]	@ (800882c <_dtoa_r+0x2e4>)
 80086b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086c2:	f7f8 fa0b 	bl	8000adc <__aeabi_dcmplt>
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d049      	beq.n	800875e <_dtoa_r+0x216>
 80086ca:	3f01      	subs	r7, #1
 80086cc:	2300      	movs	r3, #0
 80086ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80086d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086d2:	1b9b      	subs	r3, r3, r6
 80086d4:	1e5a      	subs	r2, r3, #1
 80086d6:	bf45      	ittet	mi
 80086d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80086dc:	9300      	strmi	r3, [sp, #0]
 80086de:	2300      	movpl	r3, #0
 80086e0:	2300      	movmi	r3, #0
 80086e2:	9206      	str	r2, [sp, #24]
 80086e4:	bf54      	ite	pl
 80086e6:	9300      	strpl	r3, [sp, #0]
 80086e8:	9306      	strmi	r3, [sp, #24]
 80086ea:	2f00      	cmp	r7, #0
 80086ec:	db39      	blt.n	8008762 <_dtoa_r+0x21a>
 80086ee:	9b06      	ldr	r3, [sp, #24]
 80086f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80086f2:	443b      	add	r3, r7
 80086f4:	9306      	str	r3, [sp, #24]
 80086f6:	2300      	movs	r3, #0
 80086f8:	9308      	str	r3, [sp, #32]
 80086fa:	9b07      	ldr	r3, [sp, #28]
 80086fc:	2b09      	cmp	r3, #9
 80086fe:	d863      	bhi.n	80087c8 <_dtoa_r+0x280>
 8008700:	2b05      	cmp	r3, #5
 8008702:	bfc4      	itt	gt
 8008704:	3b04      	subgt	r3, #4
 8008706:	9307      	strgt	r3, [sp, #28]
 8008708:	9b07      	ldr	r3, [sp, #28]
 800870a:	f1a3 0302 	sub.w	r3, r3, #2
 800870e:	bfcc      	ite	gt
 8008710:	2400      	movgt	r4, #0
 8008712:	2401      	movle	r4, #1
 8008714:	2b03      	cmp	r3, #3
 8008716:	d863      	bhi.n	80087e0 <_dtoa_r+0x298>
 8008718:	e8df f003 	tbb	[pc, r3]
 800871c:	2b375452 	.word	0x2b375452
 8008720:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008724:	441e      	add	r6, r3
 8008726:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800872a:	2b20      	cmp	r3, #32
 800872c:	bfc1      	itttt	gt
 800872e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008732:	409f      	lslgt	r7, r3
 8008734:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008738:	fa24 f303 	lsrgt.w	r3, r4, r3
 800873c:	bfd6      	itet	le
 800873e:	f1c3 0320 	rsble	r3, r3, #32
 8008742:	ea47 0003 	orrgt.w	r0, r7, r3
 8008746:	fa04 f003 	lslle.w	r0, r4, r3
 800874a:	f7f7 fedb 	bl	8000504 <__aeabi_ui2d>
 800874e:	2201      	movs	r2, #1
 8008750:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008754:	3e01      	subs	r6, #1
 8008756:	9212      	str	r2, [sp, #72]	@ 0x48
 8008758:	e776      	b.n	8008648 <_dtoa_r+0x100>
 800875a:	2301      	movs	r3, #1
 800875c:	e7b7      	b.n	80086ce <_dtoa_r+0x186>
 800875e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008760:	e7b6      	b.n	80086d0 <_dtoa_r+0x188>
 8008762:	9b00      	ldr	r3, [sp, #0]
 8008764:	1bdb      	subs	r3, r3, r7
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	427b      	negs	r3, r7
 800876a:	9308      	str	r3, [sp, #32]
 800876c:	2300      	movs	r3, #0
 800876e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008770:	e7c3      	b.n	80086fa <_dtoa_r+0x1b2>
 8008772:	2301      	movs	r3, #1
 8008774:	9309      	str	r3, [sp, #36]	@ 0x24
 8008776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008778:	eb07 0b03 	add.w	fp, r7, r3
 800877c:	f10b 0301 	add.w	r3, fp, #1
 8008780:	2b01      	cmp	r3, #1
 8008782:	9303      	str	r3, [sp, #12]
 8008784:	bfb8      	it	lt
 8008786:	2301      	movlt	r3, #1
 8008788:	e006      	b.n	8008798 <_dtoa_r+0x250>
 800878a:	2301      	movs	r3, #1
 800878c:	9309      	str	r3, [sp, #36]	@ 0x24
 800878e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008790:	2b00      	cmp	r3, #0
 8008792:	dd28      	ble.n	80087e6 <_dtoa_r+0x29e>
 8008794:	469b      	mov	fp, r3
 8008796:	9303      	str	r3, [sp, #12]
 8008798:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800879c:	2100      	movs	r1, #0
 800879e:	2204      	movs	r2, #4
 80087a0:	f102 0514 	add.w	r5, r2, #20
 80087a4:	429d      	cmp	r5, r3
 80087a6:	d926      	bls.n	80087f6 <_dtoa_r+0x2ae>
 80087a8:	6041      	str	r1, [r0, #4]
 80087aa:	4648      	mov	r0, r9
 80087ac:	f000 ff40 	bl	8009630 <_Balloc>
 80087b0:	4682      	mov	sl, r0
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d142      	bne.n	800883c <_dtoa_r+0x2f4>
 80087b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008830 <_dtoa_r+0x2e8>)
 80087b8:	4602      	mov	r2, r0
 80087ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80087be:	e6da      	b.n	8008576 <_dtoa_r+0x2e>
 80087c0:	2300      	movs	r3, #0
 80087c2:	e7e3      	b.n	800878c <_dtoa_r+0x244>
 80087c4:	2300      	movs	r3, #0
 80087c6:	e7d5      	b.n	8008774 <_dtoa_r+0x22c>
 80087c8:	2401      	movs	r4, #1
 80087ca:	2300      	movs	r3, #0
 80087cc:	9307      	str	r3, [sp, #28]
 80087ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80087d0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80087da:	2312      	movs	r3, #18
 80087dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80087de:	e7db      	b.n	8008798 <_dtoa_r+0x250>
 80087e0:	2301      	movs	r3, #1
 80087e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e4:	e7f4      	b.n	80087d0 <_dtoa_r+0x288>
 80087e6:	f04f 0b01 	mov.w	fp, #1
 80087ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80087ee:	465b      	mov	r3, fp
 80087f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80087f4:	e7d0      	b.n	8008798 <_dtoa_r+0x250>
 80087f6:	3101      	adds	r1, #1
 80087f8:	0052      	lsls	r2, r2, #1
 80087fa:	e7d1      	b.n	80087a0 <_dtoa_r+0x258>
 80087fc:	f3af 8000 	nop.w
 8008800:	636f4361 	.word	0x636f4361
 8008804:	3fd287a7 	.word	0x3fd287a7
 8008808:	8b60c8b3 	.word	0x8b60c8b3
 800880c:	3fc68a28 	.word	0x3fc68a28
 8008810:	509f79fb 	.word	0x509f79fb
 8008814:	3fd34413 	.word	0x3fd34413
 8008818:	0800a414 	.word	0x0800a414
 800881c:	0800a4cc 	.word	0x0800a4cc
 8008820:	7ff00000 	.word	0x7ff00000
 8008824:	0800a3f1 	.word	0x0800a3f1
 8008828:	3ff80000 	.word	0x3ff80000
 800882c:	0800a5e0 	.word	0x0800a5e0
 8008830:	0800a524 	.word	0x0800a524
 8008834:	0800a4c8 	.word	0x0800a4c8
 8008838:	0800a3f0 	.word	0x0800a3f0
 800883c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008840:	6018      	str	r0, [r3, #0]
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	2b0e      	cmp	r3, #14
 8008846:	f200 80a1 	bhi.w	800898c <_dtoa_r+0x444>
 800884a:	2c00      	cmp	r4, #0
 800884c:	f000 809e 	beq.w	800898c <_dtoa_r+0x444>
 8008850:	2f00      	cmp	r7, #0
 8008852:	dd33      	ble.n	80088bc <_dtoa_r+0x374>
 8008854:	4b9c      	ldr	r3, [pc, #624]	@ (8008ac8 <_dtoa_r+0x580>)
 8008856:	f007 020f 	and.w	r2, r7, #15
 800885a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800885e:	ed93 7b00 	vldr	d7, [r3]
 8008862:	05f8      	lsls	r0, r7, #23
 8008864:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008868:	ea4f 1427 	mov.w	r4, r7, asr #4
 800886c:	d516      	bpl.n	800889c <_dtoa_r+0x354>
 800886e:	4b97      	ldr	r3, [pc, #604]	@ (8008acc <_dtoa_r+0x584>)
 8008870:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008874:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008878:	f7f7 ffe8 	bl	800084c <__aeabi_ddiv>
 800887c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008880:	f004 040f 	and.w	r4, r4, #15
 8008884:	2603      	movs	r6, #3
 8008886:	4d91      	ldr	r5, [pc, #580]	@ (8008acc <_dtoa_r+0x584>)
 8008888:	b954      	cbnz	r4, 80088a0 <_dtoa_r+0x358>
 800888a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800888e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008892:	f7f7 ffdb 	bl	800084c <__aeabi_ddiv>
 8008896:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800889a:	e028      	b.n	80088ee <_dtoa_r+0x3a6>
 800889c:	2602      	movs	r6, #2
 800889e:	e7f2      	b.n	8008886 <_dtoa_r+0x33e>
 80088a0:	07e1      	lsls	r1, r4, #31
 80088a2:	d508      	bpl.n	80088b6 <_dtoa_r+0x36e>
 80088a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80088a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088ac:	f7f7 fea4 	bl	80005f8 <__aeabi_dmul>
 80088b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80088b4:	3601      	adds	r6, #1
 80088b6:	1064      	asrs	r4, r4, #1
 80088b8:	3508      	adds	r5, #8
 80088ba:	e7e5      	b.n	8008888 <_dtoa_r+0x340>
 80088bc:	f000 80af 	beq.w	8008a1e <_dtoa_r+0x4d6>
 80088c0:	427c      	negs	r4, r7
 80088c2:	4b81      	ldr	r3, [pc, #516]	@ (8008ac8 <_dtoa_r+0x580>)
 80088c4:	4d81      	ldr	r5, [pc, #516]	@ (8008acc <_dtoa_r+0x584>)
 80088c6:	f004 020f 	and.w	r2, r4, #15
 80088ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80088d6:	f7f7 fe8f 	bl	80005f8 <__aeabi_dmul>
 80088da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088de:	1124      	asrs	r4, r4, #4
 80088e0:	2300      	movs	r3, #0
 80088e2:	2602      	movs	r6, #2
 80088e4:	2c00      	cmp	r4, #0
 80088e6:	f040 808f 	bne.w	8008a08 <_dtoa_r+0x4c0>
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1d3      	bne.n	8008896 <_dtoa_r+0x34e>
 80088ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80088f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f000 8094 	beq.w	8008a22 <_dtoa_r+0x4da>
 80088fa:	4b75      	ldr	r3, [pc, #468]	@ (8008ad0 <_dtoa_r+0x588>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	4620      	mov	r0, r4
 8008900:	4629      	mov	r1, r5
 8008902:	f7f8 f8eb 	bl	8000adc <__aeabi_dcmplt>
 8008906:	2800      	cmp	r0, #0
 8008908:	f000 808b 	beq.w	8008a22 <_dtoa_r+0x4da>
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 8087 	beq.w	8008a22 <_dtoa_r+0x4da>
 8008914:	f1bb 0f00 	cmp.w	fp, #0
 8008918:	dd34      	ble.n	8008984 <_dtoa_r+0x43c>
 800891a:	4620      	mov	r0, r4
 800891c:	4b6d      	ldr	r3, [pc, #436]	@ (8008ad4 <_dtoa_r+0x58c>)
 800891e:	2200      	movs	r2, #0
 8008920:	4629      	mov	r1, r5
 8008922:	f7f7 fe69 	bl	80005f8 <__aeabi_dmul>
 8008926:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800892a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800892e:	3601      	adds	r6, #1
 8008930:	465c      	mov	r4, fp
 8008932:	4630      	mov	r0, r6
 8008934:	f7f7 fdf6 	bl	8000524 <__aeabi_i2d>
 8008938:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800893c:	f7f7 fe5c 	bl	80005f8 <__aeabi_dmul>
 8008940:	4b65      	ldr	r3, [pc, #404]	@ (8008ad8 <_dtoa_r+0x590>)
 8008942:	2200      	movs	r2, #0
 8008944:	f7f7 fca2 	bl	800028c <__adddf3>
 8008948:	4605      	mov	r5, r0
 800894a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800894e:	2c00      	cmp	r4, #0
 8008950:	d16a      	bne.n	8008a28 <_dtoa_r+0x4e0>
 8008952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008956:	4b61      	ldr	r3, [pc, #388]	@ (8008adc <_dtoa_r+0x594>)
 8008958:	2200      	movs	r2, #0
 800895a:	f7f7 fc95 	bl	8000288 <__aeabi_dsub>
 800895e:	4602      	mov	r2, r0
 8008960:	460b      	mov	r3, r1
 8008962:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008966:	462a      	mov	r2, r5
 8008968:	4633      	mov	r3, r6
 800896a:	f7f8 f8d5 	bl	8000b18 <__aeabi_dcmpgt>
 800896e:	2800      	cmp	r0, #0
 8008970:	f040 8298 	bne.w	8008ea4 <_dtoa_r+0x95c>
 8008974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008978:	462a      	mov	r2, r5
 800897a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800897e:	f7f8 f8ad 	bl	8000adc <__aeabi_dcmplt>
 8008982:	bb38      	cbnz	r0, 80089d4 <_dtoa_r+0x48c>
 8008984:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008988:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800898c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800898e:	2b00      	cmp	r3, #0
 8008990:	f2c0 8157 	blt.w	8008c42 <_dtoa_r+0x6fa>
 8008994:	2f0e      	cmp	r7, #14
 8008996:	f300 8154 	bgt.w	8008c42 <_dtoa_r+0x6fa>
 800899a:	4b4b      	ldr	r3, [pc, #300]	@ (8008ac8 <_dtoa_r+0x580>)
 800899c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089a0:	ed93 7b00 	vldr	d7, [r3]
 80089a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	ed8d 7b00 	vstr	d7, [sp]
 80089ac:	f280 80e5 	bge.w	8008b7a <_dtoa_r+0x632>
 80089b0:	9b03      	ldr	r3, [sp, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f300 80e1 	bgt.w	8008b7a <_dtoa_r+0x632>
 80089b8:	d10c      	bne.n	80089d4 <_dtoa_r+0x48c>
 80089ba:	4b48      	ldr	r3, [pc, #288]	@ (8008adc <_dtoa_r+0x594>)
 80089bc:	2200      	movs	r2, #0
 80089be:	ec51 0b17 	vmov	r0, r1, d7
 80089c2:	f7f7 fe19 	bl	80005f8 <__aeabi_dmul>
 80089c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ca:	f7f8 f89b 	bl	8000b04 <__aeabi_dcmpge>
 80089ce:	2800      	cmp	r0, #0
 80089d0:	f000 8266 	beq.w	8008ea0 <_dtoa_r+0x958>
 80089d4:	2400      	movs	r4, #0
 80089d6:	4625      	mov	r5, r4
 80089d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80089da:	4656      	mov	r6, sl
 80089dc:	ea6f 0803 	mvn.w	r8, r3
 80089e0:	2700      	movs	r7, #0
 80089e2:	4621      	mov	r1, r4
 80089e4:	4648      	mov	r0, r9
 80089e6:	f000 fe63 	bl	80096b0 <_Bfree>
 80089ea:	2d00      	cmp	r5, #0
 80089ec:	f000 80bd 	beq.w	8008b6a <_dtoa_r+0x622>
 80089f0:	b12f      	cbz	r7, 80089fe <_dtoa_r+0x4b6>
 80089f2:	42af      	cmp	r7, r5
 80089f4:	d003      	beq.n	80089fe <_dtoa_r+0x4b6>
 80089f6:	4639      	mov	r1, r7
 80089f8:	4648      	mov	r0, r9
 80089fa:	f000 fe59 	bl	80096b0 <_Bfree>
 80089fe:	4629      	mov	r1, r5
 8008a00:	4648      	mov	r0, r9
 8008a02:	f000 fe55 	bl	80096b0 <_Bfree>
 8008a06:	e0b0      	b.n	8008b6a <_dtoa_r+0x622>
 8008a08:	07e2      	lsls	r2, r4, #31
 8008a0a:	d505      	bpl.n	8008a18 <_dtoa_r+0x4d0>
 8008a0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a10:	f7f7 fdf2 	bl	80005f8 <__aeabi_dmul>
 8008a14:	3601      	adds	r6, #1
 8008a16:	2301      	movs	r3, #1
 8008a18:	1064      	asrs	r4, r4, #1
 8008a1a:	3508      	adds	r5, #8
 8008a1c:	e762      	b.n	80088e4 <_dtoa_r+0x39c>
 8008a1e:	2602      	movs	r6, #2
 8008a20:	e765      	b.n	80088ee <_dtoa_r+0x3a6>
 8008a22:	9c03      	ldr	r4, [sp, #12]
 8008a24:	46b8      	mov	r8, r7
 8008a26:	e784      	b.n	8008932 <_dtoa_r+0x3ea>
 8008a28:	4b27      	ldr	r3, [pc, #156]	@ (8008ac8 <_dtoa_r+0x580>)
 8008a2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a34:	4454      	add	r4, sl
 8008a36:	2900      	cmp	r1, #0
 8008a38:	d054      	beq.n	8008ae4 <_dtoa_r+0x59c>
 8008a3a:	4929      	ldr	r1, [pc, #164]	@ (8008ae0 <_dtoa_r+0x598>)
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	f7f7 ff05 	bl	800084c <__aeabi_ddiv>
 8008a42:	4633      	mov	r3, r6
 8008a44:	462a      	mov	r2, r5
 8008a46:	f7f7 fc1f 	bl	8000288 <__aeabi_dsub>
 8008a4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a4e:	4656      	mov	r6, sl
 8008a50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a54:	f7f8 f880 	bl	8000b58 <__aeabi_d2iz>
 8008a58:	4605      	mov	r5, r0
 8008a5a:	f7f7 fd63 	bl	8000524 <__aeabi_i2d>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a66:	f7f7 fc0f 	bl	8000288 <__aeabi_dsub>
 8008a6a:	3530      	adds	r5, #48	@ 0x30
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	460b      	mov	r3, r1
 8008a70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a74:	f806 5b01 	strb.w	r5, [r6], #1
 8008a78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a7c:	f7f8 f82e 	bl	8000adc <__aeabi_dcmplt>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d172      	bne.n	8008b6a <_dtoa_r+0x622>
 8008a84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a88:	4911      	ldr	r1, [pc, #68]	@ (8008ad0 <_dtoa_r+0x588>)
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	f7f7 fbfc 	bl	8000288 <__aeabi_dsub>
 8008a90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a94:	f7f8 f822 	bl	8000adc <__aeabi_dcmplt>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	f040 80b4 	bne.w	8008c06 <_dtoa_r+0x6be>
 8008a9e:	42a6      	cmp	r6, r4
 8008aa0:	f43f af70 	beq.w	8008984 <_dtoa_r+0x43c>
 8008aa4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad4 <_dtoa_r+0x58c>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f7f7 fda4 	bl	80005f8 <__aeabi_dmul>
 8008ab0:	4b08      	ldr	r3, [pc, #32]	@ (8008ad4 <_dtoa_r+0x58c>)
 8008ab2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008abc:	f7f7 fd9c 	bl	80005f8 <__aeabi_dmul>
 8008ac0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ac4:	e7c4      	b.n	8008a50 <_dtoa_r+0x508>
 8008ac6:	bf00      	nop
 8008ac8:	0800a5e0 	.word	0x0800a5e0
 8008acc:	0800a5b8 	.word	0x0800a5b8
 8008ad0:	3ff00000 	.word	0x3ff00000
 8008ad4:	40240000 	.word	0x40240000
 8008ad8:	401c0000 	.word	0x401c0000
 8008adc:	40140000 	.word	0x40140000
 8008ae0:	3fe00000 	.word	0x3fe00000
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f7f7 fd86 	bl	80005f8 <__aeabi_dmul>
 8008aec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008af0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008af2:	4656      	mov	r6, sl
 8008af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008af8:	f7f8 f82e 	bl	8000b58 <__aeabi_d2iz>
 8008afc:	4605      	mov	r5, r0
 8008afe:	f7f7 fd11 	bl	8000524 <__aeabi_i2d>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b0a:	f7f7 fbbd 	bl	8000288 <__aeabi_dsub>
 8008b0e:	3530      	adds	r5, #48	@ 0x30
 8008b10:	f806 5b01 	strb.w	r5, [r6], #1
 8008b14:	4602      	mov	r2, r0
 8008b16:	460b      	mov	r3, r1
 8008b18:	42a6      	cmp	r6, r4
 8008b1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b1e:	f04f 0200 	mov.w	r2, #0
 8008b22:	d124      	bne.n	8008b6e <_dtoa_r+0x626>
 8008b24:	4baf      	ldr	r3, [pc, #700]	@ (8008de4 <_dtoa_r+0x89c>)
 8008b26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008b2a:	f7f7 fbaf 	bl	800028c <__adddf3>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b36:	f7f7 ffef 	bl	8000b18 <__aeabi_dcmpgt>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d163      	bne.n	8008c06 <_dtoa_r+0x6be>
 8008b3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008b42:	49a8      	ldr	r1, [pc, #672]	@ (8008de4 <_dtoa_r+0x89c>)
 8008b44:	2000      	movs	r0, #0
 8008b46:	f7f7 fb9f 	bl	8000288 <__aeabi_dsub>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b52:	f7f7 ffc3 	bl	8000adc <__aeabi_dcmplt>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	f43f af14 	beq.w	8008984 <_dtoa_r+0x43c>
 8008b5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008b5e:	1e73      	subs	r3, r6, #1
 8008b60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b66:	2b30      	cmp	r3, #48	@ 0x30
 8008b68:	d0f8      	beq.n	8008b5c <_dtoa_r+0x614>
 8008b6a:	4647      	mov	r7, r8
 8008b6c:	e03b      	b.n	8008be6 <_dtoa_r+0x69e>
 8008b6e:	4b9e      	ldr	r3, [pc, #632]	@ (8008de8 <_dtoa_r+0x8a0>)
 8008b70:	f7f7 fd42 	bl	80005f8 <__aeabi_dmul>
 8008b74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b78:	e7bc      	b.n	8008af4 <_dtoa_r+0x5ac>
 8008b7a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008b7e:	4656      	mov	r6, sl
 8008b80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b84:	4620      	mov	r0, r4
 8008b86:	4629      	mov	r1, r5
 8008b88:	f7f7 fe60 	bl	800084c <__aeabi_ddiv>
 8008b8c:	f7f7 ffe4 	bl	8000b58 <__aeabi_d2iz>
 8008b90:	4680      	mov	r8, r0
 8008b92:	f7f7 fcc7 	bl	8000524 <__aeabi_i2d>
 8008b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b9a:	f7f7 fd2d 	bl	80005f8 <__aeabi_dmul>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008baa:	f7f7 fb6d 	bl	8000288 <__aeabi_dsub>
 8008bae:	f806 4b01 	strb.w	r4, [r6], #1
 8008bb2:	9d03      	ldr	r5, [sp, #12]
 8008bb4:	eba6 040a 	sub.w	r4, r6, sl
 8008bb8:	42a5      	cmp	r5, r4
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	d133      	bne.n	8008c28 <_dtoa_r+0x6e0>
 8008bc0:	f7f7 fb64 	bl	800028c <__adddf3>
 8008bc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bc8:	4604      	mov	r4, r0
 8008bca:	460d      	mov	r5, r1
 8008bcc:	f7f7 ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 8008bd0:	b9c0      	cbnz	r0, 8008c04 <_dtoa_r+0x6bc>
 8008bd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	4629      	mov	r1, r5
 8008bda:	f7f7 ff75 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bde:	b110      	cbz	r0, 8008be6 <_dtoa_r+0x69e>
 8008be0:	f018 0f01 	tst.w	r8, #1
 8008be4:	d10e      	bne.n	8008c04 <_dtoa_r+0x6bc>
 8008be6:	9902      	ldr	r1, [sp, #8]
 8008be8:	4648      	mov	r0, r9
 8008bea:	f000 fd61 	bl	80096b0 <_Bfree>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	7033      	strb	r3, [r6, #0]
 8008bf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008bf4:	3701      	adds	r7, #1
 8008bf6:	601f      	str	r7, [r3, #0]
 8008bf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f000 824b 	beq.w	8009096 <_dtoa_r+0xb4e>
 8008c00:	601e      	str	r6, [r3, #0]
 8008c02:	e248      	b.n	8009096 <_dtoa_r+0xb4e>
 8008c04:	46b8      	mov	r8, r7
 8008c06:	4633      	mov	r3, r6
 8008c08:	461e      	mov	r6, r3
 8008c0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c0e:	2a39      	cmp	r2, #57	@ 0x39
 8008c10:	d106      	bne.n	8008c20 <_dtoa_r+0x6d8>
 8008c12:	459a      	cmp	sl, r3
 8008c14:	d1f8      	bne.n	8008c08 <_dtoa_r+0x6c0>
 8008c16:	2230      	movs	r2, #48	@ 0x30
 8008c18:	f108 0801 	add.w	r8, r8, #1
 8008c1c:	f88a 2000 	strb.w	r2, [sl]
 8008c20:	781a      	ldrb	r2, [r3, #0]
 8008c22:	3201      	adds	r2, #1
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	e7a0      	b.n	8008b6a <_dtoa_r+0x622>
 8008c28:	4b6f      	ldr	r3, [pc, #444]	@ (8008de8 <_dtoa_r+0x8a0>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f7f7 fce4 	bl	80005f8 <__aeabi_dmul>
 8008c30:	2200      	movs	r2, #0
 8008c32:	2300      	movs	r3, #0
 8008c34:	4604      	mov	r4, r0
 8008c36:	460d      	mov	r5, r1
 8008c38:	f7f7 ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	d09f      	beq.n	8008b80 <_dtoa_r+0x638>
 8008c40:	e7d1      	b.n	8008be6 <_dtoa_r+0x69e>
 8008c42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c44:	2a00      	cmp	r2, #0
 8008c46:	f000 80ea 	beq.w	8008e1e <_dtoa_r+0x8d6>
 8008c4a:	9a07      	ldr	r2, [sp, #28]
 8008c4c:	2a01      	cmp	r2, #1
 8008c4e:	f300 80cd 	bgt.w	8008dec <_dtoa_r+0x8a4>
 8008c52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	f000 80c1 	beq.w	8008ddc <_dtoa_r+0x894>
 8008c5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c5e:	9c08      	ldr	r4, [sp, #32]
 8008c60:	9e00      	ldr	r6, [sp, #0]
 8008c62:	9a00      	ldr	r2, [sp, #0]
 8008c64:	441a      	add	r2, r3
 8008c66:	9200      	str	r2, [sp, #0]
 8008c68:	9a06      	ldr	r2, [sp, #24]
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	441a      	add	r2, r3
 8008c6e:	4648      	mov	r0, r9
 8008c70:	9206      	str	r2, [sp, #24]
 8008c72:	f000 fdd1 	bl	8009818 <__i2b>
 8008c76:	4605      	mov	r5, r0
 8008c78:	b166      	cbz	r6, 8008c94 <_dtoa_r+0x74c>
 8008c7a:	9b06      	ldr	r3, [sp, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	dd09      	ble.n	8008c94 <_dtoa_r+0x74c>
 8008c80:	42b3      	cmp	r3, r6
 8008c82:	9a00      	ldr	r2, [sp, #0]
 8008c84:	bfa8      	it	ge
 8008c86:	4633      	movge	r3, r6
 8008c88:	1ad2      	subs	r2, r2, r3
 8008c8a:	9200      	str	r2, [sp, #0]
 8008c8c:	9a06      	ldr	r2, [sp, #24]
 8008c8e:	1af6      	subs	r6, r6, r3
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	9306      	str	r3, [sp, #24]
 8008c94:	9b08      	ldr	r3, [sp, #32]
 8008c96:	b30b      	cbz	r3, 8008cdc <_dtoa_r+0x794>
 8008c98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 80c6 	beq.w	8008e2c <_dtoa_r+0x8e4>
 8008ca0:	2c00      	cmp	r4, #0
 8008ca2:	f000 80c0 	beq.w	8008e26 <_dtoa_r+0x8de>
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	4622      	mov	r2, r4
 8008caa:	4648      	mov	r0, r9
 8008cac:	f000 fe6c 	bl	8009988 <__pow5mult>
 8008cb0:	9a02      	ldr	r2, [sp, #8]
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	4605      	mov	r5, r0
 8008cb6:	4648      	mov	r0, r9
 8008cb8:	f000 fdc4 	bl	8009844 <__multiply>
 8008cbc:	9902      	ldr	r1, [sp, #8]
 8008cbe:	4680      	mov	r8, r0
 8008cc0:	4648      	mov	r0, r9
 8008cc2:	f000 fcf5 	bl	80096b0 <_Bfree>
 8008cc6:	9b08      	ldr	r3, [sp, #32]
 8008cc8:	1b1b      	subs	r3, r3, r4
 8008cca:	9308      	str	r3, [sp, #32]
 8008ccc:	f000 80b1 	beq.w	8008e32 <_dtoa_r+0x8ea>
 8008cd0:	9a08      	ldr	r2, [sp, #32]
 8008cd2:	4641      	mov	r1, r8
 8008cd4:	4648      	mov	r0, r9
 8008cd6:	f000 fe57 	bl	8009988 <__pow5mult>
 8008cda:	9002      	str	r0, [sp, #8]
 8008cdc:	2101      	movs	r1, #1
 8008cde:	4648      	mov	r0, r9
 8008ce0:	f000 fd9a 	bl	8009818 <__i2b>
 8008ce4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 81d8 	beq.w	800909e <_dtoa_r+0xb56>
 8008cee:	461a      	mov	r2, r3
 8008cf0:	4601      	mov	r1, r0
 8008cf2:	4648      	mov	r0, r9
 8008cf4:	f000 fe48 	bl	8009988 <__pow5mult>
 8008cf8:	9b07      	ldr	r3, [sp, #28]
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	f300 809f 	bgt.w	8008e40 <_dtoa_r+0x8f8>
 8008d02:	9b04      	ldr	r3, [sp, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f040 8097 	bne.w	8008e38 <_dtoa_r+0x8f0>
 8008d0a:	9b05      	ldr	r3, [sp, #20]
 8008d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f040 8093 	bne.w	8008e3c <_dtoa_r+0x8f4>
 8008d16:	9b05      	ldr	r3, [sp, #20]
 8008d18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d1c:	0d1b      	lsrs	r3, r3, #20
 8008d1e:	051b      	lsls	r3, r3, #20
 8008d20:	b133      	cbz	r3, 8008d30 <_dtoa_r+0x7e8>
 8008d22:	9b00      	ldr	r3, [sp, #0]
 8008d24:	3301      	adds	r3, #1
 8008d26:	9300      	str	r3, [sp, #0]
 8008d28:	9b06      	ldr	r3, [sp, #24]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	9306      	str	r3, [sp, #24]
 8008d2e:	2301      	movs	r3, #1
 8008d30:	9308      	str	r3, [sp, #32]
 8008d32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 81b8 	beq.w	80090aa <_dtoa_r+0xb62>
 8008d3a:	6923      	ldr	r3, [r4, #16]
 8008d3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d40:	6918      	ldr	r0, [r3, #16]
 8008d42:	f000 fd1d 	bl	8009780 <__hi0bits>
 8008d46:	f1c0 0020 	rsb	r0, r0, #32
 8008d4a:	9b06      	ldr	r3, [sp, #24]
 8008d4c:	4418      	add	r0, r3
 8008d4e:	f010 001f 	ands.w	r0, r0, #31
 8008d52:	f000 8082 	beq.w	8008e5a <_dtoa_r+0x912>
 8008d56:	f1c0 0320 	rsb	r3, r0, #32
 8008d5a:	2b04      	cmp	r3, #4
 8008d5c:	dd73      	ble.n	8008e46 <_dtoa_r+0x8fe>
 8008d5e:	9b00      	ldr	r3, [sp, #0]
 8008d60:	f1c0 001c 	rsb	r0, r0, #28
 8008d64:	4403      	add	r3, r0
 8008d66:	9300      	str	r3, [sp, #0]
 8008d68:	9b06      	ldr	r3, [sp, #24]
 8008d6a:	4403      	add	r3, r0
 8008d6c:	4406      	add	r6, r0
 8008d6e:	9306      	str	r3, [sp, #24]
 8008d70:	9b00      	ldr	r3, [sp, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	dd05      	ble.n	8008d82 <_dtoa_r+0x83a>
 8008d76:	9902      	ldr	r1, [sp, #8]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	4648      	mov	r0, r9
 8008d7c:	f000 fe5e 	bl	8009a3c <__lshift>
 8008d80:	9002      	str	r0, [sp, #8]
 8008d82:	9b06      	ldr	r3, [sp, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	dd05      	ble.n	8008d94 <_dtoa_r+0x84c>
 8008d88:	4621      	mov	r1, r4
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	4648      	mov	r0, r9
 8008d8e:	f000 fe55 	bl	8009a3c <__lshift>
 8008d92:	4604      	mov	r4, r0
 8008d94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d061      	beq.n	8008e5e <_dtoa_r+0x916>
 8008d9a:	9802      	ldr	r0, [sp, #8]
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	f000 feb9 	bl	8009b14 <__mcmp>
 8008da2:	2800      	cmp	r0, #0
 8008da4:	da5b      	bge.n	8008e5e <_dtoa_r+0x916>
 8008da6:	2300      	movs	r3, #0
 8008da8:	9902      	ldr	r1, [sp, #8]
 8008daa:	220a      	movs	r2, #10
 8008dac:	4648      	mov	r0, r9
 8008dae:	f000 fca1 	bl	80096f4 <__multadd>
 8008db2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db4:	9002      	str	r0, [sp, #8]
 8008db6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 8177 	beq.w	80090ae <_dtoa_r+0xb66>
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	220a      	movs	r2, #10
 8008dc6:	4648      	mov	r0, r9
 8008dc8:	f000 fc94 	bl	80096f4 <__multadd>
 8008dcc:	f1bb 0f00 	cmp.w	fp, #0
 8008dd0:	4605      	mov	r5, r0
 8008dd2:	dc6f      	bgt.n	8008eb4 <_dtoa_r+0x96c>
 8008dd4:	9b07      	ldr	r3, [sp, #28]
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	dc49      	bgt.n	8008e6e <_dtoa_r+0x926>
 8008dda:	e06b      	b.n	8008eb4 <_dtoa_r+0x96c>
 8008ddc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008dde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008de2:	e73c      	b.n	8008c5e <_dtoa_r+0x716>
 8008de4:	3fe00000 	.word	0x3fe00000
 8008de8:	40240000 	.word	0x40240000
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	1e5c      	subs	r4, r3, #1
 8008df0:	9b08      	ldr	r3, [sp, #32]
 8008df2:	42a3      	cmp	r3, r4
 8008df4:	db09      	blt.n	8008e0a <_dtoa_r+0x8c2>
 8008df6:	1b1c      	subs	r4, r3, r4
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f6bf af30 	bge.w	8008c60 <_dtoa_r+0x718>
 8008e00:	9b00      	ldr	r3, [sp, #0]
 8008e02:	9a03      	ldr	r2, [sp, #12]
 8008e04:	1a9e      	subs	r6, r3, r2
 8008e06:	2300      	movs	r3, #0
 8008e08:	e72b      	b.n	8008c62 <_dtoa_r+0x71a>
 8008e0a:	9b08      	ldr	r3, [sp, #32]
 8008e0c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e0e:	9408      	str	r4, [sp, #32]
 8008e10:	1ae3      	subs	r3, r4, r3
 8008e12:	441a      	add	r2, r3
 8008e14:	9e00      	ldr	r6, [sp, #0]
 8008e16:	9b03      	ldr	r3, [sp, #12]
 8008e18:	920d      	str	r2, [sp, #52]	@ 0x34
 8008e1a:	2400      	movs	r4, #0
 8008e1c:	e721      	b.n	8008c62 <_dtoa_r+0x71a>
 8008e1e:	9c08      	ldr	r4, [sp, #32]
 8008e20:	9e00      	ldr	r6, [sp, #0]
 8008e22:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008e24:	e728      	b.n	8008c78 <_dtoa_r+0x730>
 8008e26:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008e2a:	e751      	b.n	8008cd0 <_dtoa_r+0x788>
 8008e2c:	9a08      	ldr	r2, [sp, #32]
 8008e2e:	9902      	ldr	r1, [sp, #8]
 8008e30:	e750      	b.n	8008cd4 <_dtoa_r+0x78c>
 8008e32:	f8cd 8008 	str.w	r8, [sp, #8]
 8008e36:	e751      	b.n	8008cdc <_dtoa_r+0x794>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	e779      	b.n	8008d30 <_dtoa_r+0x7e8>
 8008e3c:	9b04      	ldr	r3, [sp, #16]
 8008e3e:	e777      	b.n	8008d30 <_dtoa_r+0x7e8>
 8008e40:	2300      	movs	r3, #0
 8008e42:	9308      	str	r3, [sp, #32]
 8008e44:	e779      	b.n	8008d3a <_dtoa_r+0x7f2>
 8008e46:	d093      	beq.n	8008d70 <_dtoa_r+0x828>
 8008e48:	9a00      	ldr	r2, [sp, #0]
 8008e4a:	331c      	adds	r3, #28
 8008e4c:	441a      	add	r2, r3
 8008e4e:	9200      	str	r2, [sp, #0]
 8008e50:	9a06      	ldr	r2, [sp, #24]
 8008e52:	441a      	add	r2, r3
 8008e54:	441e      	add	r6, r3
 8008e56:	9206      	str	r2, [sp, #24]
 8008e58:	e78a      	b.n	8008d70 <_dtoa_r+0x828>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	e7f4      	b.n	8008e48 <_dtoa_r+0x900>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	46b8      	mov	r8, r7
 8008e64:	dc20      	bgt.n	8008ea8 <_dtoa_r+0x960>
 8008e66:	469b      	mov	fp, r3
 8008e68:	9b07      	ldr	r3, [sp, #28]
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	dd1e      	ble.n	8008eac <_dtoa_r+0x964>
 8008e6e:	f1bb 0f00 	cmp.w	fp, #0
 8008e72:	f47f adb1 	bne.w	80089d8 <_dtoa_r+0x490>
 8008e76:	4621      	mov	r1, r4
 8008e78:	465b      	mov	r3, fp
 8008e7a:	2205      	movs	r2, #5
 8008e7c:	4648      	mov	r0, r9
 8008e7e:	f000 fc39 	bl	80096f4 <__multadd>
 8008e82:	4601      	mov	r1, r0
 8008e84:	4604      	mov	r4, r0
 8008e86:	9802      	ldr	r0, [sp, #8]
 8008e88:	f000 fe44 	bl	8009b14 <__mcmp>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	f77f ada3 	ble.w	80089d8 <_dtoa_r+0x490>
 8008e92:	4656      	mov	r6, sl
 8008e94:	2331      	movs	r3, #49	@ 0x31
 8008e96:	f806 3b01 	strb.w	r3, [r6], #1
 8008e9a:	f108 0801 	add.w	r8, r8, #1
 8008e9e:	e59f      	b.n	80089e0 <_dtoa_r+0x498>
 8008ea0:	9c03      	ldr	r4, [sp, #12]
 8008ea2:	46b8      	mov	r8, r7
 8008ea4:	4625      	mov	r5, r4
 8008ea6:	e7f4      	b.n	8008e92 <_dtoa_r+0x94a>
 8008ea8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f000 8101 	beq.w	80090b6 <_dtoa_r+0xb6e>
 8008eb4:	2e00      	cmp	r6, #0
 8008eb6:	dd05      	ble.n	8008ec4 <_dtoa_r+0x97c>
 8008eb8:	4629      	mov	r1, r5
 8008eba:	4632      	mov	r2, r6
 8008ebc:	4648      	mov	r0, r9
 8008ebe:	f000 fdbd 	bl	8009a3c <__lshift>
 8008ec2:	4605      	mov	r5, r0
 8008ec4:	9b08      	ldr	r3, [sp, #32]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d05c      	beq.n	8008f84 <_dtoa_r+0xa3c>
 8008eca:	6869      	ldr	r1, [r5, #4]
 8008ecc:	4648      	mov	r0, r9
 8008ece:	f000 fbaf 	bl	8009630 <_Balloc>
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	b928      	cbnz	r0, 8008ee2 <_dtoa_r+0x99a>
 8008ed6:	4b82      	ldr	r3, [pc, #520]	@ (80090e0 <_dtoa_r+0xb98>)
 8008ed8:	4602      	mov	r2, r0
 8008eda:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ede:	f7ff bb4a 	b.w	8008576 <_dtoa_r+0x2e>
 8008ee2:	692a      	ldr	r2, [r5, #16]
 8008ee4:	3202      	adds	r2, #2
 8008ee6:	0092      	lsls	r2, r2, #2
 8008ee8:	f105 010c 	add.w	r1, r5, #12
 8008eec:	300c      	adds	r0, #12
 8008eee:	f7ff fa77 	bl	80083e0 <memcpy>
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4648      	mov	r0, r9
 8008ef8:	f000 fda0 	bl	8009a3c <__lshift>
 8008efc:	f10a 0301 	add.w	r3, sl, #1
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	eb0a 030b 	add.w	r3, sl, fp
 8008f06:	9308      	str	r3, [sp, #32]
 8008f08:	9b04      	ldr	r3, [sp, #16]
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	462f      	mov	r7, r5
 8008f10:	9306      	str	r3, [sp, #24]
 8008f12:	4605      	mov	r5, r0
 8008f14:	9b00      	ldr	r3, [sp, #0]
 8008f16:	9802      	ldr	r0, [sp, #8]
 8008f18:	4621      	mov	r1, r4
 8008f1a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008f1e:	f7ff fa8b 	bl	8008438 <quorem>
 8008f22:	4603      	mov	r3, r0
 8008f24:	3330      	adds	r3, #48	@ 0x30
 8008f26:	9003      	str	r0, [sp, #12]
 8008f28:	4639      	mov	r1, r7
 8008f2a:	9802      	ldr	r0, [sp, #8]
 8008f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f2e:	f000 fdf1 	bl	8009b14 <__mcmp>
 8008f32:	462a      	mov	r2, r5
 8008f34:	9004      	str	r0, [sp, #16]
 8008f36:	4621      	mov	r1, r4
 8008f38:	4648      	mov	r0, r9
 8008f3a:	f000 fe07 	bl	8009b4c <__mdiff>
 8008f3e:	68c2      	ldr	r2, [r0, #12]
 8008f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f42:	4606      	mov	r6, r0
 8008f44:	bb02      	cbnz	r2, 8008f88 <_dtoa_r+0xa40>
 8008f46:	4601      	mov	r1, r0
 8008f48:	9802      	ldr	r0, [sp, #8]
 8008f4a:	f000 fde3 	bl	8009b14 <__mcmp>
 8008f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f50:	4602      	mov	r2, r0
 8008f52:	4631      	mov	r1, r6
 8008f54:	4648      	mov	r0, r9
 8008f56:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f5a:	f000 fba9 	bl	80096b0 <_Bfree>
 8008f5e:	9b07      	ldr	r3, [sp, #28]
 8008f60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f62:	9e00      	ldr	r6, [sp, #0]
 8008f64:	ea42 0103 	orr.w	r1, r2, r3
 8008f68:	9b06      	ldr	r3, [sp, #24]
 8008f6a:	4319      	orrs	r1, r3
 8008f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f6e:	d10d      	bne.n	8008f8c <_dtoa_r+0xa44>
 8008f70:	2b39      	cmp	r3, #57	@ 0x39
 8008f72:	d027      	beq.n	8008fc4 <_dtoa_r+0xa7c>
 8008f74:	9a04      	ldr	r2, [sp, #16]
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	dd01      	ble.n	8008f7e <_dtoa_r+0xa36>
 8008f7a:	9b03      	ldr	r3, [sp, #12]
 8008f7c:	3331      	adds	r3, #49	@ 0x31
 8008f7e:	f88b 3000 	strb.w	r3, [fp]
 8008f82:	e52e      	b.n	80089e2 <_dtoa_r+0x49a>
 8008f84:	4628      	mov	r0, r5
 8008f86:	e7b9      	b.n	8008efc <_dtoa_r+0x9b4>
 8008f88:	2201      	movs	r2, #1
 8008f8a:	e7e2      	b.n	8008f52 <_dtoa_r+0xa0a>
 8008f8c:	9904      	ldr	r1, [sp, #16]
 8008f8e:	2900      	cmp	r1, #0
 8008f90:	db04      	blt.n	8008f9c <_dtoa_r+0xa54>
 8008f92:	9807      	ldr	r0, [sp, #28]
 8008f94:	4301      	orrs	r1, r0
 8008f96:	9806      	ldr	r0, [sp, #24]
 8008f98:	4301      	orrs	r1, r0
 8008f9a:	d120      	bne.n	8008fde <_dtoa_r+0xa96>
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	ddee      	ble.n	8008f7e <_dtoa_r+0xa36>
 8008fa0:	9902      	ldr	r1, [sp, #8]
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	4648      	mov	r0, r9
 8008fa8:	f000 fd48 	bl	8009a3c <__lshift>
 8008fac:	4621      	mov	r1, r4
 8008fae:	9002      	str	r0, [sp, #8]
 8008fb0:	f000 fdb0 	bl	8009b14 <__mcmp>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	9b00      	ldr	r3, [sp, #0]
 8008fb8:	dc02      	bgt.n	8008fc0 <_dtoa_r+0xa78>
 8008fba:	d1e0      	bne.n	8008f7e <_dtoa_r+0xa36>
 8008fbc:	07da      	lsls	r2, r3, #31
 8008fbe:	d5de      	bpl.n	8008f7e <_dtoa_r+0xa36>
 8008fc0:	2b39      	cmp	r3, #57	@ 0x39
 8008fc2:	d1da      	bne.n	8008f7a <_dtoa_r+0xa32>
 8008fc4:	2339      	movs	r3, #57	@ 0x39
 8008fc6:	f88b 3000 	strb.w	r3, [fp]
 8008fca:	4633      	mov	r3, r6
 8008fcc:	461e      	mov	r6, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008fd4:	2a39      	cmp	r2, #57	@ 0x39
 8008fd6:	d04e      	beq.n	8009076 <_dtoa_r+0xb2e>
 8008fd8:	3201      	adds	r2, #1
 8008fda:	701a      	strb	r2, [r3, #0]
 8008fdc:	e501      	b.n	80089e2 <_dtoa_r+0x49a>
 8008fde:	2a00      	cmp	r2, #0
 8008fe0:	dd03      	ble.n	8008fea <_dtoa_r+0xaa2>
 8008fe2:	2b39      	cmp	r3, #57	@ 0x39
 8008fe4:	d0ee      	beq.n	8008fc4 <_dtoa_r+0xa7c>
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	e7c9      	b.n	8008f7e <_dtoa_r+0xa36>
 8008fea:	9a00      	ldr	r2, [sp, #0]
 8008fec:	9908      	ldr	r1, [sp, #32]
 8008fee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008ff2:	428a      	cmp	r2, r1
 8008ff4:	d028      	beq.n	8009048 <_dtoa_r+0xb00>
 8008ff6:	9902      	ldr	r1, [sp, #8]
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	220a      	movs	r2, #10
 8008ffc:	4648      	mov	r0, r9
 8008ffe:	f000 fb79 	bl	80096f4 <__multadd>
 8009002:	42af      	cmp	r7, r5
 8009004:	9002      	str	r0, [sp, #8]
 8009006:	f04f 0300 	mov.w	r3, #0
 800900a:	f04f 020a 	mov.w	r2, #10
 800900e:	4639      	mov	r1, r7
 8009010:	4648      	mov	r0, r9
 8009012:	d107      	bne.n	8009024 <_dtoa_r+0xadc>
 8009014:	f000 fb6e 	bl	80096f4 <__multadd>
 8009018:	4607      	mov	r7, r0
 800901a:	4605      	mov	r5, r0
 800901c:	9b00      	ldr	r3, [sp, #0]
 800901e:	3301      	adds	r3, #1
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	e777      	b.n	8008f14 <_dtoa_r+0x9cc>
 8009024:	f000 fb66 	bl	80096f4 <__multadd>
 8009028:	4629      	mov	r1, r5
 800902a:	4607      	mov	r7, r0
 800902c:	2300      	movs	r3, #0
 800902e:	220a      	movs	r2, #10
 8009030:	4648      	mov	r0, r9
 8009032:	f000 fb5f 	bl	80096f4 <__multadd>
 8009036:	4605      	mov	r5, r0
 8009038:	e7f0      	b.n	800901c <_dtoa_r+0xad4>
 800903a:	f1bb 0f00 	cmp.w	fp, #0
 800903e:	bfcc      	ite	gt
 8009040:	465e      	movgt	r6, fp
 8009042:	2601      	movle	r6, #1
 8009044:	4456      	add	r6, sl
 8009046:	2700      	movs	r7, #0
 8009048:	9902      	ldr	r1, [sp, #8]
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	2201      	movs	r2, #1
 800904e:	4648      	mov	r0, r9
 8009050:	f000 fcf4 	bl	8009a3c <__lshift>
 8009054:	4621      	mov	r1, r4
 8009056:	9002      	str	r0, [sp, #8]
 8009058:	f000 fd5c 	bl	8009b14 <__mcmp>
 800905c:	2800      	cmp	r0, #0
 800905e:	dcb4      	bgt.n	8008fca <_dtoa_r+0xa82>
 8009060:	d102      	bne.n	8009068 <_dtoa_r+0xb20>
 8009062:	9b00      	ldr	r3, [sp, #0]
 8009064:	07db      	lsls	r3, r3, #31
 8009066:	d4b0      	bmi.n	8008fca <_dtoa_r+0xa82>
 8009068:	4633      	mov	r3, r6
 800906a:	461e      	mov	r6, r3
 800906c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009070:	2a30      	cmp	r2, #48	@ 0x30
 8009072:	d0fa      	beq.n	800906a <_dtoa_r+0xb22>
 8009074:	e4b5      	b.n	80089e2 <_dtoa_r+0x49a>
 8009076:	459a      	cmp	sl, r3
 8009078:	d1a8      	bne.n	8008fcc <_dtoa_r+0xa84>
 800907a:	2331      	movs	r3, #49	@ 0x31
 800907c:	f108 0801 	add.w	r8, r8, #1
 8009080:	f88a 3000 	strb.w	r3, [sl]
 8009084:	e4ad      	b.n	80089e2 <_dtoa_r+0x49a>
 8009086:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009088:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80090e4 <_dtoa_r+0xb9c>
 800908c:	b11b      	cbz	r3, 8009096 <_dtoa_r+0xb4e>
 800908e:	f10a 0308 	add.w	r3, sl, #8
 8009092:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	4650      	mov	r0, sl
 8009098:	b017      	add	sp, #92	@ 0x5c
 800909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800909e:	9b07      	ldr	r3, [sp, #28]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	f77f ae2e 	ble.w	8008d02 <_dtoa_r+0x7ba>
 80090a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090a8:	9308      	str	r3, [sp, #32]
 80090aa:	2001      	movs	r0, #1
 80090ac:	e64d      	b.n	8008d4a <_dtoa_r+0x802>
 80090ae:	f1bb 0f00 	cmp.w	fp, #0
 80090b2:	f77f aed9 	ble.w	8008e68 <_dtoa_r+0x920>
 80090b6:	4656      	mov	r6, sl
 80090b8:	9802      	ldr	r0, [sp, #8]
 80090ba:	4621      	mov	r1, r4
 80090bc:	f7ff f9bc 	bl	8008438 <quorem>
 80090c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80090c4:	f806 3b01 	strb.w	r3, [r6], #1
 80090c8:	eba6 020a 	sub.w	r2, r6, sl
 80090cc:	4593      	cmp	fp, r2
 80090ce:	ddb4      	ble.n	800903a <_dtoa_r+0xaf2>
 80090d0:	9902      	ldr	r1, [sp, #8]
 80090d2:	2300      	movs	r3, #0
 80090d4:	220a      	movs	r2, #10
 80090d6:	4648      	mov	r0, r9
 80090d8:	f000 fb0c 	bl	80096f4 <__multadd>
 80090dc:	9002      	str	r0, [sp, #8]
 80090de:	e7eb      	b.n	80090b8 <_dtoa_r+0xb70>
 80090e0:	0800a524 	.word	0x0800a524
 80090e4:	0800a4bf 	.word	0x0800a4bf

080090e8 <__sfputc_r>:
 80090e8:	6893      	ldr	r3, [r2, #8]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	b410      	push	{r4}
 80090f0:	6093      	str	r3, [r2, #8]
 80090f2:	da08      	bge.n	8009106 <__sfputc_r+0x1e>
 80090f4:	6994      	ldr	r4, [r2, #24]
 80090f6:	42a3      	cmp	r3, r4
 80090f8:	db01      	blt.n	80090fe <__sfputc_r+0x16>
 80090fa:	290a      	cmp	r1, #10
 80090fc:	d103      	bne.n	8009106 <__sfputc_r+0x1e>
 80090fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009102:	f000 be65 	b.w	8009dd0 <__swbuf_r>
 8009106:	6813      	ldr	r3, [r2, #0]
 8009108:	1c58      	adds	r0, r3, #1
 800910a:	6010      	str	r0, [r2, #0]
 800910c:	7019      	strb	r1, [r3, #0]
 800910e:	4608      	mov	r0, r1
 8009110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009114:	4770      	bx	lr

08009116 <__sfputs_r>:
 8009116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009118:	4606      	mov	r6, r0
 800911a:	460f      	mov	r7, r1
 800911c:	4614      	mov	r4, r2
 800911e:	18d5      	adds	r5, r2, r3
 8009120:	42ac      	cmp	r4, r5
 8009122:	d101      	bne.n	8009128 <__sfputs_r+0x12>
 8009124:	2000      	movs	r0, #0
 8009126:	e007      	b.n	8009138 <__sfputs_r+0x22>
 8009128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800912c:	463a      	mov	r2, r7
 800912e:	4630      	mov	r0, r6
 8009130:	f7ff ffda 	bl	80090e8 <__sfputc_r>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d1f3      	bne.n	8009120 <__sfputs_r+0xa>
 8009138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800913c <_vfiprintf_r>:
 800913c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009140:	460d      	mov	r5, r1
 8009142:	b09d      	sub	sp, #116	@ 0x74
 8009144:	4614      	mov	r4, r2
 8009146:	4698      	mov	r8, r3
 8009148:	4606      	mov	r6, r0
 800914a:	b118      	cbz	r0, 8009154 <_vfiprintf_r+0x18>
 800914c:	6a03      	ldr	r3, [r0, #32]
 800914e:	b90b      	cbnz	r3, 8009154 <_vfiprintf_r+0x18>
 8009150:	f7ff f866 	bl	8008220 <__sinit>
 8009154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009156:	07d9      	lsls	r1, r3, #31
 8009158:	d405      	bmi.n	8009166 <_vfiprintf_r+0x2a>
 800915a:	89ab      	ldrh	r3, [r5, #12]
 800915c:	059a      	lsls	r2, r3, #22
 800915e:	d402      	bmi.n	8009166 <_vfiprintf_r+0x2a>
 8009160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009162:	f7ff f936 	bl	80083d2 <__retarget_lock_acquire_recursive>
 8009166:	89ab      	ldrh	r3, [r5, #12]
 8009168:	071b      	lsls	r3, r3, #28
 800916a:	d501      	bpl.n	8009170 <_vfiprintf_r+0x34>
 800916c:	692b      	ldr	r3, [r5, #16]
 800916e:	b99b      	cbnz	r3, 8009198 <_vfiprintf_r+0x5c>
 8009170:	4629      	mov	r1, r5
 8009172:	4630      	mov	r0, r6
 8009174:	f000 fe6a 	bl	8009e4c <__swsetup_r>
 8009178:	b170      	cbz	r0, 8009198 <_vfiprintf_r+0x5c>
 800917a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800917c:	07dc      	lsls	r4, r3, #31
 800917e:	d504      	bpl.n	800918a <_vfiprintf_r+0x4e>
 8009180:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009184:	b01d      	add	sp, #116	@ 0x74
 8009186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800918a:	89ab      	ldrh	r3, [r5, #12]
 800918c:	0598      	lsls	r0, r3, #22
 800918e:	d4f7      	bmi.n	8009180 <_vfiprintf_r+0x44>
 8009190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009192:	f7ff f91f 	bl	80083d4 <__retarget_lock_release_recursive>
 8009196:	e7f3      	b.n	8009180 <_vfiprintf_r+0x44>
 8009198:	2300      	movs	r3, #0
 800919a:	9309      	str	r3, [sp, #36]	@ 0x24
 800919c:	2320      	movs	r3, #32
 800919e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80091a6:	2330      	movs	r3, #48	@ 0x30
 80091a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009358 <_vfiprintf_r+0x21c>
 80091ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091b0:	f04f 0901 	mov.w	r9, #1
 80091b4:	4623      	mov	r3, r4
 80091b6:	469a      	mov	sl, r3
 80091b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091bc:	b10a      	cbz	r2, 80091c2 <_vfiprintf_r+0x86>
 80091be:	2a25      	cmp	r2, #37	@ 0x25
 80091c0:	d1f9      	bne.n	80091b6 <_vfiprintf_r+0x7a>
 80091c2:	ebba 0b04 	subs.w	fp, sl, r4
 80091c6:	d00b      	beq.n	80091e0 <_vfiprintf_r+0xa4>
 80091c8:	465b      	mov	r3, fp
 80091ca:	4622      	mov	r2, r4
 80091cc:	4629      	mov	r1, r5
 80091ce:	4630      	mov	r0, r6
 80091d0:	f7ff ffa1 	bl	8009116 <__sfputs_r>
 80091d4:	3001      	adds	r0, #1
 80091d6:	f000 80a7 	beq.w	8009328 <_vfiprintf_r+0x1ec>
 80091da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091dc:	445a      	add	r2, fp
 80091de:	9209      	str	r2, [sp, #36]	@ 0x24
 80091e0:	f89a 3000 	ldrb.w	r3, [sl]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 809f 	beq.w	8009328 <_vfiprintf_r+0x1ec>
 80091ea:	2300      	movs	r3, #0
 80091ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80091f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091f4:	f10a 0a01 	add.w	sl, sl, #1
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	9307      	str	r3, [sp, #28]
 80091fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009200:	931a      	str	r3, [sp, #104]	@ 0x68
 8009202:	4654      	mov	r4, sl
 8009204:	2205      	movs	r2, #5
 8009206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800920a:	4853      	ldr	r0, [pc, #332]	@ (8009358 <_vfiprintf_r+0x21c>)
 800920c:	f7f6 ffe0 	bl	80001d0 <memchr>
 8009210:	9a04      	ldr	r2, [sp, #16]
 8009212:	b9d8      	cbnz	r0, 800924c <_vfiprintf_r+0x110>
 8009214:	06d1      	lsls	r1, r2, #27
 8009216:	bf44      	itt	mi
 8009218:	2320      	movmi	r3, #32
 800921a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800921e:	0713      	lsls	r3, r2, #28
 8009220:	bf44      	itt	mi
 8009222:	232b      	movmi	r3, #43	@ 0x2b
 8009224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009228:	f89a 3000 	ldrb.w	r3, [sl]
 800922c:	2b2a      	cmp	r3, #42	@ 0x2a
 800922e:	d015      	beq.n	800925c <_vfiprintf_r+0x120>
 8009230:	9a07      	ldr	r2, [sp, #28]
 8009232:	4654      	mov	r4, sl
 8009234:	2000      	movs	r0, #0
 8009236:	f04f 0c0a 	mov.w	ip, #10
 800923a:	4621      	mov	r1, r4
 800923c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009240:	3b30      	subs	r3, #48	@ 0x30
 8009242:	2b09      	cmp	r3, #9
 8009244:	d94b      	bls.n	80092de <_vfiprintf_r+0x1a2>
 8009246:	b1b0      	cbz	r0, 8009276 <_vfiprintf_r+0x13a>
 8009248:	9207      	str	r2, [sp, #28]
 800924a:	e014      	b.n	8009276 <_vfiprintf_r+0x13a>
 800924c:	eba0 0308 	sub.w	r3, r0, r8
 8009250:	fa09 f303 	lsl.w	r3, r9, r3
 8009254:	4313      	orrs	r3, r2
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	46a2      	mov	sl, r4
 800925a:	e7d2      	b.n	8009202 <_vfiprintf_r+0xc6>
 800925c:	9b03      	ldr	r3, [sp, #12]
 800925e:	1d19      	adds	r1, r3, #4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	9103      	str	r1, [sp, #12]
 8009264:	2b00      	cmp	r3, #0
 8009266:	bfbb      	ittet	lt
 8009268:	425b      	neglt	r3, r3
 800926a:	f042 0202 	orrlt.w	r2, r2, #2
 800926e:	9307      	strge	r3, [sp, #28]
 8009270:	9307      	strlt	r3, [sp, #28]
 8009272:	bfb8      	it	lt
 8009274:	9204      	strlt	r2, [sp, #16]
 8009276:	7823      	ldrb	r3, [r4, #0]
 8009278:	2b2e      	cmp	r3, #46	@ 0x2e
 800927a:	d10a      	bne.n	8009292 <_vfiprintf_r+0x156>
 800927c:	7863      	ldrb	r3, [r4, #1]
 800927e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009280:	d132      	bne.n	80092e8 <_vfiprintf_r+0x1ac>
 8009282:	9b03      	ldr	r3, [sp, #12]
 8009284:	1d1a      	adds	r2, r3, #4
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	9203      	str	r2, [sp, #12]
 800928a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800928e:	3402      	adds	r4, #2
 8009290:	9305      	str	r3, [sp, #20]
 8009292:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009368 <_vfiprintf_r+0x22c>
 8009296:	7821      	ldrb	r1, [r4, #0]
 8009298:	2203      	movs	r2, #3
 800929a:	4650      	mov	r0, sl
 800929c:	f7f6 ff98 	bl	80001d0 <memchr>
 80092a0:	b138      	cbz	r0, 80092b2 <_vfiprintf_r+0x176>
 80092a2:	9b04      	ldr	r3, [sp, #16]
 80092a4:	eba0 000a 	sub.w	r0, r0, sl
 80092a8:	2240      	movs	r2, #64	@ 0x40
 80092aa:	4082      	lsls	r2, r0
 80092ac:	4313      	orrs	r3, r2
 80092ae:	3401      	adds	r4, #1
 80092b0:	9304      	str	r3, [sp, #16]
 80092b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b6:	4829      	ldr	r0, [pc, #164]	@ (800935c <_vfiprintf_r+0x220>)
 80092b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092bc:	2206      	movs	r2, #6
 80092be:	f7f6 ff87 	bl	80001d0 <memchr>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d03f      	beq.n	8009346 <_vfiprintf_r+0x20a>
 80092c6:	4b26      	ldr	r3, [pc, #152]	@ (8009360 <_vfiprintf_r+0x224>)
 80092c8:	bb1b      	cbnz	r3, 8009312 <_vfiprintf_r+0x1d6>
 80092ca:	9b03      	ldr	r3, [sp, #12]
 80092cc:	3307      	adds	r3, #7
 80092ce:	f023 0307 	bic.w	r3, r3, #7
 80092d2:	3308      	adds	r3, #8
 80092d4:	9303      	str	r3, [sp, #12]
 80092d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d8:	443b      	add	r3, r7
 80092da:	9309      	str	r3, [sp, #36]	@ 0x24
 80092dc:	e76a      	b.n	80091b4 <_vfiprintf_r+0x78>
 80092de:	fb0c 3202 	mla	r2, ip, r2, r3
 80092e2:	460c      	mov	r4, r1
 80092e4:	2001      	movs	r0, #1
 80092e6:	e7a8      	b.n	800923a <_vfiprintf_r+0xfe>
 80092e8:	2300      	movs	r3, #0
 80092ea:	3401      	adds	r4, #1
 80092ec:	9305      	str	r3, [sp, #20]
 80092ee:	4619      	mov	r1, r3
 80092f0:	f04f 0c0a 	mov.w	ip, #10
 80092f4:	4620      	mov	r0, r4
 80092f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092fa:	3a30      	subs	r2, #48	@ 0x30
 80092fc:	2a09      	cmp	r2, #9
 80092fe:	d903      	bls.n	8009308 <_vfiprintf_r+0x1cc>
 8009300:	2b00      	cmp	r3, #0
 8009302:	d0c6      	beq.n	8009292 <_vfiprintf_r+0x156>
 8009304:	9105      	str	r1, [sp, #20]
 8009306:	e7c4      	b.n	8009292 <_vfiprintf_r+0x156>
 8009308:	fb0c 2101 	mla	r1, ip, r1, r2
 800930c:	4604      	mov	r4, r0
 800930e:	2301      	movs	r3, #1
 8009310:	e7f0      	b.n	80092f4 <_vfiprintf_r+0x1b8>
 8009312:	ab03      	add	r3, sp, #12
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	462a      	mov	r2, r5
 8009318:	4b12      	ldr	r3, [pc, #72]	@ (8009364 <_vfiprintf_r+0x228>)
 800931a:	a904      	add	r1, sp, #16
 800931c:	4630      	mov	r0, r6
 800931e:	f7fe faff 	bl	8007920 <_printf_float>
 8009322:	4607      	mov	r7, r0
 8009324:	1c78      	adds	r0, r7, #1
 8009326:	d1d6      	bne.n	80092d6 <_vfiprintf_r+0x19a>
 8009328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800932a:	07d9      	lsls	r1, r3, #31
 800932c:	d405      	bmi.n	800933a <_vfiprintf_r+0x1fe>
 800932e:	89ab      	ldrh	r3, [r5, #12]
 8009330:	059a      	lsls	r2, r3, #22
 8009332:	d402      	bmi.n	800933a <_vfiprintf_r+0x1fe>
 8009334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009336:	f7ff f84d 	bl	80083d4 <__retarget_lock_release_recursive>
 800933a:	89ab      	ldrh	r3, [r5, #12]
 800933c:	065b      	lsls	r3, r3, #25
 800933e:	f53f af1f 	bmi.w	8009180 <_vfiprintf_r+0x44>
 8009342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009344:	e71e      	b.n	8009184 <_vfiprintf_r+0x48>
 8009346:	ab03      	add	r3, sp, #12
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	462a      	mov	r2, r5
 800934c:	4b05      	ldr	r3, [pc, #20]	@ (8009364 <_vfiprintf_r+0x228>)
 800934e:	a904      	add	r1, sp, #16
 8009350:	4630      	mov	r0, r6
 8009352:	f7fe fd7d 	bl	8007e50 <_printf_i>
 8009356:	e7e4      	b.n	8009322 <_vfiprintf_r+0x1e6>
 8009358:	0800a535 	.word	0x0800a535
 800935c:	0800a53f 	.word	0x0800a53f
 8009360:	08007921 	.word	0x08007921
 8009364:	08009117 	.word	0x08009117
 8009368:	0800a53b 	.word	0x0800a53b

0800936c <malloc>:
 800936c:	4b02      	ldr	r3, [pc, #8]	@ (8009378 <malloc+0xc>)
 800936e:	4601      	mov	r1, r0
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	f000 b825 	b.w	80093c0 <_malloc_r>
 8009376:	bf00      	nop
 8009378:	200000dc 	.word	0x200000dc

0800937c <sbrk_aligned>:
 800937c:	b570      	push	{r4, r5, r6, lr}
 800937e:	4e0f      	ldr	r6, [pc, #60]	@ (80093bc <sbrk_aligned+0x40>)
 8009380:	460c      	mov	r4, r1
 8009382:	6831      	ldr	r1, [r6, #0]
 8009384:	4605      	mov	r5, r0
 8009386:	b911      	cbnz	r1, 800938e <sbrk_aligned+0x12>
 8009388:	f000 fe4c 	bl	800a024 <_sbrk_r>
 800938c:	6030      	str	r0, [r6, #0]
 800938e:	4621      	mov	r1, r4
 8009390:	4628      	mov	r0, r5
 8009392:	f000 fe47 	bl	800a024 <_sbrk_r>
 8009396:	1c43      	adds	r3, r0, #1
 8009398:	d103      	bne.n	80093a2 <sbrk_aligned+0x26>
 800939a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800939e:	4620      	mov	r0, r4
 80093a0:	bd70      	pop	{r4, r5, r6, pc}
 80093a2:	1cc4      	adds	r4, r0, #3
 80093a4:	f024 0403 	bic.w	r4, r4, #3
 80093a8:	42a0      	cmp	r0, r4
 80093aa:	d0f8      	beq.n	800939e <sbrk_aligned+0x22>
 80093ac:	1a21      	subs	r1, r4, r0
 80093ae:	4628      	mov	r0, r5
 80093b0:	f000 fe38 	bl	800a024 <_sbrk_r>
 80093b4:	3001      	adds	r0, #1
 80093b6:	d1f2      	bne.n	800939e <sbrk_aligned+0x22>
 80093b8:	e7ef      	b.n	800939a <sbrk_aligned+0x1e>
 80093ba:	bf00      	nop
 80093bc:	20000bb8 	.word	0x20000bb8

080093c0 <_malloc_r>:
 80093c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c4:	1ccd      	adds	r5, r1, #3
 80093c6:	f025 0503 	bic.w	r5, r5, #3
 80093ca:	3508      	adds	r5, #8
 80093cc:	2d0c      	cmp	r5, #12
 80093ce:	bf38      	it	cc
 80093d0:	250c      	movcc	r5, #12
 80093d2:	2d00      	cmp	r5, #0
 80093d4:	4606      	mov	r6, r0
 80093d6:	db01      	blt.n	80093dc <_malloc_r+0x1c>
 80093d8:	42a9      	cmp	r1, r5
 80093da:	d904      	bls.n	80093e6 <_malloc_r+0x26>
 80093dc:	230c      	movs	r3, #12
 80093de:	6033      	str	r3, [r6, #0]
 80093e0:	2000      	movs	r0, #0
 80093e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094bc <_malloc_r+0xfc>
 80093ea:	f000 f915 	bl	8009618 <__malloc_lock>
 80093ee:	f8d8 3000 	ldr.w	r3, [r8]
 80093f2:	461c      	mov	r4, r3
 80093f4:	bb44      	cbnz	r4, 8009448 <_malloc_r+0x88>
 80093f6:	4629      	mov	r1, r5
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff ffbf 	bl	800937c <sbrk_aligned>
 80093fe:	1c43      	adds	r3, r0, #1
 8009400:	4604      	mov	r4, r0
 8009402:	d158      	bne.n	80094b6 <_malloc_r+0xf6>
 8009404:	f8d8 4000 	ldr.w	r4, [r8]
 8009408:	4627      	mov	r7, r4
 800940a:	2f00      	cmp	r7, #0
 800940c:	d143      	bne.n	8009496 <_malloc_r+0xd6>
 800940e:	2c00      	cmp	r4, #0
 8009410:	d04b      	beq.n	80094aa <_malloc_r+0xea>
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	4639      	mov	r1, r7
 8009416:	4630      	mov	r0, r6
 8009418:	eb04 0903 	add.w	r9, r4, r3
 800941c:	f000 fe02 	bl	800a024 <_sbrk_r>
 8009420:	4581      	cmp	r9, r0
 8009422:	d142      	bne.n	80094aa <_malloc_r+0xea>
 8009424:	6821      	ldr	r1, [r4, #0]
 8009426:	1a6d      	subs	r5, r5, r1
 8009428:	4629      	mov	r1, r5
 800942a:	4630      	mov	r0, r6
 800942c:	f7ff ffa6 	bl	800937c <sbrk_aligned>
 8009430:	3001      	adds	r0, #1
 8009432:	d03a      	beq.n	80094aa <_malloc_r+0xea>
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	442b      	add	r3, r5
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	f8d8 3000 	ldr.w	r3, [r8]
 800943e:	685a      	ldr	r2, [r3, #4]
 8009440:	bb62      	cbnz	r2, 800949c <_malloc_r+0xdc>
 8009442:	f8c8 7000 	str.w	r7, [r8]
 8009446:	e00f      	b.n	8009468 <_malloc_r+0xa8>
 8009448:	6822      	ldr	r2, [r4, #0]
 800944a:	1b52      	subs	r2, r2, r5
 800944c:	d420      	bmi.n	8009490 <_malloc_r+0xd0>
 800944e:	2a0b      	cmp	r2, #11
 8009450:	d917      	bls.n	8009482 <_malloc_r+0xc2>
 8009452:	1961      	adds	r1, r4, r5
 8009454:	42a3      	cmp	r3, r4
 8009456:	6025      	str	r5, [r4, #0]
 8009458:	bf18      	it	ne
 800945a:	6059      	strne	r1, [r3, #4]
 800945c:	6863      	ldr	r3, [r4, #4]
 800945e:	bf08      	it	eq
 8009460:	f8c8 1000 	streq.w	r1, [r8]
 8009464:	5162      	str	r2, [r4, r5]
 8009466:	604b      	str	r3, [r1, #4]
 8009468:	4630      	mov	r0, r6
 800946a:	f000 f8db 	bl	8009624 <__malloc_unlock>
 800946e:	f104 000b 	add.w	r0, r4, #11
 8009472:	1d23      	adds	r3, r4, #4
 8009474:	f020 0007 	bic.w	r0, r0, #7
 8009478:	1ac2      	subs	r2, r0, r3
 800947a:	bf1c      	itt	ne
 800947c:	1a1b      	subne	r3, r3, r0
 800947e:	50a3      	strne	r3, [r4, r2]
 8009480:	e7af      	b.n	80093e2 <_malloc_r+0x22>
 8009482:	6862      	ldr	r2, [r4, #4]
 8009484:	42a3      	cmp	r3, r4
 8009486:	bf0c      	ite	eq
 8009488:	f8c8 2000 	streq.w	r2, [r8]
 800948c:	605a      	strne	r2, [r3, #4]
 800948e:	e7eb      	b.n	8009468 <_malloc_r+0xa8>
 8009490:	4623      	mov	r3, r4
 8009492:	6864      	ldr	r4, [r4, #4]
 8009494:	e7ae      	b.n	80093f4 <_malloc_r+0x34>
 8009496:	463c      	mov	r4, r7
 8009498:	687f      	ldr	r7, [r7, #4]
 800949a:	e7b6      	b.n	800940a <_malloc_r+0x4a>
 800949c:	461a      	mov	r2, r3
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	42a3      	cmp	r3, r4
 80094a2:	d1fb      	bne.n	800949c <_malloc_r+0xdc>
 80094a4:	2300      	movs	r3, #0
 80094a6:	6053      	str	r3, [r2, #4]
 80094a8:	e7de      	b.n	8009468 <_malloc_r+0xa8>
 80094aa:	230c      	movs	r3, #12
 80094ac:	6033      	str	r3, [r6, #0]
 80094ae:	4630      	mov	r0, r6
 80094b0:	f000 f8b8 	bl	8009624 <__malloc_unlock>
 80094b4:	e794      	b.n	80093e0 <_malloc_r+0x20>
 80094b6:	6005      	str	r5, [r0, #0]
 80094b8:	e7d6      	b.n	8009468 <_malloc_r+0xa8>
 80094ba:	bf00      	nop
 80094bc:	20000bbc 	.word	0x20000bbc

080094c0 <__sflush_r>:
 80094c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c8:	0716      	lsls	r6, r2, #28
 80094ca:	4605      	mov	r5, r0
 80094cc:	460c      	mov	r4, r1
 80094ce:	d454      	bmi.n	800957a <__sflush_r+0xba>
 80094d0:	684b      	ldr	r3, [r1, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	dc02      	bgt.n	80094dc <__sflush_r+0x1c>
 80094d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dd48      	ble.n	800956e <__sflush_r+0xae>
 80094dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094de:	2e00      	cmp	r6, #0
 80094e0:	d045      	beq.n	800956e <__sflush_r+0xae>
 80094e2:	2300      	movs	r3, #0
 80094e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094e8:	682f      	ldr	r7, [r5, #0]
 80094ea:	6a21      	ldr	r1, [r4, #32]
 80094ec:	602b      	str	r3, [r5, #0]
 80094ee:	d030      	beq.n	8009552 <__sflush_r+0x92>
 80094f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094f2:	89a3      	ldrh	r3, [r4, #12]
 80094f4:	0759      	lsls	r1, r3, #29
 80094f6:	d505      	bpl.n	8009504 <__sflush_r+0x44>
 80094f8:	6863      	ldr	r3, [r4, #4]
 80094fa:	1ad2      	subs	r2, r2, r3
 80094fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80094fe:	b10b      	cbz	r3, 8009504 <__sflush_r+0x44>
 8009500:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009502:	1ad2      	subs	r2, r2, r3
 8009504:	2300      	movs	r3, #0
 8009506:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009508:	6a21      	ldr	r1, [r4, #32]
 800950a:	4628      	mov	r0, r5
 800950c:	47b0      	blx	r6
 800950e:	1c43      	adds	r3, r0, #1
 8009510:	89a3      	ldrh	r3, [r4, #12]
 8009512:	d106      	bne.n	8009522 <__sflush_r+0x62>
 8009514:	6829      	ldr	r1, [r5, #0]
 8009516:	291d      	cmp	r1, #29
 8009518:	d82b      	bhi.n	8009572 <__sflush_r+0xb2>
 800951a:	4a2a      	ldr	r2, [pc, #168]	@ (80095c4 <__sflush_r+0x104>)
 800951c:	40ca      	lsrs	r2, r1
 800951e:	07d6      	lsls	r6, r2, #31
 8009520:	d527      	bpl.n	8009572 <__sflush_r+0xb2>
 8009522:	2200      	movs	r2, #0
 8009524:	6062      	str	r2, [r4, #4]
 8009526:	04d9      	lsls	r1, r3, #19
 8009528:	6922      	ldr	r2, [r4, #16]
 800952a:	6022      	str	r2, [r4, #0]
 800952c:	d504      	bpl.n	8009538 <__sflush_r+0x78>
 800952e:	1c42      	adds	r2, r0, #1
 8009530:	d101      	bne.n	8009536 <__sflush_r+0x76>
 8009532:	682b      	ldr	r3, [r5, #0]
 8009534:	b903      	cbnz	r3, 8009538 <__sflush_r+0x78>
 8009536:	6560      	str	r0, [r4, #84]	@ 0x54
 8009538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800953a:	602f      	str	r7, [r5, #0]
 800953c:	b1b9      	cbz	r1, 800956e <__sflush_r+0xae>
 800953e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009542:	4299      	cmp	r1, r3
 8009544:	d002      	beq.n	800954c <__sflush_r+0x8c>
 8009546:	4628      	mov	r0, r5
 8009548:	f000 fdcc 	bl	800a0e4 <_free_r>
 800954c:	2300      	movs	r3, #0
 800954e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009550:	e00d      	b.n	800956e <__sflush_r+0xae>
 8009552:	2301      	movs	r3, #1
 8009554:	4628      	mov	r0, r5
 8009556:	47b0      	blx	r6
 8009558:	4602      	mov	r2, r0
 800955a:	1c50      	adds	r0, r2, #1
 800955c:	d1c9      	bne.n	80094f2 <__sflush_r+0x32>
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d0c6      	beq.n	80094f2 <__sflush_r+0x32>
 8009564:	2b1d      	cmp	r3, #29
 8009566:	d001      	beq.n	800956c <__sflush_r+0xac>
 8009568:	2b16      	cmp	r3, #22
 800956a:	d11e      	bne.n	80095aa <__sflush_r+0xea>
 800956c:	602f      	str	r7, [r5, #0]
 800956e:	2000      	movs	r0, #0
 8009570:	e022      	b.n	80095b8 <__sflush_r+0xf8>
 8009572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009576:	b21b      	sxth	r3, r3
 8009578:	e01b      	b.n	80095b2 <__sflush_r+0xf2>
 800957a:	690f      	ldr	r7, [r1, #16]
 800957c:	2f00      	cmp	r7, #0
 800957e:	d0f6      	beq.n	800956e <__sflush_r+0xae>
 8009580:	0793      	lsls	r3, r2, #30
 8009582:	680e      	ldr	r6, [r1, #0]
 8009584:	bf08      	it	eq
 8009586:	694b      	ldreq	r3, [r1, #20]
 8009588:	600f      	str	r7, [r1, #0]
 800958a:	bf18      	it	ne
 800958c:	2300      	movne	r3, #0
 800958e:	eba6 0807 	sub.w	r8, r6, r7
 8009592:	608b      	str	r3, [r1, #8]
 8009594:	f1b8 0f00 	cmp.w	r8, #0
 8009598:	dde9      	ble.n	800956e <__sflush_r+0xae>
 800959a:	6a21      	ldr	r1, [r4, #32]
 800959c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800959e:	4643      	mov	r3, r8
 80095a0:	463a      	mov	r2, r7
 80095a2:	4628      	mov	r0, r5
 80095a4:	47b0      	blx	r6
 80095a6:	2800      	cmp	r0, #0
 80095a8:	dc08      	bgt.n	80095bc <__sflush_r+0xfc>
 80095aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095b2:	81a3      	strh	r3, [r4, #12]
 80095b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095bc:	4407      	add	r7, r0
 80095be:	eba8 0800 	sub.w	r8, r8, r0
 80095c2:	e7e7      	b.n	8009594 <__sflush_r+0xd4>
 80095c4:	20400001 	.word	0x20400001

080095c8 <_fflush_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	690b      	ldr	r3, [r1, #16]
 80095cc:	4605      	mov	r5, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	b913      	cbnz	r3, 80095d8 <_fflush_r+0x10>
 80095d2:	2500      	movs	r5, #0
 80095d4:	4628      	mov	r0, r5
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	b118      	cbz	r0, 80095e2 <_fflush_r+0x1a>
 80095da:	6a03      	ldr	r3, [r0, #32]
 80095dc:	b90b      	cbnz	r3, 80095e2 <_fflush_r+0x1a>
 80095de:	f7fe fe1f 	bl	8008220 <__sinit>
 80095e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0f3      	beq.n	80095d2 <_fflush_r+0xa>
 80095ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095ec:	07d0      	lsls	r0, r2, #31
 80095ee:	d404      	bmi.n	80095fa <_fflush_r+0x32>
 80095f0:	0599      	lsls	r1, r3, #22
 80095f2:	d402      	bmi.n	80095fa <_fflush_r+0x32>
 80095f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095f6:	f7fe feec 	bl	80083d2 <__retarget_lock_acquire_recursive>
 80095fa:	4628      	mov	r0, r5
 80095fc:	4621      	mov	r1, r4
 80095fe:	f7ff ff5f 	bl	80094c0 <__sflush_r>
 8009602:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009604:	07da      	lsls	r2, r3, #31
 8009606:	4605      	mov	r5, r0
 8009608:	d4e4      	bmi.n	80095d4 <_fflush_r+0xc>
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	059b      	lsls	r3, r3, #22
 800960e:	d4e1      	bmi.n	80095d4 <_fflush_r+0xc>
 8009610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009612:	f7fe fedf 	bl	80083d4 <__retarget_lock_release_recursive>
 8009616:	e7dd      	b.n	80095d4 <_fflush_r+0xc>

08009618 <__malloc_lock>:
 8009618:	4801      	ldr	r0, [pc, #4]	@ (8009620 <__malloc_lock+0x8>)
 800961a:	f7fe beda 	b.w	80083d2 <__retarget_lock_acquire_recursive>
 800961e:	bf00      	nop
 8009620:	20000bb4 	.word	0x20000bb4

08009624 <__malloc_unlock>:
 8009624:	4801      	ldr	r0, [pc, #4]	@ (800962c <__malloc_unlock+0x8>)
 8009626:	f7fe bed5 	b.w	80083d4 <__retarget_lock_release_recursive>
 800962a:	bf00      	nop
 800962c:	20000bb4 	.word	0x20000bb4

08009630 <_Balloc>:
 8009630:	b570      	push	{r4, r5, r6, lr}
 8009632:	69c6      	ldr	r6, [r0, #28]
 8009634:	4604      	mov	r4, r0
 8009636:	460d      	mov	r5, r1
 8009638:	b976      	cbnz	r6, 8009658 <_Balloc+0x28>
 800963a:	2010      	movs	r0, #16
 800963c:	f7ff fe96 	bl	800936c <malloc>
 8009640:	4602      	mov	r2, r0
 8009642:	61e0      	str	r0, [r4, #28]
 8009644:	b920      	cbnz	r0, 8009650 <_Balloc+0x20>
 8009646:	4b18      	ldr	r3, [pc, #96]	@ (80096a8 <_Balloc+0x78>)
 8009648:	4818      	ldr	r0, [pc, #96]	@ (80096ac <_Balloc+0x7c>)
 800964a:	216b      	movs	r1, #107	@ 0x6b
 800964c:	f7fe fed6 	bl	80083fc <__assert_func>
 8009650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009654:	6006      	str	r6, [r0, #0]
 8009656:	60c6      	str	r6, [r0, #12]
 8009658:	69e6      	ldr	r6, [r4, #28]
 800965a:	68f3      	ldr	r3, [r6, #12]
 800965c:	b183      	cbz	r3, 8009680 <_Balloc+0x50>
 800965e:	69e3      	ldr	r3, [r4, #28]
 8009660:	68db      	ldr	r3, [r3, #12]
 8009662:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009666:	b9b8      	cbnz	r0, 8009698 <_Balloc+0x68>
 8009668:	2101      	movs	r1, #1
 800966a:	fa01 f605 	lsl.w	r6, r1, r5
 800966e:	1d72      	adds	r2, r6, #5
 8009670:	0092      	lsls	r2, r2, #2
 8009672:	4620      	mov	r0, r4
 8009674:	f000 fd21 	bl	800a0ba <_calloc_r>
 8009678:	b160      	cbz	r0, 8009694 <_Balloc+0x64>
 800967a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800967e:	e00e      	b.n	800969e <_Balloc+0x6e>
 8009680:	2221      	movs	r2, #33	@ 0x21
 8009682:	2104      	movs	r1, #4
 8009684:	4620      	mov	r0, r4
 8009686:	f000 fd18 	bl	800a0ba <_calloc_r>
 800968a:	69e3      	ldr	r3, [r4, #28]
 800968c:	60f0      	str	r0, [r6, #12]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d1e4      	bne.n	800965e <_Balloc+0x2e>
 8009694:	2000      	movs	r0, #0
 8009696:	bd70      	pop	{r4, r5, r6, pc}
 8009698:	6802      	ldr	r2, [r0, #0]
 800969a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800969e:	2300      	movs	r3, #0
 80096a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096a4:	e7f7      	b.n	8009696 <_Balloc+0x66>
 80096a6:	bf00      	nop
 80096a8:	0800a414 	.word	0x0800a414
 80096ac:	0800a546 	.word	0x0800a546

080096b0 <_Bfree>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	69c6      	ldr	r6, [r0, #28]
 80096b4:	4605      	mov	r5, r0
 80096b6:	460c      	mov	r4, r1
 80096b8:	b976      	cbnz	r6, 80096d8 <_Bfree+0x28>
 80096ba:	2010      	movs	r0, #16
 80096bc:	f7ff fe56 	bl	800936c <malloc>
 80096c0:	4602      	mov	r2, r0
 80096c2:	61e8      	str	r0, [r5, #28]
 80096c4:	b920      	cbnz	r0, 80096d0 <_Bfree+0x20>
 80096c6:	4b09      	ldr	r3, [pc, #36]	@ (80096ec <_Bfree+0x3c>)
 80096c8:	4809      	ldr	r0, [pc, #36]	@ (80096f0 <_Bfree+0x40>)
 80096ca:	218f      	movs	r1, #143	@ 0x8f
 80096cc:	f7fe fe96 	bl	80083fc <__assert_func>
 80096d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096d4:	6006      	str	r6, [r0, #0]
 80096d6:	60c6      	str	r6, [r0, #12]
 80096d8:	b13c      	cbz	r4, 80096ea <_Bfree+0x3a>
 80096da:	69eb      	ldr	r3, [r5, #28]
 80096dc:	6862      	ldr	r2, [r4, #4]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096e4:	6021      	str	r1, [r4, #0]
 80096e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	0800a414 	.word	0x0800a414
 80096f0:	0800a546 	.word	0x0800a546

080096f4 <__multadd>:
 80096f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f8:	690d      	ldr	r5, [r1, #16]
 80096fa:	4607      	mov	r7, r0
 80096fc:	460c      	mov	r4, r1
 80096fe:	461e      	mov	r6, r3
 8009700:	f101 0c14 	add.w	ip, r1, #20
 8009704:	2000      	movs	r0, #0
 8009706:	f8dc 3000 	ldr.w	r3, [ip]
 800970a:	b299      	uxth	r1, r3
 800970c:	fb02 6101 	mla	r1, r2, r1, r6
 8009710:	0c1e      	lsrs	r6, r3, #16
 8009712:	0c0b      	lsrs	r3, r1, #16
 8009714:	fb02 3306 	mla	r3, r2, r6, r3
 8009718:	b289      	uxth	r1, r1
 800971a:	3001      	adds	r0, #1
 800971c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009720:	4285      	cmp	r5, r0
 8009722:	f84c 1b04 	str.w	r1, [ip], #4
 8009726:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800972a:	dcec      	bgt.n	8009706 <__multadd+0x12>
 800972c:	b30e      	cbz	r6, 8009772 <__multadd+0x7e>
 800972e:	68a3      	ldr	r3, [r4, #8]
 8009730:	42ab      	cmp	r3, r5
 8009732:	dc19      	bgt.n	8009768 <__multadd+0x74>
 8009734:	6861      	ldr	r1, [r4, #4]
 8009736:	4638      	mov	r0, r7
 8009738:	3101      	adds	r1, #1
 800973a:	f7ff ff79 	bl	8009630 <_Balloc>
 800973e:	4680      	mov	r8, r0
 8009740:	b928      	cbnz	r0, 800974e <__multadd+0x5a>
 8009742:	4602      	mov	r2, r0
 8009744:	4b0c      	ldr	r3, [pc, #48]	@ (8009778 <__multadd+0x84>)
 8009746:	480d      	ldr	r0, [pc, #52]	@ (800977c <__multadd+0x88>)
 8009748:	21ba      	movs	r1, #186	@ 0xba
 800974a:	f7fe fe57 	bl	80083fc <__assert_func>
 800974e:	6922      	ldr	r2, [r4, #16]
 8009750:	3202      	adds	r2, #2
 8009752:	f104 010c 	add.w	r1, r4, #12
 8009756:	0092      	lsls	r2, r2, #2
 8009758:	300c      	adds	r0, #12
 800975a:	f7fe fe41 	bl	80083e0 <memcpy>
 800975e:	4621      	mov	r1, r4
 8009760:	4638      	mov	r0, r7
 8009762:	f7ff ffa5 	bl	80096b0 <_Bfree>
 8009766:	4644      	mov	r4, r8
 8009768:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800976c:	3501      	adds	r5, #1
 800976e:	615e      	str	r6, [r3, #20]
 8009770:	6125      	str	r5, [r4, #16]
 8009772:	4620      	mov	r0, r4
 8009774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009778:	0800a524 	.word	0x0800a524
 800977c:	0800a546 	.word	0x0800a546

08009780 <__hi0bits>:
 8009780:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009784:	4603      	mov	r3, r0
 8009786:	bf36      	itet	cc
 8009788:	0403      	lslcc	r3, r0, #16
 800978a:	2000      	movcs	r0, #0
 800978c:	2010      	movcc	r0, #16
 800978e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009792:	bf3c      	itt	cc
 8009794:	021b      	lslcc	r3, r3, #8
 8009796:	3008      	addcc	r0, #8
 8009798:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800979c:	bf3c      	itt	cc
 800979e:	011b      	lslcc	r3, r3, #4
 80097a0:	3004      	addcc	r0, #4
 80097a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097a6:	bf3c      	itt	cc
 80097a8:	009b      	lslcc	r3, r3, #2
 80097aa:	3002      	addcc	r0, #2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	db05      	blt.n	80097bc <__hi0bits+0x3c>
 80097b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80097b4:	f100 0001 	add.w	r0, r0, #1
 80097b8:	bf08      	it	eq
 80097ba:	2020      	moveq	r0, #32
 80097bc:	4770      	bx	lr

080097be <__lo0bits>:
 80097be:	6803      	ldr	r3, [r0, #0]
 80097c0:	4602      	mov	r2, r0
 80097c2:	f013 0007 	ands.w	r0, r3, #7
 80097c6:	d00b      	beq.n	80097e0 <__lo0bits+0x22>
 80097c8:	07d9      	lsls	r1, r3, #31
 80097ca:	d421      	bmi.n	8009810 <__lo0bits+0x52>
 80097cc:	0798      	lsls	r0, r3, #30
 80097ce:	bf49      	itett	mi
 80097d0:	085b      	lsrmi	r3, r3, #1
 80097d2:	089b      	lsrpl	r3, r3, #2
 80097d4:	2001      	movmi	r0, #1
 80097d6:	6013      	strmi	r3, [r2, #0]
 80097d8:	bf5c      	itt	pl
 80097da:	6013      	strpl	r3, [r2, #0]
 80097dc:	2002      	movpl	r0, #2
 80097de:	4770      	bx	lr
 80097e0:	b299      	uxth	r1, r3
 80097e2:	b909      	cbnz	r1, 80097e8 <__lo0bits+0x2a>
 80097e4:	0c1b      	lsrs	r3, r3, #16
 80097e6:	2010      	movs	r0, #16
 80097e8:	b2d9      	uxtb	r1, r3
 80097ea:	b909      	cbnz	r1, 80097f0 <__lo0bits+0x32>
 80097ec:	3008      	adds	r0, #8
 80097ee:	0a1b      	lsrs	r3, r3, #8
 80097f0:	0719      	lsls	r1, r3, #28
 80097f2:	bf04      	itt	eq
 80097f4:	091b      	lsreq	r3, r3, #4
 80097f6:	3004      	addeq	r0, #4
 80097f8:	0799      	lsls	r1, r3, #30
 80097fa:	bf04      	itt	eq
 80097fc:	089b      	lsreq	r3, r3, #2
 80097fe:	3002      	addeq	r0, #2
 8009800:	07d9      	lsls	r1, r3, #31
 8009802:	d403      	bmi.n	800980c <__lo0bits+0x4e>
 8009804:	085b      	lsrs	r3, r3, #1
 8009806:	f100 0001 	add.w	r0, r0, #1
 800980a:	d003      	beq.n	8009814 <__lo0bits+0x56>
 800980c:	6013      	str	r3, [r2, #0]
 800980e:	4770      	bx	lr
 8009810:	2000      	movs	r0, #0
 8009812:	4770      	bx	lr
 8009814:	2020      	movs	r0, #32
 8009816:	4770      	bx	lr

08009818 <__i2b>:
 8009818:	b510      	push	{r4, lr}
 800981a:	460c      	mov	r4, r1
 800981c:	2101      	movs	r1, #1
 800981e:	f7ff ff07 	bl	8009630 <_Balloc>
 8009822:	4602      	mov	r2, r0
 8009824:	b928      	cbnz	r0, 8009832 <__i2b+0x1a>
 8009826:	4b05      	ldr	r3, [pc, #20]	@ (800983c <__i2b+0x24>)
 8009828:	4805      	ldr	r0, [pc, #20]	@ (8009840 <__i2b+0x28>)
 800982a:	f240 1145 	movw	r1, #325	@ 0x145
 800982e:	f7fe fde5 	bl	80083fc <__assert_func>
 8009832:	2301      	movs	r3, #1
 8009834:	6144      	str	r4, [r0, #20]
 8009836:	6103      	str	r3, [r0, #16]
 8009838:	bd10      	pop	{r4, pc}
 800983a:	bf00      	nop
 800983c:	0800a524 	.word	0x0800a524
 8009840:	0800a546 	.word	0x0800a546

08009844 <__multiply>:
 8009844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009848:	4617      	mov	r7, r2
 800984a:	690a      	ldr	r2, [r1, #16]
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	429a      	cmp	r2, r3
 8009850:	bfa8      	it	ge
 8009852:	463b      	movge	r3, r7
 8009854:	4689      	mov	r9, r1
 8009856:	bfa4      	itt	ge
 8009858:	460f      	movge	r7, r1
 800985a:	4699      	movge	r9, r3
 800985c:	693d      	ldr	r5, [r7, #16]
 800985e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	6879      	ldr	r1, [r7, #4]
 8009866:	eb05 060a 	add.w	r6, r5, sl
 800986a:	42b3      	cmp	r3, r6
 800986c:	b085      	sub	sp, #20
 800986e:	bfb8      	it	lt
 8009870:	3101      	addlt	r1, #1
 8009872:	f7ff fedd 	bl	8009630 <_Balloc>
 8009876:	b930      	cbnz	r0, 8009886 <__multiply+0x42>
 8009878:	4602      	mov	r2, r0
 800987a:	4b41      	ldr	r3, [pc, #260]	@ (8009980 <__multiply+0x13c>)
 800987c:	4841      	ldr	r0, [pc, #260]	@ (8009984 <__multiply+0x140>)
 800987e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009882:	f7fe fdbb 	bl	80083fc <__assert_func>
 8009886:	f100 0414 	add.w	r4, r0, #20
 800988a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800988e:	4623      	mov	r3, r4
 8009890:	2200      	movs	r2, #0
 8009892:	4573      	cmp	r3, lr
 8009894:	d320      	bcc.n	80098d8 <__multiply+0x94>
 8009896:	f107 0814 	add.w	r8, r7, #20
 800989a:	f109 0114 	add.w	r1, r9, #20
 800989e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80098a2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80098a6:	9302      	str	r3, [sp, #8]
 80098a8:	1beb      	subs	r3, r5, r7
 80098aa:	3b15      	subs	r3, #21
 80098ac:	f023 0303 	bic.w	r3, r3, #3
 80098b0:	3304      	adds	r3, #4
 80098b2:	3715      	adds	r7, #21
 80098b4:	42bd      	cmp	r5, r7
 80098b6:	bf38      	it	cc
 80098b8:	2304      	movcc	r3, #4
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	9b02      	ldr	r3, [sp, #8]
 80098be:	9103      	str	r1, [sp, #12]
 80098c0:	428b      	cmp	r3, r1
 80098c2:	d80c      	bhi.n	80098de <__multiply+0x9a>
 80098c4:	2e00      	cmp	r6, #0
 80098c6:	dd03      	ble.n	80098d0 <__multiply+0x8c>
 80098c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d055      	beq.n	800997c <__multiply+0x138>
 80098d0:	6106      	str	r6, [r0, #16]
 80098d2:	b005      	add	sp, #20
 80098d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d8:	f843 2b04 	str.w	r2, [r3], #4
 80098dc:	e7d9      	b.n	8009892 <__multiply+0x4e>
 80098de:	f8b1 a000 	ldrh.w	sl, [r1]
 80098e2:	f1ba 0f00 	cmp.w	sl, #0
 80098e6:	d01f      	beq.n	8009928 <__multiply+0xe4>
 80098e8:	46c4      	mov	ip, r8
 80098ea:	46a1      	mov	r9, r4
 80098ec:	2700      	movs	r7, #0
 80098ee:	f85c 2b04 	ldr.w	r2, [ip], #4
 80098f2:	f8d9 3000 	ldr.w	r3, [r9]
 80098f6:	fa1f fb82 	uxth.w	fp, r2
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009900:	443b      	add	r3, r7
 8009902:	f8d9 7000 	ldr.w	r7, [r9]
 8009906:	0c12      	lsrs	r2, r2, #16
 8009908:	0c3f      	lsrs	r7, r7, #16
 800990a:	fb0a 7202 	mla	r2, sl, r2, r7
 800990e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009912:	b29b      	uxth	r3, r3
 8009914:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009918:	4565      	cmp	r5, ip
 800991a:	f849 3b04 	str.w	r3, [r9], #4
 800991e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009922:	d8e4      	bhi.n	80098ee <__multiply+0xaa>
 8009924:	9b01      	ldr	r3, [sp, #4]
 8009926:	50e7      	str	r7, [r4, r3]
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800992e:	3104      	adds	r1, #4
 8009930:	f1b9 0f00 	cmp.w	r9, #0
 8009934:	d020      	beq.n	8009978 <__multiply+0x134>
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	4647      	mov	r7, r8
 800993a:	46a4      	mov	ip, r4
 800993c:	f04f 0a00 	mov.w	sl, #0
 8009940:	f8b7 b000 	ldrh.w	fp, [r7]
 8009944:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009948:	fb09 220b 	mla	r2, r9, fp, r2
 800994c:	4452      	add	r2, sl
 800994e:	b29b      	uxth	r3, r3
 8009950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009954:	f84c 3b04 	str.w	r3, [ip], #4
 8009958:	f857 3b04 	ldr.w	r3, [r7], #4
 800995c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009960:	f8bc 3000 	ldrh.w	r3, [ip]
 8009964:	fb09 330a 	mla	r3, r9, sl, r3
 8009968:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800996c:	42bd      	cmp	r5, r7
 800996e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009972:	d8e5      	bhi.n	8009940 <__multiply+0xfc>
 8009974:	9a01      	ldr	r2, [sp, #4]
 8009976:	50a3      	str	r3, [r4, r2]
 8009978:	3404      	adds	r4, #4
 800997a:	e79f      	b.n	80098bc <__multiply+0x78>
 800997c:	3e01      	subs	r6, #1
 800997e:	e7a1      	b.n	80098c4 <__multiply+0x80>
 8009980:	0800a524 	.word	0x0800a524
 8009984:	0800a546 	.word	0x0800a546

08009988 <__pow5mult>:
 8009988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800998c:	4615      	mov	r5, r2
 800998e:	f012 0203 	ands.w	r2, r2, #3
 8009992:	4607      	mov	r7, r0
 8009994:	460e      	mov	r6, r1
 8009996:	d007      	beq.n	80099a8 <__pow5mult+0x20>
 8009998:	4c25      	ldr	r4, [pc, #148]	@ (8009a30 <__pow5mult+0xa8>)
 800999a:	3a01      	subs	r2, #1
 800999c:	2300      	movs	r3, #0
 800999e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099a2:	f7ff fea7 	bl	80096f4 <__multadd>
 80099a6:	4606      	mov	r6, r0
 80099a8:	10ad      	asrs	r5, r5, #2
 80099aa:	d03d      	beq.n	8009a28 <__pow5mult+0xa0>
 80099ac:	69fc      	ldr	r4, [r7, #28]
 80099ae:	b97c      	cbnz	r4, 80099d0 <__pow5mult+0x48>
 80099b0:	2010      	movs	r0, #16
 80099b2:	f7ff fcdb 	bl	800936c <malloc>
 80099b6:	4602      	mov	r2, r0
 80099b8:	61f8      	str	r0, [r7, #28]
 80099ba:	b928      	cbnz	r0, 80099c8 <__pow5mult+0x40>
 80099bc:	4b1d      	ldr	r3, [pc, #116]	@ (8009a34 <__pow5mult+0xac>)
 80099be:	481e      	ldr	r0, [pc, #120]	@ (8009a38 <__pow5mult+0xb0>)
 80099c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80099c4:	f7fe fd1a 	bl	80083fc <__assert_func>
 80099c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80099cc:	6004      	str	r4, [r0, #0]
 80099ce:	60c4      	str	r4, [r0, #12]
 80099d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80099d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80099d8:	b94c      	cbnz	r4, 80099ee <__pow5mult+0x66>
 80099da:	f240 2171 	movw	r1, #625	@ 0x271
 80099de:	4638      	mov	r0, r7
 80099e0:	f7ff ff1a 	bl	8009818 <__i2b>
 80099e4:	2300      	movs	r3, #0
 80099e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80099ea:	4604      	mov	r4, r0
 80099ec:	6003      	str	r3, [r0, #0]
 80099ee:	f04f 0900 	mov.w	r9, #0
 80099f2:	07eb      	lsls	r3, r5, #31
 80099f4:	d50a      	bpl.n	8009a0c <__pow5mult+0x84>
 80099f6:	4631      	mov	r1, r6
 80099f8:	4622      	mov	r2, r4
 80099fa:	4638      	mov	r0, r7
 80099fc:	f7ff ff22 	bl	8009844 <__multiply>
 8009a00:	4631      	mov	r1, r6
 8009a02:	4680      	mov	r8, r0
 8009a04:	4638      	mov	r0, r7
 8009a06:	f7ff fe53 	bl	80096b0 <_Bfree>
 8009a0a:	4646      	mov	r6, r8
 8009a0c:	106d      	asrs	r5, r5, #1
 8009a0e:	d00b      	beq.n	8009a28 <__pow5mult+0xa0>
 8009a10:	6820      	ldr	r0, [r4, #0]
 8009a12:	b938      	cbnz	r0, 8009a24 <__pow5mult+0x9c>
 8009a14:	4622      	mov	r2, r4
 8009a16:	4621      	mov	r1, r4
 8009a18:	4638      	mov	r0, r7
 8009a1a:	f7ff ff13 	bl	8009844 <__multiply>
 8009a1e:	6020      	str	r0, [r4, #0]
 8009a20:	f8c0 9000 	str.w	r9, [r0]
 8009a24:	4604      	mov	r4, r0
 8009a26:	e7e4      	b.n	80099f2 <__pow5mult+0x6a>
 8009a28:	4630      	mov	r0, r6
 8009a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a2e:	bf00      	nop
 8009a30:	0800a5ac 	.word	0x0800a5ac
 8009a34:	0800a414 	.word	0x0800a414
 8009a38:	0800a546 	.word	0x0800a546

08009a3c <__lshift>:
 8009a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a40:	460c      	mov	r4, r1
 8009a42:	6849      	ldr	r1, [r1, #4]
 8009a44:	6923      	ldr	r3, [r4, #16]
 8009a46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	4607      	mov	r7, r0
 8009a4e:	4691      	mov	r9, r2
 8009a50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a54:	f108 0601 	add.w	r6, r8, #1
 8009a58:	42b3      	cmp	r3, r6
 8009a5a:	db0b      	blt.n	8009a74 <__lshift+0x38>
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f7ff fde7 	bl	8009630 <_Balloc>
 8009a62:	4605      	mov	r5, r0
 8009a64:	b948      	cbnz	r0, 8009a7a <__lshift+0x3e>
 8009a66:	4602      	mov	r2, r0
 8009a68:	4b28      	ldr	r3, [pc, #160]	@ (8009b0c <__lshift+0xd0>)
 8009a6a:	4829      	ldr	r0, [pc, #164]	@ (8009b10 <__lshift+0xd4>)
 8009a6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a70:	f7fe fcc4 	bl	80083fc <__assert_func>
 8009a74:	3101      	adds	r1, #1
 8009a76:	005b      	lsls	r3, r3, #1
 8009a78:	e7ee      	b.n	8009a58 <__lshift+0x1c>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	f100 0114 	add.w	r1, r0, #20
 8009a80:	f100 0210 	add.w	r2, r0, #16
 8009a84:	4618      	mov	r0, r3
 8009a86:	4553      	cmp	r3, sl
 8009a88:	db33      	blt.n	8009af2 <__lshift+0xb6>
 8009a8a:	6920      	ldr	r0, [r4, #16]
 8009a8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a90:	f104 0314 	add.w	r3, r4, #20
 8009a94:	f019 091f 	ands.w	r9, r9, #31
 8009a98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009aa0:	d02b      	beq.n	8009afa <__lshift+0xbe>
 8009aa2:	f1c9 0e20 	rsb	lr, r9, #32
 8009aa6:	468a      	mov	sl, r1
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	6818      	ldr	r0, [r3, #0]
 8009aac:	fa00 f009 	lsl.w	r0, r0, r9
 8009ab0:	4310      	orrs	r0, r2
 8009ab2:	f84a 0b04 	str.w	r0, [sl], #4
 8009ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aba:	459c      	cmp	ip, r3
 8009abc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ac0:	d8f3      	bhi.n	8009aaa <__lshift+0x6e>
 8009ac2:	ebac 0304 	sub.w	r3, ip, r4
 8009ac6:	3b15      	subs	r3, #21
 8009ac8:	f023 0303 	bic.w	r3, r3, #3
 8009acc:	3304      	adds	r3, #4
 8009ace:	f104 0015 	add.w	r0, r4, #21
 8009ad2:	4560      	cmp	r0, ip
 8009ad4:	bf88      	it	hi
 8009ad6:	2304      	movhi	r3, #4
 8009ad8:	50ca      	str	r2, [r1, r3]
 8009ada:	b10a      	cbz	r2, 8009ae0 <__lshift+0xa4>
 8009adc:	f108 0602 	add.w	r6, r8, #2
 8009ae0:	3e01      	subs	r6, #1
 8009ae2:	4638      	mov	r0, r7
 8009ae4:	612e      	str	r6, [r5, #16]
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	f7ff fde2 	bl	80096b0 <_Bfree>
 8009aec:	4628      	mov	r0, r5
 8009aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009af2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009af6:	3301      	adds	r3, #1
 8009af8:	e7c5      	b.n	8009a86 <__lshift+0x4a>
 8009afa:	3904      	subs	r1, #4
 8009afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b00:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b04:	459c      	cmp	ip, r3
 8009b06:	d8f9      	bhi.n	8009afc <__lshift+0xc0>
 8009b08:	e7ea      	b.n	8009ae0 <__lshift+0xa4>
 8009b0a:	bf00      	nop
 8009b0c:	0800a524 	.word	0x0800a524
 8009b10:	0800a546 	.word	0x0800a546

08009b14 <__mcmp>:
 8009b14:	690a      	ldr	r2, [r1, #16]
 8009b16:	4603      	mov	r3, r0
 8009b18:	6900      	ldr	r0, [r0, #16]
 8009b1a:	1a80      	subs	r0, r0, r2
 8009b1c:	b530      	push	{r4, r5, lr}
 8009b1e:	d10e      	bne.n	8009b3e <__mcmp+0x2a>
 8009b20:	3314      	adds	r3, #20
 8009b22:	3114      	adds	r1, #20
 8009b24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b34:	4295      	cmp	r5, r2
 8009b36:	d003      	beq.n	8009b40 <__mcmp+0x2c>
 8009b38:	d205      	bcs.n	8009b46 <__mcmp+0x32>
 8009b3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b3e:	bd30      	pop	{r4, r5, pc}
 8009b40:	42a3      	cmp	r3, r4
 8009b42:	d3f3      	bcc.n	8009b2c <__mcmp+0x18>
 8009b44:	e7fb      	b.n	8009b3e <__mcmp+0x2a>
 8009b46:	2001      	movs	r0, #1
 8009b48:	e7f9      	b.n	8009b3e <__mcmp+0x2a>
	...

08009b4c <__mdiff>:
 8009b4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b50:	4689      	mov	r9, r1
 8009b52:	4606      	mov	r6, r0
 8009b54:	4611      	mov	r1, r2
 8009b56:	4648      	mov	r0, r9
 8009b58:	4614      	mov	r4, r2
 8009b5a:	f7ff ffdb 	bl	8009b14 <__mcmp>
 8009b5e:	1e05      	subs	r5, r0, #0
 8009b60:	d112      	bne.n	8009b88 <__mdiff+0x3c>
 8009b62:	4629      	mov	r1, r5
 8009b64:	4630      	mov	r0, r6
 8009b66:	f7ff fd63 	bl	8009630 <_Balloc>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	b928      	cbnz	r0, 8009b7a <__mdiff+0x2e>
 8009b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8009c6c <__mdiff+0x120>)
 8009b70:	f240 2137 	movw	r1, #567	@ 0x237
 8009b74:	483e      	ldr	r0, [pc, #248]	@ (8009c70 <__mdiff+0x124>)
 8009b76:	f7fe fc41 	bl	80083fc <__assert_func>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b80:	4610      	mov	r0, r2
 8009b82:	b003      	add	sp, #12
 8009b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b88:	bfbc      	itt	lt
 8009b8a:	464b      	movlt	r3, r9
 8009b8c:	46a1      	movlt	r9, r4
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b94:	bfba      	itte	lt
 8009b96:	461c      	movlt	r4, r3
 8009b98:	2501      	movlt	r5, #1
 8009b9a:	2500      	movge	r5, #0
 8009b9c:	f7ff fd48 	bl	8009630 <_Balloc>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	b918      	cbnz	r0, 8009bac <__mdiff+0x60>
 8009ba4:	4b31      	ldr	r3, [pc, #196]	@ (8009c6c <__mdiff+0x120>)
 8009ba6:	f240 2145 	movw	r1, #581	@ 0x245
 8009baa:	e7e3      	b.n	8009b74 <__mdiff+0x28>
 8009bac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009bb0:	6926      	ldr	r6, [r4, #16]
 8009bb2:	60c5      	str	r5, [r0, #12]
 8009bb4:	f109 0310 	add.w	r3, r9, #16
 8009bb8:	f109 0514 	add.w	r5, r9, #20
 8009bbc:	f104 0e14 	add.w	lr, r4, #20
 8009bc0:	f100 0b14 	add.w	fp, r0, #20
 8009bc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009bc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009bcc:	9301      	str	r3, [sp, #4]
 8009bce:	46d9      	mov	r9, fp
 8009bd0:	f04f 0c00 	mov.w	ip, #0
 8009bd4:	9b01      	ldr	r3, [sp, #4]
 8009bd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009bda:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	fa1f f38a 	uxth.w	r3, sl
 8009be4:	4619      	mov	r1, r3
 8009be6:	b283      	uxth	r3, r0
 8009be8:	1acb      	subs	r3, r1, r3
 8009bea:	0c00      	lsrs	r0, r0, #16
 8009bec:	4463      	add	r3, ip
 8009bee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009bf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009bfc:	4576      	cmp	r6, lr
 8009bfe:	f849 3b04 	str.w	r3, [r9], #4
 8009c02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c06:	d8e5      	bhi.n	8009bd4 <__mdiff+0x88>
 8009c08:	1b33      	subs	r3, r6, r4
 8009c0a:	3b15      	subs	r3, #21
 8009c0c:	f023 0303 	bic.w	r3, r3, #3
 8009c10:	3415      	adds	r4, #21
 8009c12:	3304      	adds	r3, #4
 8009c14:	42a6      	cmp	r6, r4
 8009c16:	bf38      	it	cc
 8009c18:	2304      	movcc	r3, #4
 8009c1a:	441d      	add	r5, r3
 8009c1c:	445b      	add	r3, fp
 8009c1e:	461e      	mov	r6, r3
 8009c20:	462c      	mov	r4, r5
 8009c22:	4544      	cmp	r4, r8
 8009c24:	d30e      	bcc.n	8009c44 <__mdiff+0xf8>
 8009c26:	f108 0103 	add.w	r1, r8, #3
 8009c2a:	1b49      	subs	r1, r1, r5
 8009c2c:	f021 0103 	bic.w	r1, r1, #3
 8009c30:	3d03      	subs	r5, #3
 8009c32:	45a8      	cmp	r8, r5
 8009c34:	bf38      	it	cc
 8009c36:	2100      	movcc	r1, #0
 8009c38:	440b      	add	r3, r1
 8009c3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c3e:	b191      	cbz	r1, 8009c66 <__mdiff+0x11a>
 8009c40:	6117      	str	r7, [r2, #16]
 8009c42:	e79d      	b.n	8009b80 <__mdiff+0x34>
 8009c44:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c48:	46e6      	mov	lr, ip
 8009c4a:	0c08      	lsrs	r0, r1, #16
 8009c4c:	fa1c fc81 	uxtah	ip, ip, r1
 8009c50:	4471      	add	r1, lr
 8009c52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c56:	b289      	uxth	r1, r1
 8009c58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009c5c:	f846 1b04 	str.w	r1, [r6], #4
 8009c60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c64:	e7dd      	b.n	8009c22 <__mdiff+0xd6>
 8009c66:	3f01      	subs	r7, #1
 8009c68:	e7e7      	b.n	8009c3a <__mdiff+0xee>
 8009c6a:	bf00      	nop
 8009c6c:	0800a524 	.word	0x0800a524
 8009c70:	0800a546 	.word	0x0800a546

08009c74 <__d2b>:
 8009c74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c78:	460f      	mov	r7, r1
 8009c7a:	2101      	movs	r1, #1
 8009c7c:	ec59 8b10 	vmov	r8, r9, d0
 8009c80:	4616      	mov	r6, r2
 8009c82:	f7ff fcd5 	bl	8009630 <_Balloc>
 8009c86:	4604      	mov	r4, r0
 8009c88:	b930      	cbnz	r0, 8009c98 <__d2b+0x24>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	4b23      	ldr	r3, [pc, #140]	@ (8009d1c <__d2b+0xa8>)
 8009c8e:	4824      	ldr	r0, [pc, #144]	@ (8009d20 <__d2b+0xac>)
 8009c90:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c94:	f7fe fbb2 	bl	80083fc <__assert_func>
 8009c98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ca0:	b10d      	cbz	r5, 8009ca6 <__d2b+0x32>
 8009ca2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	f1b8 0300 	subs.w	r3, r8, #0
 8009cac:	d023      	beq.n	8009cf6 <__d2b+0x82>
 8009cae:	4668      	mov	r0, sp
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	f7ff fd84 	bl	80097be <__lo0bits>
 8009cb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009cba:	b1d0      	cbz	r0, 8009cf2 <__d2b+0x7e>
 8009cbc:	f1c0 0320 	rsb	r3, r0, #32
 8009cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	40c2      	lsrs	r2, r0
 8009cc8:	6163      	str	r3, [r4, #20]
 8009cca:	9201      	str	r2, [sp, #4]
 8009ccc:	9b01      	ldr	r3, [sp, #4]
 8009cce:	61a3      	str	r3, [r4, #24]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	bf0c      	ite	eq
 8009cd4:	2201      	moveq	r2, #1
 8009cd6:	2202      	movne	r2, #2
 8009cd8:	6122      	str	r2, [r4, #16]
 8009cda:	b1a5      	cbz	r5, 8009d06 <__d2b+0x92>
 8009cdc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009ce0:	4405      	add	r5, r0
 8009ce2:	603d      	str	r5, [r7, #0]
 8009ce4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009ce8:	6030      	str	r0, [r6, #0]
 8009cea:	4620      	mov	r0, r4
 8009cec:	b003      	add	sp, #12
 8009cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cf2:	6161      	str	r1, [r4, #20]
 8009cf4:	e7ea      	b.n	8009ccc <__d2b+0x58>
 8009cf6:	a801      	add	r0, sp, #4
 8009cf8:	f7ff fd61 	bl	80097be <__lo0bits>
 8009cfc:	9b01      	ldr	r3, [sp, #4]
 8009cfe:	6163      	str	r3, [r4, #20]
 8009d00:	3020      	adds	r0, #32
 8009d02:	2201      	movs	r2, #1
 8009d04:	e7e8      	b.n	8009cd8 <__d2b+0x64>
 8009d06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d0e:	6038      	str	r0, [r7, #0]
 8009d10:	6918      	ldr	r0, [r3, #16]
 8009d12:	f7ff fd35 	bl	8009780 <__hi0bits>
 8009d16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d1a:	e7e5      	b.n	8009ce8 <__d2b+0x74>
 8009d1c:	0800a524 	.word	0x0800a524
 8009d20:	0800a546 	.word	0x0800a546

08009d24 <__sread>:
 8009d24:	b510      	push	{r4, lr}
 8009d26:	460c      	mov	r4, r1
 8009d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d2c:	f000 f968 	bl	800a000 <_read_r>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	bfab      	itete	ge
 8009d34:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009d36:	89a3      	ldrhlt	r3, [r4, #12]
 8009d38:	181b      	addge	r3, r3, r0
 8009d3a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009d3e:	bfac      	ite	ge
 8009d40:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d42:	81a3      	strhlt	r3, [r4, #12]
 8009d44:	bd10      	pop	{r4, pc}

08009d46 <__swrite>:
 8009d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d4a:	461f      	mov	r7, r3
 8009d4c:	898b      	ldrh	r3, [r1, #12]
 8009d4e:	05db      	lsls	r3, r3, #23
 8009d50:	4605      	mov	r5, r0
 8009d52:	460c      	mov	r4, r1
 8009d54:	4616      	mov	r6, r2
 8009d56:	d505      	bpl.n	8009d64 <__swrite+0x1e>
 8009d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f000 f93c 	bl	8009fdc <_lseek_r>
 8009d64:	89a3      	ldrh	r3, [r4, #12]
 8009d66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d6a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d6e:	81a3      	strh	r3, [r4, #12]
 8009d70:	4632      	mov	r2, r6
 8009d72:	463b      	mov	r3, r7
 8009d74:	4628      	mov	r0, r5
 8009d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d7a:	f000 b963 	b.w	800a044 <_write_r>

08009d7e <__sseek>:
 8009d7e:	b510      	push	{r4, lr}
 8009d80:	460c      	mov	r4, r1
 8009d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d86:	f000 f929 	bl	8009fdc <_lseek_r>
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	89a3      	ldrh	r3, [r4, #12]
 8009d8e:	bf15      	itete	ne
 8009d90:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d92:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d96:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d9a:	81a3      	strheq	r3, [r4, #12]
 8009d9c:	bf18      	it	ne
 8009d9e:	81a3      	strhne	r3, [r4, #12]
 8009da0:	bd10      	pop	{r4, pc}

08009da2 <__sclose>:
 8009da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da6:	f000 b95f 	b.w	800a068 <_close_r>
	...

08009dac <fiprintf>:
 8009dac:	b40e      	push	{r1, r2, r3}
 8009dae:	b503      	push	{r0, r1, lr}
 8009db0:	4601      	mov	r1, r0
 8009db2:	ab03      	add	r3, sp, #12
 8009db4:	4805      	ldr	r0, [pc, #20]	@ (8009dcc <fiprintf+0x20>)
 8009db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dba:	6800      	ldr	r0, [r0, #0]
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	f7ff f9bd 	bl	800913c <_vfiprintf_r>
 8009dc2:	b002      	add	sp, #8
 8009dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dc8:	b003      	add	sp, #12
 8009dca:	4770      	bx	lr
 8009dcc:	200000dc 	.word	0x200000dc

08009dd0 <__swbuf_r>:
 8009dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dd2:	460e      	mov	r6, r1
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	4605      	mov	r5, r0
 8009dd8:	b118      	cbz	r0, 8009de2 <__swbuf_r+0x12>
 8009dda:	6a03      	ldr	r3, [r0, #32]
 8009ddc:	b90b      	cbnz	r3, 8009de2 <__swbuf_r+0x12>
 8009dde:	f7fe fa1f 	bl	8008220 <__sinit>
 8009de2:	69a3      	ldr	r3, [r4, #24]
 8009de4:	60a3      	str	r3, [r4, #8]
 8009de6:	89a3      	ldrh	r3, [r4, #12]
 8009de8:	071a      	lsls	r2, r3, #28
 8009dea:	d501      	bpl.n	8009df0 <__swbuf_r+0x20>
 8009dec:	6923      	ldr	r3, [r4, #16]
 8009dee:	b943      	cbnz	r3, 8009e02 <__swbuf_r+0x32>
 8009df0:	4621      	mov	r1, r4
 8009df2:	4628      	mov	r0, r5
 8009df4:	f000 f82a 	bl	8009e4c <__swsetup_r>
 8009df8:	b118      	cbz	r0, 8009e02 <__swbuf_r+0x32>
 8009dfa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009dfe:	4638      	mov	r0, r7
 8009e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e02:	6823      	ldr	r3, [r4, #0]
 8009e04:	6922      	ldr	r2, [r4, #16]
 8009e06:	1a98      	subs	r0, r3, r2
 8009e08:	6963      	ldr	r3, [r4, #20]
 8009e0a:	b2f6      	uxtb	r6, r6
 8009e0c:	4283      	cmp	r3, r0
 8009e0e:	4637      	mov	r7, r6
 8009e10:	dc05      	bgt.n	8009e1e <__swbuf_r+0x4e>
 8009e12:	4621      	mov	r1, r4
 8009e14:	4628      	mov	r0, r5
 8009e16:	f7ff fbd7 	bl	80095c8 <_fflush_r>
 8009e1a:	2800      	cmp	r0, #0
 8009e1c:	d1ed      	bne.n	8009dfa <__swbuf_r+0x2a>
 8009e1e:	68a3      	ldr	r3, [r4, #8]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	60a3      	str	r3, [r4, #8]
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	6022      	str	r2, [r4, #0]
 8009e2a:	701e      	strb	r6, [r3, #0]
 8009e2c:	6962      	ldr	r2, [r4, #20]
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d004      	beq.n	8009e3e <__swbuf_r+0x6e>
 8009e34:	89a3      	ldrh	r3, [r4, #12]
 8009e36:	07db      	lsls	r3, r3, #31
 8009e38:	d5e1      	bpl.n	8009dfe <__swbuf_r+0x2e>
 8009e3a:	2e0a      	cmp	r6, #10
 8009e3c:	d1df      	bne.n	8009dfe <__swbuf_r+0x2e>
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4628      	mov	r0, r5
 8009e42:	f7ff fbc1 	bl	80095c8 <_fflush_r>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d0d9      	beq.n	8009dfe <__swbuf_r+0x2e>
 8009e4a:	e7d6      	b.n	8009dfa <__swbuf_r+0x2a>

08009e4c <__swsetup_r>:
 8009e4c:	b538      	push	{r3, r4, r5, lr}
 8009e4e:	4b29      	ldr	r3, [pc, #164]	@ (8009ef4 <__swsetup_r+0xa8>)
 8009e50:	4605      	mov	r5, r0
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	460c      	mov	r4, r1
 8009e56:	b118      	cbz	r0, 8009e60 <__swsetup_r+0x14>
 8009e58:	6a03      	ldr	r3, [r0, #32]
 8009e5a:	b90b      	cbnz	r3, 8009e60 <__swsetup_r+0x14>
 8009e5c:	f7fe f9e0 	bl	8008220 <__sinit>
 8009e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e64:	0719      	lsls	r1, r3, #28
 8009e66:	d422      	bmi.n	8009eae <__swsetup_r+0x62>
 8009e68:	06da      	lsls	r2, r3, #27
 8009e6a:	d407      	bmi.n	8009e7c <__swsetup_r+0x30>
 8009e6c:	2209      	movs	r2, #9
 8009e6e:	602a      	str	r2, [r5, #0]
 8009e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e74:	81a3      	strh	r3, [r4, #12]
 8009e76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e7a:	e033      	b.n	8009ee4 <__swsetup_r+0x98>
 8009e7c:	0758      	lsls	r0, r3, #29
 8009e7e:	d512      	bpl.n	8009ea6 <__swsetup_r+0x5a>
 8009e80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e82:	b141      	cbz	r1, 8009e96 <__swsetup_r+0x4a>
 8009e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e88:	4299      	cmp	r1, r3
 8009e8a:	d002      	beq.n	8009e92 <__swsetup_r+0x46>
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f000 f929 	bl	800a0e4 <_free_r>
 8009e92:	2300      	movs	r3, #0
 8009e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e9c:	81a3      	strh	r3, [r4, #12]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	6063      	str	r3, [r4, #4]
 8009ea2:	6923      	ldr	r3, [r4, #16]
 8009ea4:	6023      	str	r3, [r4, #0]
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	f043 0308 	orr.w	r3, r3, #8
 8009eac:	81a3      	strh	r3, [r4, #12]
 8009eae:	6923      	ldr	r3, [r4, #16]
 8009eb0:	b94b      	cbnz	r3, 8009ec6 <__swsetup_r+0x7a>
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ebc:	d003      	beq.n	8009ec6 <__swsetup_r+0x7a>
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f000 f83f 	bl	8009f44 <__smakebuf_r>
 8009ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009eca:	f013 0201 	ands.w	r2, r3, #1
 8009ece:	d00a      	beq.n	8009ee6 <__swsetup_r+0x9a>
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	60a2      	str	r2, [r4, #8]
 8009ed4:	6962      	ldr	r2, [r4, #20]
 8009ed6:	4252      	negs	r2, r2
 8009ed8:	61a2      	str	r2, [r4, #24]
 8009eda:	6922      	ldr	r2, [r4, #16]
 8009edc:	b942      	cbnz	r2, 8009ef0 <__swsetup_r+0xa4>
 8009ede:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009ee2:	d1c5      	bne.n	8009e70 <__swsetup_r+0x24>
 8009ee4:	bd38      	pop	{r3, r4, r5, pc}
 8009ee6:	0799      	lsls	r1, r3, #30
 8009ee8:	bf58      	it	pl
 8009eea:	6962      	ldrpl	r2, [r4, #20]
 8009eec:	60a2      	str	r2, [r4, #8]
 8009eee:	e7f4      	b.n	8009eda <__swsetup_r+0x8e>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	e7f7      	b.n	8009ee4 <__swsetup_r+0x98>
 8009ef4:	200000dc 	.word	0x200000dc

08009ef8 <__swhatbuf_r>:
 8009ef8:	b570      	push	{r4, r5, r6, lr}
 8009efa:	460c      	mov	r4, r1
 8009efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f00:	2900      	cmp	r1, #0
 8009f02:	b096      	sub	sp, #88	@ 0x58
 8009f04:	4615      	mov	r5, r2
 8009f06:	461e      	mov	r6, r3
 8009f08:	da0d      	bge.n	8009f26 <__swhatbuf_r+0x2e>
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f10:	f04f 0100 	mov.w	r1, #0
 8009f14:	bf14      	ite	ne
 8009f16:	2340      	movne	r3, #64	@ 0x40
 8009f18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	6031      	str	r1, [r6, #0]
 8009f20:	602b      	str	r3, [r5, #0]
 8009f22:	b016      	add	sp, #88	@ 0x58
 8009f24:	bd70      	pop	{r4, r5, r6, pc}
 8009f26:	466a      	mov	r2, sp
 8009f28:	f000 f8ae 	bl	800a088 <_fstat_r>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	dbec      	blt.n	8009f0a <__swhatbuf_r+0x12>
 8009f30:	9901      	ldr	r1, [sp, #4]
 8009f32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f3a:	4259      	negs	r1, r3
 8009f3c:	4159      	adcs	r1, r3
 8009f3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f42:	e7eb      	b.n	8009f1c <__swhatbuf_r+0x24>

08009f44 <__smakebuf_r>:
 8009f44:	898b      	ldrh	r3, [r1, #12]
 8009f46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f48:	079d      	lsls	r5, r3, #30
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	460c      	mov	r4, r1
 8009f4e:	d507      	bpl.n	8009f60 <__smakebuf_r+0x1c>
 8009f50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	6123      	str	r3, [r4, #16]
 8009f58:	2301      	movs	r3, #1
 8009f5a:	6163      	str	r3, [r4, #20]
 8009f5c:	b003      	add	sp, #12
 8009f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f60:	ab01      	add	r3, sp, #4
 8009f62:	466a      	mov	r2, sp
 8009f64:	f7ff ffc8 	bl	8009ef8 <__swhatbuf_r>
 8009f68:	9f00      	ldr	r7, [sp, #0]
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	4630      	mov	r0, r6
 8009f70:	f7ff fa26 	bl	80093c0 <_malloc_r>
 8009f74:	b948      	cbnz	r0, 8009f8a <__smakebuf_r+0x46>
 8009f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f7a:	059a      	lsls	r2, r3, #22
 8009f7c:	d4ee      	bmi.n	8009f5c <__smakebuf_r+0x18>
 8009f7e:	f023 0303 	bic.w	r3, r3, #3
 8009f82:	f043 0302 	orr.w	r3, r3, #2
 8009f86:	81a3      	strh	r3, [r4, #12]
 8009f88:	e7e2      	b.n	8009f50 <__smakebuf_r+0xc>
 8009f8a:	89a3      	ldrh	r3, [r4, #12]
 8009f8c:	6020      	str	r0, [r4, #0]
 8009f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f92:	81a3      	strh	r3, [r4, #12]
 8009f94:	9b01      	ldr	r3, [sp, #4]
 8009f96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f9a:	b15b      	cbz	r3, 8009fb4 <__smakebuf_r+0x70>
 8009f9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	f000 f80b 	bl	8009fbc <_isatty_r>
 8009fa6:	b128      	cbz	r0, 8009fb4 <__smakebuf_r+0x70>
 8009fa8:	89a3      	ldrh	r3, [r4, #12]
 8009faa:	f023 0303 	bic.w	r3, r3, #3
 8009fae:	f043 0301 	orr.w	r3, r3, #1
 8009fb2:	81a3      	strh	r3, [r4, #12]
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	431d      	orrs	r5, r3
 8009fb8:	81a5      	strh	r5, [r4, #12]
 8009fba:	e7cf      	b.n	8009f5c <__smakebuf_r+0x18>

08009fbc <_isatty_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4d06      	ldr	r5, [pc, #24]	@ (8009fd8 <_isatty_r+0x1c>)
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	4608      	mov	r0, r1
 8009fc6:	602b      	str	r3, [r5, #0]
 8009fc8:	f7f8 f91f 	bl	800220a <_isatty>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d102      	bne.n	8009fd6 <_isatty_r+0x1a>
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	b103      	cbz	r3, 8009fd6 <_isatty_r+0x1a>
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	20000bc0 	.word	0x20000bc0

08009fdc <_lseek_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4d07      	ldr	r5, [pc, #28]	@ (8009ffc <_lseek_r+0x20>)
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	4608      	mov	r0, r1
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	602a      	str	r2, [r5, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	f7f8 f918 	bl	8002220 <_lseek>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d102      	bne.n	8009ffa <_lseek_r+0x1e>
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	b103      	cbz	r3, 8009ffa <_lseek_r+0x1e>
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	bd38      	pop	{r3, r4, r5, pc}
 8009ffc:	20000bc0 	.word	0x20000bc0

0800a000 <_read_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4d07      	ldr	r5, [pc, #28]	@ (800a020 <_read_r+0x20>)
 800a004:	4604      	mov	r4, r0
 800a006:	4608      	mov	r0, r1
 800a008:	4611      	mov	r1, r2
 800a00a:	2200      	movs	r2, #0
 800a00c:	602a      	str	r2, [r5, #0]
 800a00e:	461a      	mov	r2, r3
 800a010:	f7f8 f8c2 	bl	8002198 <_read>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d102      	bne.n	800a01e <_read_r+0x1e>
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	b103      	cbz	r3, 800a01e <_read_r+0x1e>
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	bd38      	pop	{r3, r4, r5, pc}
 800a020:	20000bc0 	.word	0x20000bc0

0800a024 <_sbrk_r>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	4d06      	ldr	r5, [pc, #24]	@ (800a040 <_sbrk_r+0x1c>)
 800a028:	2300      	movs	r3, #0
 800a02a:	4604      	mov	r4, r0
 800a02c:	4608      	mov	r0, r1
 800a02e:	602b      	str	r3, [r5, #0]
 800a030:	f7f8 f904 	bl	800223c <_sbrk>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_sbrk_r+0x1a>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_sbrk_r+0x1a>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	20000bc0 	.word	0x20000bc0

0800a044 <_write_r>:
 800a044:	b538      	push	{r3, r4, r5, lr}
 800a046:	4d07      	ldr	r5, [pc, #28]	@ (800a064 <_write_r+0x20>)
 800a048:	4604      	mov	r4, r0
 800a04a:	4608      	mov	r0, r1
 800a04c:	4611      	mov	r1, r2
 800a04e:	2200      	movs	r2, #0
 800a050:	602a      	str	r2, [r5, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	f7f6 ff3e 	bl	8000ed4 <_write>
 800a058:	1c43      	adds	r3, r0, #1
 800a05a:	d102      	bne.n	800a062 <_write_r+0x1e>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	b103      	cbz	r3, 800a062 <_write_r+0x1e>
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	bd38      	pop	{r3, r4, r5, pc}
 800a064:	20000bc0 	.word	0x20000bc0

0800a068 <_close_r>:
 800a068:	b538      	push	{r3, r4, r5, lr}
 800a06a:	4d06      	ldr	r5, [pc, #24]	@ (800a084 <_close_r+0x1c>)
 800a06c:	2300      	movs	r3, #0
 800a06e:	4604      	mov	r4, r0
 800a070:	4608      	mov	r0, r1
 800a072:	602b      	str	r3, [r5, #0]
 800a074:	f7f8 f8ad 	bl	80021d2 <_close>
 800a078:	1c43      	adds	r3, r0, #1
 800a07a:	d102      	bne.n	800a082 <_close_r+0x1a>
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	b103      	cbz	r3, 800a082 <_close_r+0x1a>
 800a080:	6023      	str	r3, [r4, #0]
 800a082:	bd38      	pop	{r3, r4, r5, pc}
 800a084:	20000bc0 	.word	0x20000bc0

0800a088 <_fstat_r>:
 800a088:	b538      	push	{r3, r4, r5, lr}
 800a08a:	4d07      	ldr	r5, [pc, #28]	@ (800a0a8 <_fstat_r+0x20>)
 800a08c:	2300      	movs	r3, #0
 800a08e:	4604      	mov	r4, r0
 800a090:	4608      	mov	r0, r1
 800a092:	4611      	mov	r1, r2
 800a094:	602b      	str	r3, [r5, #0]
 800a096:	f7f8 f8a8 	bl	80021ea <_fstat>
 800a09a:	1c43      	adds	r3, r0, #1
 800a09c:	d102      	bne.n	800a0a4 <_fstat_r+0x1c>
 800a09e:	682b      	ldr	r3, [r5, #0]
 800a0a0:	b103      	cbz	r3, 800a0a4 <_fstat_r+0x1c>
 800a0a2:	6023      	str	r3, [r4, #0]
 800a0a4:	bd38      	pop	{r3, r4, r5, pc}
 800a0a6:	bf00      	nop
 800a0a8:	20000bc0 	.word	0x20000bc0

0800a0ac <abort>:
 800a0ac:	b508      	push	{r3, lr}
 800a0ae:	2006      	movs	r0, #6
 800a0b0:	f000 f8aa 	bl	800a208 <raise>
 800a0b4:	2001      	movs	r0, #1
 800a0b6:	f7f8 f864 	bl	8002182 <_exit>

0800a0ba <_calloc_r>:
 800a0ba:	b570      	push	{r4, r5, r6, lr}
 800a0bc:	fba1 5402 	umull	r5, r4, r1, r2
 800a0c0:	b934      	cbnz	r4, 800a0d0 <_calloc_r+0x16>
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	f7ff f97c 	bl	80093c0 <_malloc_r>
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	b928      	cbnz	r0, 800a0d8 <_calloc_r+0x1e>
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	bd70      	pop	{r4, r5, r6, pc}
 800a0d0:	220c      	movs	r2, #12
 800a0d2:	6002      	str	r2, [r0, #0]
 800a0d4:	2600      	movs	r6, #0
 800a0d6:	e7f9      	b.n	800a0cc <_calloc_r+0x12>
 800a0d8:	462a      	mov	r2, r5
 800a0da:	4621      	mov	r1, r4
 800a0dc:	f7fe f946 	bl	800836c <memset>
 800a0e0:	e7f4      	b.n	800a0cc <_calloc_r+0x12>
	...

0800a0e4 <_free_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4605      	mov	r5, r0
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	d041      	beq.n	800a170 <_free_r+0x8c>
 800a0ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0f0:	1f0c      	subs	r4, r1, #4
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	bfb8      	it	lt
 800a0f6:	18e4      	addlt	r4, r4, r3
 800a0f8:	f7ff fa8e 	bl	8009618 <__malloc_lock>
 800a0fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a174 <_free_r+0x90>)
 800a0fe:	6813      	ldr	r3, [r2, #0]
 800a100:	b933      	cbnz	r3, 800a110 <_free_r+0x2c>
 800a102:	6063      	str	r3, [r4, #4]
 800a104:	6014      	str	r4, [r2, #0]
 800a106:	4628      	mov	r0, r5
 800a108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a10c:	f7ff ba8a 	b.w	8009624 <__malloc_unlock>
 800a110:	42a3      	cmp	r3, r4
 800a112:	d908      	bls.n	800a126 <_free_r+0x42>
 800a114:	6820      	ldr	r0, [r4, #0]
 800a116:	1821      	adds	r1, r4, r0
 800a118:	428b      	cmp	r3, r1
 800a11a:	bf01      	itttt	eq
 800a11c:	6819      	ldreq	r1, [r3, #0]
 800a11e:	685b      	ldreq	r3, [r3, #4]
 800a120:	1809      	addeq	r1, r1, r0
 800a122:	6021      	streq	r1, [r4, #0]
 800a124:	e7ed      	b.n	800a102 <_free_r+0x1e>
 800a126:	461a      	mov	r2, r3
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	b10b      	cbz	r3, 800a130 <_free_r+0x4c>
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	d9fa      	bls.n	800a126 <_free_r+0x42>
 800a130:	6811      	ldr	r1, [r2, #0]
 800a132:	1850      	adds	r0, r2, r1
 800a134:	42a0      	cmp	r0, r4
 800a136:	d10b      	bne.n	800a150 <_free_r+0x6c>
 800a138:	6820      	ldr	r0, [r4, #0]
 800a13a:	4401      	add	r1, r0
 800a13c:	1850      	adds	r0, r2, r1
 800a13e:	4283      	cmp	r3, r0
 800a140:	6011      	str	r1, [r2, #0]
 800a142:	d1e0      	bne.n	800a106 <_free_r+0x22>
 800a144:	6818      	ldr	r0, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	6053      	str	r3, [r2, #4]
 800a14a:	4408      	add	r0, r1
 800a14c:	6010      	str	r0, [r2, #0]
 800a14e:	e7da      	b.n	800a106 <_free_r+0x22>
 800a150:	d902      	bls.n	800a158 <_free_r+0x74>
 800a152:	230c      	movs	r3, #12
 800a154:	602b      	str	r3, [r5, #0]
 800a156:	e7d6      	b.n	800a106 <_free_r+0x22>
 800a158:	6820      	ldr	r0, [r4, #0]
 800a15a:	1821      	adds	r1, r4, r0
 800a15c:	428b      	cmp	r3, r1
 800a15e:	bf04      	itt	eq
 800a160:	6819      	ldreq	r1, [r3, #0]
 800a162:	685b      	ldreq	r3, [r3, #4]
 800a164:	6063      	str	r3, [r4, #4]
 800a166:	bf04      	itt	eq
 800a168:	1809      	addeq	r1, r1, r0
 800a16a:	6021      	streq	r1, [r4, #0]
 800a16c:	6054      	str	r4, [r2, #4]
 800a16e:	e7ca      	b.n	800a106 <_free_r+0x22>
 800a170:	bd38      	pop	{r3, r4, r5, pc}
 800a172:	bf00      	nop
 800a174:	20000bbc 	.word	0x20000bbc

0800a178 <__ascii_mbtowc>:
 800a178:	b082      	sub	sp, #8
 800a17a:	b901      	cbnz	r1, 800a17e <__ascii_mbtowc+0x6>
 800a17c:	a901      	add	r1, sp, #4
 800a17e:	b142      	cbz	r2, 800a192 <__ascii_mbtowc+0x1a>
 800a180:	b14b      	cbz	r3, 800a196 <__ascii_mbtowc+0x1e>
 800a182:	7813      	ldrb	r3, [r2, #0]
 800a184:	600b      	str	r3, [r1, #0]
 800a186:	7812      	ldrb	r2, [r2, #0]
 800a188:	1e10      	subs	r0, r2, #0
 800a18a:	bf18      	it	ne
 800a18c:	2001      	movne	r0, #1
 800a18e:	b002      	add	sp, #8
 800a190:	4770      	bx	lr
 800a192:	4610      	mov	r0, r2
 800a194:	e7fb      	b.n	800a18e <__ascii_mbtowc+0x16>
 800a196:	f06f 0001 	mvn.w	r0, #1
 800a19a:	e7f8      	b.n	800a18e <__ascii_mbtowc+0x16>

0800a19c <__ascii_wctomb>:
 800a19c:	4603      	mov	r3, r0
 800a19e:	4608      	mov	r0, r1
 800a1a0:	b141      	cbz	r1, 800a1b4 <__ascii_wctomb+0x18>
 800a1a2:	2aff      	cmp	r2, #255	@ 0xff
 800a1a4:	d904      	bls.n	800a1b0 <__ascii_wctomb+0x14>
 800a1a6:	228a      	movs	r2, #138	@ 0x8a
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1ae:	4770      	bx	lr
 800a1b0:	700a      	strb	r2, [r1, #0]
 800a1b2:	2001      	movs	r0, #1
 800a1b4:	4770      	bx	lr

0800a1b6 <_raise_r>:
 800a1b6:	291f      	cmp	r1, #31
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	460c      	mov	r4, r1
 800a1be:	d904      	bls.n	800a1ca <_raise_r+0x14>
 800a1c0:	2316      	movs	r3, #22
 800a1c2:	6003      	str	r3, [r0, #0]
 800a1c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1c8:	bd38      	pop	{r3, r4, r5, pc}
 800a1ca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a1cc:	b112      	cbz	r2, 800a1d4 <_raise_r+0x1e>
 800a1ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1d2:	b94b      	cbnz	r3, 800a1e8 <_raise_r+0x32>
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	f000 f831 	bl	800a23c <_getpid_r>
 800a1da:	4622      	mov	r2, r4
 800a1dc:	4601      	mov	r1, r0
 800a1de:	4628      	mov	r0, r5
 800a1e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1e4:	f000 b818 	b.w	800a218 <_kill_r>
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d00a      	beq.n	800a202 <_raise_r+0x4c>
 800a1ec:	1c59      	adds	r1, r3, #1
 800a1ee:	d103      	bne.n	800a1f8 <_raise_r+0x42>
 800a1f0:	2316      	movs	r3, #22
 800a1f2:	6003      	str	r3, [r0, #0]
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	e7e7      	b.n	800a1c8 <_raise_r+0x12>
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a1fe:	4620      	mov	r0, r4
 800a200:	4798      	blx	r3
 800a202:	2000      	movs	r0, #0
 800a204:	e7e0      	b.n	800a1c8 <_raise_r+0x12>
	...

0800a208 <raise>:
 800a208:	4b02      	ldr	r3, [pc, #8]	@ (800a214 <raise+0xc>)
 800a20a:	4601      	mov	r1, r0
 800a20c:	6818      	ldr	r0, [r3, #0]
 800a20e:	f7ff bfd2 	b.w	800a1b6 <_raise_r>
 800a212:	bf00      	nop
 800a214:	200000dc 	.word	0x200000dc

0800a218 <_kill_r>:
 800a218:	b538      	push	{r3, r4, r5, lr}
 800a21a:	4d07      	ldr	r5, [pc, #28]	@ (800a238 <_kill_r+0x20>)
 800a21c:	2300      	movs	r3, #0
 800a21e:	4604      	mov	r4, r0
 800a220:	4608      	mov	r0, r1
 800a222:	4611      	mov	r1, r2
 800a224:	602b      	str	r3, [r5, #0]
 800a226:	f7f7 ff9c 	bl	8002162 <_kill>
 800a22a:	1c43      	adds	r3, r0, #1
 800a22c:	d102      	bne.n	800a234 <_kill_r+0x1c>
 800a22e:	682b      	ldr	r3, [r5, #0]
 800a230:	b103      	cbz	r3, 800a234 <_kill_r+0x1c>
 800a232:	6023      	str	r3, [r4, #0]
 800a234:	bd38      	pop	{r3, r4, r5, pc}
 800a236:	bf00      	nop
 800a238:	20000bc0 	.word	0x20000bc0

0800a23c <_getpid_r>:
 800a23c:	f7f7 bf89 	b.w	8002152 <_getpid>

0800a240 <_init>:
 800a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a242:	bf00      	nop
 800a244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a246:	bc08      	pop	{r3}
 800a248:	469e      	mov	lr, r3
 800a24a:	4770      	bx	lr

0800a24c <_fini>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	bf00      	nop
 800a250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a252:	bc08      	pop	{r3}
 800a254:	469e      	mov	lr, r3
 800a256:	4770      	bx	lr
